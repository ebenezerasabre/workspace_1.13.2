
embedded_program_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000714  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d4  080007d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d4  080007d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080007d4  080007d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d4  080007d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000004  080007e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080007e0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000589  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003a4  00000000  00000000  000205f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000209a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c0  00000000  00000000  00020ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001424  00000000  00000000  00020b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ed2  00000000  00000000  00021fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004a50  00000000  00000000  00022e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002bc  00000000  00000000  000278c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00027b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007bc 	.word	0x080007bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080007bc 	.word	0x080007bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <adc_init>:
#define ADC_IN0_PA0     (1U<<0)
#define ADSTART         (1U<<2)
#define EOC             (1U<<2)


void adc_init(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

    // enable clock access to adc module
    RCC_APBENR2 |=  RCC_ADCEN;
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <adc_init+0x48>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <adc_init+0x48>)
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0349      	lsls	r1, r1, #13
 800022e:	430a      	orrs	r2, r1
 8000230:	601a      	str	r2, [r3, #0]

    // set GPIOA0 pin to analog in gpio_init go to gpio.c

    // set data resolutionj, setting 12 bits
    ADC_CFGR1 &= ~(1U<<3);
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <adc_init+0x4c>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <adc_init+0x4c>)
 8000238:	2108      	movs	r1, #8
 800023a:	438a      	bics	r2, r1
 800023c:	601a      	str	r2, [r3, #0]
    ADC_CFGR1 |= (1U<<4);
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <adc_init+0x4c>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <adc_init+0x4c>)
 8000244:	2110      	movs	r1, #16
 8000246:	430a      	orrs	r2, r1
 8000248:	601a      	str	r2, [r3, #0]

    // select channel, PA0,adc_in0
    ADC_CHSELR |= ADC_IN0_PA0;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <adc_init+0x50>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <adc_init+0x50>)
 8000250:	2101      	movs	r1, #1
 8000252:	430a      	orrs	r2, r1
 8000254:	601a      	str	r2, [r3, #0]

    // enable adc module
    ADC_CR |= ADEN;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <adc_init+0x54>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <adc_init+0x54>)
 800025c:	2101      	movs	r1, #1
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40021040 	.word	0x40021040
 800026c:	4001240c 	.word	0x4001240c
 8000270:	40012428 	.word	0x40012428
 8000274:	40012408 	.word	0x40012408

08000278 <adc_conversion>:

void adc_conversion(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
    // set continuous conversion mode
    ADC_CFGR1 |= (1U<<13);
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <adc_conversion+0x24>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <adc_conversion+0x24>)
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0189      	lsls	r1, r1, #6
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]

    // start adc conversion
    ADC_CR |= ADSTART;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <adc_conversion+0x28>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <adc_conversion+0x28>)
 8000290:	2104      	movs	r1, #4
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	4001240c 	.word	0x4001240c
 80002a0:	40012408 	.word	0x40012408

080002a4 <adc_read>:

int adc_read(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    // check if conversion is complete
    while(!(ADC_ISR & EOC))
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <adc_read+0x1c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2204      	movs	r2, #4
 80002b0:	4013      	ands	r3, r2
 80002b2:	d0fa      	beq.n	80002aa <adc_read+0x6>
        ;

    return ADC_DR; // return data_register
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <adc_read+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40012400 	.word	0x40012400
 80002c4:	40012440 	.word	0x40012440

080002c8 <adc_smp_sgnl>:

// I think I should pass the gpio analog pin to this
// void adc_smp_sgnl(int * bffr){
void adc_smp_sgnl(char * buff, int * prgrm_state){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
    int uart_byte = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
    char byte_one;
    if(*prgrm_state == 49){
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b31      	cmp	r3, #49	; 0x31
 80002dc:	d11f      	bne.n	800031e <adc_smp_sgnl+0x56>

        // get starting address of buffer
        char * ptr = buff; 
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60fb      	str	r3, [r7, #12]
         * 0x7F 127 0111 1111
         * 0x3F 63  0011 1111
         * 0x40 64  0100 0000
        */
       // each loop fills two indexes of array so loopSize = arraySize/2
        for(int x=0; x<64; x++){
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e013      	b.n	8000310 <adc_smp_sgnl+0x48>
            uart_byte = adc_read();
 80002e8:	f7ff ffdc 	bl	80002a4 <adc_read>
 80002ec:	0003      	movs	r3, r0
 80002ee:	613b      	str	r3, [r7, #16]
            byte_one = uart_byte & 0x7F;        // first 7bits bit0 - bit6
 80002f0:	693b      	ldr	r3, [r7, #16]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	200b      	movs	r0, #11
 80002f6:	183b      	adds	r3, r7, r0
 80002f8:	217f      	movs	r1, #127	; 0x7f
 80002fa:	400a      	ands	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
            // byte_two = ((uart_byte >> 7) & 0x3F) | 0x40; // 2nd 6 bits bit7 - bit12

            // *buff++ = byte_two;
            *buff++ = byte_one;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	183a      	adds	r2, r7, r0
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	701a      	strb	r2, [r3, #0]
        for(int x=0; x<64; x++){
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	3301      	adds	r3, #1
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	2b3f      	cmp	r3, #63	; 0x3f
 8000314:	dde8      	ble.n	80002e8 <adc_smp_sgnl+0x20>
            

        }

        // transmit adc signals after sampling
        adc_trnsmt_sgnl(ptr);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	0018      	movs	r0, r3
 800031a:	f000 f804 	bl	8000326 <adc_trnsmt_sgnl>
    }
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b006      	add	sp, #24
 8000324:	bd80      	pop	{r7, pc}

08000326 <adc_trnsmt_sgnl>:


void adc_trnsmt_sgnl(char * buff){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
    for(int x=0; x<64; x++){
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e009      	b.n	8000348 <adc_trnsmt_sgnl+0x22>
        usart_write(*buff++);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	607a      	str	r2, [r7, #4]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f9c1 	bl	80006c4 <usart_write>
    for(int x=0; x<64; x++){
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3301      	adds	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2b3f      	cmp	r3, #63	; 0x3f
 800034c:	ddf2      	ble.n	8000334 <adc_trnsmt_sgnl+0xe>
    }
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b004      	add	sp, #16
 8000356:	bd80      	pop	{r7, pc}

08000358 <gpio_init>:
#define INPUT_BUTTON        GPIOA10
#define USER_BUTTON         GPIOC13



void gpio_init(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
        * 
        * Set pin configuration input/output
    */

    // enable clock access got GPIOA
    RCC_IOPENR |= RCC_GPIOAEN;
 800035c:	4b60      	ldr	r3, [pc, #384]	; (80004e0 <gpio_init+0x188>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b5f      	ldr	r3, [pc, #380]	; (80004e0 <gpio_init+0x188>)
 8000362:	2101      	movs	r1, #1
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]

    // enable clock access to GPIOB
    RCC_IOPENR |= RCC_GPIOBEN;
 8000368:	4b5d      	ldr	r3, [pc, #372]	; (80004e0 <gpio_init+0x188>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b5c      	ldr	r3, [pc, #368]	; (80004e0 <gpio_init+0x188>)
 800036e:	2102      	movs	r1, #2
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]

    // enable clock access to GPIOC
    RCC_IOPENR |= RCC_GPIOCEN;
 8000374:	4b5a      	ldr	r3, [pc, #360]	; (80004e0 <gpio_init+0x188>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b59      	ldr	r3, [pc, #356]	; (80004e0 <gpio_init+0x188>)
 800037a:	2104      	movs	r1, #4
 800037c:	430a      	orrs	r2, r1
 800037e:	601a      	str	r2, [r3, #0]


    /*Set pin modes*/

    // set GPIOA8 as output pin, D7 (RED LED) mode8
    GPIOA_MODER |= (1U<<16);
 8000380:	23a0      	movs	r3, #160	; 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	0249      	lsls	r1, r1, #9
 800038e:	430a      	orrs	r2, r1
 8000390:	601a      	str	r2, [r3, #0]
    GPIOA_MODER &= ~(1U<<17);
 8000392:	23a0      	movs	r3, #160	; 0xa0
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	23a0      	movs	r3, #160	; 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	4951      	ldr	r1, [pc, #324]	; (80004e4 <gpio_init+0x18c>)
 800039e:	400a      	ands	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]

    // set GPIOA10 as input pin, D2 (button) mode10
    GPIOA_MODER &= ~(1U<<20);
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	494e      	ldr	r1, [pc, #312]	; (80004e8 <gpio_init+0x190>)
 80003ae:	400a      	ands	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
    GPIOA_MODER &= ~(1U<<21);
 80003b2:	23a0      	movs	r3, #160	; 0xa0
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	23a0      	movs	r3, #160	; 0xa0
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	494b      	ldr	r1, [pc, #300]	; (80004ec <gpio_init+0x194>)
 80003be:	400a      	ands	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]

    // set GPIOB5 as output pin, D4 (BLUE LED)
    GPIOB_MODER |= (1U<<10);
 80003c2:	4b4b      	ldr	r3, [pc, #300]	; (80004f0 <gpio_init+0x198>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b4a      	ldr	r3, [pc, #296]	; (80004f0 <gpio_init+0x198>)
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	00c9      	lsls	r1, r1, #3
 80003cc:	430a      	orrs	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
    GPIOB_MODER &= ~(1U<<11);
 80003d0:	4b47      	ldr	r3, [pc, #284]	; (80004f0 <gpio_init+0x198>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b46      	ldr	r3, [pc, #280]	; (80004f0 <gpio_init+0x198>)
 80003d6:	4947      	ldr	r1, [pc, #284]	; (80004f4 <gpio_init+0x19c>)
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]

    // set GPIOA0 as analog pin, mode0
    GPIOA_MODER |= (1U<<0);
 80003dc:	23a0      	movs	r3, #160	; 0xa0
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	23a0      	movs	r3, #160	; 0xa0
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	2101      	movs	r1, #1
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
    GPIOA_MODER |= (1U<<1);
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2102      	movs	r1, #2
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]

    // search user button in user manual
    // configure user_button GPIOC13 as input pin
    GPIOC_MODER &= ~(1U<<26);
 80003fc:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <gpio_init+0x1a0>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b3d      	ldr	r3, [pc, #244]	; (80004f8 <gpio_init+0x1a0>)
 8000402:	493e      	ldr	r1, [pc, #248]	; (80004fc <gpio_init+0x1a4>)
 8000404:	400a      	ands	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
    GPIOC_MODER &= ~(1U<<27);
 8000408:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <gpio_init+0x1a0>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <gpio_init+0x1a0>)
 800040e:	493c      	ldr	r1, [pc, #240]	; (8000500 <gpio_init+0x1a8>)
 8000410:	400a      	ands	r2, r1
 8000412:	601a      	str	r2, [r3, #0]


    // set user led as output GPIOA5
    GPIOA_MODER |= (1U<<10);
 8000414:	23a0      	movs	r3, #160	; 0xa0
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	23a0      	movs	r3, #160	; 0xa0
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	00c9      	lsls	r1, r1, #3
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
    GPIOA_MODER &= ~(1U<<11);
 8000426:	23a0      	movs	r3, #160	; 0xa0
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	4930      	ldr	r1, [pc, #192]	; (80004f4 <gpio_init+0x19c>)
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]


    /**set PA2 and PA3 to alternate functions, for uart**/
   
    // PA2, mode2
    GPIOA_MODER &= ~(1U<<4);
 8000436:	23a0      	movs	r3, #160	; 0xa0
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	23a0      	movs	r3, #160	; 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	2110      	movs	r1, #16
 8000442:	438a      	bics	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
    GPIOA_MODER |= (1U<<5);
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2120      	movs	r1, #32
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]

    // PA3, mode3
    GPIOA_MODER &= ~(1U<<6);
 8000456:	23a0      	movs	r3, #160	; 0xa0
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	23a0      	movs	r3, #160	; 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	438a      	bics	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
    GPIOA_MODER |= (1U<<7);
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	23a0      	movs	r3, #160	; 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]

    // set alternate functions of pins uartx_pa2
    GPIOA_AFRL |= (1U<<8);
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <gpio_init+0x1ac>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <gpio_init+0x1ac>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0049      	lsls	r1, r1, #1
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<9);
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <gpio_init+0x1ac>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <gpio_init+0x1ac>)
 800048a:	491f      	ldr	r1, [pc, #124]	; (8000508 <gpio_init+0x1b0>)
 800048c:	400a      	ands	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<10);
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <gpio_init+0x1ac>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <gpio_init+0x1ac>)
 8000496:	491d      	ldr	r1, [pc, #116]	; (800050c <gpio_init+0x1b4>)
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<11);
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <gpio_init+0x1ac>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <gpio_init+0x1ac>)
 80004a2:	4914      	ldr	r1, [pc, #80]	; (80004f4 <gpio_init+0x19c>)
 80004a4:	400a      	ands	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]
 
   // set alternate functions of pins uarx_pa3
    GPIOA_AFRL |= (1U<<12);
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <gpio_init+0x1ac>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <gpio_init+0x1ac>)
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0149      	lsls	r1, r1, #5
 80004b2:	430a      	orrs	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<13);
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <gpio_init+0x1ac>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <gpio_init+0x1ac>)
 80004bc:	4914      	ldr	r1, [pc, #80]	; (8000510 <gpio_init+0x1b8>)
 80004be:	400a      	ands	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<14);
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <gpio_init+0x1ac>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <gpio_init+0x1ac>)
 80004c8:	4912      	ldr	r1, [pc, #72]	; (8000514 <gpio_init+0x1bc>)
 80004ca:	400a      	ands	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
    GPIOA_AFRL &= ~(1U<<15);
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <gpio_init+0x1ac>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <gpio_init+0x1ac>)
 80004d4:	4910      	ldr	r1, [pc, #64]	; (8000518 <gpio_init+0x1c0>)
 80004d6:	400a      	ands	r2, r1
 80004d8:	601a      	str	r2, [r3, #0]

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021034 	.word	0x40021034
 80004e4:	fffdffff 	.word	0xfffdffff
 80004e8:	ffefffff 	.word	0xffefffff
 80004ec:	ffdfffff 	.word	0xffdfffff
 80004f0:	50000400 	.word	0x50000400
 80004f4:	fffff7ff 	.word	0xfffff7ff
 80004f8:	50000800 	.word	0x50000800
 80004fc:	fbffffff 	.word	0xfbffffff
 8000500:	f7ffffff 	.word	0xf7ffffff
 8000504:	50000020 	.word	0x50000020
 8000508:	fffffdff 	.word	0xfffffdff
 800050c:	fffffbff 	.word	0xfffffbff
 8000510:	ffffdfff 	.word	0xffffdfff
 8000514:	ffffbfff 	.word	0xffffbfff
 8000518:	ffff7fff 	.word	0xffff7fff

0800051c <red_led_on>:


void red_led_on(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    GPIOA_ODR |= GPIOA8;
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <red_led_on+0x18>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <red_led_on+0x18>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0049      	lsls	r1, r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	50000014 	.word	0x50000014

08000538 <red_led_off>:

void red_led_off(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    GPIOA_ODR &= ~GPIOA8;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <red_led_off+0x18>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <red_led_off+0x18>)
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <red_led_off+0x1c>)
 8000544:	400a      	ands	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	50000014 	.word	0x50000014
 8000554:	fffffeff 	.word	0xfffffeff

08000558 <blue_led_on>:

void blue_led_on(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    GPIOB_ODR |= GPIOB5;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <blue_led_on+0x18>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <blue_led_on+0x18>)
 8000562:	2120      	movs	r1, #32
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	50000414 	.word	0x50000414

08000574 <blue_led_off>:

void blue_led_off(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    GPIOB_ODR &= ~GPIOB5;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <blue_led_off+0x18>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <blue_led_off+0x18>)
 800057e:	2120      	movs	r1, #32
 8000580:	438a      	bics	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	50000414 	.word	0x50000414

08000590 <prgrm_state_set>:
        */
        for(int x=0; x<100000; x++);
}


void prgrm_state_set(int * prgrm_state){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    //if user button is pressed
    if(!(GPIOC_IDR & USER_BUTTON)){
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <prgrm_state_set+0x64>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	019b      	lsls	r3, r3, #6
 80005a0:	4013      	ands	r3, r2
 80005a2:	d122      	bne.n	80005ea <prgrm_state_set+0x5a>
        if(*prgrm_state == OFF){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b30      	cmp	r3, #48	; 0x30
 80005aa:	d10d      	bne.n	80005c8 <prgrm_state_set+0x38>
            *prgrm_state = ON;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2231      	movs	r2, #49	; 0x31
 80005b0:	601a      	str	r2, [r3, #0]
            for(int x=0; x<150000; x++); // delay
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e002      	b.n	80005be <prgrm_state_set+0x2e>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <prgrm_state_set+0x68>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	ddf8      	ble.n	80005b8 <prgrm_state_set+0x28>
        } else if(*prgrm_state == ON){
            *prgrm_state = OFF;
            for(int x=0; x<150000; x++); // delay
        }
	} 
}
 80005c6:	e010      	b.n	80005ea <prgrm_state_set+0x5a>
        } else if(*prgrm_state == ON){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b31      	cmp	r3, #49	; 0x31
 80005ce:	d10c      	bne.n	80005ea <prgrm_state_set+0x5a>
            *prgrm_state = OFF;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	601a      	str	r2, [r3, #0]
            for(int x=0; x<150000; x++); // delay
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	e002      	b.n	80005e2 <prgrm_state_set+0x52>
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3301      	adds	r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <prgrm_state_set+0x68>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	ddf8      	ble.n	80005dc <prgrm_state_set+0x4c>
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b004      	add	sp, #16
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	50000810 	.word	0x50000810
 80005f8:	000249ef 	.word	0x000249ef

080005fc <prgrm_state_dsply>:


void prgrm_state_dsply(int * prgrm_state){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if(*prgrm_state == OFF){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b30      	cmp	r3, #48	; 0x30
 800060a:	d104      	bne.n	8000616 <prgrm_state_dsply+0x1a>
        red_led_on();
 800060c:	f7ff ff86 	bl	800051c <red_led_on>
        blue_led_off();
 8000610:	f7ff ffb0 	bl	8000574 <blue_led_off>
    } else if(*prgrm_state == ON){  // measuring adc
        red_led_off();
        blue_led_on();
    }
}
 8000614:	e007      	b.n	8000626 <prgrm_state_dsply+0x2a>
    } else if(*prgrm_state == ON){  // measuring adc
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b31      	cmp	r3, #49	; 0x31
 800061c:	d103      	bne.n	8000626 <prgrm_state_dsply+0x2a>
        red_led_off();
 800061e:	f7ff ff8b 	bl	8000538 <red_led_off>
        blue_led_on();
 8000622:	f7ff ff99 	bl	8000558 <blue_led_on>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <main>:
int prgrm_state = OFF;
char adc_buff[64];
int adc_value;

int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

    /**Initialize Peripherals**/
    gpio_init();
 8000634:	f7ff fe90 	bl	8000358 <gpio_init>
    adc_init();
 8000638:	f7ff fdf2 	bl	8000220 <adc_init>
    adc_conversion();
 800063c:	f7ff fe1c 	bl	8000278 <adc_conversion>
    usart_init();
 8000640:	f000 f814 	bl	800066c <usart_init>


    /* Loop forever */
	for(;;){
        prgrm_state_set(&prgrm_state);
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <main+0x34>)
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff ffa2 	bl	8000590 <prgrm_state_set>
        prgrm_state_dsply(&prgrm_state);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <main+0x34>)
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ffd4 	bl	80005fc <prgrm_state_dsply>
        adc_smp_sgnl(adc_buff, &prgrm_state);
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <main+0x34>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <main+0x38>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff fe34 	bl	80002c8 <adc_smp_sgnl>
        prgrm_state_set(&prgrm_state);
 8000660:	e7f0      	b.n	8000644 <main+0x14>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000000 	.word	0x20000000
 8000668:	20000020 	.word	0x20000020

0800066c <usart_init>:
#define SYS_FREQ		16000000
#define APB1_CLK		SYS_FREQ
#define UART_BAUDRATE 	115200


void usart_init(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

    // enable clock access to usart2
    RCC_APBENR1 |= USART2EN;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <usart_init+0x4c>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <usart_init+0x4c>)
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	0289      	lsls	r1, r1, #10
 800067a:	430a      	orrs	r2, r1
 800067c:	601a      	str	r2, [r3, #0]
    // set usart pins alternate functions
    // using usart2, set alternate function (search alternate function mapping in datasheet )
    // usart2_tx AF1  PA2, usart2_rx AF1 PA3

    // configure baudrate
    uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 800067e:	23e1      	movs	r3, #225	; 0xe1
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <usart_init+0x50>)
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f000 f834 	bl	80006f4 <uart_set_baudrate>

    // enable usart tx and rx transfer functions
    USART2_CR1 |= TE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <usart_init+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <usart_init+0x54>)
 8000692:	2108      	movs	r1, #8
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
    USART2_CR1 |= RE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <usart_init+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <usart_init+0x54>)
 800069e:	2104      	movs	r1, #4
 80006a0:	430a      	orrs	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]

    // enable usart module
    USART2_CR1 |= UE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <usart_init+0x54>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <usart_init+0x54>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	4002103c 	.word	0x4002103c
 80006bc:	00f42400 	.word	0x00f42400
 80006c0:	40004400 	.word	0x40004400

080006c4 <usart_write>:

void usart_write(int ch){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    // make sure transmit data register is not empty
    while(!(USART2_ISR & TXE))
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <usart_write+0x28>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	4013      	ands	r3, r2
 80006d6:	d0fa      	beq.n	80006ce <usart_write+0xa>
        ;
    // write charater to data register
    USART2_TDR = (ch & 0xFF); 
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <usart_write+0x2c>)
 80006dc:	21ff      	movs	r1, #255	; 0xff
 80006de:	400a      	ands	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	4000441c 	.word	0x4000441c
 80006f0:	40004428 	.word	0x40004428

080006f4 <uart_set_baudrate>:
        ;
    // return data read
    return USART2_RDR; 
}

void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
    USART2_BRR = ((periph_clk + (baudrate/2U)) / baudrate);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	085a      	lsrs	r2, r3, #1
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	4c05      	ldr	r4, [pc, #20]	; (800071c <uart_set_baudrate+0x28>)
 8000708:	6839      	ldr	r1, [r7, #0]
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff fcfc 	bl	8000108 <__udivsi3>
 8000710:	0003      	movs	r3, r0
 8000712:	6023      	str	r3, [r4, #0]
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b003      	add	sp, #12
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	4000440c 	.word	0x4000440c

08000720 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	e000      	b.n	8000728 <Reset_Handler+0x8>
 8000726:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	; (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074e:	f000 f811 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff ff6d 	bl	8000630 <main>

08000756 <LoopForever>:

LoopForever:
  b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000764:	080007dc 	.word	0x080007dc
  ldr r2, =_sbss
 8000768:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800076c:	20000060 	.word	0x20000060

08000770 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC_COMP_IRQHandler>
	...

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	2600      	movs	r6, #0
 8000778:	4c0c      	ldr	r4, [pc, #48]	; (80007ac <__libc_init_array+0x38>)
 800077a:	4d0d      	ldr	r5, [pc, #52]	; (80007b0 <__libc_init_array+0x3c>)
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	2600      	movs	r6, #0
 8000786:	f000 f819 	bl	80007bc <_init>
 800078a:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <__libc_init_array+0x40>)
 800078c:	4d0a      	ldr	r5, [pc, #40]	; (80007b8 <__libc_init_array+0x44>)
 800078e:	1b64      	subs	r4, r4, r5
 8000790:	10a4      	asrs	r4, r4, #2
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	00b3      	lsls	r3, r6, #2
 800079a:	58eb      	ldr	r3, [r5, r3]
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	00b3      	lsls	r3, r6, #2
 80007a4:	58eb      	ldr	r3, [r5, r3]
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080007d4 	.word	0x080007d4
 80007b0:	080007d4 	.word	0x080007d4
 80007b4:	080007d8 	.word	0x080007d8
 80007b8:	080007d4 	.word	0x080007d4

080007bc <_init>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr

080007c8 <_fini>:
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	469e      	mov	lr, r3
 80007d2:	4770      	bx	lr
