
FREE_RTOS_SEMAPHORES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800670c  0800670c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006714  08006714  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800671c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20000060  0800677c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  0800677c  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c717  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d1  00000000  00000000  0003c7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  000400b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001332  00000000  00000000  00041950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003943  00000000  00000000  00042c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3af  00000000  00000000  000465c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8c0  00000000  00000000  00060974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf8  00000000  00000000  00130234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00135f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065a4 	.word	0x080065a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080065a4 	.word	0x080065a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fb84 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f834 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f92e 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8de 	bl	80007f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000634:	f000 f876 	bl	8000724 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // create semaphore
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000638:	2203      	movs	r2, #3
 800063a:	2100      	movs	r1, #0
 800063c:	2001      	movs	r0, #1
 800063e:	f003 fe9a 	bl	8004376 <xQueueGenericCreate>
 8000642:	0002      	movs	r2, r0
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0x58>)
 8000646:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000648:	f003 fc3e 	bl	8003ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <main+0x5c>)
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x60>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f003 fc80 	bl	8003f58 <osThreadNew>
 8000658:	0002      	movs	r2, r0
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <main+0x64>)
 800065c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  taskOneHandle = osThreadNew(StartTaskOne, NULL, &taskOne_attributes);
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <main+0x68>)
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x6c>)
 8000662:	2100      	movs	r1, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f003 fc77 	bl	8003f58 <osThreadNew>
 800066a:	0002      	movs	r2, r0
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <main+0x70>)
 800066e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f003 fc4c 	bl	8003f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x54>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	2000018c 	.word	0x2000018c
 800067c:	080065f0 	.word	0x080065f0
 8000680:	080009bd 	.word	0x080009bd
 8000684:	20000174 	.word	0x20000174
 8000688:	08006614 	.word	0x08006614
 800068c:	08000955 	.word	0x08000955
 8000690:	20000178 	.word	0x20000178

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	233c      	movs	r3, #60	; 0x3c
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f005 fe8d 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f005 fe86 	bl	80063c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fa29 	bl	8001b14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fa61 	bl	8001bac <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ee:	f000 f983 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fdac 	bl	800226c <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000718:	f000 f96e 	bl	80009f8 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b015      	add	sp, #84	; 0x54
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	230c      	movs	r3, #12
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f005 fe46 	bl	80063c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <MX_ADC1_Init+0xc8>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	05d2      	lsls	r2, r2, #23
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000748:	2208      	movs	r2, #8
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800075a:	2204      	movs	r2, #4
 800075c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800076c:	2201      	movs	r2, #1
 800076e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000784:	222c      	movs	r2, #44	; 0x2c
 8000786:	2100      	movs	r1, #0
 8000788:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_ADC1_Init+0xc4>)
 800079e:	223c      	movs	r2, #60	; 0x3c
 80007a0:	2100      	movs	r1, #0
 80007a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_ADC1_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_ADC1_Init+0xc4>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fbf9 	bl	8000fa4 <HAL_ADC_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 f91f 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	1d3a      	adds	r2, r7, #4
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_ADC1_Init+0xc4>)
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fd8e 	bl	80012f4 <HAL_ADC_ConfigChannel>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007dc:	f000 f90c 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000007c 	.word	0x2000007c
 80007ec:	40012400 	.word	0x40012400

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_USART2_UART_Init+0x94>)
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <MX_USART2_UART_Init+0x98>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_USART2_UART_Init+0x94>)
 80007fc:	22e1      	movs	r2, #225	; 0xe1
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800083a:	0018      	movs	r0, r3
 800083c:	f002 fbc0 	bl	8002fc0 <HAL_UART_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f8d8 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800084a:	2100      	movs	r1, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f003 f9d1 	bl	8003bf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f8cf 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800085c:	2100      	movs	r1, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f003 fa08 	bl	8003c74 <HAL_UARTEx_SetRxFifoThreshold>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f8c6 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x94>)
 800086e:	0018      	movs	r0, r3
 8000870:	f003 f986 	bl	8003b80 <HAL_UARTEx_DisableFifoMode>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f8be 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	200000e0 	.word	0x200000e0
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	240c      	movs	r4, #12
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2314      	movs	r3, #20
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f005 fd91 	bl	80063c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008a8:	2104      	movs	r1, #4
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	2204      	movs	r2, #4
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008c0:	2120      	movs	r1, #32
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2220      	movs	r2, #32
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2200      	movs	r2, #0
 80008f0:	2160      	movs	r1, #96	; 0x60
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f8f0 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2220      	movs	r2, #32
 80008fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2201      	movs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2202      	movs	r2, #2
 800090e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000910:	193a      	adds	r2, r7, r4
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 ff71 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000938:	187a      	adds	r2, r7, r1
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 ff5d 	bl	8001800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b009      	add	sp, #36	; 0x24
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40021000 	.word	0x40021000

08000954 <StartTaskOne>:
/**
  * @brief  Function implementing the taskOne thread.
  * @param  argument: Not used
  * @retval None
  */
void StartTaskOne(void * argument){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]


	for(;;){

		const TickType_t xDelay100ms = pdMS_TO_TICKS(10UL);
 800095c:	230a      	movs	r3, #10
 800095e:	60fb      	str	r3, [r7, #12]

		taskOneProfiler++;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <StartTaskOne+0x34>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <StartTaskOne+0x34>)
 8000968:	601a      	str	r2, [r3, #0]
		taskTwoHandle = osThreadNew(StartTaskTwo, NULL, &taskTwo_attributes);
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <StartTaskOne+0x38>)
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <StartTaskOne+0x3c>)
 800096e:	2100      	movs	r1, #0
 8000970:	0018      	movs	r0, r3
 8000972:	f003 faf1 	bl	8003f58 <osThreadNew>
 8000976:	0002      	movs	r2, r0
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <StartTaskOne+0x40>)
 800097a:	601a      	str	r2, [r3, #0]

		vTaskDelay(xDelay100ms);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	0018      	movs	r0, r3
 8000980:	f004 fa50 	bl	8004e24 <vTaskDelay>
	for(;;){
 8000984:	e7ea      	b.n	800095c <StartTaskOne+0x8>
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000180 	.word	0x20000180
 800098c:	08006638 	.word	0x08006638
 8000990:	08000999 	.word	0x08000999
 8000994:	2000017c 	.word	0x2000017c

08000998 <StartTaskTwo>:
/**
  * @brief  Function implementing the taskTwo thread.
  * @param  argument: Not used
  * @retval None
  */
void StartTaskTwo(void * argument){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]



	for(;;){

		const TickType_t xDelay100ms = pdMS_TO_TICKS(100UL);
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	60fb      	str	r3, [r7, #12]

		taskTwoProfiler++;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <StartTaskTwo+0x20>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <StartTaskTwo+0x20>)
 80009ac:	601a      	str	r2, [r3, #0]
		//vTaskDelete(NULL);
		vTaskDelay(xDelay100ms);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	0018      	movs	r0, r3
 80009b2:	f004 fa37 	bl	8004e24 <vTaskDelay>
	for(;;){
 80009b6:	e7f3      	b.n	80009a0 <StartTaskTwo+0x8>
 80009b8:	20000184 	.word	0x20000184

080009bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  taskDefaultProfiler++;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <StartDefaultTask+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <StartDefaultTask+0x14>)
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e7f9      	b.n	80009c4 <StartDefaultTask+0x8>
 80009d0:	20000188 	.word	0x20000188

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f9c3 	bl	8000d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40012c00 	.word	0x40012c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_MspInit+0x50>)
 8000a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_MspInit+0x50>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	641a      	str	r2, [r3, #64]	; 0x40
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x50>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x50>)
 8000a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x50>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0549      	lsls	r1, r1, #21
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x50>)
 8000a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	055b      	lsls	r3, r3, #21
 8000a38:	4013      	ands	r3, r2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a3e:	2302      	movs	r3, #2
 8000a40:	425b      	negs	r3, r3
 8000a42:	2200      	movs	r2, #0
 8000a44:	2103      	movs	r1, #3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 feb4 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f005 fcaa 	bl	80063c4 <memset>
  if(hadc->Instance==ADC1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d129      	bne.n	8000ace <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0349      	lsls	r1, r1, #13
 8000a84:	430a      	orrs	r2, r1
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	035b      	lsls	r3, r3, #13
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_ADC_MspInit+0x84>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	193a      	adds	r2, r7, r4
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fe99 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b00b      	add	sp, #44	; 0x2c
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b09d      	sub	sp, #116	; 0x74
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	235c      	movs	r3, #92	; 0x5c
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	0018      	movs	r0, r3
 8000aee:	2314      	movs	r3, #20
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f005 fc66 	bl	80063c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	2410      	movs	r4, #16
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	234c      	movs	r3, #76	; 0x4c
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f005 fc5e 	bl	80063c4 <memset>
  if(huart->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_UART_MspInit+0xb8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13e      	bne.n	8000b90 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 fd77 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b2a:	f7ff ff65 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b62:	215c      	movs	r1, #92	; 0x5c
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	187a      	adds	r2, r7, r1
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	0011      	movs	r1, r2
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fe38 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b01d      	add	sp, #116	; 0x74
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ba8:	232b      	movs	r3, #43	; 0x2b
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_InitTick+0xf4>)
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_InitTick+0xf4>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0109      	lsls	r1, r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_InitTick+0xf4>)
 8000bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	230c      	movs	r3, #12
 8000bce:	18fa      	adds	r2, r7, r3
 8000bd0:	2410      	movs	r4, #16
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fcf2 	bl	80025c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be8:	f001 fcd4 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8000bec:	0003      	movs	r3, r0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf2:	f001 fccf 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfe:	4926      	ldr	r1, [pc, #152]	; (8000c98 <HAL_InitTick+0xf8>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fa81 	bl	8000108 <__udivsi3>
 8000c06:	0003      	movs	r3, r0
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c0e:	4a24      	ldr	r2, [pc, #144]	; (8000ca0 <HAL_InitTick+0x100>)
 8000c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c14:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_InitTick+0x104>)
 8000c16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c1a:	6a3a      	ldr	r2, [r7, #32]
 8000c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c30:	252b      	movs	r5, #43	; 0x2b
 8000c32:	197c      	adds	r4, r7, r5
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 ff28 	bl	8002a8c <HAL_TIM_Base_Init>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000c40:	197b      	adds	r3, r7, r5
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11e      	bne.n	8000c86 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c48:	197c      	adds	r4, r7, r5
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0xfc>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f001 ff7d 	bl	8002b4c <HAL_TIM_Base_Start_IT>
 8000c52:	0003      	movs	r3, r0
 8000c54:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000c56:	197b      	adds	r3, r7, r5
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d113      	bne.n	8000c86 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000c5e:	200d      	movs	r0, #13
 8000c60:	f000 fdbd 	bl	80017de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d809      	bhi.n	8000c7e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0019      	movs	r1, r3
 8000c70:	200d      	movs	r0, #13
 8000c72:	f000 fd9f 	bl	80017b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_InitTick+0x108>)
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e003      	b.n	8000c86 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000c7e:	232b      	movs	r3, #43	; 0x2b
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000c86:	232b      	movs	r3, #43	; 0x2b
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	781b      	ldrb	r3, [r3, #0]
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b00c      	add	sp, #48	; 0x30
 8000c92:	bdb0      	pop	{r4, r5, r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	000f4240 	.word	0x000f4240
 8000c9c:	20000190 	.word	0x20000190
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	000003e7 	.word	0x000003e7
 8000ca8:	20000004 	.word	0x20000004

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 ffa6 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000190 	.word	0x20000190

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f7ff fff6 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	; (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f005 fbc1 	bl	8006490 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d0e:	f7ff fc87 	bl	8000620 <main>

08000d12 <LoopForever>:

LoopForever:
  b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d20:	0800671c 	.word	0x0800671c
  ldr r2, =_sbss
 8000d24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d28:	20001d00 	.word	0x20001d00

08000d2c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_COMP_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x3c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Init+0x3c>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0049      	lsls	r1, r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff ff28 	bl	8000ba0 <HAL_InitTick>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fe52 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200001dc 	.word	0x200001dc

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	200001dc 	.word	0x200001dc

08000da8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000db8:	401a      	ands	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	fe3fffff 	.word	0xfe3fffff

08000dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	23e0      	movs	r3, #224	; 0xe0
 8000dde:	045b      	lsls	r3, r3, #17
 8000de0:	4013      	ands	r3, r2
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}

08000dea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	400a      	ands	r2, r1
 8000e00:	2107      	movs	r1, #7
 8000e02:	4091      	lsls	r1, r2
 8000e04:	000a      	movs	r2, r1
 8000e06:	43d2      	mvns	r2, r2
 8000e08:	401a      	ands	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	400b      	ands	r3, r1
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4099      	lsls	r1, r3
 8000e14:	000b      	movs	r3, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	2104      	movs	r1, #4
 8000e36:	400a      	ands	r2, r1
 8000e38:	2107      	movs	r1, #7
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2104      	movs	r1, #4
 8000e44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	0013      	movs	r3, r2
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	211f      	movs	r1, #31
 8000e66:	400a      	ands	r2, r1
 8000e68:	210f      	movs	r1, #15
 8000e6a:	4091      	lsls	r1, r2
 8000e6c:	000a      	movs	r2, r1
 8000e6e:	43d2      	mvns	r2, r2
 8000e70:	401a      	ands	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0e9b      	lsrs	r3, r3, #26
 8000e76:	210f      	movs	r1, #15
 8000e78:	4019      	ands	r1, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	201f      	movs	r0, #31
 8000e7e:	4003      	ands	r3, r0
 8000e80:	4099      	lsls	r1, r3
 8000e82:	000b      	movs	r3, r1
 8000e84:	431a      	orrs	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	035b      	lsls	r3, r3, #13
 8000ea4:	0b5b      	lsrs	r3, r3, #13
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	0352      	lsls	r2, r2, #13
 8000ec6:	0b52      	lsrs	r2, r2, #13
 8000ec8:	43d2      	mvns	r2, r2
 8000eca:	401a      	ands	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000efa:	400b      	ands	r3, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	07ffff00 	.word	0x07ffff00

08000f10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0552      	lsls	r2, r2, #21
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	6fffffe8 	.word	0x6fffffe8

08000f38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	401a      	ands	r2, r3
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d101      	bne.n	8000f56 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_IsEnabled+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_IsEnabled+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d101      	bne.n	8000f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	231f      	movs	r3, #31
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e17f      	b.n	80012ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10a      	bne.n	8000fe8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff fd3f 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2254      	movs	r2, #84	; 0x54
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff ffa3 	bl	8000f38 <LL_ADC_IsInternalRegulatorEnabled>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d115      	bne.n	8001022 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff ff88 	bl	8000f10 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001000:	4bb4      	ldr	r3, [pc, #720]	; (80012d4 <HAL_ADC_Init+0x330>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	49b4      	ldr	r1, [pc, #720]	; (80012d8 <HAL_ADC_Init+0x334>)
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff f87e 	bl	8000108 <__udivsi3>
 800100c:	0003      	movs	r3, r0
 800100e:	3301      	adds	r3, #1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001014:	e002      	b.n	800101c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3b01      	subs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f9      	bne.n	8001016 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff86 	bl	8000f38 <LL_ADC_IsInternalRegulatorEnabled>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d10f      	bne.n	8001050 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	2210      	movs	r2, #16
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2201      	movs	r2, #1
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001048:	231f      	movs	r3, #31
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff94 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 800105a:	0003      	movs	r3, r0
 800105c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	2210      	movs	r2, #16
 8001064:	4013      	ands	r3, r2
 8001066:	d000      	beq.n	800106a <HAL_ADC_Init+0xc6>
 8001068:	e122      	b.n	80012b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d000      	beq.n	8001072 <HAL_ADC_Init+0xce>
 8001070:	e11e      	b.n	80012b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a99      	ldr	r2, [pc, #612]	; (80012dc <HAL_ADC_Init+0x338>)
 8001078:	4013      	ands	r3, r2
 800107a:	2202      	movs	r2, #2
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff ff6a 	bl	8000f60 <LL_ADC_IsEnabled>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d000      	beq.n	8001092 <HAL_ADC_Init+0xee>
 8001090:	e0ad      	b.n	80011ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7e1b      	ldrb	r3, [r3, #24]
 800109a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800109c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7e5b      	ldrb	r3, [r3, #25]
 80010a2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7e9b      	ldrb	r3, [r3, #26]
 80010aa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_ADC_Init+0x118>
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	e000      	b.n	80010be <HAL_ADC_Init+0x11a>
 80010bc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010be:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010c4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da04      	bge.n	80010d8 <HAL_ADC_Init+0x134>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	e001      	b.n	80010dc <HAL_ADC_Init+0x138>
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80010dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	212c      	movs	r1, #44	; 0x2c
 80010e2:	5c5b      	ldrb	r3, [r3, r1]
 80010e4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010e6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2220      	movs	r2, #32
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d115      	bne.n	8001124 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d105      	bne.n	800110c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	e00b      	b.n	8001124 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	2220      	movs	r2, #32
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	2201      	movs	r2, #1
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00a      	beq.n	8001142 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001130:	23e0      	movs	r3, #224	; 0xe0
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800113a:	4313      	orrs	r3, r2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4a65      	ldr	r2, [pc, #404]	; (80012e0 <HAL_ADC_Init+0x33c>)
 800114a:	4013      	ands	r3, r2
 800114c:	0019      	movs	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	0f9b      	lsrs	r3, r3, #30
 800115e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001164:	4313      	orrs	r3, r2
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	223c      	movs	r2, #60	; 0x3c
 8001170:	5c9b      	ldrb	r3, [r3, r2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d111      	bne.n	800119a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	0f9b      	lsrs	r3, r3, #30
 800117c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001182:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001188:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800118e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	4313      	orrs	r3, r2
 8001194:	2201      	movs	r2, #1
 8001196:	4313      	orrs	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_ADC_Init+0x340>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	061b      	lsls	r3, r3, #24
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d018      	beq.n	80011ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d012      	beq.n	80011ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d00c      	beq.n	80011ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_ADC_Init+0x344>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_ADC_Init+0x348>)
 80011da:	4013      	ands	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	23f0      	movs	r3, #240	; 0xf0
 80011e4:	039b      	lsls	r3, r3, #14
 80011e6:	401a      	ands	r2, r3
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_ADC_Init+0x344>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	001a      	movs	r2, r3
 80011f8:	2100      	movs	r1, #0
 80011fa:	f7ff fdf6 	bl	8000dea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	493a      	ldr	r1, [pc, #232]	; (80012f0 <HAL_ADC_Init+0x34c>)
 8001208:	001a      	movs	r2, r3
 800120a:	f7ff fdee 	bl	8000dea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2110      	movs	r1, #16
 8001222:	4249      	negs	r1, r1
 8001224:	430a      	orrs	r2, r1
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
 8001228:	e018      	b.n	800125c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	039b      	lsls	r3, r3, #14
 8001232:	429a      	cmp	r2, r3
 8001234:	d112      	bne.n	800125c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	3b01      	subs	r3, #1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	221c      	movs	r2, #28
 8001246:	4013      	ands	r3, r2
 8001248:	2210      	movs	r2, #16
 800124a:	4252      	negs	r2, r2
 800124c:	409a      	lsls	r2, r3
 800124e:	0011      	movs	r1, r2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2100      	movs	r1, #0
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fdde 	bl	8000e24 <LL_ADC_GetSamplingTimeCommonChannels>
 8001268:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800126e:	429a      	cmp	r2, r3
 8001270:	d10b      	bne.n	800128a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	2203      	movs	r2, #3
 800127e:	4393      	bics	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001288:	e01c      	b.n	80012c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	2212      	movs	r2, #18
 8001290:	4393      	bics	r3, r2
 8001292:	2210      	movs	r2, #16
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80012a6:	231f      	movs	r3, #31
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012ae:	e009      	b.n	80012c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	2210      	movs	r2, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012bc:	231f      	movs	r3, #31
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012c4:	231f      	movs	r3, #31
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b008      	add	sp, #32
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	20000000 	.word	0x20000000
 80012d8:	00030d40 	.word	0x00030d40
 80012dc:	fffffefd 	.word	0xfffffefd
 80012e0:	ffde0201 	.word	0xffde0201
 80012e4:	1ffffc02 	.word	0x1ffffc02
 80012e8:	40012708 	.word	0x40012708
 80012ec:	ffc3ffff 	.word	0xffc3ffff
 80012f0:	07ffff04 	.word	0x07ffff04

080012f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fe:	2317      	movs	r3, #23
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2254      	movs	r2, #84	; 0x54
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x24>
 8001314:	2302      	movs	r3, #2
 8001316:	e1c0      	b.n	800169a <HAL_ADC_ConfigChannel+0x3a6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2254      	movs	r2, #84	; 0x54
 800131c:	2101      	movs	r1, #1
 800131e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fe2c 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d000      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x3c>
 800132e:	e1a3      	b.n	8001678 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d100      	bne.n	800133a <HAL_ADC_ConfigChannel+0x46>
 8001338:	e143      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	429a      	cmp	r2, r3
 8001344:	d004      	beq.n	8001350 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800134a:	4ac1      	ldr	r2, [pc, #772]	; (8001650 <HAL_ADC_ConfigChannel+0x35c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d108      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f7ff fd99 	bl	8000e92 <LL_ADC_REG_SetSequencerChAdd>
 8001360:	e0c9      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	211f      	movs	r1, #31
 800136c:	400b      	ands	r3, r1
 800136e:	210f      	movs	r1, #15
 8001370:	4099      	lsls	r1, r3
 8001372:	000b      	movs	r3, r1
 8001374:	43db      	mvns	r3, r3
 8001376:	4013      	ands	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	035b      	lsls	r3, r3, #13
 8001380:	0b5b      	lsrs	r3, r3, #13
 8001382:	d105      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x9c>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0e9b      	lsrs	r3, r3, #26
 800138a:	221f      	movs	r2, #31
 800138c:	4013      	ands	r3, r2
 800138e:	e098      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	4013      	ands	r3, r2
 8001398:	d000      	beq.n	800139c <HAL_ADC_ConfigChannel+0xa8>
 800139a:	e091      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x1cc>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2202      	movs	r2, #2
 80013a2:	4013      	ands	r3, r2
 80013a4:	d000      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0xb4>
 80013a6:	e089      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1c8>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d000      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0xc0>
 80013b2:	e081      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1c4>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2208      	movs	r2, #8
 80013ba:	4013      	ands	r3, r2
 80013bc:	d000      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0xcc>
 80013be:	e079      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x1c0>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2210      	movs	r2, #16
 80013c6:	4013      	ands	r3, r2
 80013c8:	d000      	beq.n	80013cc <HAL_ADC_ConfigChannel+0xd8>
 80013ca:	e071      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1bc>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2220      	movs	r2, #32
 80013d2:	4013      	ands	r3, r2
 80013d4:	d000      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0xe4>
 80013d6:	e069      	b.n	80014ac <HAL_ADC_ConfigChannel+0x1b8>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	4013      	ands	r3, r2
 80013e0:	d000      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0xf0>
 80013e2:	e061      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x1b4>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	4013      	ands	r3, r2
 80013ec:	d000      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0xfc>
 80013ee:	e059      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x1b0>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	d151      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1ac>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d149      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1a8>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4013      	ands	r3, r2
 8001412:	d141      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1a4>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4013      	ands	r3, r2
 800141e:	d139      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1a0>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	015b      	lsls	r3, r3, #5
 8001428:	4013      	ands	r3, r2
 800142a:	d131      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x19c>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	019b      	lsls	r3, r3, #6
 8001434:	4013      	ands	r3, r2
 8001436:	d129      	bne.n	800148c <HAL_ADC_ConfigChannel+0x198>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	01db      	lsls	r3, r3, #7
 8001440:	4013      	ands	r3, r2
 8001442:	d121      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x194>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4013      	ands	r3, r2
 800144e:	d119      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x190>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	4013      	ands	r3, r2
 800145a:	d111      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x18c>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	4013      	ands	r3, r2
 8001466:	d109      	bne.n	800147c <HAL_ADC_ConfigChannel+0x188>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	02db      	lsls	r3, r3, #11
 8001470:	4013      	ands	r3, r2
 8001472:	d001      	beq.n	8001478 <HAL_ADC_ConfigChannel+0x184>
 8001474:	2312      	movs	r3, #18
 8001476:	e024      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001478:	2300      	movs	r3, #0
 800147a:	e022      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 800147c:	2311      	movs	r3, #17
 800147e:	e020      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001480:	2310      	movs	r3, #16
 8001482:	e01e      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001484:	230f      	movs	r3, #15
 8001486:	e01c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001488:	230e      	movs	r3, #14
 800148a:	e01a      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 800148c:	230d      	movs	r3, #13
 800148e:	e018      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001490:	230c      	movs	r3, #12
 8001492:	e016      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001494:	230b      	movs	r3, #11
 8001496:	e014      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001498:	230a      	movs	r3, #10
 800149a:	e012      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 800149c:	2309      	movs	r3, #9
 800149e:	e010      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014a0:	2308      	movs	r3, #8
 80014a2:	e00e      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014a4:	2307      	movs	r3, #7
 80014a6:	e00c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014a8:	2306      	movs	r3, #6
 80014aa:	e00a      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014ac:	2305      	movs	r3, #5
 80014ae:	e008      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e006      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e004      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1ce>
 80014c0:	2300      	movs	r3, #0
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6852      	ldr	r2, [r2, #4]
 80014c6:	201f      	movs	r0, #31
 80014c8:	4002      	ands	r2, r0
 80014ca:	4093      	lsls	r3, r2
 80014cc:	000a      	movs	r2, r1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d808      	bhi.n	80014f6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	001a      	movs	r2, r3
 80014f2:	f7ff fcae 	bl	8000e52 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	001a      	movs	r2, r3
 8001504:	f7ff fce8 	bl	8000ed8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db00      	blt.n	8001512 <HAL_ADC_ConfigChannel+0x21e>
 8001510:	e0bc      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001512:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fc5b 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 800151a:	0003      	movs	r3, r0
 800151c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_ADC_ConfigChannel+0x364>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d122      	bne.n	800156e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001530:	d11d      	bne.n	800156e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	0412      	lsls	r2, r2, #16
 8001538:	4313      	orrs	r3, r2
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 800153c:	0019      	movs	r1, r3
 800153e:	0010      	movs	r0, r2
 8001540:	f7ff fc32 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001544:	4b45      	ldr	r3, [pc, #276]	; (800165c <HAL_ADC_ConfigChannel+0x368>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4945      	ldr	r1, [pc, #276]	; (8001660 <HAL_ADC_ConfigChannel+0x36c>)
 800154a:	0018      	movs	r0, r3
 800154c:	f7fe fddc 	bl	8000108 <__udivsi3>
 8001550:	0003      	movs	r3, r0
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	0013      	movs	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	189b      	adds	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800155e:	e002      	b.n	8001566 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3b01      	subs	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f9      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800156c:	e08e      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <HAL_ADC_ConfigChannel+0x370>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d10e      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	045b      	lsls	r3, r3, #17
 800157e:	4013      	ands	r3, r2
 8001580:	d109      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	0452      	lsls	r2, r2, #17
 8001588:	4313      	orrs	r3, r2
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 800158c:	0019      	movs	r1, r3
 800158e:	0010      	movs	r0, r2
 8001590:	f7ff fc0a 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
 8001594:	e07a      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <HAL_ADC_ConfigChannel+0x374>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d000      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0x2ae>
 80015a0:	e074      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	03db      	lsls	r3, r3, #15
 80015a8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015aa:	d000      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x2ba>
 80015ac:	e06e      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	03d2      	lsls	r2, r2, #15
 80015b4:	4313      	orrs	r3, r2
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 80015b8:	0019      	movs	r1, r3
 80015ba:	0010      	movs	r0, r2
 80015bc:	f7ff fbf4 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
 80015c0:	e064      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_ADC_ConfigChannel+0x35c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d107      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0019      	movs	r1, r3
 80015e2:	0010      	movs	r0, r2
 80015e4:	f7ff fc66 	bl	8000eb4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da4d      	bge.n	800168c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff fbec 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 80015f8:	0003      	movs	r3, r0
 80015fa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a15      	ldr	r2, [pc, #84]	; (8001658 <HAL_ADC_ConfigChannel+0x364>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d108      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_ADC_ConfigChannel+0x378>)
 800160a:	4013      	ands	r3, r2
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 800160e:	0019      	movs	r1, r3
 8001610:	0010      	movs	r0, r2
 8001612:	f7ff fbc9 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
 8001616:	e039      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_ADC_ConfigChannel+0x370>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_ADC_ConfigChannel+0x37c>)
 8001626:	4013      	ands	r3, r2
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 800162a:	0019      	movs	r1, r3
 800162c:	0010      	movs	r0, r2
 800162e:	f7ff fbbb 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
 8001632:	e02b      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_ADC_ConfigChannel+0x374>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d126      	bne.n	800168c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_ADC_ConfigChannel+0x380>)
 8001642:	4013      	ands	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_ADC_ConfigChannel+0x360>)
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f7ff fbad 	bl	8000da8 <LL_ADC_SetCommonPathInternalCh>
 800164e:	e01d      	b.n	800168c <HAL_ADC_ConfigChannel+0x398>
 8001650:	80000004 	.word	0x80000004
 8001654:	40012708 	.word	0x40012708
 8001658:	b0001000 	.word	0xb0001000
 800165c:	20000000 	.word	0x20000000
 8001660:	00030d40 	.word	0x00030d40
 8001664:	b8004000 	.word	0xb8004000
 8001668:	b4002000 	.word	0xb4002000
 800166c:	ff7fffff 	.word	0xff7fffff
 8001670:	feffffff 	.word	0xfeffffff
 8001674:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	2220      	movs	r2, #32
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001684:	2317      	movs	r3, #23
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2254      	movs	r2, #84	; 0x54
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001694:	2317      	movs	r3, #23
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b006      	add	sp, #24
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b7f      	cmp	r3, #127	; 0x7f
 80016b6:	d809      	bhi.n	80016cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	001a      	movs	r2, r3
 80016be:	231f      	movs	r3, #31
 80016c0:	401a      	ands	r2, r3
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_EnableIRQ+0x30>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	4091      	lsls	r1, r2
 80016c8:	000a      	movs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b7f      	cmp	r3, #127	; 0x7f
 80016ec:	d828      	bhi.n	8001740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ee:	4a2f      	ldr	r2, [pc, #188]	; (80017ac <__NVIC_SetPriority+0xd4>)
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	33c0      	adds	r3, #192	; 0xc0
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	589b      	ldr	r3, [r3, r2]
 80016fe:	1dfa      	adds	r2, r7, #7
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	0011      	movs	r1, r2
 8001704:	2203      	movs	r2, #3
 8001706:	400a      	ands	r2, r1
 8001708:	00d2      	lsls	r2, r2, #3
 800170a:	21ff      	movs	r1, #255	; 0xff
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	43d2      	mvns	r2, r2
 8001712:	401a      	ands	r2, r3
 8001714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	22ff      	movs	r2, #255	; 0xff
 800171c:	401a      	ands	r2, r3
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	2303      	movs	r3, #3
 8001726:	4003      	ands	r3, r0
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172c:	481f      	ldr	r0, [pc, #124]	; (80017ac <__NVIC_SetPriority+0xd4>)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	430a      	orrs	r2, r1
 8001738:	33c0      	adds	r3, #192	; 0xc0
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800173e:	e031      	b.n	80017a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	0019      	movs	r1, r3
 8001748:	230f      	movs	r3, #15
 800174a:	400b      	ands	r3, r1
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3306      	adds	r3, #6
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	3304      	adds	r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1dfa      	adds	r2, r7, #7
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	0011      	movs	r1, r2
 8001760:	2203      	movs	r2, #3
 8001762:	400a      	ands	r2, r1
 8001764:	00d2      	lsls	r2, r2, #3
 8001766:	21ff      	movs	r1, #255	; 0xff
 8001768:	4091      	lsls	r1, r2
 800176a:	000a      	movs	r2, r1
 800176c:	43d2      	mvns	r2, r2
 800176e:	401a      	ands	r2, r3
 8001770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	401a      	ands	r2, r3
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	0018      	movs	r0, r3
 8001780:	2303      	movs	r3, #3
 8001782:	4003      	ands	r3, r0
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001c      	movs	r4, r3
 8001790:	230f      	movs	r3, #15
 8001792:	4023      	ands	r3, r4
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	430a      	orrs	r2, r1
 800179a:	3306      	adds	r3, #6
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	18c3      	adds	r3, r0, r3
 80017a0:	3304      	adds	r3, #4
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b003      	add	sp, #12
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff81 	bl	80016d8 <__NVIC_SetPriority>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	0002      	movs	r2, r0
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff57 	bl	80016a4 <__NVIC_EnableIRQ>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e14d      	b.n	8001aac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x28>
 8001826:	e13e      	b.n	8001aa6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x40>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	2201      	movs	r2, #1
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2107      	movs	r1, #7
 8001916:	400b      	ands	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x174>
 8001972:	e098      	b.n	8001aa6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3318      	adds	r3, #24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	589b      	ldr	r3, [r3, r2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2203      	movs	r2, #3
 8001986:	4013      	ands	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	220f      	movs	r2, #15
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	43da      	mvns	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	23a0      	movs	r3, #160	; 0xa0
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	429a      	cmp	r2, r3
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x1d6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1d2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1ce>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1ca>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x2d4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1c6>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019d6:	2300      	movs	r3, #0
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	2103      	movs	r1, #3
 80019dc:	400a      	ands	r2, r1
 80019de:	00d2      	lsls	r2, r2, #3
 80019e0:	4093      	lsls	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019e8:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3318      	adds	r3, #24
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	035b      	lsls	r3, r3, #13
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a4c:	2384      	movs	r3, #132	; 0x84
 8001a4e:	58d3      	ldr	r3, [r2, r3]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43da      	mvns	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	029b      	lsls	r3, r3, #10
 8001a64:	4013      	ands	r3, r2
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a70:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a72:	2284      	movs	r2, #132	; 0x84
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	58d3      	ldr	r3, [r2, r3]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4013      	ands	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a9e:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	1e13      	subs	r3, r2, #0
 8001ab6:	d000      	beq.n	8001aba <HAL_GPIO_Init+0x2ba>
 8001ab8:	e6aa      	b.n	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b006      	add	sp, #24
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	50000400 	.word	0x50000400
 8001acc:	50000800 	.word	0x50000800
 8001ad0:	50000c00 	.word	0x50000c00
 8001ad4:	50001000 	.word	0x50001000

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	0008      	movs	r0, r1
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	1cbb      	adds	r3, r7, #2
 8001ae6:	1c02      	adds	r2, r0, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	1c7b      	adds	r3, r7, #1
 8001aec:	1c0a      	adds	r2, r1, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af0:	1c7b      	adds	r3, r7, #1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001af8:	1cbb      	adds	r3, r7, #2
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e003      	b.n	8001b0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	1cbb      	adds	r3, r7, #2
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d11f      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4912      	ldr	r1, [pc, #72]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7fe fade 	bl	8000108 <__udivsi3>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b52:	e008      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e001      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e009      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d0ed      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40007000 	.word	0x40007000
 8001b88:	fffff9ff 	.word	0xfffff9ff
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	000f4240 	.word	0x000f4240

08001b94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	23e0      	movs	r3, #224	; 0xe0
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4013      	ands	r3, r2
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f000 fb50 	bl	8002260 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x20>
 8001bca:	e07c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bcc:	4bc3      	ldr	r3, [pc, #780]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2238      	movs	r2, #56	; 0x38
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd6:	4bc1      	ldr	r3, [pc, #772]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x40>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d002      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4bba      	ldr	r3, [pc, #744]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d062      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x118>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d15e      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e32a      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_OscConfig+0x7a>
 8001c16:	4bb1      	ldr	r3, [pc, #708]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4bb0      	ldr	r3, [pc, #704]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0249      	lsls	r1, r1, #9
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e020      	b.n	8001c68 <HAL_RCC_OscConfig+0xbc>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	23a0      	movs	r3, #160	; 0xa0
 8001c2c:	02db      	lsls	r3, r3, #11
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10e      	bne.n	8001c50 <HAL_RCC_OscConfig+0xa4>
 8001c32:	4baa      	ldr	r3, [pc, #680]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4ba9      	ldr	r3, [pc, #676]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	02c9      	lsls	r1, r1, #11
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4ba6      	ldr	r3, [pc, #664]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4ba5      	ldr	r3, [pc, #660]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xbc>
 8001c50:	4ba2      	ldr	r3, [pc, #648]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c56:	49a2      	ldr	r1, [pc, #648]	; (8001ee0 <HAL_RCC_OscConfig+0x334>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b9f      	ldr	r3, [pc, #636]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b9e      	ldr	r3, [pc, #632]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c62:	49a0      	ldr	r1, [pc, #640]	; (8001ee4 <HAL_RCC_OscConfig+0x338>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f890 	bl	8000d94 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7a:	f7ff f88b 	bl	8000d94 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e2e9      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8c:	4b93      	ldr	r3, [pc, #588]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0xce>
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f87b 	bl	8000d94 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f876 	bl	8000d94 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e2d4      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xf8>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x126>
 8001cd0:	e099      	b.n	8001e06 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	4b82      	ldr	r3, [pc, #520]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2238      	movs	r2, #56	; 0x38
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cdc:	4b7f      	ldr	r3, [pc, #508]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x146>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d135      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf8:	4b78      	ldr	r3, [pc, #480]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x164>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e2a7      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <HAL_RCC_OscConfig+0x33c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	021a      	lsls	r2, r3, #8
 8001d20:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x340>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d40:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0adb      	lsrs	r3, r3, #11
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	4a69      	ldr	r2, [pc, #420]	; (8001ef0 <HAL_RCC_OscConfig+0x344>)
 8001d4c:	40da      	lsrs	r2, r3
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x348>)
 8001d50:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d52:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x34c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7fe ff22 	bl	8000ba0 <HAL_InitTick>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d051      	beq.n	8001e04 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e27d      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d030      	beq.n	8001dce <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5e      	ldr	r2, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x340>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b55      	ldr	r3, [pc, #340]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	0049      	lsls	r1, r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f801 	bl	8000d94 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7fe fffc 	bl	8000d94 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e25a      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_RCC_OscConfig+0x33c>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	4b45      	ldr	r3, [pc, #276]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	e01b      	b.n	8001e06 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b42      	ldr	r3, [pc, #264]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dd4:	4949      	ldr	r1, [pc, #292]	; (8001efc <HAL_RCC_OscConfig+0x350>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7fe ffdb 	bl	8000d94 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7fe ffd6 	bl	8000d94 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e234      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x238>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d047      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2238      	movs	r2, #56	; 0x38
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b18      	cmp	r3, #24
 8001e1a:	d10a      	bne.n	8001e32 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d03c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2f4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d138      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e216      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d019      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7fe ffa5 	bl	8000d94 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe ffa0 	bl	8000d94 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1fe      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f1      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2a4>
 8001e6c:	e018      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	438a      	bics	r2, r1
 8001e78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff8b 	bl	8000d94 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe ff86 	bl	8000d94 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1e4      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d1f1      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_RCC_OscConfig+0x300>
 8001eaa:	e0c7      	b.n	800203c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eac:	231f      	movs	r3, #31
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2238      	movs	r2, #56	; 0x38
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d11f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d100      	bne.n	8001ecc <HAL_RCC_OscConfig+0x320>
 8001eca:	e0b7      	b.n	800203c <HAL_RCC_OscConfig+0x490>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d000      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x32a>
 8001ed4:	e0b2      	b.n	800203c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1c2      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	fffbffff 	.word	0xfffbffff
 8001ee8:	ffff80ff 	.word	0xffff80ff
 8001eec:	ffffc7ff 	.word	0xffffc7ff
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f00:	4bb5      	ldr	r3, [pc, #724]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x364>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x366>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d011      	beq.n	8001f3a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4bb0      	ldr	r3, [pc, #704]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f1a:	4baf      	ldr	r3, [pc, #700]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0549      	lsls	r1, r1, #21
 8001f20:	430a      	orrs	r2, r1
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f24:	4bac      	ldr	r3, [pc, #688]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f32:	231f      	movs	r3, #31
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4ba8      	ldr	r3, [pc, #672]	; (80021dc <HAL_RCC_OscConfig+0x630>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f46:	4ba5      	ldr	r3, [pc, #660]	; (80021dc <HAL_RCC_OscConfig+0x630>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4ba4      	ldr	r3, [pc, #656]	; (80021dc <HAL_RCC_OscConfig+0x630>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0049      	lsls	r1, r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff1e 	bl	8000d94 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe ff19 	bl	8000d94 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e177      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f70:	4b9a      	ldr	r3, [pc, #616]	; (80021dc <HAL_RCC_OscConfig+0x630>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3e6>
 8001f84:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f88:	4b93      	ldr	r3, [pc, #588]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x420>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x408>
 8001f9a:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0x420>
 8001fb4:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fb8:	4b87      	ldr	r3, [pc, #540]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc0:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d014      	beq.n	8001ffe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fede 	bl	8000d94 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fed9 	bl	8000d94 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a7d      	ldr	r2, [pc, #500]	; (80021e0 <HAL_RCC_OscConfig+0x634>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e136      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff2:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x432>
 8001ffc:	e013      	b.n	8002026 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fec9 	bl	8000d94 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002006:	e009      	b.n	800201c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7fe fec4 	bl	8000d94 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a73      	ldr	r2, [pc, #460]	; (80021e0 <HAL_RCC_OscConfig+0x634>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e121      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002036:	496b      	ldr	r1, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x638>)
 8002038:	400a      	ands	r2, r1
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	4013      	ands	r3, r2
 8002044:	d039      	beq.n	80020ba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01b      	beq.n	8002086 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	03c9      	lsls	r1, r1, #15
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fe9a 	bl	8000d94 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7fe fe95 	bl	8000d94 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0f3      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	4013      	ands	r3, r2
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x4ba>
 8002084:	e019      	b.n	80020ba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002086:	4b54      	ldr	r3, [pc, #336]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800208c:	4956      	ldr	r1, [pc, #344]	; (80021e8 <HAL_RCC_OscConfig+0x63c>)
 800208e:	400a      	ands	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7fe fe7f 	bl	8000d94 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209c:	f7fe fe7a 	bl	8000d94 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0d8      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	4013      	ands	r3, r2
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_RCC_OscConfig+0x518>
 80020c2:	e0cc      	b.n	800225e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2238      	movs	r2, #56	; 0x38
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_OscConfig+0x526>
 80020d0:	e07b      	b.n	80021ca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d156      	bne.n	8002188 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <HAL_RCC_OscConfig+0x640>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fe55 	bl	8000d94 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fe50 	bl	8000d94 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0ae      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	049b      	lsls	r3, r3, #18
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x644>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	431a      	orrs	r2, r3
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0449      	lsls	r1, r1, #17
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0549      	lsls	r1, r1, #21
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fe19 	bl	8000d94 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe fe14 	bl	8000d94 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e072      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	049b      	lsls	r3, r3, #18
 8002182:	4013      	ands	r3, r2
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x5bc>
 8002186:	e06a      	b.n	800225e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 800218e:	4917      	ldr	r1, [pc, #92]	; (80021ec <HAL_RCC_OscConfig+0x640>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe fdfe 	bl	8000d94 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7fe fdf9 	bl	8000d94 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e057      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	049b      	lsls	r3, r3, #18
 80021b8:	4013      	ands	r3, r2
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <HAL_RCC_OscConfig+0x648>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	e049      	b.n	800225e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e044      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	00001388 	.word	0x00001388
 80021e4:	efffffff 	.word	0xefffffff
 80021e8:	ffbfffff 	.word	0xffbfffff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	11c1808c 	.word	0x11c1808c
 80021f4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x6bc>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2203      	movs	r2, #3
 8002202:	401a      	ands	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	429a      	cmp	r2, r3
 800220a:	d126      	bne.n	800225a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2270      	movs	r2, #112	; 0x70
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d11f      	bne.n	800225a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	23fe      	movs	r3, #254	; 0xfe
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d116      	bne.n	800225a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	23f8      	movs	r3, #248	; 0xf8
 8002230:	039b      	lsls	r3, r3, #14
 8002232:	401a      	ands	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d10e      	bne.n	800225a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	23e0      	movs	r3, #224	; 0xe0
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	401a      	ands	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	0f5b      	lsrs	r3, r3, #29
 8002250:	075a      	lsls	r2, r3, #29
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b008      	add	sp, #32
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0e9      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2207      	movs	r2, #7
 8002286:	4013      	ands	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d91e      	bls.n	80022cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2207      	movs	r2, #7
 8002294:	4393      	bics	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fd78 	bl	8000d94 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe fd73 	bl	8000d94 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a6a      	ldr	r2, [pc, #424]	; (8002460 <HAL_RCC_ClockConfig+0x1f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0ca      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2207      	movs	r2, #7
 80022c4:	4013      	ands	r3, r2
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d015      	beq.n	8002302 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2204      	movs	r2, #4
 80022dc:	4013      	ands	r3, r2
 80022de:	d006      	beq.n	80022ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022e0:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	21e0      	movs	r1, #224	; 0xe0
 80022e8:	01c9      	lsls	r1, r1, #7
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_RCC_ClockConfig+0x1fc>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d057      	beq.n	80023bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	d12b      	bne.n	8002378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e097      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d107      	bne.n	800233c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	049b      	lsls	r3, r3, #18
 8002334:	4013      	ands	r3, r2
 8002336:	d11f      	bne.n	8002378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e08b      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002344:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4013      	ands	r3, r2
 800234e:	d113      	bne.n	8002378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e07f      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d106      	bne.n	800236a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d108      	bne.n	8002378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e074      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e06d      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2207      	movs	r2, #7
 800237e:	4393      	bics	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238c:	f7fe fd02 	bl	8000d94 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002394:	e009      	b.n	80023aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7fe fcfd 	bl	8000d94 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <HAL_RCC_ClockConfig+0x1f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e054      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2238      	movs	r2, #56	; 0x38
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1ec      	bne.n	8002396 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2207      	movs	r2, #7
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d21e      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2207      	movs	r2, #7
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fcda 	bl	8000d94 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e4:	e009      	b.n	80023fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7fe fcd5 	bl	8000d94 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_RCC_ClockConfig+0x1f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e02c      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2207      	movs	r2, #7
 8002400:	4013      	ands	r3, r2
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2204      	movs	r2, #4
 800240e:	4013      	ands	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_RCC_ClockConfig+0x200>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002426:	f000 f829 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800242a:	0001      	movs	r1, r0
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	220f      	movs	r2, #15
 8002434:	401a      	ands	r2, r3
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x204>)
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	58d3      	ldr	r3, [r2, r3]
 800243c:	221f      	movs	r2, #31
 800243e:	4013      	ands	r3, r2
 8002440:	000a      	movs	r2, r1
 8002442:	40da      	lsrs	r2, r3
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x208>)
 8002446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x20c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fba7 	bl	8000ba0 <HAL_InitTick>
 8002452:	0003      	movs	r3, r0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b004      	add	sp, #16
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40022000 	.word	0x40022000
 8002460:	00001388 	.word	0x00001388
 8002464:	40021000 	.word	0x40021000
 8002468:	fffff0ff 	.word	0xfffff0ff
 800246c:	ffff8fff 	.word	0xffff8fff
 8002470:	0800665c 	.word	0x0800665c
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2238      	movs	r2, #56	; 0x38
 8002488:	4013      	ands	r3, r2
 800248a:	d10f      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0adb      	lsrs	r3, r3, #11
 8002492:	2207      	movs	r2, #7
 8002494:	4013      	ands	r3, r2
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	0013      	movs	r3, r2
 800249c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	4835      	ldr	r0, [pc, #212]	; (8002578 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024a2:	f7fd fe31 	bl	8000108 <__udivsi3>
 80024a6:	0003      	movs	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e05d      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2238      	movs	r2, #56	; 0x38
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_GetSysClockFreq+0x100>)
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e054      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2238      	movs	r2, #56	; 0x38
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d138      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2203      	movs	r2, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	2207      	movs	r2, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	3301      	adds	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d10d      	bne.n	8002504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	4824      	ldr	r0, [pc, #144]	; (800257c <HAL_RCC_GetSysClockFreq+0x100>)
 80024ec:	f7fd fe0c 	bl	8000108 <__udivsi3>
 80024f0:	0003      	movs	r3, r0
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	227f      	movs	r2, #127	; 0x7f
 80024fc:	4013      	ands	r3, r2
 80024fe:	434b      	muls	r3, r1
 8002500:	617b      	str	r3, [r7, #20]
        break;
 8002502:	e00d      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	481c      	ldr	r0, [pc, #112]	; (8002578 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002508:	f7fd fdfe 	bl	8000108 <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	0019      	movs	r1, r3
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	227f      	movs	r2, #127	; 0x7f
 8002518:	4013      	ands	r3, r2
 800251a:	434b      	muls	r3, r1
 800251c:	617b      	str	r3, [r7, #20]
        break;
 800251e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0f5b      	lsrs	r3, r3, #29
 8002526:	2207      	movs	r2, #7
 8002528:	4013      	ands	r3, r2
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6978      	ldr	r0, [r7, #20]
 8002532:	f7fd fde9 	bl	8000108 <__udivsi3>
 8002536:	0003      	movs	r3, r0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e015      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2238      	movs	r2, #56	; 0x38
 8002542:	4013      	ands	r3, r2
 8002544:	2b20      	cmp	r3, #32
 8002546:	d103      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2238      	movs	r2, #56	; 0x38
 8002556:	4013      	ands	r3, r2
 8002558:	2b18      	cmp	r3, #24
 800255a:	d103      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800255c:	23fa      	movs	r3, #250	; 0xfa
 800255e:	01db      	lsls	r3, r3, #7
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e001      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002568:	693b      	ldr	r3, [r7, #16]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b006      	add	sp, #24
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40021000 	.word	0x40021000
 8002578:	00f42400 	.word	0x00f42400
 800257c:	007a1200 	.word	0x007a1200

08002580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	0004      	movs	r4, r0
 800259e:	f7ff faf9 	bl	8001b94 <LL_RCC_GetAPB1Prescaler>
 80025a2:	0003      	movs	r3, r0
 80025a4:	0b1a      	lsrs	r2, r3, #12
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	58d3      	ldr	r3, [r2, r3]
 80025ac:	221f      	movs	r2, #31
 80025ae:	4013      	ands	r3, r2
 80025b0:	40dc      	lsrs	r4, r3
 80025b2:	0023      	movs	r3, r4
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	0800669c 	.word	0x0800669c

080025c0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_RCC_GetClockConfig+0x4c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2207      	movs	r2, #7
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_GetClockConfig+0x4c>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	23f0      	movs	r3, #240	; 0xf0
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	401a      	ands	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_RCC_GetClockConfig+0x4c>)
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	23e0      	movs	r3, #224	; 0xe0
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	401a      	ands	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetClockConfig+0x50>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2207      	movs	r2, #7
 80025fe:	401a      	ands	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	40022000 	.word	0x40022000

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800261c:	2313      	movs	r3, #19
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002624:	2312      	movs	r3, #18
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	4013      	ands	r3, r2
 8002636:	d100      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002638:	e0ad      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2011      	movs	r0, #17
 800263c:	183b      	adds	r3, r7, r0
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	055b      	lsls	r3, r3, #21
 800264a:	4013      	ands	r3, r2
 800264c:	d110      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002652:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0549      	lsls	r1, r1, #21
 8002658:	430a      	orrs	r2, r1
 800265a:	63da      	str	r2, [r3, #60]	; 0x3c
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800265e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	055b      	lsls	r3, r3, #21
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	183b      	adds	r3, r7, r0
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	0049      	lsls	r1, r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267e:	f7fe fb89 	bl	8000d94 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002686:	e00b      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7fe fb84 	bl	8000d94 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d904      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002696:	2313      	movs	r3, #19
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2203      	movs	r2, #3
 800269c:	701a      	strb	r2, [r3, #0]
        break;
 800269e:	e005      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d0ed      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026ac:	2313      	movs	r3, #19
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d15e      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ba:	23c0      	movs	r3, #192	; 0xc0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d019      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d014      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80026d8:	4013      	ands	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0249      	lsls	r1, r1, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026f0:	491e      	ldr	r1, [pc, #120]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d016      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fb46 	bl	8000d94 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270c:	e00c      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fb41 	bl	8000d94 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d904      	bls.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800271e:	2313      	movs	r3, #19
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2203      	movs	r2, #3
 8002724:	701a      	strb	r2, [r3, #0]
            break;
 8002726:	e004      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d0ed      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002732:	2313      	movs	r3, #19
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800274c:	430a      	orrs	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002750:	e016      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002752:	2312      	movs	r3, #18
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2213      	movs	r2, #19
 8002758:	18ba      	adds	r2, r7, r2
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e00f      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	fffffcff 	.word	0xfffffcff
 800276c:	fffeffff 	.word	0xfffeffff
 8002770:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	2312      	movs	r3, #18
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2213      	movs	r2, #19
 800277a:	18ba      	adds	r2, r7, r2
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002780:	2311      	movs	r3, #17
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4bb6      	ldr	r3, [pc, #728]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800278c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278e:	4bb5      	ldr	r3, [pc, #724]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002790:	49b5      	ldr	r1, [pc, #724]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002792:	400a      	ands	r2, r1
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a0:	4bb0      	ldr	r3, [pc, #704]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2203      	movs	r2, #3
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4bad      	ldr	r3, [pc, #692]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027be:	4ba9      	ldr	r3, [pc, #676]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	220c      	movs	r2, #12
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4ba5      	ldr	r3, [pc, #660]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027dc:	4ba1      	ldr	r3, [pc, #644]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	2230      	movs	r2, #48	; 0x30
 80027e2:	4393      	bics	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	4013      	ands	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027fa:	4b9a      	ldr	r3, [pc, #616]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4b96      	ldr	r3, [pc, #600]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800280a:	430a      	orrs	r2, r1
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	4013      	ands	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800281a:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	4a94      	ldr	r2, [pc, #592]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b8e      	ldr	r3, [pc, #568]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800282a:	430a      	orrs	r2, r1
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283a:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	4a8d      	ldr	r2, [pc, #564]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002840:	4013      	ands	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002848:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800284a:	430a      	orrs	r2, r1
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4013      	ands	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	4a86      	ldr	r2, [pc, #536]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800286a:	430a      	orrs	r2, r1
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	4013      	ands	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002878:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	4a7f      	ldr	r2, [pc, #508]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002888:	430a      	orrs	r2, r1
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	4013      	ands	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	4a79      	ldr	r2, [pc, #484]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	01db      	lsls	r3, r3, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	d015      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b6:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	0899      	lsrs	r1, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c2:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028d4:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	0249      	lsls	r1, r1, #9
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	031b      	lsls	r3, r3, #12
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	039b      	lsls	r3, r3, #14
 800290a:	4013      	ands	r3, r2
 800290c:	d016      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800290e:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291c:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800291e:	430a      	orrs	r2, r1
 8002920:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	03db      	lsls	r3, r3, #15
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800292e:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0449      	lsls	r1, r1, #17
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	03db      	lsls	r3, r3, #15
 8002944:	4013      	ands	r3, r2
 8002946:	d016      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002958:	430a      	orrs	r2, r1
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	045b      	lsls	r3, r3, #17
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002968:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0449      	lsls	r1, r1, #17
 8002972:	430a      	orrs	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4013      	ands	r3, r2
 8002980:	d014      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	2203      	movs	r2, #3
 8002988:	4393      	bics	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002992:	430a      	orrs	r2, r1
 8002994:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800299e:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	0249      	lsls	r1, r1, #9
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	019b      	lsls	r3, r3, #6
 80029b4:	4013      	ands	r3, r2
 80029b6:	d014      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	220c      	movs	r2, #12
 80029be:	4393      	bics	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c8:	430a      	orrs	r2, r1
 80029ca:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d106      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0249      	lsls	r1, r1, #9
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	045b      	lsls	r3, r3, #17
 80029ea:	4013      	ands	r3, r2
 80029ec:	d016      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a14:	2180      	movs	r1, #128	; 0x80
 8002a16:	0449      	lsls	r1, r1, #17
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	049b      	lsls	r3, r3, #18
 8002a24:	4013      	ands	r3, r2
 8002a26:	d016      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d106      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0449      	lsls	r1, r1, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a56:	2312      	movs	r3, #18
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b006      	add	sp, #24
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	efffffff 	.word	0xefffffff
 8002a6c:	fffff3ff 	.word	0xfffff3ff
 8002a70:	fffffcff 	.word	0xfffffcff
 8002a74:	fff3ffff 	.word	0xfff3ffff
 8002a78:	ffcfffff 	.word	0xffcfffff
 8002a7c:	ffffcfff 	.word	0xffffcfff
 8002a80:	ffff3fff 	.word	0xffff3fff
 8002a84:	ffbfffff 	.word	0xffbfffff
 8002a88:	feffffff 	.word	0xfeffffff

08002a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e04a      	b.n	8002b34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223d      	movs	r2, #61	; 0x3d
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d107      	bne.n	8002aba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223c      	movs	r2, #60	; 0x3c
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f841 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223d      	movs	r2, #61	; 0x3d
 8002abe:	2102      	movs	r1, #2
 8002ac0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	0019      	movs	r1, r3
 8002acc:	0010      	movs	r0, r2
 8002ace:	f000 f9c7 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2248      	movs	r2, #72	; 0x48
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223e      	movs	r2, #62	; 0x3e
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223f      	movs	r2, #63	; 0x3f
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2241      	movs	r2, #65	; 0x41
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2242      	movs	r2, #66	; 0x42
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2243      	movs	r2, #67	; 0x43
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2244      	movs	r2, #68	; 0x44
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2245      	movs	r2, #69	; 0x45
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2246      	movs	r2, #70	; 0x46
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2247      	movs	r2, #71	; 0x47
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	223d      	movs	r2, #61	; 0x3d
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	223d      	movs	r2, #61	; 0x3d
 8002b58:	5c9b      	ldrb	r3, [r3, r2]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d001      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e047      	b.n	8002bf4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223d      	movs	r2, #61	; 0x3d
 8002b68:	2102      	movs	r1, #2
 8002b6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <HAL_TIM_Base_Start_IT+0xb0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d014      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x64>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x64>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x64>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x64>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_TIM_Base_Start_IT+0xbc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d116      	bne.n	8002bde <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <HAL_TIM_Base_Start_IT+0xc0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d016      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0xa4>
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	025b      	lsls	r3, r3, #9
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d011      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	e008      	b.n	8002bf0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e000      	b.n	8002bf2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b004      	add	sp, #16
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	00010007 	.word	0x00010007

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d021      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d01d      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	4252      	negs	r2, r2
 8002c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	4013      	ands	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f8ea 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f8dd 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f8e9 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d022      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d01e      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	4252      	negs	r2, r2
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f8c3 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002caa:	e007      	b.n	8002cbc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f8b6 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f8c2 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d021      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d01d      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2209      	movs	r2, #9
 8002cd8:	4252      	negs	r2, r2
 8002cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4013      	ands	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f89d 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002cf6:	e007      	b.n	8002d08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f890 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f89c 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2210      	movs	r2, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d022      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d01e      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2211      	movs	r2, #17
 8002d24:	4252      	negs	r2, r2
 8002d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	23c0      	movs	r3, #192	; 0xc0
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f876 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e007      	b.n	8002d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f869 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f875 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d00c      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d008      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4252      	negs	r2, r2
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7fd fe2b 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	4013      	ands	r3, r2
 8002d84:	d104      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d8e:	d00b      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	4013      	ands	r3, r2
 8002d96:	d007      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_TIM_IRQHandler+0x208>)
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f8fc 	bl	8002fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00b      	beq.n	8002dca <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	4013      	ands	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_TIM_IRQHandler+0x20c>)
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f8f3 	bl	8002fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d00c      	beq.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d008      	beq.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2241      	movs	r2, #65	; 0x41
 8002de0:	4252      	negs	r2, r2
 8002de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f832 	bl	8002e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2220      	movs	r2, #32
 8002df0:	4013      	ands	r3, r2
 8002df2:	d00c      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d008      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2221      	movs	r2, #33	; 0x21
 8002e02:	4252      	negs	r2, r2
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f8c1 	bl	8002f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	ffffdf7f 	.word	0xffffdf7f
 8002e1c:	fffffeff 	.word	0xfffffeff

08002e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3f      	ldr	r2, [pc, #252]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00c      	beq.n	8002e92 <TIM_Base_SetConfig+0x32>
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	05db      	lsls	r3, r3, #23
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0x32>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x32>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2270      	movs	r2, #112	; 0x70
 8002e96:	4393      	bics	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d01c      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <TIM_Base_SetConfig+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x86>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0x128>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <TIM_Base_SetConfig+0x12c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	4393      	bics	r3, r2
 8002efe:	001a      	movs	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0xde>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0xde>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0xde>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <TIM_Base_SetConfig+0x128>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d103      	bne.n	8002f46 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4393      	bics	r3, r2
 8002f60:	001a      	movs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]
  }
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40002000 	.word	0x40002000
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	fffffcff 	.word	0xfffffcff

08002f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e046      	b.n	8003060 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2288      	movs	r2, #136	; 0x88
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2284      	movs	r2, #132	; 0x84
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd fd7a 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2288      	movs	r2, #136	; 0x88
 8002ff0:	2124      	movs	r1, #36	; 0x24
 8002ff2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	438a      	bics	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 fb82 	bl	8003718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f828 	bl	800306c <UART_SetConfig>
 800301c:	0003      	movs	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e01c      	b.n	8003060 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	490d      	ldr	r1, [pc, #52]	; (8003068 <HAL_UART_Init+0xa8>)
 8003032:	400a      	ands	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	212a      	movs	r1, #42	; 0x2a
 8003042:	438a      	bics	r2, r1
 8003044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fc11 	bl	8003880 <UART_CheckIdleState>
 800305e:	0003      	movs	r3, r0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}
 8003068:	ffffb7ff 	.word	0xffffb7ff

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b090      	sub	sp, #64	; 0x40
 8003070:	af00      	add	r7, sp, #0
 8003072:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003074:	231a      	movs	r3, #26
 8003076:	2220      	movs	r2, #32
 8003078:	189b      	adds	r3, r3, r2
 800307a:	19db      	adds	r3, r3, r7
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	431a      	orrs	r2, r3
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	431a      	orrs	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4313      	orrs	r3, r2
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4ac1      	ldr	r2, [pc, #772]	; (80033a4 <UART_SetConfig+0x338>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030aa:	430b      	orrs	r3, r1
 80030ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4abc      	ldr	r2, [pc, #752]	; (80033a8 <UART_SetConfig+0x33c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	68d9      	ldr	r1, [r3, #12]
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	0003      	movs	r3, r0
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4ab6      	ldr	r2, [pc, #728]	; (80033ac <UART_SetConfig+0x340>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <UART_SetConfig+0x80>
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4ab4      	ldr	r2, [pc, #720]	; (80033b0 <UART_SetConfig+0x344>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e8:	4313      	orrs	r3, r2
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4ab0      	ldr	r2, [pc, #704]	; (80033b4 <UART_SetConfig+0x348>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	430b      	orrs	r3, r1
 8003100:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	220f      	movs	r2, #15
 800310a:	4393      	bics	r3, r2
 800310c:	0018      	movs	r0, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	0003      	movs	r3, r0
 8003118:	430b      	orrs	r3, r1
 800311a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4aa5      	ldr	r2, [pc, #660]	; (80033b8 <UART_SetConfig+0x34c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d131      	bne.n	800318a <UART_SetConfig+0x11e>
 8003126:	4ba5      	ldr	r3, [pc, #660]	; (80033bc <UART_SetConfig+0x350>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	2203      	movs	r2, #3
 800312c:	4013      	ands	r3, r2
 800312e:	2b03      	cmp	r3, #3
 8003130:	d01d      	beq.n	800316e <UART_SetConfig+0x102>
 8003132:	d823      	bhi.n	800317c <UART_SetConfig+0x110>
 8003134:	2b02      	cmp	r3, #2
 8003136:	d00c      	beq.n	8003152 <UART_SetConfig+0xe6>
 8003138:	d820      	bhi.n	800317c <UART_SetConfig+0x110>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <UART_SetConfig+0xd8>
 800313e:	2b01      	cmp	r3, #1
 8003140:	d00e      	beq.n	8003160 <UART_SetConfig+0xf4>
 8003142:	e01b      	b.n	800317c <UART_SetConfig+0x110>
 8003144:	231b      	movs	r3, #27
 8003146:	2220      	movs	r2, #32
 8003148:	189b      	adds	r3, r3, r2
 800314a:	19db      	adds	r3, r3, r7
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e154      	b.n	80033fc <UART_SetConfig+0x390>
 8003152:	231b      	movs	r3, #27
 8003154:	2220      	movs	r2, #32
 8003156:	189b      	adds	r3, r3, r2
 8003158:	19db      	adds	r3, r3, r7
 800315a:	2202      	movs	r2, #2
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e14d      	b.n	80033fc <UART_SetConfig+0x390>
 8003160:	231b      	movs	r3, #27
 8003162:	2220      	movs	r2, #32
 8003164:	189b      	adds	r3, r3, r2
 8003166:	19db      	adds	r3, r3, r7
 8003168:	2204      	movs	r2, #4
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e146      	b.n	80033fc <UART_SetConfig+0x390>
 800316e:	231b      	movs	r3, #27
 8003170:	2220      	movs	r2, #32
 8003172:	189b      	adds	r3, r3, r2
 8003174:	19db      	adds	r3, r3, r7
 8003176:	2208      	movs	r2, #8
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e13f      	b.n	80033fc <UART_SetConfig+0x390>
 800317c:	231b      	movs	r3, #27
 800317e:	2220      	movs	r2, #32
 8003180:	189b      	adds	r3, r3, r2
 8003182:	19db      	adds	r3, r3, r7
 8003184:	2210      	movs	r2, #16
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e138      	b.n	80033fc <UART_SetConfig+0x390>
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a8c      	ldr	r2, [pc, #560]	; (80033c0 <UART_SetConfig+0x354>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d131      	bne.n	80031f8 <UART_SetConfig+0x18c>
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <UART_SetConfig+0x350>)
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	220c      	movs	r2, #12
 800319a:	4013      	ands	r3, r2
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d01d      	beq.n	80031dc <UART_SetConfig+0x170>
 80031a0:	d823      	bhi.n	80031ea <UART_SetConfig+0x17e>
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d00c      	beq.n	80031c0 <UART_SetConfig+0x154>
 80031a6:	d820      	bhi.n	80031ea <UART_SetConfig+0x17e>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <UART_SetConfig+0x146>
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d00e      	beq.n	80031ce <UART_SetConfig+0x162>
 80031b0:	e01b      	b.n	80031ea <UART_SetConfig+0x17e>
 80031b2:	231b      	movs	r3, #27
 80031b4:	2220      	movs	r2, #32
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e11d      	b.n	80033fc <UART_SetConfig+0x390>
 80031c0:	231b      	movs	r3, #27
 80031c2:	2220      	movs	r2, #32
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	19db      	adds	r3, r3, r7
 80031c8:	2202      	movs	r2, #2
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e116      	b.n	80033fc <UART_SetConfig+0x390>
 80031ce:	231b      	movs	r3, #27
 80031d0:	2220      	movs	r2, #32
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	19db      	adds	r3, r3, r7
 80031d6:	2204      	movs	r2, #4
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e10f      	b.n	80033fc <UART_SetConfig+0x390>
 80031dc:	231b      	movs	r3, #27
 80031de:	2220      	movs	r2, #32
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	2208      	movs	r2, #8
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	e108      	b.n	80033fc <UART_SetConfig+0x390>
 80031ea:	231b      	movs	r3, #27
 80031ec:	2220      	movs	r2, #32
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	19db      	adds	r3, r3, r7
 80031f2:	2210      	movs	r2, #16
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e101      	b.n	80033fc <UART_SetConfig+0x390>
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a71      	ldr	r2, [pc, #452]	; (80033c4 <UART_SetConfig+0x358>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d131      	bne.n	8003266 <UART_SetConfig+0x1fa>
 8003202:	4b6e      	ldr	r3, [pc, #440]	; (80033bc <UART_SetConfig+0x350>)
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	2230      	movs	r2, #48	; 0x30
 8003208:	4013      	ands	r3, r2
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d01d      	beq.n	800324a <UART_SetConfig+0x1de>
 800320e:	d823      	bhi.n	8003258 <UART_SetConfig+0x1ec>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d00c      	beq.n	800322e <UART_SetConfig+0x1c2>
 8003214:	d820      	bhi.n	8003258 <UART_SetConfig+0x1ec>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <UART_SetConfig+0x1b4>
 800321a:	2b10      	cmp	r3, #16
 800321c:	d00e      	beq.n	800323c <UART_SetConfig+0x1d0>
 800321e:	e01b      	b.n	8003258 <UART_SetConfig+0x1ec>
 8003220:	231b      	movs	r3, #27
 8003222:	2220      	movs	r2, #32
 8003224:	189b      	adds	r3, r3, r2
 8003226:	19db      	adds	r3, r3, r7
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e0e6      	b.n	80033fc <UART_SetConfig+0x390>
 800322e:	231b      	movs	r3, #27
 8003230:	2220      	movs	r2, #32
 8003232:	189b      	adds	r3, r3, r2
 8003234:	19db      	adds	r3, r3, r7
 8003236:	2202      	movs	r2, #2
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e0df      	b.n	80033fc <UART_SetConfig+0x390>
 800323c:	231b      	movs	r3, #27
 800323e:	2220      	movs	r2, #32
 8003240:	189b      	adds	r3, r3, r2
 8003242:	19db      	adds	r3, r3, r7
 8003244:	2204      	movs	r2, #4
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e0d8      	b.n	80033fc <UART_SetConfig+0x390>
 800324a:	231b      	movs	r3, #27
 800324c:	2220      	movs	r2, #32
 800324e:	189b      	adds	r3, r3, r2
 8003250:	19db      	adds	r3, r3, r7
 8003252:	2208      	movs	r2, #8
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e0d1      	b.n	80033fc <UART_SetConfig+0x390>
 8003258:	231b      	movs	r3, #27
 800325a:	2220      	movs	r2, #32
 800325c:	189b      	adds	r3, r3, r2
 800325e:	19db      	adds	r3, r3, r7
 8003260:	2210      	movs	r2, #16
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e0ca      	b.n	80033fc <UART_SetConfig+0x390>
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <UART_SetConfig+0x35c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d106      	bne.n	800327e <UART_SetConfig+0x212>
 8003270:	231b      	movs	r3, #27
 8003272:	2220      	movs	r2, #32
 8003274:	189b      	adds	r3, r3, r2
 8003276:	19db      	adds	r3, r3, r7
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e0be      	b.n	80033fc <UART_SetConfig+0x390>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a52      	ldr	r2, [pc, #328]	; (80033cc <UART_SetConfig+0x360>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d106      	bne.n	8003296 <UART_SetConfig+0x22a>
 8003288:	231b      	movs	r3, #27
 800328a:	2220      	movs	r2, #32
 800328c:	189b      	adds	r3, r3, r2
 800328e:	19db      	adds	r3, r3, r7
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e0b2      	b.n	80033fc <UART_SetConfig+0x390>
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <UART_SetConfig+0x364>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d106      	bne.n	80032ae <UART_SetConfig+0x242>
 80032a0:	231b      	movs	r3, #27
 80032a2:	2220      	movs	r2, #32
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	19db      	adds	r3, r3, r7
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e0a6      	b.n	80033fc <UART_SetConfig+0x390>
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3e      	ldr	r2, [pc, #248]	; (80033ac <UART_SetConfig+0x340>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d13e      	bne.n	8003336 <UART_SetConfig+0x2ca>
 80032b8:	4b40      	ldr	r3, [pc, #256]	; (80033bc <UART_SetConfig+0x350>)
 80032ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	22c0      	movs	r2, #192	; 0xc0
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <UART_SetConfig+0x2ae>
 80032ca:	22c0      	movs	r2, #192	; 0xc0
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d82a      	bhi.n	8003328 <UART_SetConfig+0x2bc>
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d011      	beq.n	80032fe <UART_SetConfig+0x292>
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	4293      	cmp	r3, r2
 80032e0:	d822      	bhi.n	8003328 <UART_SetConfig+0x2bc>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <UART_SetConfig+0x284>
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	00d2      	lsls	r2, r2, #3
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <UART_SetConfig+0x2a0>
 80032ee:	e01b      	b.n	8003328 <UART_SetConfig+0x2bc>
 80032f0:	231b      	movs	r3, #27
 80032f2:	2220      	movs	r2, #32
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e07e      	b.n	80033fc <UART_SetConfig+0x390>
 80032fe:	231b      	movs	r3, #27
 8003300:	2220      	movs	r2, #32
 8003302:	189b      	adds	r3, r3, r2
 8003304:	19db      	adds	r3, r3, r7
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e077      	b.n	80033fc <UART_SetConfig+0x390>
 800330c:	231b      	movs	r3, #27
 800330e:	2220      	movs	r2, #32
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2204      	movs	r2, #4
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e070      	b.n	80033fc <UART_SetConfig+0x390>
 800331a:	231b      	movs	r3, #27
 800331c:	2220      	movs	r2, #32
 800331e:	189b      	adds	r3, r3, r2
 8003320:	19db      	adds	r3, r3, r7
 8003322:	2208      	movs	r2, #8
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e069      	b.n	80033fc <UART_SetConfig+0x390>
 8003328:	231b      	movs	r3, #27
 800332a:	2220      	movs	r2, #32
 800332c:	189b      	adds	r3, r3, r2
 800332e:	19db      	adds	r3, r3, r7
 8003330:	2210      	movs	r2, #16
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e062      	b.n	80033fc <UART_SetConfig+0x390>
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <UART_SetConfig+0x344>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d157      	bne.n	80033f0 <UART_SetConfig+0x384>
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <UART_SetConfig+0x350>)
 8003342:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003344:	23c0      	movs	r3, #192	; 0xc0
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4013      	ands	r3, r2
 800334a:	22c0      	movs	r2, #192	; 0xc0
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	4293      	cmp	r3, r2
 8003350:	d040      	beq.n	80033d4 <UART_SetConfig+0x368>
 8003352:	22c0      	movs	r2, #192	; 0xc0
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	4293      	cmp	r3, r2
 8003358:	d843      	bhi.n	80033e2 <UART_SetConfig+0x376>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0092      	lsls	r2, r2, #2
 800335e:	4293      	cmp	r3, r2
 8003360:	d011      	beq.n	8003386 <UART_SetConfig+0x31a>
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	4293      	cmp	r3, r2
 8003368:	d83b      	bhi.n	80033e2 <UART_SetConfig+0x376>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <UART_SetConfig+0x30c>
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	0052      	lsls	r2, r2, #1
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <UART_SetConfig+0x328>
 8003376:	e034      	b.n	80033e2 <UART_SetConfig+0x376>
 8003378:	231b      	movs	r3, #27
 800337a:	2220      	movs	r2, #32
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e03a      	b.n	80033fc <UART_SetConfig+0x390>
 8003386:	231b      	movs	r3, #27
 8003388:	2220      	movs	r2, #32
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e033      	b.n	80033fc <UART_SetConfig+0x390>
 8003394:	231b      	movs	r3, #27
 8003396:	2220      	movs	r2, #32
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	2204      	movs	r2, #4
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e02c      	b.n	80033fc <UART_SetConfig+0x390>
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	cfff69f3 	.word	0xcfff69f3
 80033a8:	ffffcfff 	.word	0xffffcfff
 80033ac:	40008000 	.word	0x40008000
 80033b0:	40008400 	.word	0x40008400
 80033b4:	11fff4ff 	.word	0x11fff4ff
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	40004c00 	.word	0x40004c00
 80033cc:	40005000 	.word	0x40005000
 80033d0:	40013c00 	.word	0x40013c00
 80033d4:	231b      	movs	r3, #27
 80033d6:	2220      	movs	r2, #32
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	2208      	movs	r2, #8
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e00c      	b.n	80033fc <UART_SetConfig+0x390>
 80033e2:	231b      	movs	r3, #27
 80033e4:	2220      	movs	r2, #32
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	19db      	adds	r3, r3, r7
 80033ea:	2210      	movs	r2, #16
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e005      	b.n	80033fc <UART_SetConfig+0x390>
 80033f0:	231b      	movs	r3, #27
 80033f2:	2220      	movs	r2, #32
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	19db      	adds	r3, r3, r7
 80033f8:	2210      	movs	r2, #16
 80033fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4ac1      	ldr	r2, [pc, #772]	; (8003708 <UART_SetConfig+0x69c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d005      	beq.n	8003412 <UART_SetConfig+0x3a6>
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4ac0      	ldr	r2, [pc, #768]	; (800370c <UART_SetConfig+0x6a0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d000      	beq.n	8003412 <UART_SetConfig+0x3a6>
 8003410:	e093      	b.n	800353a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003412:	231b      	movs	r3, #27
 8003414:	2220      	movs	r2, #32
 8003416:	189b      	adds	r3, r3, r2
 8003418:	19db      	adds	r3, r3, r7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d015      	beq.n	800344c <UART_SetConfig+0x3e0>
 8003420:	dc18      	bgt.n	8003454 <UART_SetConfig+0x3e8>
 8003422:	2b04      	cmp	r3, #4
 8003424:	d00d      	beq.n	8003442 <UART_SetConfig+0x3d6>
 8003426:	dc15      	bgt.n	8003454 <UART_SetConfig+0x3e8>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <UART_SetConfig+0x3c6>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d005      	beq.n	800343c <UART_SetConfig+0x3d0>
 8003430:	e010      	b.n	8003454 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003432:	f7ff f8af 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003436:	0003      	movs	r3, r0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800343a:	e014      	b.n	8003466 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800343c:	4bb4      	ldr	r3, [pc, #720]	; (8003710 <UART_SetConfig+0x6a4>)
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003440:	e011      	b.n	8003466 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003442:	f7ff f81b 	bl	800247c <HAL_RCC_GetSysClockFreq>
 8003446:	0003      	movs	r3, r0
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800344a:	e00c      	b.n	8003466 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003452:	e008      	b.n	8003466 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003458:	231a      	movs	r3, #26
 800345a:	2220      	movs	r2, #32
 800345c:	189b      	adds	r3, r3, r2
 800345e:	19db      	adds	r3, r3, r7
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
        break;
 8003464:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d100      	bne.n	800346e <UART_SetConfig+0x402>
 800346c:	e135      	b.n	80036da <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003472:	4ba8      	ldr	r3, [pc, #672]	; (8003714 <UART_SetConfig+0x6a8>)
 8003474:	0052      	lsls	r2, r2, #1
 8003476:	5ad3      	ldrh	r3, [r2, r3]
 8003478:	0019      	movs	r1, r3
 800347a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800347c:	f7fc fe44 	bl	8000108 <__udivsi3>
 8003480:	0003      	movs	r3, r0
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	0013      	movs	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003490:	429a      	cmp	r2, r3
 8003492:	d305      	bcc.n	80034a0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800349a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800349c:	429a      	cmp	r2, r3
 800349e:	d906      	bls.n	80034ae <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80034a0:	231a      	movs	r3, #26
 80034a2:	2220      	movs	r2, #32
 80034a4:	189b      	adds	r3, r3, r2
 80034a6:	19db      	adds	r3, r3, r7
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	e044      	b.n	8003538 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ba:	4b96      	ldr	r3, [pc, #600]	; (8003714 <UART_SetConfig+0x6a8>)
 80034bc:	0052      	lsls	r2, r2, #1
 80034be:	5ad3      	ldrh	r3, [r2, r3]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	69b8      	ldr	r0, [r7, #24]
 80034cc:	69f9      	ldr	r1, [r7, #28]
 80034ce:	f7fc ff91 	bl	80003f4 <__aeabi_uldivmod>
 80034d2:	0002      	movs	r2, r0
 80034d4:	000b      	movs	r3, r1
 80034d6:	0e11      	lsrs	r1, r2, #24
 80034d8:	021d      	lsls	r5, r3, #8
 80034da:	430d      	orrs	r5, r1
 80034dc:	0214      	lsls	r4, r2, #8
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	1900      	adds	r0, r0, r4
 80034f0:	4169      	adcs	r1, r5
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f7fc ff78 	bl	80003f4 <__aeabi_uldivmod>
 8003504:	0002      	movs	r2, r0
 8003506:	000b      	movs	r3, r1
 8003508:	0013      	movs	r3, r2
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800350c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350e:	23c0      	movs	r3, #192	; 0xc0
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	429a      	cmp	r2, r3
 8003514:	d309      	bcc.n	800352a <UART_SetConfig+0x4be>
 8003516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	035b      	lsls	r3, r3, #13
 800351c:	429a      	cmp	r2, r3
 800351e:	d204      	bcs.n	800352a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e006      	b.n	8003538 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800352a:	231a      	movs	r3, #26
 800352c:	2220      	movs	r2, #32
 800352e:	189b      	adds	r3, r3, r2
 8003530:	19db      	adds	r3, r3, r7
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003536:	e0d0      	b.n	80036da <UART_SetConfig+0x66e>
 8003538:	e0cf      	b.n	80036da <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	429a      	cmp	r2, r3
 8003544:	d000      	beq.n	8003548 <UART_SetConfig+0x4dc>
 8003546:	e070      	b.n	800362a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003548:	231b      	movs	r3, #27
 800354a:	2220      	movs	r2, #32
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d015      	beq.n	8003582 <UART_SetConfig+0x516>
 8003556:	dc18      	bgt.n	800358a <UART_SetConfig+0x51e>
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00d      	beq.n	8003578 <UART_SetConfig+0x50c>
 800355c:	dc15      	bgt.n	800358a <UART_SetConfig+0x51e>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <UART_SetConfig+0x4fc>
 8003562:	2b02      	cmp	r3, #2
 8003564:	d005      	beq.n	8003572 <UART_SetConfig+0x506>
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff f814 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 800356c:	0003      	movs	r3, r0
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003570:	e014      	b.n	800359c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003572:	4b67      	ldr	r3, [pc, #412]	; (8003710 <UART_SetConfig+0x6a4>)
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003576:	e011      	b.n	800359c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003578:	f7fe ff80 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800357c:	0003      	movs	r3, r0
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003580:	e00c      	b.n	800359c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003588:	e008      	b.n	800359c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800358e:	231a      	movs	r3, #26
 8003590:	2220      	movs	r2, #32
 8003592:	189b      	adds	r3, r3, r2
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
        break;
 800359a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <UART_SetConfig+0x538>
 80035a2:	e09a      	b.n	80036da <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <UART_SetConfig+0x6a8>)
 80035aa:	0052      	lsls	r2, r2, #1
 80035ac:	5ad3      	ldrh	r3, [r2, r3]
 80035ae:	0019      	movs	r1, r3
 80035b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035b2:	f7fc fda9 	bl	8000108 <__udivsi3>
 80035b6:	0003      	movs	r3, r0
 80035b8:	005a      	lsls	r2, r3, #1
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0019      	movs	r1, r3
 80035c8:	0010      	movs	r0, r2
 80035ca:	f7fc fd9d 	bl	8000108 <__udivsi3>
 80035ce:	0003      	movs	r3, r0
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d921      	bls.n	800361c <UART_SetConfig+0x5b0>
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	429a      	cmp	r2, r3
 80035e0:	d21c      	bcs.n	800361c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	200e      	movs	r0, #14
 80035e8:	2420      	movs	r4, #32
 80035ea:	1903      	adds	r3, r0, r4
 80035ec:	19db      	adds	r3, r3, r7
 80035ee:	210f      	movs	r1, #15
 80035f0:	438a      	bics	r2, r1
 80035f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2207      	movs	r2, #7
 80035fc:	4013      	ands	r3, r2
 80035fe:	b299      	uxth	r1, r3
 8003600:	1903      	adds	r3, r0, r4
 8003602:	19db      	adds	r3, r3, r7
 8003604:	1902      	adds	r2, r0, r4
 8003606:	19d2      	adds	r2, r2, r7
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1902      	adds	r2, r0, r4
 8003614:	19d2      	adds	r2, r2, r7
 8003616:	8812      	ldrh	r2, [r2, #0]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	e05e      	b.n	80036da <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800361c:	231a      	movs	r3, #26
 800361e:	2220      	movs	r2, #32
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e057      	b.n	80036da <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800362a:	231b      	movs	r3, #27
 800362c:	2220      	movs	r2, #32
 800362e:	189b      	adds	r3, r3, r2
 8003630:	19db      	adds	r3, r3, r7
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d015      	beq.n	8003664 <UART_SetConfig+0x5f8>
 8003638:	dc18      	bgt.n	800366c <UART_SetConfig+0x600>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d00d      	beq.n	800365a <UART_SetConfig+0x5ee>
 800363e:	dc15      	bgt.n	800366c <UART_SetConfig+0x600>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <UART_SetConfig+0x5de>
 8003644:	2b02      	cmp	r3, #2
 8003646:	d005      	beq.n	8003654 <UART_SetConfig+0x5e8>
 8003648:	e010      	b.n	800366c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364a:	f7fe ffa3 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 800364e:	0003      	movs	r3, r0
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003652:	e014      	b.n	800367e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <UART_SetConfig+0x6a4>)
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003658:	e011      	b.n	800367e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7fe ff0f 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800365e:	0003      	movs	r3, r0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003662:	e00c      	b.n	800367e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800366a:	e008      	b.n	800367e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003670:	231a      	movs	r3, #26
 8003672:	2220      	movs	r2, #32
 8003674:	189b      	adds	r3, r3, r2
 8003676:	19db      	adds	r3, r3, r7
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
        break;
 800367c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02a      	beq.n	80036da <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <UART_SetConfig+0x6a8>)
 800368a:	0052      	lsls	r2, r2, #1
 800368c:	5ad3      	ldrh	r3, [r2, r3]
 800368e:	0019      	movs	r1, r3
 8003690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003692:	f7fc fd39 	bl	8000108 <__udivsi3>
 8003696:	0003      	movs	r3, r0
 8003698:	001a      	movs	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f7fc fd2d 	bl	8000108 <__udivsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d90a      	bls.n	80036ce <UART_SetConfig+0x662>
 80036b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	429a      	cmp	r2, r3
 80036c0:	d205      	bcs.n	80036ce <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e005      	b.n	80036da <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80036ce:	231a      	movs	r3, #26
 80036d0:	2220      	movs	r2, #32
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	19db      	adds	r3, r3, r7
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	226a      	movs	r2, #106	; 0x6a
 80036de:	2101      	movs	r1, #1
 80036e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	2268      	movs	r2, #104	; 0x68
 80036e6:	2101      	movs	r1, #1
 80036e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	2200      	movs	r2, #0
 80036ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	2200      	movs	r2, #0
 80036f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80036f6:	231a      	movs	r3, #26
 80036f8:	2220      	movs	r2, #32
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	19db      	adds	r3, r3, r7
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b010      	add	sp, #64	; 0x40
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	40008000 	.word	0x40008000
 800370c:	40008400 	.word	0x40008400
 8003710:	00f42400 	.word	0x00f42400
 8003714:	080066bc 	.word	0x080066bc

08003718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2208      	movs	r2, #8
 8003726:	4013      	ands	r3, r2
 8003728:	d00b      	beq.n	8003742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a4a      	ldr	r2, [pc, #296]	; (800385c <UART_AdvFeatureConfig+0x144>)
 8003732:	4013      	ands	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d00b      	beq.n	8003764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a43      	ldr	r2, [pc, #268]	; (8003860 <UART_AdvFeatureConfig+0x148>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d00b      	beq.n	8003786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <UART_AdvFeatureConfig+0x14c>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d00b      	beq.n	80037a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a34      	ldr	r2, [pc, #208]	; (8003868 <UART_AdvFeatureConfig+0x150>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	2210      	movs	r2, #16
 80037ae:	4013      	ands	r3, r2
 80037b0:	d00b      	beq.n	80037ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a2c      	ldr	r2, [pc, #176]	; (800386c <UART_AdvFeatureConfig+0x154>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	2220      	movs	r2, #32
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <UART_AdvFeatureConfig+0x158>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	4013      	ands	r3, r2
 80037f4:	d01d      	beq.n	8003832 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <UART_AdvFeatureConfig+0x15c>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	035b      	lsls	r3, r3, #13
 8003816:	429a      	cmp	r2, r3
 8003818:	d10b      	bne.n	8003832 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <UART_AdvFeatureConfig+0x160>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	4013      	ands	r3, r2
 800383a:	d00b      	beq.n	8003854 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a0e      	ldr	r2, [pc, #56]	; (800387c <UART_AdvFeatureConfig+0x164>)
 8003844:	4013      	ands	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}
 800385c:	ffff7fff 	.word	0xffff7fff
 8003860:	fffdffff 	.word	0xfffdffff
 8003864:	fffeffff 	.word	0xfffeffff
 8003868:	fffbffff 	.word	0xfffbffff
 800386c:	ffffefff 	.word	0xffffefff
 8003870:	ffffdfff 	.word	0xffffdfff
 8003874:	ffefffff 	.word	0xffefffff
 8003878:	ff9fffff 	.word	0xff9fffff
 800387c:	fff7ffff 	.word	0xfff7ffff

08003880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b092      	sub	sp, #72	; 0x48
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2290      	movs	r2, #144	; 0x90
 800388c:	2100      	movs	r1, #0
 800388e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003890:	f7fd fa80 	bl	8000d94 <HAL_GetTick>
 8003894:	0003      	movs	r3, r0
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2208      	movs	r2, #8
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d12d      	bne.n	8003902 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	0391      	lsls	r1, r2, #14
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4a47      	ldr	r2, [pc, #284]	; (80039cc <UART_CheckIdleState+0x14c>)
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f000 f88e 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d022      	beq.n	8003902 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c6:	2301      	movs	r3, #1
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	438a      	bics	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2288      	movs	r2, #136	; 0x88
 80038f2:	2120      	movs	r1, #32
 80038f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2284      	movs	r2, #132	; 0x84
 80038fa:	2100      	movs	r1, #0
 80038fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e060      	b.n	80039c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2204      	movs	r2, #4
 800390a:	4013      	ands	r3, r2
 800390c:	2b04      	cmp	r3, #4
 800390e:	d146      	bne.n	800399e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	03d1      	lsls	r1, r2, #15
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <UART_CheckIdleState+0x14c>)
 800391a:	9200      	str	r2, [sp, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	f000 f859 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d03b      	beq.n	800399e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	60fb      	str	r3, [r7, #12]
  return(result);
 800392c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4922      	ldr	r1, [pc, #136]	; (80039d0 <UART_CheckIdleState+0x150>)
 8003948:	400a      	ands	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003958:	f3ef 8310 	mrs	r3, PRIMASK
 800395c:	61bb      	str	r3, [r7, #24]
  return(result);
 800395e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	438a      	bics	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	228c      	movs	r2, #140	; 0x8c
 800398e:	2120      	movs	r1, #32
 8003990:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2284      	movs	r2, #132	; 0x84
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e012      	b.n	80039c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2288      	movs	r2, #136	; 0x88
 80039a2:	2120      	movs	r1, #32
 80039a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	228c      	movs	r2, #140	; 0x8c
 80039aa:	2120      	movs	r1, #32
 80039ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2284      	movs	r2, #132	; 0x84
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b010      	add	sp, #64	; 0x40
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	01ffffff 	.word	0x01ffffff
 80039d0:	fffffedf 	.word	0xfffffedf

080039d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e4:	e051      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	3301      	adds	r3, #1
 80039ea:	d04e      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fd f9d2 	bl	8000d94 <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e051      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d038      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d035      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2208      	movs	r2, #8
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d111      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f83c 	bl	8003ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2290      	movs	r2, #144	; 0x90
 8003a40:	2108      	movs	r1, #8
 8003a42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2284      	movs	r2, #132	; 0x84
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e02c      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d112      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f81f 	bl	8003ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2290      	movs	r2, #144	; 0x90
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2284      	movs	r2, #132	; 0x84
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e00f      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	425a      	negs	r2, r3
 8003a9a:	4153      	adcs	r3, r2
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	1dfb      	adds	r3, r7, #7
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d09e      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ac2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4926      	ldr	r1, [pc, #152]	; (8003b78 <UART_EndRxTransfer+0xc4>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	623b      	str	r3, [r7, #32]
  return(result);
 8003af4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
 8003af8:	2301      	movs	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	491b      	ldr	r1, [pc, #108]	; (8003b7c <UART_EndRxTransfer+0xc8>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d118      	bne.n	8003b5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b28:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	2301      	movs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2110      	movs	r1, #16
 8003b4a:	438a      	bics	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	228c      	movs	r2, #140	; 0x8c
 8003b5e:	2120      	movs	r1, #32
 8003b60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b00e      	add	sp, #56	; 0x38
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	fffffedf 	.word	0xfffffedf
 8003b7c:	effffffe 	.word	0xeffffffe

08003b80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2284      	movs	r2, #132	; 0x84
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e027      	b.n	8003be6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2284      	movs	r2, #132	; 0x84
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2288      	movs	r2, #136	; 0x88
 8003ba2:	2124      	movs	r1, #36	; 0x24
 8003ba4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	438a      	bics	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2288      	movs	r2, #136	; 0x88
 8003bd8:	2120      	movs	r1, #32
 8003bda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2284      	movs	r2, #132	; 0x84
 8003be0:	2100      	movs	r1, #0
 8003be2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	dfffffff 	.word	0xdfffffff

08003bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2284      	movs	r2, #132	; 0x84
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e02e      	b.n	8003c6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2101      	movs	r1, #1
 8003c12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2288      	movs	r2, #136	; 0x88
 8003c18:	2124      	movs	r1, #36	; 0x24
 8003c1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	438a      	bics	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	08d9      	lsrs	r1, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 f854 	bl	8003cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2288      	movs	r2, #136	; 0x88
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2284      	movs	r2, #132	; 0x84
 8003c82:	5c9b      	ldrb	r3, [r3, r2]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e02f      	b.n	8003cec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	; 0x84
 8003c90:	2101      	movs	r1, #1
 8003c92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2288      	movs	r2, #136	; 0x88
 8003c98:	2124      	movs	r1, #36	; 0x24
 8003c9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 f813 	bl	8003cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2288      	movs	r2, #136	; 0x88
 8003cde:	2120      	movs	r1, #32
 8003ce0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2284      	movs	r2, #132	; 0x84
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	f1ffffff 	.word	0xf1ffffff

08003cf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d108      	bne.n	8003d1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	226a      	movs	r2, #106	; 0x6a
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2268      	movs	r2, #104	; 0x68
 8003d14:	2101      	movs	r1, #1
 8003d16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d18:	e043      	b.n	8003da2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d1a:	260f      	movs	r6, #15
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	2208      	movs	r2, #8
 8003d20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d22:	200e      	movs	r0, #14
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	2208      	movs	r2, #8
 8003d28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	0e5b      	lsrs	r3, r3, #25
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	240d      	movs	r4, #13
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	2107      	movs	r1, #7
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	0f5b      	lsrs	r3, r3, #29
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	250c      	movs	r5, #12
 8003d4a:	197b      	adds	r3, r7, r5
 8003d4c:	2107      	movs	r1, #7
 8003d4e:	400a      	ands	r2, r1
 8003d50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d52:	183b      	adds	r3, r7, r0
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	197a      	adds	r2, r7, r5
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	4914      	ldr	r1, [pc, #80]	; (8003dac <UARTEx_SetNbDataToProcess+0xb4>)
 8003d5c:	5c8a      	ldrb	r2, [r1, r2]
 8003d5e:	435a      	muls	r2, r3
 8003d60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d62:	197b      	adds	r3, r7, r5
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	f7fc fa56 	bl	800021c <__divsi3>
 8003d70:	0003      	movs	r3, r0
 8003d72:	b299      	uxth	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	226a      	movs	r2, #106	; 0x6a
 8003d78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d7a:	19bb      	adds	r3, r7, r6
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	193a      	adds	r2, r7, r4
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <UARTEx_SetNbDataToProcess+0xb4>)
 8003d84:	5c8a      	ldrb	r2, [r1, r2]
 8003d86:	435a      	muls	r2, r3
 8003d88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d92:	0019      	movs	r1, r3
 8003d94:	f7fc fa42 	bl	800021c <__divsi3>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	b299      	uxth	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2268      	movs	r2, #104	; 0x68
 8003da0:	5299      	strh	r1, [r3, r2]
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b005      	add	sp, #20
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	080066d4 	.word	0x080066d4
 8003db0:	080066dc 	.word	0x080066dc

08003db4 <__NVIC_SetPriority>:
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	0002      	movs	r2, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc8:	d828      	bhi.n	8003e1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dca:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <__NVIC_SetPriority+0xd4>)
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	33c0      	adds	r3, #192	; 0xc0
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	589b      	ldr	r3, [r3, r2]
 8003dda:	1dfa      	adds	r2, r7, #7
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	0011      	movs	r1, r2
 8003de0:	2203      	movs	r2, #3
 8003de2:	400a      	ands	r2, r1
 8003de4:	00d2      	lsls	r2, r2, #3
 8003de6:	21ff      	movs	r1, #255	; 0xff
 8003de8:	4091      	lsls	r1, r2
 8003dea:	000a      	movs	r2, r1
 8003dec:	43d2      	mvns	r2, r2
 8003dee:	401a      	ands	r2, r3
 8003df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	401a      	ands	r2, r3
 8003dfa:	1dfb      	adds	r3, r7, #7
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	2303      	movs	r3, #3
 8003e02:	4003      	ands	r3, r0
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e08:	481f      	ldr	r0, [pc, #124]	; (8003e88 <__NVIC_SetPriority+0xd4>)
 8003e0a:	1dfb      	adds	r3, r7, #7
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	430a      	orrs	r2, r1
 8003e14:	33c0      	adds	r3, #192	; 0xc0
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	501a      	str	r2, [r3, r0]
}
 8003e1a:	e031      	b.n	8003e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <__NVIC_SetPriority+0xd8>)
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	0019      	movs	r1, r3
 8003e24:	230f      	movs	r3, #15
 8003e26:	400b      	ands	r3, r1
 8003e28:	3b08      	subs	r3, #8
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3306      	adds	r3, #6
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	18d3      	adds	r3, r2, r3
 8003e32:	3304      	adds	r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1dfa      	adds	r2, r7, #7
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	400a      	ands	r2, r1
 8003e40:	00d2      	lsls	r2, r2, #3
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	4091      	lsls	r1, r2
 8003e46:	000a      	movs	r2, r1
 8003e48:	43d2      	mvns	r2, r2
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	401a      	ands	r2, r3
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	4003      	ands	r3, r0
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e64:	4809      	ldr	r0, [pc, #36]	; (8003e8c <__NVIC_SetPriority+0xd8>)
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	001c      	movs	r4, r3
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	4023      	ands	r3, r4
 8003e70:	3b08      	subs	r3, #8
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	430a      	orrs	r2, r1
 8003e76:	3306      	adds	r3, #6
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	18c3      	adds	r3, r0, r3
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b003      	add	sp, #12
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <SysTick_Handler+0x1c>)
 8003e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e98:	f001 fbd4 	bl	8005644 <xTaskGetSchedulerState>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ea2:	f002 f8a1 	bl	8005fe8 <xPortSysTickHandler>
  }
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003eb4:	2305      	movs	r3, #5
 8003eb6:	425b      	negs	r3, r3
 8003eb8:	2100      	movs	r1, #0
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff ff7a 	bl	8003db4 <__NVIC_SetPriority>
#endif
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ece:	f3ef 8305 	mrs	r3, IPSR
 8003ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003eda:	2306      	movs	r3, #6
 8003edc:	425b      	negs	r3, r3
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	e00c      	b.n	8003efc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <osKernelInitialize+0x40>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <osKernelInitialize+0x40>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	e002      	b.n	8003efc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	425b      	negs	r3, r3
 8003efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003efc:	687b      	ldr	r3, [r7, #4]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b002      	add	sp, #8
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	200001e0 	.word	0x200001e0

08003f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f12:	f3ef 8305 	mrs	r3, IPSR
 8003f16:	603b      	str	r3, [r7, #0]
  return(result);
 8003f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f1e:	2306      	movs	r3, #6
 8003f20:	425b      	negs	r3, r3
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	e010      	b.n	8003f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <osKernelStart+0x48>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d109      	bne.n	8003f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f2e:	f7ff ffbf 	bl	8003eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <osKernelStart+0x48>)
 8003f34:	2202      	movs	r2, #2
 8003f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f38:	f000 ff9a 	bl	8004e70 <vTaskStartScheduler>
      stat = osOK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e002      	b.n	8003f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f42:	2301      	movs	r3, #1
 8003f44:	425b      	negs	r3, r3
 8003f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	200001e0 	.word	0x200001e0

08003f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	b08e      	sub	sp, #56	; 0x38
 8003f5c:	af04      	add	r7, sp, #16
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f68:	f3ef 8305 	mrs	r3, IPSR
 8003f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d000      	beq.n	8003f76 <osThreadNew+0x1e>
 8003f74:	e081      	b.n	800407a <osThreadNew+0x122>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d100      	bne.n	8003f7e <osThreadNew+0x26>
 8003f7c:	e07d      	b.n	800407a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f82:	2318      	movs	r3, #24
 8003f84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <osThreadNew+0x4c>
        name = attr->name;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <osThreadNew+0x70>
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b38      	cmp	r3, #56	; 0x38
 8003fbc:	d804      	bhi.n	8003fc8 <osThreadNew+0x70>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d001      	beq.n	8003fcc <osThreadNew+0x74>
        return (NULL);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e057      	b.n	800407c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <osThreadNew+0xaa>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2ba7      	cmp	r3, #167	; 0xa7
 8003fea:	d90a      	bls.n	8004002 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <osThreadNew+0xaa>
        mem = 1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	e010      	b.n	8004024 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <osThreadNew+0xcc>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <osThreadNew+0xcc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <osThreadNew+0xcc>
          mem = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e001      	b.n	8004024 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d112      	bne.n	8004050 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004032:	68bd      	ldr	r5, [r7, #8]
 8004034:	6a3c      	ldr	r4, [r7, #32]
 8004036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	9201      	str	r2, [sp, #4]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	002b      	movs	r3, r5
 8004044:	0022      	movs	r2, r4
 8004046:	f000 fd54 	bl	8004af2 <xTaskCreateStatic>
 800404a:	0003      	movs	r3, r0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e014      	b.n	800407a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d111      	bne.n	800407a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	b29a      	uxth	r2, r3
 800405a:	68bc      	ldr	r4, [r7, #8]
 800405c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	2310      	movs	r3, #16
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	0023      	movs	r3, r4
 800406c:	f000 fd85 	bl	8004b7a <xTaskCreate>
 8004070:	0003      	movs	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <osThreadNew+0x122>
            hTask = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800407a:	693b      	ldr	r3, [r7, #16]
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b00a      	add	sp, #40	; 0x28
 8004082:	bdb0      	pop	{r4, r5, r7, pc}

08004084 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a06      	ldr	r2, [pc, #24]	; (80040ac <vApplicationGetIdleTaskMemory+0x28>)
 8004094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800409a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	601a      	str	r2, [r3, #0]
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	200001e4 	.word	0x200001e4
 80040b0:	2000028c 	.word	0x2000028c

080040b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a06      	ldr	r2, [pc, #24]	; (80040dc <vApplicationGetTimerTaskMemory+0x28>)
 80040c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	0052      	lsls	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	2000048c 	.word	0x2000048c
 80040e0:	20000534 	.word	0x20000534

080040e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3308      	adds	r3, #8
 80040f0:	001a      	movs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4252      	negs	r2, r2
 80040fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3308      	adds	r3, #8
 8004102:	001a      	movs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3308      	adds	r3, #8
 800410c:	001a      	movs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b002      	add	sp, #8
 8004134:	bd80      	pop	{r7, pc}

08004136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}

0800417a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3301      	adds	r3, #1
 800418e:	d103      	bne.n	8004198 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e00c      	b.n	80041b2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3308      	adds	r3, #8
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e002      	b.n	80041a6 <vListInsert+0x2c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d2f6      	bcs.n	80041a0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6892      	ldr	r2, [r2, #8]
 80041fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6852      	ldr	r2, [r2, #4]
 8004206:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d103      	bne.n	800421a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b004      	add	sp, #16
 8004234:	bd80      	pop	{r7, pc}

08004236 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <xQueueGenericReset+0x18>
 800424a:	b672      	cpsid	i
 800424c:	e7fe      	b.n	800424c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800424e:	f001 fe6f 	bl	8005f30 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	434b      	muls	r3, r1
 8004260:	18d2      	adds	r2, r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	1e59      	subs	r1, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	434b      	muls	r3, r1
 8004284:	18d2      	adds	r2, r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2244      	movs	r2, #68	; 0x44
 800428e:	21ff      	movs	r1, #255	; 0xff
 8004290:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2245      	movs	r2, #69	; 0x45
 8004296:	21ff      	movs	r1, #255	; 0xff
 8004298:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3310      	adds	r3, #16
 80042ac:	0018      	movs	r0, r3
 80042ae:	f001 f831 	bl	8005314 <xTaskRemoveFromEventList>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d00c      	beq.n	80042d0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042b6:	f001 fe2b 	bl	8005f10 <vPortYield>
 80042ba:	e009      	b.n	80042d0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3310      	adds	r3, #16
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff ff0f 	bl	80040e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3324      	adds	r3, #36	; 0x24
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff ff0a 	bl	80040e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042d0:	f001 fe40 	bl	8005f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042d4:	2301      	movs	r3, #1
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b004      	add	sp, #16
 80042dc:	bd80      	pop	{r7, pc}

080042de <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042de:	b590      	push	{r4, r7, lr}
 80042e0:	b089      	sub	sp, #36	; 0x24
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <xQueueGenericCreateStatic+0x18>
 80042f2:	b672      	cpsid	i
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <xQueueGenericCreateStatic+0x22>
 80042fc:	b672      	cpsid	i
 80042fe:	e7fe      	b.n	80042fe <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <xQueueGenericCreateStatic+0x2e>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <xQueueGenericCreateStatic+0x32>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <xQueueGenericCreateStatic+0x34>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <xQueueGenericCreateStatic+0x3c>
 8004316:	b672      	cpsid	i
 8004318:	e7fe      	b.n	8004318 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <xQueueGenericCreateStatic+0x48>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <xQueueGenericCreateStatic+0x4c>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <xQueueGenericCreateStatic+0x4e>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueGenericCreateStatic+0x56>
 8004330:	b672      	cpsid	i
 8004332:	e7fe      	b.n	8004332 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004334:	2350      	movs	r3, #80	; 0x50
 8004336:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b50      	cmp	r3, #80	; 0x50
 800433c:	d001      	beq.n	8004342 <xQueueGenericCreateStatic+0x64>
 800433e:	b672      	cpsid	i
 8004340:	e7fe      	b.n	8004340 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004342:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00e      	beq.n	800436c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2246      	movs	r2, #70	; 0x46
 8004352:	2101      	movs	r1, #1
 8004354:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004356:	2328      	movs	r3, #40	; 0x28
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781c      	ldrb	r4, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	0023      	movs	r3, r4
 8004368:	f000 f837 	bl	80043da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800436c:	697b      	ldr	r3, [r7, #20]
	}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b007      	add	sp, #28
 8004374:	bd90      	pop	{r4, r7, pc}

08004376 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004376:	b590      	push	{r4, r7, lr}
 8004378:	b08b      	sub	sp, #44	; 0x2c
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	1dfb      	adds	r3, r7, #7
 8004382:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <xQueueGenericCreate+0x18>
 800438a:	b672      	cpsid	i
 800438c:	e7fe      	b.n	800438c <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	4353      	muls	r3, r2
 8004394:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3350      	adds	r3, #80	; 0x50
 800439a:	0018      	movs	r0, r3
 800439c:	f001 fe60 	bl	8006060 <pvPortMalloc>
 80043a0:	0003      	movs	r3, r0
 80043a2:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3350      	adds	r3, #80	; 0x50
 80043b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2246      	movs	r2, #70	; 0x46
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	781c      	ldrb	r4, [r3, #0]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	0023      	movs	r3, r4
 80043cc:	f000 f805 	bl	80043da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043d0:	69bb      	ldr	r3, [r7, #24]
	}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b009      	add	sp, #36	; 0x24
 80043d8:	bd90      	pop	{r4, r7, pc}

080043da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	001a      	movs	r2, r3
 80043e8:	1cfb      	adds	r3, r7, #3
 80043ea:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e002      	b.n	8004400 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2101      	movs	r1, #1
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff ff10 	bl	8004236 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1cfa      	adds	r2, r7, #3
 800441a:	214c      	movs	r1, #76	; 0x4c
 800441c:	7812      	ldrb	r2, [r2, #0]
 800441e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}

08004428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <xQueueGenericSend+0x20>
 8004444:	b672      	cpsid	i
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <xQueueGenericSend+0x2e>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <xQueueGenericSend+0x32>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSend+0x34>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <xQueueGenericSend+0x3c>
 8004460:	b672      	cpsid	i
 8004462:	e7fe      	b.n	8004462 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d103      	bne.n	8004472 <xQueueGenericSend+0x4a>
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <xQueueGenericSend+0x4e>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <xQueueGenericSend+0x50>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <xQueueGenericSend+0x58>
 800447c:	b672      	cpsid	i
 800447e:	e7fe      	b.n	800447e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004480:	f001 f8e0 	bl	8005644 <xTaskGetSchedulerState>
 8004484:	1e03      	subs	r3, r0, #0
 8004486:	d102      	bne.n	800448e <xQueueGenericSend+0x66>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueGenericSend+0x6a>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueGenericSend+0x6c>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <xQueueGenericSend+0x74>
 8004498:	b672      	cpsid	i
 800449a:	e7fe      	b.n	800449a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800449c:	f001 fd48 	bl	8005f30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <xQueueGenericSend+0x8a>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d11e      	bne.n	80044f0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f9a2 	bl	8004802 <prvCopyDataToQueue>
 80044be:	0003      	movs	r3, r0
 80044c0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 ff20 	bl	8005314 <xTaskRemoveFromEventList>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d007      	beq.n	80044e8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044d8:	f001 fd1a 	bl	8005f10 <vPortYield>
 80044dc:	e004      	b.n	80044e8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044e4:	f001 fd14 	bl	8005f10 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044e8:	f001 fd34 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e05b      	b.n	80045a8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044f6:	f001 fd2d 	bl	8005f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e054      	b.n	80045a8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004504:	2314      	movs	r3, #20
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	0018      	movs	r0, r3
 800450a:	f000 ff5f 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800450e:	2301      	movs	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004512:	f001 fd1f 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004516:	f000 fd09 	bl	8004f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800451a:	f001 fd09 	bl	8005f30 <vPortEnterCritical>
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	2244      	movs	r2, #68	; 0x44
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	b25b      	sxtb	r3, r3
 8004526:	3301      	adds	r3, #1
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x10a>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2244      	movs	r2, #68	; 0x44
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	2245      	movs	r2, #69	; 0x45
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	b25b      	sxtb	r3, r3
 800453a:	3301      	adds	r3, #1
 800453c:	d103      	bne.n	8004546 <xQueueGenericSend+0x11e>
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2245      	movs	r2, #69	; 0x45
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]
 8004546:	f001 fd05 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800454a:	1d3a      	adds	r2, r7, #4
 800454c:	2314      	movs	r3, #20
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	0011      	movs	r1, r2
 8004552:	0018      	movs	r0, r3
 8004554:	f000 ff4e 	bl	80053f4 <xTaskCheckForTimeOut>
 8004558:	1e03      	subs	r3, r0, #0
 800455a:	d11e      	bne.n	800459a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 fa54 	bl	8004a0c <prvIsQueueFull>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d011      	beq.n	800458c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	3310      	adds	r3, #16
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fe8b 	bl	800528c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f9d3 	bl	8004924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800457e:	f000 fce1 	bl	8004f44 <xTaskResumeAll>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d18a      	bne.n	800449c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004586:	f001 fcc3 	bl	8005f10 <vPortYield>
 800458a:	e787      	b.n	800449c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	0018      	movs	r0, r3
 8004590:	f000 f9c8 	bl	8004924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004594:	f000 fcd6 	bl	8004f44 <xTaskResumeAll>
 8004598:	e780      	b.n	800449c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 f9c1 	bl	8004924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045a2:	f000 fccf 	bl	8004f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b00a      	add	sp, #40	; 0x28
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b08b      	sub	sp, #44	; 0x2c
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <xQueueGenericSendFromISR+0x1c>
 80045c8:	b672      	cpsid	i
 80045ca:	e7fe      	b.n	80045ca <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <xQueueGenericSendFromISR+0x2a>
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <xQueueGenericSendFromISR+0x2e>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <xQueueGenericSendFromISR+0x30>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <xQueueGenericSendFromISR+0x38>
 80045e4:	b672      	cpsid	i
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d103      	bne.n	80045f6 <xQueueGenericSendFromISR+0x46>
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <xQueueGenericSendFromISR+0x4a>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueGenericSendFromISR+0x4c>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <xQueueGenericSendFromISR+0x54>
 8004600:	b672      	cpsid	i
 8004602:	e7fe      	b.n	8004602 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004604:	f001 fcbe 	bl	8005f84 <ulSetInterruptMaskFromISR>
 8004608:	0003      	movs	r3, r0
 800460a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <xQueueGenericSendFromISR+0x6e>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d131      	bne.n	8004682 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800461e:	241b      	movs	r4, #27
 8004620:	193b      	adds	r3, r7, r4
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	2145      	movs	r1, #69	; 0x45
 8004626:	5c52      	ldrb	r2, [r2, r1]
 8004628:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	0018      	movs	r0, r3
 8004638:	f000 f8e3 	bl	8004802 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800463c:	193b      	adds	r3, r7, r4
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b25b      	sxtb	r3, r3
 8004642:	3301      	adds	r3, #1
 8004644:	d111      	bne.n	800466a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	3324      	adds	r3, #36	; 0x24
 8004652:	0018      	movs	r0, r3
 8004654:	f000 fe5e 	bl	8005314 <xTaskRemoveFromEventList>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d00f      	beq.n	800467c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e008      	b.n	800467c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800466a:	231b      	movs	r3, #27
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	b259      	sxtb	r1, r3
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2245      	movs	r2, #69	; 0x45
 800467a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800467c:	2301      	movs	r3, #1
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8004680:	e001      	b.n	8004686 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	0018      	movs	r0, r3
 800468a:	f001 fc81 	bl	8005f90 <vClearInterruptMaskFromISR>

	return xReturn;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b00b      	add	sp, #44	; 0x2c
 8004696:	bd90      	pop	{r4, r7, pc}

08004698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueReceive+0x1e>
 80046b2:	b672      	cpsid	i
 80046b4:	e7fe      	b.n	80046b4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <xQueueReceive+0x2c>
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <xQueueReceive+0x30>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <xQueueReceive+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueReceive+0x3a>
 80046ce:	b672      	cpsid	i
 80046d0:	e7fe      	b.n	80046d0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046d2:	f000 ffb7 	bl	8005644 <xTaskGetSchedulerState>
 80046d6:	1e03      	subs	r3, r0, #0
 80046d8:	d102      	bne.n	80046e0 <xQueueReceive+0x48>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <xQueueReceive+0x4c>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <xQueueReceive+0x4e>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <xQueueReceive+0x56>
 80046ea:	b672      	cpsid	i
 80046ec:	e7fe      	b.n	80046ec <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ee:	f001 fc1f 	bl	8005f30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01a      	beq.n	8004734 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f000 f8e7 	bl	80048d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	3310      	adds	r3, #16
 800471e:	0018      	movs	r0, r3
 8004720:	f000 fdf8 	bl	8005314 <xTaskRemoveFromEventList>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d001      	beq.n	800472c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004728:	f001 fbf2 	bl	8005f10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800472c:	f001 fc12 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	e062      	b.n	80047fa <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800473a:	f001 fc0b 	bl	8005f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800473e:	2300      	movs	r3, #0
 8004740:	e05b      	b.n	80047fa <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004748:	2314      	movs	r3, #20
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fe3d 	bl	80053cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004756:	f001 fbfd 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800475a:	f000 fbe7 	bl	8004f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475e:	f001 fbe7 	bl	8005f30 <vPortEnterCritical>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2244      	movs	r2, #68	; 0x44
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b25b      	sxtb	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	d103      	bne.n	8004776 <xQueueReceive+0xde>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2244      	movs	r2, #68	; 0x44
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2245      	movs	r2, #69	; 0x45
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	b25b      	sxtb	r3, r3
 800477e:	3301      	adds	r3, #1
 8004780:	d103      	bne.n	800478a <xQueueReceive+0xf2>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2245      	movs	r2, #69	; 0x45
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	f001 fbe3 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478e:	1d3a      	adds	r2, r7, #4
 8004790:	2314      	movs	r3, #20
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f000 fe2c 	bl	80053f4 <xTaskCheckForTimeOut>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d11e      	bne.n	80047de <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f91c 	bl	80049e0 <prvIsQueueEmpty>
 80047a8:	1e03      	subs	r3, r0, #0
 80047aa:	d011      	beq.n	80047d0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	0011      	movs	r1, r2
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fd69 	bl	800528c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f8b1 	bl	8004924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c2:	f000 fbbf 	bl	8004f44 <xTaskResumeAll>
 80047c6:	1e03      	subs	r3, r0, #0
 80047c8:	d191      	bne.n	80046ee <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80047ca:	f001 fba1 	bl	8005f10 <vPortYield>
 80047ce:	e78e      	b.n	80046ee <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f8a6 	bl	8004924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d8:	f000 fbb4 	bl	8004f44 <xTaskResumeAll>
 80047dc:	e787      	b.n	80046ee <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 f89f 	bl	8004924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e6:	f000 fbad 	bl	8004f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 f8f7 	bl	80049e0 <prvIsQueueEmpty>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d100      	bne.n	80047f8 <xQueueReceive+0x160>
 80047f6:	e77a      	b.n	80046ee <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b00a      	add	sp, #40	; 0x28
 8004800:	bd80      	pop	{r7, pc}

08004802 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d14e      	bne.n	80048c6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 ff25 	bl	800567c <xTaskPriorityDisinherit>
 8004832:	0003      	movs	r3, r0
 8004834:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	e043      	b.n	80048c6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d119      	bne.n	8004878 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6858      	ldr	r0, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	0019      	movs	r1, r3
 8004850:	f001 fe44 	bl	80064dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	18d2      	adds	r2, r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d32b      	bcc.n	80048c6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	e026      	b.n	80048c6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68d8      	ldr	r0, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	0019      	movs	r1, r3
 8004884:	f001 fe2a 	bl	80064dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	425b      	negs	r3, r3
 8004892:	18d2      	adds	r2, r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d207      	bcs.n	80048b4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	425b      	negs	r3, r3
 80048ae:	18d2      	adds	r2, r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d105      	bne.n	80048c6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	18d2      	adds	r2, r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	d303      	bcc.n	800490c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68d9      	ldr	r1, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	0018      	movs	r0, r3
 8004918:	f001 fde0 	bl	80064dc <memcpy>
	}
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800492c:	f001 fb00 	bl	8005f30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004930:	230f      	movs	r3, #15
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	2145      	movs	r1, #69	; 0x45
 8004938:	5c52      	ldrb	r2, [r2, r1]
 800493a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800493c:	e013      	b.n	8004966 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3324      	adds	r3, #36	; 0x24
 800494a:	0018      	movs	r0, r3
 800494c:	f000 fce2 	bl	8005314 <xTaskRemoveFromEventList>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004954:	f000 fd9e 	bl	8005494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004958:	210f      	movs	r1, #15
 800495a:	187b      	adds	r3, r7, r1
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	187b      	adds	r3, r7, r1
 8004964:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004966:	230f      	movs	r3, #15
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b25b      	sxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	dce5      	bgt.n	800493e <prvUnlockQueue+0x1a>
 8004972:	e000      	b.n	8004976 <prvUnlockQueue+0x52>
					break;
 8004974:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2245      	movs	r2, #69	; 0x45
 800497a:	21ff      	movs	r1, #255	; 0xff
 800497c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800497e:	f001 fae9 	bl	8005f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004982:	f001 fad5 	bl	8005f30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004986:	230e      	movs	r3, #14
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	2144      	movs	r1, #68	; 0x44
 800498e:	5c52      	ldrb	r2, [r2, r1]
 8004990:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004992:	e013      	b.n	80049bc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3310      	adds	r3, #16
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 fcb7 	bl	8005314 <xTaskRemoveFromEventList>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d001      	beq.n	80049ae <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80049aa:	f000 fd73 	bl	8005494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ae:	210e      	movs	r1, #14
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049bc:	230e      	movs	r3, #14
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	dce5      	bgt.n	8004994 <prvUnlockQueue+0x70>
 80049c8:	e000      	b.n	80049cc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80049ca:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2244      	movs	r2, #68	; 0x44
 80049d0:	21ff      	movs	r1, #255	; 0xff
 80049d2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80049d4:	f001 fabe 	bl	8005f54 <vPortExitCritical>
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b004      	add	sp, #16
 80049de:	bd80      	pop	{r7, pc}

080049e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049e8:	f001 faa2 	bl	8005f30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e001      	b.n	80049fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049fe:	f001 faa9 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a14:	f001 fa8c 	bl	8005f30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d102      	bne.n	8004a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e001      	b.n	8004a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a2e:	f001 fa91 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004a32:	68fb      	ldr	r3, [r7, #12]
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e015      	b.n	8004a78 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <vQueueAddToRegistry+0x4c>)
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	00d2      	lsls	r2, r2, #3
 8004a52:	58d3      	ldr	r3, [r2, r3]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10c      	bne.n	8004a72 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <vQueueAddToRegistry+0x4c>)
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	00d2      	lsls	r2, r2, #3
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <vQueueAddToRegistry+0x4c>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a70:	e006      	b.n	8004a80 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b07      	cmp	r3, #7
 8004a7c:	d9e6      	bls.n	8004a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b004      	add	sp, #16
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000934 	.word	0x20000934

08004a8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a9c:	f001 fa48 	bl	8005f30 <vPortEnterCritical>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2244      	movs	r2, #68	; 0x44
 8004aa4:	5c9b      	ldrb	r3, [r3, r2]
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	d103      	bne.n	8004ab4 <vQueueWaitForMessageRestricted+0x28>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2244      	movs	r2, #68	; 0x44
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2245      	movs	r2, #69	; 0x45
 8004ab8:	5c9b      	ldrb	r3, [r3, r2]
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	d103      	bne.n	8004ac8 <vQueueWaitForMessageRestricted+0x3c>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2245      	movs	r2, #69	; 0x45
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]
 8004ac8:	f001 fa44 	bl	8005f54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 fbf3 	bl	80052c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff ff1d 	bl	8004924 <prvUnlockQueue>
	}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004af2:	b590      	push	{r4, r7, lr}
 8004af4:	b08d      	sub	sp, #52	; 0x34
 8004af6:	af04      	add	r7, sp, #16
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <xTaskCreateStatic+0x18>
 8004b06:	b672      	cpsid	i
 8004b08:	e7fe      	b.n	8004b08 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xTaskCreateStatic+0x22>
 8004b10:	b672      	cpsid	i
 8004b12:	e7fe      	b.n	8004b12 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b14:	23a8      	movs	r3, #168	; 0xa8
 8004b16:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2ba8      	cmp	r3, #168	; 0xa8
 8004b1c:	d001      	beq.n	8004b22 <xTaskCreateStatic+0x30>
 8004b1e:	b672      	cpsid	i
 8004b20:	e7fe      	b.n	8004b20 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b22:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <xTaskCreateStatic+0x7a>
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01d      	beq.n	8004b6c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	22a5      	movs	r2, #165	; 0xa5
 8004b3e:	2102      	movs	r1, #2
 8004b40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b42:	683c      	ldr	r4, [r7, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	2318      	movs	r3, #24
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	0023      	movs	r3, r4
 8004b5e:	f000 f859 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f000 f8f5 	bl	8004d54 <prvAddNewTaskToReadyList>
 8004b6a:	e001      	b.n	8004b70 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b70:	69bb      	ldr	r3, [r7, #24]
	}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b009      	add	sp, #36	; 0x24
 8004b78:	bd90      	pop	{r4, r7, pc}

08004b7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b7a:	b590      	push	{r4, r7, lr}
 8004b7c:	b08d      	sub	sp, #52	; 0x34
 8004b7e:	af04      	add	r7, sp, #16
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	1dbb      	adds	r3, r7, #6
 8004b88:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b8a:	1dbb      	adds	r3, r7, #6
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	0018      	movs	r0, r3
 8004b92:	f001 fa65 	bl	8006060 <pvPortMalloc>
 8004b96:	0003      	movs	r3, r0
 8004b98:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ba0:	20a8      	movs	r0, #168	; 0xa8
 8004ba2:	f001 fa5d 	bl	8006060 <pvPortMalloc>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb6:	e006      	b.n	8004bc6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f001 fafc 	bl	80061b8 <vPortFree>
 8004bc0:	e001      	b.n	8004bc6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01a      	beq.n	8004c02 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	22a5      	movs	r2, #165	; 0xa5
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	683c      	ldr	r4, [r7, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	0023      	movs	r3, r4
 8004bf0:	f000 f810 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 f8ac 	bl	8004d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	e002      	b.n	8004c08 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c02:	2301      	movs	r3, #1
 8004c04:	425b      	negs	r3, r3
 8004c06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c08:	69bb      	ldr	r3, [r7, #24]
	}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b009      	add	sp, #36	; 0x24
 8004c10:	bd90      	pop	{r4, r7, pc}
	...

08004c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	001a      	movs	r2, r3
 8004c2c:	21a5      	movs	r1, #165	; 0xa5
 8004c2e:	f001 fbc9 	bl	80063c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4942      	ldr	r1, [pc, #264]	; (8004d44 <prvInitialiseNewTask+0x130>)
 8004c3a:	468c      	mov	ip, r1
 8004c3c:	4463      	add	r3, ip
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	18d3      	adds	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2207      	movs	r2, #7
 8004c48:	4393      	bics	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2207      	movs	r2, #7
 8004c50:	4013      	ands	r3, r2
 8004c52:	d001      	beq.n	8004c58 <prvInitialiseNewTask+0x44>
 8004c54:	b672      	cpsid	i
 8004c56:	e7fe      	b.n	8004c56 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e013      	b.n	8004c8c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	7818      	ldrb	r0, [r3, #0]
 8004c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6e:	2134      	movs	r1, #52	; 0x34
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	185b      	adds	r3, r3, r1
 8004c76:	1c02      	adds	r2, r0, #0
 8004c78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d9e8      	bls.n	8004c64 <prvInitialiseNewTask+0x50>
 8004c92:	e000      	b.n	8004c96 <prvInitialiseNewTask+0x82>
			{
				break;
 8004c94:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	2243      	movs	r2, #67	; 0x43
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	e003      	b.n	8004ca8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	2234      	movs	r2, #52	; 0x34
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b37      	cmp	r3, #55	; 0x37
 8004cac:	d901      	bls.n	8004cb2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cae:	2337      	movs	r3, #55	; 0x37
 8004cb0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	6a3a      	ldr	r2, [r7, #32]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	6a3a      	ldr	r2, [r7, #32]
 8004cbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7ff fa29 	bl	8004120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7ff fa24 	bl	8004120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2238      	movs	r2, #56	; 0x38
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	22a0      	movs	r2, #160	; 0xa0
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	22a4      	movs	r2, #164	; 0xa4
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	3354      	adds	r3, #84	; 0x54
 8004d02:	224c      	movs	r2, #76	; 0x4c
 8004d04:	2100      	movs	r1, #0
 8004d06:	0018      	movs	r0, r3
 8004d08:	f001 fb5c 	bl	80063c4 <memset>
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <prvInitialiseNewTask+0x134>)
 8004d10:	659a      	str	r2, [r3, #88]	; 0x58
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <prvInitialiseNewTask+0x138>)
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <prvInitialiseNewTask+0x13c>)
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f001 f86b 	bl	8005e00 <pxPortInitialiseStack>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	3fffffff 	.word	0x3fffffff
 8004d48:	20001bc0 	.word	0x20001bc0
 8004d4c:	20001c28 	.word	0x20001c28
 8004d50:	20001c90 	.word	0x20001c90

08004d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d5c:	f001 f8e8 	bl	8005f30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <prvAddNewTaskToReadyList+0xb8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <prvAddNewTaskToReadyList+0xb8>)
 8004d68:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <prvAddNewTaskToReadyList+0xbc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d72:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <prvAddNewTaskToReadyList+0xbc>)
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <prvAddNewTaskToReadyList+0xb8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d110      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d80:	f000 fba2 	bl	80054c8 <prvInitialiseTaskLists>
 8004d84:	e00d      	b.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d86:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <prvAddNewTaskToReadyList+0xc0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <prvAddNewTaskToReadyList+0xbc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d802      	bhi.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <prvAddNewTaskToReadyList+0xbc>)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004daa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <prvAddNewTaskToReadyList+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	0013      	movs	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <prvAddNewTaskToReadyList+0xcc>)
 8004dd6:	189a      	adds	r2, r3, r2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	0019      	movs	r1, r3
 8004dde:	0010      	movs	r0, r2
 8004de0:	f7ff f9a9 	bl	8004136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004de4:	f001 f8b6 	bl	8005f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <prvAddNewTaskToReadyList+0xc0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <prvAddNewTaskToReadyList+0xbc>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d201      	bcs.n	8004e02 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dfe:	f001 f887 	bl	8005f10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000e48 	.word	0x20000e48
 8004e10:	20000974 	.word	0x20000974
 8004e14:	20000e54 	.word	0x20000e54
 8004e18:	20000e64 	.word	0x20000e64
 8004e1c:	20000e50 	.word	0x20000e50
 8004e20:	20000978 	.word	0x20000978

08004e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <vTaskDelay+0x48>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <vTaskDelay+0x1e>
 8004e3e:	b672      	cpsid	i
 8004e40:	e7fe      	b.n	8004e40 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004e42:	f000 f873 	bl	8004f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f000 fc72 	bl	8005734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e50:	f000 f878 	bl	8004f44 <xTaskResumeAll>
 8004e54:	0003      	movs	r3, r0
 8004e56:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004e5e:	f001 f857 	bl	8005f10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000e70 	.word	0x20000e70

08004e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e7e:	003a      	movs	r2, r7
 8004e80:	1d39      	adds	r1, r7, #4
 8004e82:	2308      	movs	r3, #8
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7ff f8fc 	bl	8004084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e8c:	683c      	ldr	r4, [r7, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	491e      	ldr	r1, [pc, #120]	; (8004f0c <vTaskStartScheduler+0x9c>)
 8004e94:	481e      	ldr	r0, [pc, #120]	; (8004f10 <vTaskStartScheduler+0xa0>)
 8004e96:	9202      	str	r2, [sp, #8]
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	0022      	movs	r2, r4
 8004ea2:	f7ff fe26 	bl	8004af2 <xTaskCreateStatic>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <vTaskStartScheduler+0xa4>)
 8004eaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <vTaskStartScheduler+0xa4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e001      	b.n	8004ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d103      	bne.n	8004ecc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004ec4:	f000 fc8a 	bl	80057dc <xTimerCreateTimerTask>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d113      	bne.n	8004efa <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004ed2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ed4:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <vTaskStartScheduler+0xa8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3354      	adds	r3, #84	; 0x54
 8004eda:	001a      	movs	r2, r3
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <vTaskStartScheduler+0xac>)
 8004ede:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <vTaskStartScheduler+0xb0>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4252      	negs	r2, r2
 8004ee6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <vTaskStartScheduler+0xb4>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <vTaskStartScheduler+0xb8>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ef4:	f000 ffe8 	bl	8005ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ef8:	e004      	b.n	8004f04 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	d101      	bne.n	8004f04 <vTaskStartScheduler+0x94>
 8004f00:	b672      	cpsid	i
 8004f02:	e7fe      	b.n	8004f02 <vTaskStartScheduler+0x92>
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b005      	add	sp, #20
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	080065d8 	.word	0x080065d8
 8004f10:	080054a9 	.word	0x080054a9
 8004f14:	20000e6c 	.word	0x20000e6c
 8004f18:	20000974 	.word	0x20000974
 8004f1c:	2000005c 	.word	0x2000005c
 8004f20:	20000e68 	.word	0x20000e68
 8004f24:	20000e54 	.word	0x20000e54
 8004f28:	20000e4c 	.word	0x20000e4c

08004f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <vTaskSuspendAll+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <vTaskSuspendAll+0x14>)
 8004f38:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000e70 	.word	0x20000e70

08004f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f52:	4b3a      	ldr	r3, [pc, #232]	; (800503c <xTaskResumeAll+0xf8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xTaskResumeAll+0x1a>
 8004f5a:	b672      	cpsid	i
 8004f5c:	e7fe      	b.n	8004f5c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f5e:	f000 ffe7 	bl	8005f30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <xTaskResumeAll+0xf8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	1e5a      	subs	r2, r3, #1
 8004f68:	4b34      	ldr	r3, [pc, #208]	; (800503c <xTaskResumeAll+0xf8>)
 8004f6a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f6c:	4b33      	ldr	r3, [pc, #204]	; (800503c <xTaskResumeAll+0xf8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d15b      	bne.n	800502c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f74:	4b32      	ldr	r3, [pc, #200]	; (8005040 <xTaskResumeAll+0xfc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d057      	beq.n	800502c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f7c:	e02f      	b.n	8004fde <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <xTaskResumeAll+0x100>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3318      	adds	r3, #24
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7ff f92b 	bl	80041e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3304      	adds	r3, #4
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff f926 	bl	80041e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <xTaskResumeAll+0x104>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d903      	bls.n	8004fae <xTaskResumeAll+0x6a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <xTaskResumeAll+0x104>)
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb2:	0013      	movs	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <xTaskResumeAll+0x108>)
 8004fbc:	189a      	adds	r2, r3, r2
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	f7ff f8b6 	bl	8004136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <xTaskResumeAll+0x10c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <xTaskResumeAll+0x110>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fde:	4b19      	ldr	r3, [pc, #100]	; (8005044 <xTaskResumeAll+0x100>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1cb      	bne.n	8004f7e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fec:	f000 fb0c 	bl	8005608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <xTaskResumeAll+0x114>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ffc:	f000 f83c 	bl	8005078 <xTaskIncrementTick>
 8005000:	1e03      	subs	r3, r0, #0
 8005002:	d002      	beq.n	800500a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <xTaskResumeAll+0x110>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3b01      	subs	r3, #1
 800500e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f2      	bne.n	8004ffc <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <xTaskResumeAll+0x114>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <xTaskResumeAll+0x110>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005028:	f000 ff72 	bl	8005f10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800502c:	f000 ff92 	bl	8005f54 <vPortExitCritical>

	return xAlreadyYielded;
 8005030:	68bb      	ldr	r3, [r7, #8]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20000e70 	.word	0x20000e70
 8005040:	20000e48 	.word	0x20000e48
 8005044:	20000e08 	.word	0x20000e08
 8005048:	20000e50 	.word	0x20000e50
 800504c:	20000978 	.word	0x20000978
 8005050:	20000974 	.word	0x20000974
 8005054:	20000e5c 	.word	0x20000e5c
 8005058:	20000e58 	.word	0x20000e58

0800505c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <xTaskGetTickCount+0x18>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005068:	687b      	ldr	r3, [r7, #4]
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	20000e4c 	.word	0x20000e4c

08005078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005082:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <xTaskIncrementTick+0x134>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d000      	beq.n	800508c <xTaskIncrementTick+0x14>
 800508a:	e084      	b.n	8005196 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800508c:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <xTaskIncrementTick+0x138>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005094:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <xTaskIncrementTick+0x138>)
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d117      	bne.n	80050d0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80050a0:	4b44      	ldr	r3, [pc, #272]	; (80051b4 <xTaskIncrementTick+0x13c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <xTaskIncrementTick+0x36>
 80050aa:	b672      	cpsid	i
 80050ac:	e7fe      	b.n	80050ac <xTaskIncrementTick+0x34>
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <xTaskIncrementTick+0x13c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <xTaskIncrementTick+0x140>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <xTaskIncrementTick+0x13c>)
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <xTaskIncrementTick+0x140>)
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <xTaskIncrementTick+0x144>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <xTaskIncrementTick+0x144>)
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f000 fa9c 	bl	8005608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <xTaskIncrementTick+0x148>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d349      	bcc.n	800516e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050da:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <xTaskIncrementTick+0x13c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e4:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <xTaskIncrementTick+0x148>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	4252      	negs	r2, r2
 80050ea:	601a      	str	r2, [r3, #0]
					break;
 80050ec:	e03f      	b.n	800516e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <xTaskIncrementTick+0x13c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d203      	bcs.n	800510e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <xTaskIncrementTick+0x148>)
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800510c:	e02f      	b.n	800516e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3304      	adds	r3, #4
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff f867 	bl	80041e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	3318      	adds	r3, #24
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff f85e 	bl	80041e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <xTaskIncrementTick+0x14c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d903      	bls.n	800513e <xTaskIncrementTick+0xc6>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <xTaskIncrementTick+0x14c>)
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	0013      	movs	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	189b      	adds	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <xTaskIncrementTick+0x150>)
 800514c:	189a      	adds	r2, r3, r2
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3304      	adds	r3, #4
 8005152:	0019      	movs	r1, r3
 8005154:	0010      	movs	r0, r2
 8005156:	f7fe ffee 	bl	8004136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <xTaskIncrementTick+0x154>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d3b8      	bcc.n	80050da <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800516c:	e7b5      	b.n	80050da <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <xTaskIncrementTick+0x154>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4914      	ldr	r1, [pc, #80]	; (80051c8 <xTaskIncrementTick+0x150>)
 8005176:	0013      	movs	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	189b      	adds	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	585b      	ldr	r3, [r3, r1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d901      	bls.n	8005188 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <xTaskIncrementTick+0x158>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e004      	b.n	80051a0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <xTaskIncrementTick+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <xTaskIncrementTick+0x15c>)
 800519e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051a0:	697b      	ldr	r3, [r7, #20]
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b006      	add	sp, #24
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000e70 	.word	0x20000e70
 80051b0:	20000e4c 	.word	0x20000e4c
 80051b4:	20000e00 	.word	0x20000e00
 80051b8:	20000e04 	.word	0x20000e04
 80051bc:	20000e60 	.word	0x20000e60
 80051c0:	20000e68 	.word	0x20000e68
 80051c4:	20000e50 	.word	0x20000e50
 80051c8:	20000978 	.word	0x20000978
 80051cc:	20000974 	.word	0x20000974
 80051d0:	20000e5c 	.word	0x20000e5c
 80051d4:	20000e58 	.word	0x20000e58

080051d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051de:	4b25      	ldr	r3, [pc, #148]	; (8005274 <vTaskSwitchContext+0x9c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <vTaskSwitchContext+0xa0>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051ec:	e03d      	b.n	800526a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <vTaskSwitchContext+0xa0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <vTaskSwitchContext+0xa4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e007      	b.n	800520c <vTaskSwitchContext+0x34>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <vTaskSwitchContext+0x2e>
 8005202:	b672      	cpsid	i
 8005204:	e7fe      	b.n	8005204 <vTaskSwitchContext+0x2c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3b01      	subs	r3, #1
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	491c      	ldr	r1, [pc, #112]	; (8005280 <vTaskSwitchContext+0xa8>)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	0013      	movs	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	189b      	adds	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	585b      	ldr	r3, [r3, r1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ee      	beq.n	80051fc <vTaskSwitchContext+0x24>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	0013      	movs	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	189b      	adds	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a15      	ldr	r2, [pc, #84]	; (8005280 <vTaskSwitchContext+0xa8>)
 800522a:	189b      	adds	r3, r3, r2
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	429a      	cmp	r2, r3
 8005242:	d104      	bne.n	800524e <vTaskSwitchContext+0x76>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <vTaskSwitchContext+0xac>)
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <vTaskSwitchContext+0xa4>)
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <vTaskSwitchContext+0xac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3354      	adds	r3, #84	; 0x54
 8005264:	001a      	movs	r2, r3
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <vTaskSwitchContext+0xb0>)
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b002      	add	sp, #8
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	20000e70 	.word	0x20000e70
 8005278:	20000e5c 	.word	0x20000e5c
 800527c:	20000e50 	.word	0x20000e50
 8005280:	20000978 	.word	0x20000978
 8005284:	20000974 	.word	0x20000974
 8005288:	2000005c 	.word	0x2000005c

0800528c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <vTaskPlaceOnEventList+0x14>
 800529c:	b672      	cpsid	i
 800529e:	e7fe      	b.n	800529e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <vTaskPlaceOnEventList+0x38>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3318      	adds	r3, #24
 80052a6:	001a      	movs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	0011      	movs	r1, r2
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7fe ff64 	bl	800417a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 fa3c 	bl	8005734 <prvAddCurrentTaskToDelayedList>
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000974 	.word	0x20000974

080052c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <vTaskPlaceOnEventListRestricted+0x16>
 80052da:	b672      	cpsid	i
 80052dc:	e7fe      	b.n	80052dc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <vTaskPlaceOnEventListRestricted+0x48>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3318      	adds	r3, #24
 80052e4:	001a      	movs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0011      	movs	r1, r2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7fe ff23 	bl	8004136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80052f6:	2301      	movs	r3, #1
 80052f8:	425b      	negs	r3, r3
 80052fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0011      	movs	r1, r2
 8005302:	0018      	movs	r0, r3
 8005304:	f000 fa16 	bl	8005734 <prvAddCurrentTaskToDelayedList>
	}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b004      	add	sp, #16
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000974 	.word	0x20000974

08005314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <xTaskRemoveFromEventList+0x1a>
 800532a:	b672      	cpsid	i
 800532c:	e7fe      	b.n	800532c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3318      	adds	r3, #24
 8005332:	0018      	movs	r0, r3
 8005334:	f7fe ff57 	bl	80041e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <xTaskRemoveFromEventList+0xa0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11d      	bne.n	800537c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3304      	adds	r3, #4
 8005344:	0018      	movs	r0, r3
 8005346:	f7fe ff4e 	bl	80041e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <xTaskRemoveFromEventList+0xa4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <xTaskRemoveFromEventList+0x4a>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <xTaskRemoveFromEventList+0xa4>)
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	0013      	movs	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	189b      	adds	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <xTaskRemoveFromEventList+0xa8>)
 800536c:	189a      	adds	r2, r3, r2
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3304      	adds	r3, #4
 8005372:	0019      	movs	r1, r3
 8005374:	0010      	movs	r0, r2
 8005376:	f7fe fede 	bl	8004136 <vListInsertEnd>
 800537a:	e007      	b.n	800538c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	3318      	adds	r3, #24
 8005380:	001a      	movs	r2, r3
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <xTaskRemoveFromEventList+0xac>)
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f7fe fed5 	bl	8004136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <xTaskRemoveFromEventList+0xb0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	429a      	cmp	r2, r3
 8005398:	d905      	bls.n	80053a6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <xTaskRemoveFromEventList+0xb4>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e001      	b.n	80053aa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000e70 	.word	0x20000e70
 80053b8:	20000e50 	.word	0x20000e50
 80053bc:	20000978 	.word	0x20000978
 80053c0:	20000e08 	.word	0x20000e08
 80053c4:	20000974 	.word	0x20000974
 80053c8:	20000e5c 	.word	0x20000e5c

080053cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <vTaskInternalSetTimeOutState+0x20>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vTaskInternalSetTimeOutState+0x24>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b002      	add	sp, #8
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000e60 	.word	0x20000e60
 80053f0:	20000e4c 	.word	0x20000e4c

080053f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <xTaskCheckForTimeOut+0x14>
 8005404:	b672      	cpsid	i
 8005406:	e7fe      	b.n	8005406 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xTaskCheckForTimeOut+0x1e>
 800540e:	b672      	cpsid	i
 8005410:	e7fe      	b.n	8005410 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005412:	f000 fd8d 	bl	8005f30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <xTaskCheckForTimeOut+0x98>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	d102      	bne.n	8005434 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e024      	b.n	800547e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <xTaskCheckForTimeOut+0x9c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d007      	beq.n	8005450 <xTaskCheckForTimeOut+0x5c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e016      	b.n	800547e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	429a      	cmp	r2, r3
 8005458:	d20c      	bcs.n	8005474 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad2      	subs	r2, r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0018      	movs	r0, r3
 800546a:	f7ff ffaf 	bl	80053cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e004      	b.n	800547e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800547e:	f000 fd69 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b006      	add	sp, #24
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000e4c 	.word	0x20000e4c
 8005490:	20000e60 	.word	0x20000e60

08005494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005498:	4b02      	ldr	r3, [pc, #8]	; (80054a4 <vTaskMissedYield+0x10>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000e5c 	.word	0x20000e5c

080054a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054b0:	f000 f84e 	bl	8005550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <prvIdleTask+0x1c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d9f9      	bls.n	80054b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054bc:	f000 fd28 	bl	8005f10 <vPortYield>
		prvCheckTasksWaitingTermination();
 80054c0:	e7f6      	b.n	80054b0 <prvIdleTask+0x8>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	20000978 	.word	0x20000978

080054c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ce:	2300      	movs	r3, #0
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	e00c      	b.n	80054ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	0013      	movs	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a14      	ldr	r2, [pc, #80]	; (8005530 <prvInitialiseTaskLists+0x68>)
 80054e0:	189b      	adds	r3, r3, r2
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fe fdfe 	bl	80040e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3301      	adds	r3, #1
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b37      	cmp	r3, #55	; 0x37
 80054f2:	d9ef      	bls.n	80054d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <prvInitialiseTaskLists+0x6c>)
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fe fdf4 	bl	80040e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <prvInitialiseTaskLists+0x70>)
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fe fdf0 	bl	80040e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005504:	4b0d      	ldr	r3, [pc, #52]	; (800553c <prvInitialiseTaskLists+0x74>)
 8005506:	0018      	movs	r0, r3
 8005508:	f7fe fdec 	bl	80040e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <prvInitialiseTaskLists+0x78>)
 800550e:	0018      	movs	r0, r3
 8005510:	f7fe fde8 	bl	80040e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvInitialiseTaskLists+0x7c>)
 8005516:	0018      	movs	r0, r3
 8005518:	f7fe fde4 	bl	80040e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <prvInitialiseTaskLists+0x80>)
 800551e:	4a05      	ldr	r2, [pc, #20]	; (8005534 <prvInitialiseTaskLists+0x6c>)
 8005520:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvInitialiseTaskLists+0x84>)
 8005524:	4a04      	ldr	r2, [pc, #16]	; (8005538 <prvInitialiseTaskLists+0x70>)
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000978 	.word	0x20000978
 8005534:	20000dd8 	.word	0x20000dd8
 8005538:	20000dec 	.word	0x20000dec
 800553c:	20000e08 	.word	0x20000e08
 8005540:	20000e1c 	.word	0x20000e1c
 8005544:	20000e34 	.word	0x20000e34
 8005548:	20000e00 	.word	0x20000e00
 800554c:	20000e04 	.word	0x20000e04

08005550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005556:	e01a      	b.n	800558e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005558:	f000 fcea 	bl	8005f30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <prvCheckTasksWaitingTermination+0x50>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	0018      	movs	r0, r3
 800556a:	f7fe fe3c 	bl	80041e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1e5a      	subs	r2, r3, #1
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005576:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 8005580:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005582:	f000 fce7 	bl	8005f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 f80f 	bl	80055ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e0      	bne.n	8005558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46c0      	nop			; (mov r8, r8)
 800559a:	46bd      	mov	sp, r7
 800559c:	b002      	add	sp, #8
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000e1c 	.word	0x20000e1c
 80055a4:	20000e48 	.word	0x20000e48
 80055a8:	20000e30 	.word	0x20000e30

080055ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3354      	adds	r3, #84	; 0x54
 80055b8:	0018      	movs	r0, r3
 80055ba:	f000 ff0b 	bl	80063d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	22a5      	movs	r2, #165	; 0xa5
 80055c2:	5c9b      	ldrb	r3, [r3, r2]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d109      	bne.n	80055dc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 fdf3 	bl	80061b8 <vPortFree>
				vPortFree( pxTCB );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	0018      	movs	r0, r3
 80055d6:	f000 fdef 	bl	80061b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055da:	e010      	b.n	80055fe <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22a5      	movs	r2, #165	; 0xa5
 80055e0:	5c9b      	ldrb	r3, [r3, r2]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d104      	bne.n	80055f0 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f000 fde5 	bl	80061b8 <vPortFree>
	}
 80055ee:	e006      	b.n	80055fe <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	22a5      	movs	r2, #165	; 0xa5
 80055f4:	5c9b      	ldrb	r3, [r3, r2]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d001      	beq.n	80055fe <prvDeleteTCB+0x52>
 80055fa:	b672      	cpsid	i
 80055fc:	e7fe      	b.n	80055fc <prvDeleteTCB+0x50>
	}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	b002      	add	sp, #8
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <prvResetNextTaskUnblockTime+0x34>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <prvResetNextTaskUnblockTime+0x38>)
 800561a:	2201      	movs	r2, #1
 800561c:	4252      	negs	r2, r2
 800561e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005620:	e008      	b.n	8005634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <prvResetNextTaskUnblockTime+0x34>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <prvResetNextTaskUnblockTime+0x38>)
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b002      	add	sp, #8
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000e00 	.word	0x20000e00
 8005640:	20000e68 	.word	0x20000e68

08005644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <xTaskGetSchedulerState+0x30>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005652:	2301      	movs	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	e008      	b.n	800566a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <xTaskGetSchedulerState+0x34>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005660:	2302      	movs	r3, #2
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e001      	b.n	800566a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800566a:	687b      	ldr	r3, [r7, #4]
	}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000e54 	.word	0x20000e54
 8005678:	20000e70 	.word	0x20000e70

0800567c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d044      	beq.n	800571c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <xTaskPriorityDisinherit+0xac>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <xTaskPriorityDisinherit+0x24>
 800569c:	b672      	cpsid	i
 800569e:	e7fe      	b.n	800569e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <xTaskPriorityDisinherit+0x30>
 80056a8:	b672      	cpsid	i
 80056aa:	e7fe      	b.n	80056aa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b0:	1e5a      	subs	r2, r3, #1
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	429a      	cmp	r2, r3
 80056c0:	d02c      	beq.n	800571c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d128      	bne.n	800571c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3304      	adds	r3, #4
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7fe fd89 	bl	80041e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	2238      	movs	r2, #56	; 0x38
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <xTaskPriorityDisinherit+0xb0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d903      	bls.n	80056fc <xTaskPriorityDisinherit+0x80>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <xTaskPriorityDisinherit+0xb0>)
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	0013      	movs	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	189b      	adds	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4a09      	ldr	r2, [pc, #36]	; (8005730 <xTaskPriorityDisinherit+0xb4>)
 800570a:	189a      	adds	r2, r3, r2
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3304      	adds	r3, #4
 8005710:	0019      	movs	r1, r3
 8005712:	0010      	movs	r0, r2
 8005714:	f7fe fd0f 	bl	8004136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800571c:	68fb      	ldr	r3, [r7, #12]
	}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b004      	add	sp, #16
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	20000974 	.word	0x20000974
 800572c:	20000e50 	.word	0x20000e50
 8005730:	20000978 	.word	0x20000978

08005734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005744:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3304      	adds	r3, #4
 800574a:	0018      	movs	r0, r3
 800574c:	f7fe fd4b 	bl	80041e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	d10b      	bne.n	800576e <prvAddCurrentTaskToDelayedList+0x3a>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005764:	0011      	movs	r1, r2
 8005766:	0018      	movs	r0, r3
 8005768:	f7fe fce5 	bl	8004136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800576c:	e026      	b.n	80057bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	429a      	cmp	r2, r3
 8005784:	d209      	bcs.n	800579a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3304      	adds	r3, #4
 8005790:	0019      	movs	r1, r3
 8005792:	0010      	movs	r0, r2
 8005794:	f7fe fcf1 	bl	800417a <vListInsert>
}
 8005798:	e010      	b.n	80057bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3304      	adds	r3, #4
 80057a4:	0019      	movs	r1, r3
 80057a6:	0010      	movs	r0, r2
 80057a8:	f7fe fce7 	bl	800417a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d202      	bcs.n	80057bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057b6:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	601a      	str	r2, [r3, #0]
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000e4c 	.word	0x20000e4c
 80057c8:	20000974 	.word	0x20000974
 80057cc:	20000e34 	.word	0x20000e34
 80057d0:	20000e04 	.word	0x20000e04
 80057d4:	20000e00 	.word	0x20000e00
 80057d8:	20000e68 	.word	0x20000e68

080057dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b089      	sub	sp, #36	; 0x24
 80057e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057e6:	f000 fac9 	bl	8005d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <xTimerCreateTimerTask+0x6c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057fa:	003a      	movs	r2, r7
 80057fc:	1d39      	adds	r1, r7, #4
 80057fe:	2308      	movs	r3, #8
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	0018      	movs	r0, r3
 8005804:	f7fe fc56 	bl	80040b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005808:	683c      	ldr	r4, [r7, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	490f      	ldr	r1, [pc, #60]	; (800584c <xTimerCreateTimerTask+0x70>)
 8005810:	480f      	ldr	r0, [pc, #60]	; (8005850 <xTimerCreateTimerTask+0x74>)
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	2302      	movs	r3, #2
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	0022      	movs	r2, r4
 800581e:	f7ff f968 	bl	8004af2 <xTaskCreateStatic>
 8005822:	0002      	movs	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <xTimerCreateTimerTask+0x78>)
 8005826:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <xTimerCreateTimerTask+0x78>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <xTimerCreateTimerTask+0x62>
 800583a:	b672      	cpsid	i
 800583c:	e7fe      	b.n	800583c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b005      	add	sp, #20
 8005846:	bd90      	pop	{r4, r7, pc}
 8005848:	20000ea4 	.word	0x20000ea4
 800584c:	080065e0 	.word	0x080065e0
 8005850:	08005975 	.word	0x08005975
 8005854:	20000ea8 	.word	0x20000ea8

08005858 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <xTimerGenericCommand+0x1c>
 8005870:	b672      	cpsid	i
 8005872:	e7fe      	b.n	8005872 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005874:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <xTimerGenericCommand+0x90>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d030      	beq.n	80058de <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800587c:	2414      	movs	r4, #20
 800587e:	193b      	adds	r3, r7, r4
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005884:	193b      	adds	r3, r7, r4
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800588a:	193b      	adds	r3, r7, r4
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b05      	cmp	r3, #5
 8005894:	dc19      	bgt.n	80058ca <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005896:	f7ff fed5 	bl	8005644 <xTaskGetSchedulerState>
 800589a:	0003      	movs	r3, r0
 800589c:	2b02      	cmp	r3, #2
 800589e:	d109      	bne.n	80058b4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <xTimerGenericCommand+0x90>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a6:	1939      	adds	r1, r7, r4
 80058a8:	2300      	movs	r3, #0
 80058aa:	f7fe fdbd 	bl	8004428 <xQueueGenericSend>
 80058ae:	0003      	movs	r3, r0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	e014      	b.n	80058de <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <xTimerGenericCommand+0x90>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	2314      	movs	r3, #20
 80058ba:	18f9      	adds	r1, r7, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	2200      	movs	r2, #0
 80058c0:	f7fe fdb2 	bl	8004428 <xQueueGenericSend>
 80058c4:	0003      	movs	r3, r0
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	e009      	b.n	80058de <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <xTimerGenericCommand+0x90>)
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	2314      	movs	r3, #20
 80058d2:	18f9      	adds	r1, r7, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	f7fe fe6b 	bl	80045b0 <xQueueGenericSendFromISR>
 80058da:	0003      	movs	r3, r0
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b00b      	add	sp, #44	; 0x2c
 80058e6:	bd90      	pop	{r4, r7, pc}
 80058e8:	20000ea4 	.word	0x20000ea4

080058ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <prvProcessExpiredTimer+0x84>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3304      	adds	r3, #4
 8005904:	0018      	movs	r0, r3
 8005906:	f7fe fc6e 	bl	80041e6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2228      	movs	r2, #40	; 0x28
 800590e:	5c9b      	ldrb	r3, [r3, r2]
 8005910:	001a      	movs	r2, r3
 8005912:	2304      	movs	r3, #4
 8005914:	4013      	ands	r3, r2
 8005916:	d019      	beq.n	800594c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	18d1      	adds	r1, r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f8c3 	bl	8005ab0 <prvInsertTimerInActiveList>
 800592a:	1e03      	subs	r3, r0, #0
 800592c:	d017      	beq.n	800595e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	2300      	movs	r3, #0
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	2100      	movs	r1, #0
 800593a:	f7ff ff8d 	bl	8005858 <xTimerGenericCommand>
 800593e:	0003      	movs	r3, r0
 8005940:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <prvProcessExpiredTimer+0x72>
 8005948:	b672      	cpsid	i
 800594a:	e7fe      	b.n	800594a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2228      	movs	r2, #40	; 0x28
 8005950:	5c9b      	ldrb	r3, [r3, r2]
 8005952:	2201      	movs	r2, #1
 8005954:	4393      	bics	r3, r2
 8005956:	b2d9      	uxtb	r1, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2228      	movs	r2, #40	; 0x28
 800595c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	0010      	movs	r0, r2
 8005966:	4798      	blx	r3
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b004      	add	sp, #16
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000e9c 	.word	0x20000e9c

08005974 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800597c:	2308      	movs	r3, #8
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	0018      	movs	r0, r3
 8005982:	f000 f853 	bl	8005a2c <prvGetNextExpireTime>
 8005986:	0003      	movs	r3, r0
 8005988:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f000 f803 	bl	800599c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005996:	f000 f8cd 	bl	8005b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800599a:	e7ef      	b.n	800597c <prvTimerTask+0x8>

0800599c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059a6:	f7ff fac1 	bl	8004f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059aa:	2308      	movs	r3, #8
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 f85e 	bl	8005a70 <prvSampleTimeNow>
 80059b4:	0003      	movs	r3, r0
 80059b6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d12b      	bne.n	8005a16 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <prvProcessTimerOrBlockTask+0x42>
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d808      	bhi.n	80059de <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80059cc:	f7ff faba 	bl	8004f44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0011      	movs	r1, r2
 80059d6:	0018      	movs	r0, r3
 80059d8:	f7ff ff88 	bl	80058ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059dc:	e01d      	b.n	8005a1a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <prvProcessTimerOrBlockTask+0x88>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <prvProcessTimerOrBlockTask+0x56>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <prvProcessTimerOrBlockTask+0x58>
 80059f2:	2300      	movs	r3, #0
 80059f4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvProcessTimerOrBlockTask+0x8c>)
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	0019      	movs	r1, r3
 8005a04:	f7ff f842 	bl	8004a8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a08:	f7ff fa9c 	bl	8004f44 <xTaskResumeAll>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d104      	bne.n	8005a1a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8005a10:	f000 fa7e 	bl	8005f10 <vPortYield>
}
 8005a14:	e001      	b.n	8005a1a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8005a16:	f7ff fa95 	bl	8004f44 <xTaskResumeAll>
}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	20000ea0 	.word	0x20000ea0
 8005a28:	20000ea4 	.word	0x20000ea4

08005a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <prvGetNextExpireTime+0x40>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <prvGetNextExpireTime+0x16>
 8005a3e:	2201      	movs	r2, #1
 8005a40:	e000      	b.n	8005a44 <prvGetNextExpireTime+0x18>
 8005a42:	2200      	movs	r2, #0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <prvGetNextExpireTime+0x40>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e001      	b.n	8005a60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b004      	add	sp, #16
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	20000e9c 	.word	0x20000e9c

08005a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a78:	f7ff faf0 	bl	800505c <xTaskGetTickCount>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <prvSampleTimeNow+0x3c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d205      	bcs.n	8005a96 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005a8a:	f000 f919 	bl	8005cc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e002      	b.n	8005a9c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <prvSampleTimeNow+0x3c>)
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b004      	add	sp, #16
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000eac 	.word	0x20000eac

08005ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d812      	bhi.n	8005afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	1ad2      	subs	r2, r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d302      	bcc.n	8005aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e01b      	b.n	8005b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <prvInsertTimerInActiveList+0x7c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3304      	adds	r3, #4
 8005af2:	0019      	movs	r1, r3
 8005af4:	0010      	movs	r0, r2
 8005af6:	f7fe fb40 	bl	800417a <vListInsert>
 8005afa:	e012      	b.n	8005b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d206      	bcs.n	8005b12 <prvInsertTimerInActiveList+0x62>
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e007      	b.n	8005b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <prvInsertTimerInActiveList+0x80>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	0010      	movs	r0, r2
 8005b1e:	f7fe fb2c 	bl	800417a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b22:	697b      	ldr	r3, [r7, #20]
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b006      	add	sp, #24
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000ea0 	.word	0x20000ea0
 8005b30:	20000e9c 	.word	0x20000e9c

08005b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b08d      	sub	sp, #52	; 0x34
 8005b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b3a:	e0ac      	b.n	8005c96 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	18bb      	adds	r3, r7, r2
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da0f      	bge.n	8005b66 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b46:	18bb      	adds	r3, r7, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <prvProcessReceivedCommands+0x22>
 8005b52:	b672      	cpsid	i
 8005b54:	e7fe      	b.n	8005b54 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	6858      	ldr	r0, [r3, #4]
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0019      	movs	r1, r3
 8005b64:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b66:	2208      	movs	r2, #8
 8005b68:	18bb      	adds	r3, r7, r2
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da00      	bge.n	8005b72 <prvProcessReceivedCommands+0x3e>
 8005b70:	e091      	b.n	8005c96 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b72:	18bb      	adds	r3, r7, r2
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	3304      	adds	r3, #4
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7fe fb2e 	bl	80041e6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff ff6f 	bl	8005a70 <prvSampleTimeNow>
 8005b92:	0003      	movs	r3, r0
 8005b94:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005b96:	2308      	movs	r3, #8
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d900      	bls.n	8005ba2 <prvProcessReceivedCommands+0x6e>
 8005ba0:	e078      	b.n	8005c94 <prvProcessReceivedCommands+0x160>
 8005ba2:	009a      	lsls	r2, r3, #2
 8005ba4:	4b44      	ldr	r3, [pc, #272]	; (8005cb8 <prvProcessReceivedCommands+0x184>)
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2228      	movs	r2, #40	; 0x28
 8005bb0:	5c9b      	ldrb	r3, [r3, r2]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	b2d9      	uxtb	r1, r3
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2228      	movs	r2, #40	; 0x28
 8005bbc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bbe:	2408      	movs	r4, #8
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	18d1      	adds	r1, r2, r3
 8005bca:	193b      	adds	r3, r7, r4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f7ff ff6d 	bl	8005ab0 <prvInsertTimerInActiveList>
 8005bd6:	1e03      	subs	r3, r0, #0
 8005bd8:	d05d      	beq.n	8005c96 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	0010      	movs	r0, r2
 8005be2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2228      	movs	r2, #40	; 0x28
 8005be8:	5c9b      	ldrb	r3, [r3, r2]
 8005bea:	001a      	movs	r2, r3
 8005bec:	2304      	movs	r3, #4
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d051      	beq.n	8005c96 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	18d2      	adds	r2, r2, r3
 8005bfc:	6a38      	ldr	r0, [r7, #32]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	2100      	movs	r1, #0
 8005c06:	f7ff fe27 	bl	8005858 <xTimerGenericCommand>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d140      	bne.n	8005c96 <prvProcessReceivedCommands+0x162>
 8005c14:	b672      	cpsid	i
 8005c16:	e7fe      	b.n	8005c16 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2228      	movs	r2, #40	; 0x28
 8005c1c:	5c9b      	ldrb	r3, [r3, r2]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4393      	bics	r3, r2
 8005c22:	b2d9      	uxtb	r1, r3
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2228      	movs	r2, #40	; 0x28
 8005c28:	5499      	strb	r1, [r3, r2]
					break;
 8005c2a:	e034      	b.n	8005c96 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	2228      	movs	r2, #40	; 0x28
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	2201      	movs	r2, #1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b2d9      	uxtb	r1, r3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2228      	movs	r2, #40	; 0x28
 8005c3c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c3e:	2308      	movs	r3, #8
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <prvProcessReceivedCommands+0x120>
 8005c50:	b672      	cpsid	i
 8005c52:	e7fe      	b.n	8005c52 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	18d1      	adds	r1, r2, r3
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	6a38      	ldr	r0, [r7, #32]
 8005c62:	f7ff ff25 	bl	8005ab0 <prvInsertTimerInActiveList>
					break;
 8005c66:	e016      	b.n	8005c96 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2228      	movs	r2, #40	; 0x28
 8005c6c:	5c9b      	ldrb	r3, [r3, r2]
 8005c6e:	001a      	movs	r2, r3
 8005c70:	2302      	movs	r3, #2
 8005c72:	4013      	ands	r3, r2
 8005c74:	d104      	bne.n	8005c80 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 fa9d 	bl	80061b8 <vPortFree>
 8005c7e:	e00a      	b.n	8005c96 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2228      	movs	r2, #40	; 0x28
 8005c84:	5c9b      	ldrb	r3, [r3, r2]
 8005c86:	2201      	movs	r2, #1
 8005c88:	4393      	bics	r3, r2
 8005c8a:	b2d9      	uxtb	r1, r3
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	2228      	movs	r2, #40	; 0x28
 8005c90:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c92:	e000      	b.n	8005c96 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8005c94:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <prvProcessReceivedCommands+0x188>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	18b9      	adds	r1, r7, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fe fcf9 	bl	8004698 <xQueueReceive>
 8005ca6:	1e03      	subs	r3, r0, #0
 8005ca8:	d000      	beq.n	8005cac <prvProcessReceivedCommands+0x178>
 8005caa:	e747      	b.n	8005b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b00b      	add	sp, #44	; 0x2c
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	080066e4 	.word	0x080066e4
 8005cbc:	20000ea4 	.word	0x20000ea4

08005cc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cc6:	e041      	b.n	8005d4c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7fe fa80 	bl	80041e6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	0010      	movs	r0, r2
 8005cee:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2228      	movs	r2, #40	; 0x28
 8005cf4:	5c9b      	ldrb	r3, [r3, r2]
 8005cf6:	001a      	movs	r2, r3
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d026      	beq.n	8005d4c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d90e      	bls.n	8005d2e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d1c:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3304      	adds	r3, #4
 8005d24:	0019      	movs	r1, r3
 8005d26:	0010      	movs	r0, r2
 8005d28:	f7fe fa27 	bl	800417a <vListInsert>
 8005d2c:	e00e      	b.n	8005d4c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	2300      	movs	r3, #0
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f7ff fd8d 	bl	8005858 <xTimerGenericCommand>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <prvSwitchTimerLists+0x8c>
 8005d48:	b672      	cpsid	i
 8005d4a:	e7fe      	b.n	8005d4a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1b8      	bne.n	8005cc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <prvSwitchTimerLists+0xb8>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <prvSwitchTimerLists+0xb4>)
 8005d62:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <prvSwitchTimerLists+0xb8>)
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	20000e9c 	.word	0x20000e9c
 8005d78:	20000ea0 	.word	0x20000ea0

08005d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d82:	f000 f8d5 	bl	8005f30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d86:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <prvCheckForValidListAndQueue+0x64>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d123      	bne.n	8005dd6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <prvCheckForValidListAndQueue+0x68>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fe f9a7 	bl	80040e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvCheckForValidListAndQueue+0x6c>)
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe f9a3 	bl	80040e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <prvCheckForValidListAndQueue+0x70>)
 8005da0:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <prvCheckForValidListAndQueue+0x68>)
 8005da2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005da4:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <prvCheckForValidListAndQueue+0x74>)
 8005da6:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <prvCheckForValidListAndQueue+0x6c>)
 8005da8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <prvCheckForValidListAndQueue+0x78>)
 8005dac:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <prvCheckForValidListAndQueue+0x7c>)
 8005dae:	2100      	movs	r1, #0
 8005db0:	9100      	str	r1, [sp, #0]
 8005db2:	2110      	movs	r1, #16
 8005db4:	200a      	movs	r0, #10
 8005db6:	f7fe fa92 	bl	80042de <xQueueGenericCreateStatic>
 8005dba:	0002      	movs	r2, r0
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <prvCheckForValidListAndQueue+0x64>)
 8005dbe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <prvCheckForValidListAndQueue+0x64>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <prvCheckForValidListAndQueue+0x64>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0b      	ldr	r2, [pc, #44]	; (8005dfc <prvCheckForValidListAndQueue+0x80>)
 8005dce:	0011      	movs	r1, r2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fe fe33 	bl	8004a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dd6:	f000 f8bd 	bl	8005f54 <vPortExitCritical>
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000ea4 	.word	0x20000ea4
 8005de4:	20000e74 	.word	0x20000e74
 8005de8:	20000e88 	.word	0x20000e88
 8005dec:	20000e9c 	.word	0x20000e9c
 8005df0:	20000ea0 	.word	0x20000ea0
 8005df4:	20000f50 	.word	0x20000f50
 8005df8:	20000eb0 	.word	0x20000eb0
 8005dfc:	080065e8 	.word	0x080065e8

08005e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3b04      	subs	r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	0452      	lsls	r2, r2, #17
 8005e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <pxPortInitialiseStack+0x50>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3b14      	subs	r3, #20
 8005e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3b20      	subs	r3, #32
 8005e42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	0018      	movs	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	08005e55 	.word	0x08005e55

08005e54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <prvTaskExitError+0x2c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	d001      	beq.n	8005e6a <prvTaskExitError+0x16>
 8005e66:	b672      	cpsid	i
 8005e68:	e7fe      	b.n	8005e68 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005e6a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005e6c:	46c0      	nop			; (mov r8, r8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0fc      	beq.n	8005e6e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b002      	add	sp, #8
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	2000000c 	.word	0x2000000c

08005e84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <pxCurrentTCBConst2>)
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	3020      	adds	r0, #32
 8005e98:	f380 8809 	msr	PSP, r0
 8005e9c:	2002      	movs	r0, #2
 8005e9e:	f380 8814 	msr	CONTROL, r0
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005ea8:	46ae      	mov	lr, r5
 8005eaa:	bc08      	pop	{r3}
 8005eac:	bc04      	pop	{r2}
 8005eae:	b662      	cpsie	i
 8005eb0:	4718      	bx	r3
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46c0      	nop			; (mov r8, r8)
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	46c0      	nop			; (mov r8, r8)

08005ec0 <pxCurrentTCBConst2>:
 8005ec0:	20000974 	.word	0x20000974
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46c0      	nop			; (mov r8, r8)

08005ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <xPortStartScheduler+0x40>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <xPortStartScheduler+0x40>)
 8005ed2:	21ff      	movs	r1, #255	; 0xff
 8005ed4:	0409      	lsls	r1, r1, #16
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <xPortStartScheduler+0x40>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <xPortStartScheduler+0x40>)
 8005ee0:	21ff      	movs	r1, #255	; 0xff
 8005ee2:	0609      	lsls	r1, r1, #24
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ee8:	f000 f898 	bl	800601c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <xPortStartScheduler+0x44>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005ef2:	f7ff ffcd 	bl	8005e90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef6:	f7ff f96f 	bl	80051d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005efa:	f7ff ffab 	bl	8005e54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	e000ed20 	.word	0xe000ed20
 8005f0c:	2000000c 	.word	0x2000000c

08005f10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <vPortYield+0x1c>)
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	0552      	lsls	r2, r2, #21
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005f1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005f20:	f3bf 8f6f 	isb	sy
}
 8005f24:	46c0      	nop			; (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005f34:	b672      	cpsid	i
	uxCriticalNesting++;
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <vPortEnterCritical+0x20>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <vPortEnterCritical+0x20>)
 8005f3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005f40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005f44:	f3bf 8f6f 	isb	sy
}
 8005f48:	46c0      	nop			; (mov r8, r8)
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	2000000c 	.word	0x2000000c

08005f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <vPortExitCritical+0x2c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <vPortExitCritical+0x10>
 8005f60:	b672      	cpsid	i
 8005f62:	e7fe      	b.n	8005f62 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <vPortExitCritical+0x2c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1e5a      	subs	r2, r3, #1
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <vPortExitCritical+0x2c>)
 8005f6c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <vPortExitCritical+0x2c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005f76:	b662      	cpsie	i
	}
}
 8005f78:	46c0      	nop			; (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	2000000c 	.word	0x2000000c

08005f84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005f84:	f3ef 8010 	mrs	r0, PRIMASK
 8005f88:	b672      	cpsid	i
 8005f8a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	0018      	movs	r0, r3

08005f90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005f90:	f380 8810 	msr	PRIMASK, r0
 8005f94:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005f96:	46c0      	nop			; (mov r8, r8)
	...

08005fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fa0:	f3ef 8009 	mrs	r0, PSP
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <pxCurrentTCBConst>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	3820      	subs	r0, #32
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005fae:	4644      	mov	r4, r8
 8005fb0:	464d      	mov	r5, r9
 8005fb2:	4656      	mov	r6, sl
 8005fb4:	465f      	mov	r7, fp
 8005fb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005fb8:	b508      	push	{r3, lr}
 8005fba:	b672      	cpsid	i
 8005fbc:	f7ff f90c 	bl	80051d8 <vTaskSwitchContext>
 8005fc0:	b662      	cpsie	i
 8005fc2:	bc0c      	pop	{r2, r3}
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	6808      	ldr	r0, [r1, #0]
 8005fc8:	3010      	adds	r0, #16
 8005fca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005fcc:	46a0      	mov	r8, r4
 8005fce:	46a9      	mov	r9, r5
 8005fd0:	46b2      	mov	sl, r6
 8005fd2:	46bb      	mov	fp, r7
 8005fd4:	f380 8809 	msr	PSP, r0
 8005fd8:	3820      	subs	r0, #32
 8005fda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005fdc:	4718      	bx	r3
 8005fde:	46c0      	nop			; (mov r8, r8)

08005fe0 <pxCurrentTCBConst>:
 8005fe0:	20000974 	.word	0x20000974
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46c0      	nop			; (mov r8, r8)

08005fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fee:	f7ff ffc9 	bl	8005f84 <ulSetInterruptMaskFromISR>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ff6:	f7ff f83f 	bl	8005078 <xTaskIncrementTick>
 8005ffa:	1e03      	subs	r3, r0, #0
 8005ffc:	d003      	beq.n	8006006 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <xPortSysTickHandler+0x30>)
 8006000:	2280      	movs	r2, #128	; 0x80
 8006002:	0552      	lsls	r2, r2, #21
 8006004:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0018      	movs	r0, r3
 800600a:	f7ff ffc1 	bl	8005f90 <vClearInterruptMaskFromISR>
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	b002      	add	sp, #8
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <vPortSetupTimerInterrupt+0x38>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <vPortSetupTimerInterrupt+0x3c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	22fa      	movs	r2, #250	; 0xfa
 8006032:	0091      	lsls	r1, r2, #2
 8006034:	0018      	movs	r0, r3
 8006036:	f7fa f867 	bl	8000108 <__udivsi3>
 800603a:	0003      	movs	r3, r0
 800603c:	001a      	movs	r2, r3
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <vPortSetupTimerInterrupt+0x40>)
 8006040:	3a01      	subs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006046:	2207      	movs	r2, #7
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	e000e010 	.word	0xe000e010
 8006054:	e000e018 	.word	0xe000e018
 8006058:	20000000 	.word	0x20000000
 800605c:	e000e014 	.word	0xe000e014

08006060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800606c:	f7fe ff5e 	bl	8004f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006070:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <pvPortMalloc+0x140>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006078:	f000 f8ec 	bl	8006254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800607c:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <pvPortMalloc+0x144>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4013      	ands	r3, r2
 8006084:	d000      	beq.n	8006088 <pvPortMalloc+0x28>
 8006086:	e07e      	b.n	8006186 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800608e:	2208      	movs	r2, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	189b      	adds	r3, r3, r2
 8006094:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2207      	movs	r2, #7
 800609a:	4013      	ands	r3, r2
 800609c:	d00a      	beq.n	80060b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2207      	movs	r2, #7
 80060a2:	4393      	bics	r3, r2
 80060a4:	3308      	adds	r3, #8
 80060a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2207      	movs	r2, #7
 80060ac:	4013      	ands	r3, r2
 80060ae:	d001      	beq.n	80060b4 <pvPortMalloc+0x54>
 80060b0:	b672      	cpsid	i
 80060b2:	e7fe      	b.n	80060b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d065      	beq.n	8006186 <pvPortMalloc+0x126>
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <pvPortMalloc+0x148>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d860      	bhi.n	8006186 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060c4:	4b39      	ldr	r3, [pc, #228]	; (80061ac <pvPortMalloc+0x14c>)
 80060c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80060c8:	4b38      	ldr	r3, [pc, #224]	; (80061ac <pvPortMalloc+0x14c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ce:	e004      	b.n	80060da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d903      	bls.n	80060ec <pvPortMalloc+0x8c>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f1      	bne.n	80060d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060ec:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <pvPortMalloc+0x140>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d047      	beq.n	8006186 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2208      	movs	r2, #8
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	2308      	movs	r3, #8
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	429a      	cmp	r2, r3
 8006116:	d916      	bls.n	8006146 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	18d3      	adds	r3, r2, r3
 800611e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2207      	movs	r2, #7
 8006124:	4013      	ands	r3, r2
 8006126:	d001      	beq.n	800612c <pvPortMalloc+0xcc>
 8006128:	b672      	cpsid	i
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	1ad2      	subs	r2, r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0018      	movs	r0, r3
 8006142:	f000 f8e7 	bl	8006314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <pvPortMalloc+0x148>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <pvPortMalloc+0x148>)
 8006152:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006154:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <pvPortMalloc+0x148>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <pvPortMalloc+0x150>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d203      	bcs.n	8006168 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <pvPortMalloc+0x148>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <pvPortMalloc+0x150>)
 8006166:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <pvPortMalloc+0x144>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	431a      	orrs	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <pvPortMalloc+0x154>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <pvPortMalloc+0x154>)
 8006184:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006186:	f7fe fedd 	bl	8004f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2207      	movs	r2, #7
 800618e:	4013      	ands	r3, r2
 8006190:	d001      	beq.n	8006196 <pvPortMalloc+0x136>
 8006192:	b672      	cpsid	i
 8006194:	e7fe      	b.n	8006194 <pvPortMalloc+0x134>
	return pvReturn;
 8006196:	68fb      	ldr	r3, [r7, #12]
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b006      	add	sp, #24
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20001ba8 	.word	0x20001ba8
 80061a4:	20001bbc 	.word	0x20001bbc
 80061a8:	20001bac 	.word	0x20001bac
 80061ac:	20001ba0 	.word	0x20001ba0
 80061b0:	20001bb0 	.word	0x20001bb0
 80061b4:	20001bb4 	.word	0x20001bb4

080061b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d03a      	beq.n	8006240 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ca:	2308      	movs	r3, #8
 80061cc:	425b      	negs	r3, r3
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	18d3      	adds	r3, r2, r3
 80061d2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <vPortFree+0x90>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4013      	ands	r3, r2
 80061e2:	d101      	bne.n	80061e8 <vPortFree+0x30>
 80061e4:	b672      	cpsid	i
 80061e6:	e7fe      	b.n	80061e6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <vPortFree+0x3c>
 80061f0:	b672      	cpsid	i
 80061f2:	e7fe      	b.n	80061f2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <vPortFree+0x90>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4013      	ands	r3, r2
 80061fe:	d01f      	beq.n	8006240 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11b      	bne.n	8006240 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <vPortFree+0x90>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006218:	f7fe fe88 	bl	8004f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <vPortFree+0x94>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	18d2      	adds	r2, r2, r3
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <vPortFree+0x94>)
 8006228:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	0018      	movs	r0, r3
 800622e:	f000 f871 	bl	8006314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <vPortFree+0x98>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <vPortFree+0x98>)
 800623a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800623c:	f7fe fe82 	bl	8004f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	b004      	add	sp, #16
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20001bbc 	.word	0x20001bbc
 800624c:	20001bac 	.word	0x20001bac
 8006250:	20001bb8 	.word	0x20001bb8

08006254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625a:	23c0      	movs	r3, #192	; 0xc0
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006260:	4b26      	ldr	r3, [pc, #152]	; (80062fc <prvHeapInit+0xa8>)
 8006262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2207      	movs	r2, #7
 8006268:	4013      	ands	r3, r2
 800626a:	d00c      	beq.n	8006286 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3307      	adds	r3, #7
 8006270:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2207      	movs	r2, #7
 8006276:	4393      	bics	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <prvHeapInit+0xa8>)
 8006282:	18d3      	adds	r3, r2, r3
 8006284:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <prvHeapInit+0xac>)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <prvHeapInit+0xac>)
 8006292:	2200      	movs	r2, #0
 8006294:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	18d3      	adds	r3, r2, r3
 800629c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800629e:	2208      	movs	r2, #8
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2207      	movs	r2, #7
 80062aa:	4393      	bics	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4b14      	ldr	r3, [pc, #80]	; (8006304 <prvHeapInit+0xb0>)
 80062b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80062b4:	4b13      	ldr	r3, [pc, #76]	; (8006304 <prvHeapInit+0xb0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2200      	movs	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <prvHeapInit+0xb0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <prvHeapInit+0xb0>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <prvHeapInit+0xb4>)
 80062e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <prvHeapInit+0xb8>)
 80062e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <prvHeapInit+0xbc>)
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	0612      	lsls	r2, r2, #24
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b004      	add	sp, #16
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	20000fa0 	.word	0x20000fa0
 8006300:	20001ba0 	.word	0x20001ba0
 8006304:	20001ba8 	.word	0x20001ba8
 8006308:	20001bb0 	.word	0x20001bb0
 800630c:	20001bac 	.word	0x20001bac
 8006310:	20001bbc 	.word	0x20001bbc

08006314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <prvInsertBlockIntoFreeList+0xa8>)
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e002      	b.n	8006328 <prvInsertBlockIntoFreeList+0x14>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d8f7      	bhi.n	8006322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	18d3      	adds	r3, r2, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d108      	bne.n	8006356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	18d2      	adds	r2, r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	18d2      	adds	r2, r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d118      	bne.n	800639c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <prvInsertBlockIntoFreeList+0xac>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d00d      	beq.n	8006392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	18d2      	adds	r2, r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e008      	b.n	80063a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <prvInsertBlockIntoFreeList+0xac>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e003      	b.n	80063a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d002      	beq.n	80063b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b004      	add	sp, #16
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	20001ba0 	.word	0x20001ba0
 80063c0:	20001ba8 	.word	0x20001ba8

080063c4 <memset>:
 80063c4:	0003      	movs	r3, r0
 80063c6:	1882      	adds	r2, r0, r2
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	7019      	strb	r1, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <_reclaim_reent>:
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <_reclaim_reent+0xb8>)
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	0004      	movs	r4, r0
 80063dc:	4283      	cmp	r3, r0
 80063de:	d042      	beq.n	8006466 <_reclaim_reent+0x92>
 80063e0:	69c3      	ldr	r3, [r0, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <_reclaim_reent+0x28>
 80063e6:	2500      	movs	r5, #0
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	42ab      	cmp	r3, r5
 80063ec:	d140      	bne.n	8006470 <_reclaim_reent+0x9c>
 80063ee:	69e3      	ldr	r3, [r4, #28]
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d002      	beq.n	80063fc <_reclaim_reent+0x28>
 80063f6:	0020      	movs	r0, r4
 80063f8:	f000 f87a 	bl	80064f0 <_free_r>
 80063fc:	6961      	ldr	r1, [r4, #20]
 80063fe:	2900      	cmp	r1, #0
 8006400:	d002      	beq.n	8006408 <_reclaim_reent+0x34>
 8006402:	0020      	movs	r0, r4
 8006404:	f000 f874 	bl	80064f0 <_free_r>
 8006408:	69e1      	ldr	r1, [r4, #28]
 800640a:	2900      	cmp	r1, #0
 800640c:	d002      	beq.n	8006414 <_reclaim_reent+0x40>
 800640e:	0020      	movs	r0, r4
 8006410:	f000 f86e 	bl	80064f0 <_free_r>
 8006414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006416:	2900      	cmp	r1, #0
 8006418:	d002      	beq.n	8006420 <_reclaim_reent+0x4c>
 800641a:	0020      	movs	r0, r4
 800641c:	f000 f868 	bl	80064f0 <_free_r>
 8006420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006422:	2900      	cmp	r1, #0
 8006424:	d002      	beq.n	800642c <_reclaim_reent+0x58>
 8006426:	0020      	movs	r0, r4
 8006428:	f000 f862 	bl	80064f0 <_free_r>
 800642c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800642e:	2900      	cmp	r1, #0
 8006430:	d002      	beq.n	8006438 <_reclaim_reent+0x64>
 8006432:	0020      	movs	r0, r4
 8006434:	f000 f85c 	bl	80064f0 <_free_r>
 8006438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800643a:	2900      	cmp	r1, #0
 800643c:	d002      	beq.n	8006444 <_reclaim_reent+0x70>
 800643e:	0020      	movs	r0, r4
 8006440:	f000 f856 	bl	80064f0 <_free_r>
 8006444:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006446:	2900      	cmp	r1, #0
 8006448:	d002      	beq.n	8006450 <_reclaim_reent+0x7c>
 800644a:	0020      	movs	r0, r4
 800644c:	f000 f850 	bl	80064f0 <_free_r>
 8006450:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006452:	2900      	cmp	r1, #0
 8006454:	d002      	beq.n	800645c <_reclaim_reent+0x88>
 8006456:	0020      	movs	r0, r4
 8006458:	f000 f84a 	bl	80064f0 <_free_r>
 800645c:	6a23      	ldr	r3, [r4, #32]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <_reclaim_reent+0x92>
 8006462:	0020      	movs	r0, r4
 8006464:	4798      	blx	r3
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	5949      	ldr	r1, [r1, r5]
 800646a:	2900      	cmp	r1, #0
 800646c:	d108      	bne.n	8006480 <_reclaim_reent+0xac>
 800646e:	3504      	adds	r5, #4
 8006470:	69e3      	ldr	r3, [r4, #28]
 8006472:	68d9      	ldr	r1, [r3, #12]
 8006474:	2d80      	cmp	r5, #128	; 0x80
 8006476:	d1f7      	bne.n	8006468 <_reclaim_reent+0x94>
 8006478:	0020      	movs	r0, r4
 800647a:	f000 f839 	bl	80064f0 <_free_r>
 800647e:	e7b6      	b.n	80063ee <_reclaim_reent+0x1a>
 8006480:	680e      	ldr	r6, [r1, #0]
 8006482:	0020      	movs	r0, r4
 8006484:	f000 f834 	bl	80064f0 <_free_r>
 8006488:	0031      	movs	r1, r6
 800648a:	e7ee      	b.n	800646a <_reclaim_reent+0x96>
 800648c:	2000005c 	.word	0x2000005c

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	2600      	movs	r6, #0
 8006494:	4c0c      	ldr	r4, [pc, #48]	; (80064c8 <__libc_init_array+0x38>)
 8006496:	4d0d      	ldr	r5, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	2600      	movs	r6, #0
 80064a2:	f000 f87f 	bl	80065a4 <_init>
 80064a6:	4c0a      	ldr	r4, [pc, #40]	; (80064d0 <__libc_init_array+0x40>)
 80064a8:	4d0a      	ldr	r5, [pc, #40]	; (80064d4 <__libc_init_array+0x44>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	00b3      	lsls	r3, r6, #2
 80064b6:	58eb      	ldr	r3, [r5, r3]
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	00b3      	lsls	r3, r6, #2
 80064c0:	58eb      	ldr	r3, [r5, r3]
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	08006714 	.word	0x08006714
 80064cc:	08006714 	.word	0x08006714
 80064d0:	08006718 	.word	0x08006718
 80064d4:	08006714 	.word	0x08006714

080064d8 <__retarget_lock_acquire_recursive>:
 80064d8:	4770      	bx	lr

080064da <__retarget_lock_release_recursive>:
 80064da:	4770      	bx	lr

080064dc <memcpy>:
 80064dc:	2300      	movs	r3, #0
 80064de:	b510      	push	{r4, lr}
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d100      	bne.n	80064e6 <memcpy+0xa>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	5ccc      	ldrb	r4, [r1, r3]
 80064e8:	54c4      	strb	r4, [r0, r3]
 80064ea:	3301      	adds	r3, #1
 80064ec:	e7f8      	b.n	80064e0 <memcpy+0x4>
	...

080064f0 <_free_r>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	0005      	movs	r5, r0
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d010      	beq.n	800651a <_free_r+0x2a>
 80064f8:	1f0c      	subs	r4, r1, #4
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da00      	bge.n	8006502 <_free_r+0x12>
 8006500:	18e4      	adds	r4, r4, r3
 8006502:	0028      	movs	r0, r5
 8006504:	f000 f83e 	bl	8006584 <__malloc_lock>
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <_free_r+0x90>)
 800650a:	6813      	ldr	r3, [r2, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <_free_r+0x2c>
 8006510:	6063      	str	r3, [r4, #4]
 8006512:	6014      	str	r4, [r2, #0]
 8006514:	0028      	movs	r0, r5
 8006516:	f000 f83d 	bl	8006594 <__malloc_unlock>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	42a3      	cmp	r3, r4
 800651e:	d908      	bls.n	8006532 <_free_r+0x42>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	1821      	adds	r1, r4, r0
 8006524:	428b      	cmp	r3, r1
 8006526:	d1f3      	bne.n	8006510 <_free_r+0x20>
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	1809      	adds	r1, r1, r0
 800652e:	6021      	str	r1, [r4, #0]
 8006530:	e7ee      	b.n	8006510 <_free_r+0x20>
 8006532:	001a      	movs	r2, r3
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <_free_r+0x4e>
 800653a:	42a3      	cmp	r3, r4
 800653c:	d9f9      	bls.n	8006532 <_free_r+0x42>
 800653e:	6811      	ldr	r1, [r2, #0]
 8006540:	1850      	adds	r0, r2, r1
 8006542:	42a0      	cmp	r0, r4
 8006544:	d10b      	bne.n	800655e <_free_r+0x6e>
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	1809      	adds	r1, r1, r0
 800654a:	1850      	adds	r0, r2, r1
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	4283      	cmp	r3, r0
 8006550:	d1e0      	bne.n	8006514 <_free_r+0x24>
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	1841      	adds	r1, r0, r1
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	6053      	str	r3, [r2, #4]
 800655c:	e7da      	b.n	8006514 <_free_r+0x24>
 800655e:	42a0      	cmp	r0, r4
 8006560:	d902      	bls.n	8006568 <_free_r+0x78>
 8006562:	230c      	movs	r3, #12
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	e7d5      	b.n	8006514 <_free_r+0x24>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	1821      	adds	r1, r4, r0
 800656c:	428b      	cmp	r3, r1
 800656e:	d103      	bne.n	8006578 <_free_r+0x88>
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	1809      	adds	r1, r1, r0
 8006576:	6021      	str	r1, [r4, #0]
 8006578:	6063      	str	r3, [r4, #4]
 800657a:	6054      	str	r4, [r2, #4]
 800657c:	e7ca      	b.n	8006514 <_free_r+0x24>
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	20001cfc 	.word	0x20001cfc

08006584 <__malloc_lock>:
 8006584:	b510      	push	{r4, lr}
 8006586:	4802      	ldr	r0, [pc, #8]	; (8006590 <__malloc_lock+0xc>)
 8006588:	f7ff ffa6 	bl	80064d8 <__retarget_lock_acquire_recursive>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	20001cf8 	.word	0x20001cf8

08006594 <__malloc_unlock>:
 8006594:	b510      	push	{r4, lr}
 8006596:	4802      	ldr	r0, [pc, #8]	; (80065a0 <__malloc_unlock+0xc>)
 8006598:	f7ff ff9f 	bl	80064da <__retarget_lock_release_recursive>
 800659c:	bd10      	pop	{r4, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	20001cf8 	.word	0x20001cf8

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr
