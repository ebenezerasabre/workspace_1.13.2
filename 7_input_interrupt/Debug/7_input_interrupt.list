
7_input_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  4 .ARM          00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800036c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800036c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003fa  00000000  00000000  000103d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001d7  00000000  00000000  000107d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  000109a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011972  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000be4  00000000  00000000  00022416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006391e  00000000  00000000  00022ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000012c  00000000  00000000  00086918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00086a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800034c 	.word	0x0800034c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800034c 	.word	0x0800034c

08000108 <pa0_adc_init>:
// find pin adc is connected to: find adc. look for additional functions in table
// Pin assignment and description

//using ADC_IN0, PA0

void pa0_adc_init(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 800010c:	4b35      	ldr	r3, [pc, #212]	; (80001e4 <pa0_adc_init+0xdc>)
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	4b34      	ldr	r3, [pc, #208]	; (80001e4 <pa0_adc_init+0xdc>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]

	// enable clock access to GPIOC
	RCC_IOPENR_R |= GPIOCEN;
 8000118:	4b32      	ldr	r3, [pc, #200]	; (80001e4 <pa0_adc_init+0xdc>)
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	4b31      	ldr	r3, [pc, #196]	; (80001e4 <pa0_adc_init+0xdc>)
 800011e:	2104      	movs	r1, #4
 8000120:	430a      	orrs	r2, r1
 8000122:	601a      	str	r2, [r3, #0]

	// set mode of PA0 to analog
	GPIOA_MODER_R |= (1U<<0);
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2101      	movs	r1, #1
 8000130:	430a      	orrs	r2, r1
 8000132:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<1);
 8000134:	23a0      	movs	r3, #160	; 0xa0
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	681a      	ldr	r2, [r3, #0]
 800013a:	23a0      	movs	r3, #160	; 0xa0
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	2102      	movs	r1, #2
 8000140:	430a      	orrs	r2, r1
 8000142:	601a      	str	r2, [r3, #0]

	// set mode of PA1 to analog
	GPIOA_MODER_R |= (1UL<<2);
 8000144:	23a0      	movs	r3, #160	; 0xa0
 8000146:	05db      	lsls	r3, r3, #23
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	23a0      	movs	r3, #160	; 0xa0
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	2104      	movs	r1, #4
 8000150:	430a      	orrs	r2, r1
 8000152:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<3);
 8000154:	23a0      	movs	r3, #160	; 0xa0
 8000156:	05db      	lsls	r3, r3, #23
 8000158:	681a      	ldr	r2, [r3, #0]
 800015a:	23a0      	movs	r3, #160	; 0xa0
 800015c:	05db      	lsls	r3, r3, #23
 800015e:	2108      	movs	r1, #8
 8000160:	430a      	orrs	r2, r1
 8000162:	601a      	str	r2, [r3, #0]

	// set mode of PA5 to output
//	GPIOA_MODER_R |= (1UL<<10);
//	GPIOA_MODER_R &= ~(1U<<11);

	GPIOA->MODER |= (1UL<<10);
 8000164:	23a0      	movs	r3, #160	; 0xa0
 8000166:	05db      	lsls	r3, r3, #23
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	23a0      	movs	r3, #160	; 0xa0
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	00c9      	lsls	r1, r1, #3
 8000172:	430a      	orrs	r2, r1
 8000174:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000176:	23a0      	movs	r3, #160	; 0xa0
 8000178:	05db      	lsls	r3, r3, #23
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	23a0      	movs	r3, #160	; 0xa0
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	4919      	ldr	r1, [pc, #100]	; (80001e8 <pa0_adc_init+0xe0>)
 8000182:	400a      	ands	r2, r1
 8000184:	601a      	str	r2, [r3, #0]

	// set PC13 as input
	GPIOC->MODER &= ~(1U<<26);
 8000186:	4b19      	ldr	r3, [pc, #100]	; (80001ec <pa0_adc_init+0xe4>)
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	4b18      	ldr	r3, [pc, #96]	; (80001ec <pa0_adc_init+0xe4>)
 800018c:	4918      	ldr	r1, [pc, #96]	; (80001f0 <pa0_adc_init+0xe8>)
 800018e:	400a      	ands	r2, r1
 8000190:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1U<<27);
 8000192:	4b16      	ldr	r3, [pc, #88]	; (80001ec <pa0_adc_init+0xe4>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	; (80001ec <pa0_adc_init+0xe4>)
 8000198:	4916      	ldr	r1, [pc, #88]	; (80001f4 <pa0_adc_init+0xec>)
 800019a:	400a      	ands	r2, r1
 800019c:	601a      	str	r2, [r3, #0]

	// enable clock access to adc module
	RCC_APBENR2_R 	|= ADCEN;
 800019e:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <pa0_adc_init+0xf0>)
 80001a0:	681a      	ldr	r2, [r3, #0]
 80001a2:	4b15      	ldr	r3, [pc, #84]	; (80001f8 <pa0_adc_init+0xf0>)
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	0349      	lsls	r1, r1, #13
 80001a8:	430a      	orrs	r2, r1
 80001aa:	601a      	str	r2, [r3, #0]
//	Analog-to-digital converter (ADC)
	/*Following guide*/


	// data resolution
	ADC_CFGR1_R &= ~(1U<<3);
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <pa0_adc_init+0xf4>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	4b12      	ldr	r3, [pc, #72]	; (80001fc <pa0_adc_init+0xf4>)
 80001b2:	2108      	movs	r1, #8
 80001b4:	438a      	bics	r2, r1
 80001b6:	601a      	str	r2, [r3, #0]
	ADC_CFGR1_R |= (1U<<4);
 80001b8:	4b10      	ldr	r3, [pc, #64]	; (80001fc <pa0_adc_init+0xf4>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <pa0_adc_init+0xf4>)
 80001be:	2110      	movs	r1, #16
 80001c0:	430a      	orrs	r2, r1
 80001c2:	601a      	str	r2, [r3, #0]
	// conversion sequence length

//	ADC_CFGR1_R &= ~ADC_CHSELRMOD;  //~(1U<<21); //ADC_CHSELRMOD;

//	ADC_CHSELR_R |= (1U<<0); // CH1 pa0
	ADC_CHSELR_R |= (1U<<1); // CH1 pa1
 80001c4:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <pa0_adc_init+0xf8>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <pa0_adc_init+0xf8>)
 80001ca:	2102      	movs	r1, #2
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]


	//enable adc module
	ADC_CR_R |= ADC_ADEN;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <pa0_adc_init+0xfc>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <pa0_adc_init+0xfc>)
 80001d6:	2101      	movs	r1, #1
 80001d8:	430a      	orrs	r2, r1
 80001da:	601a      	str	r2, [r3, #0]

}
 80001dc:	46c0      	nop			; (mov r8, r8)
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	46c0      	nop			; (mov r8, r8)
 80001e4:	40021034 	.word	0x40021034
 80001e8:	fffff7ff 	.word	0xfffff7ff
 80001ec:	50000800 	.word	0x50000800
 80001f0:	fbffffff 	.word	0xfbffffff
 80001f4:	f7ffffff 	.word	0xf7ffffff
 80001f8:	40021040 	.word	0x40021040
 80001fc:	40012714 	.word	0x40012714
 8000200:	40012730 	.word	0x40012730
 8000204:	40012710 	.word	0x40012710

08000208 <adc_cnvrsn>:
	while(!(ADC_ISR_R & ADC_ISR_EOC)){}
	return ADC_DR_R;
}


void adc_cnvrsn(void){
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	// Continuous conversion mode
	ADC_CFGR1_R |= (1U<<13);
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <adc_cnvrsn+0x24>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <adc_cnvrsn+0x24>)
 8000212:	2180      	movs	r1, #128	; 0x80
 8000214:	0189      	lsls	r1, r1, #6
 8000216:	430a      	orrs	r2, r1
 8000218:	601a      	str	r2, [r3, #0]

	// conversion sequence start
	ADC_CR_R |= ADC_ADSTART;
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <adc_cnvrsn+0x28>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <adc_cnvrsn+0x28>)
 8000220:	2104      	movs	r1, #4
 8000222:	430a      	orrs	r2, r1
 8000224:	601a      	str	r2, [r3, #0]

}
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40012714 	.word	0x40012714
 8000230:	40012710 	.word	0x40012710

08000234 <gpio_init>:



void gpio_init(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <gpio_init+0x18>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <gpio_init+0x18>)
 800023e:	2101      	movs	r1, #1
 8000240:	430a      	orrs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
//	GPIOA_AFRL |= (1U<<21);
//	GPIOA_AFRL &= ~(1U<<22);
//	GPIOA_AFRL &= ~(1U<<23);


}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021034 	.word	0x40021034

08000250 <main>:
// function prototypes
void gpio_init(void);
static void exti_callback(void);
int num = 0;

int main(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	 pa0_adc_init();
 8000254:	f7ff ff58 	bl	8000108 <pa0_adc_init>
	 adc_cnvrsn();
 8000258:	f7ff ffd6 	bl	8000208 <adc_cnvrsn>
	 gpio_init();
 800025c:	f7ff ffea 	bl	8000234 <gpio_init>
//	 tim2_pa5_output_compare();

//	 GPIOA->MODER
//	 GPIOA->MODER

	 num = 7;
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <main+0x18>)
 8000262:	2207      	movs	r2, #7
 8000264:	601a      	str	r2, [r3, #0]
	while(1){
 8000266:	e7fe      	b.n	8000266 <main+0x16>
 8000268:	2000001c 	.word	0x2000001c

0800026c <EXTI4_15_IRQHandler>:

	}

}

void EXTI4_15_IRQHandler(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	num = 20;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <EXTI4_15_IRQHandler+0x30>)
 8000272:	2214      	movs	r2, #20
 8000274:	601a      	str	r2, [r3, #0]
	//check if interrupt is from line 13
	if((EXTI->FPR1 & LINE13) != 0){
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <EXTI4_15_IRQHandler+0x34>)
 8000278:	691a      	ldr	r2, [r3, #16]
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	019b      	lsls	r3, r3, #6
 800027e:	4013      	ands	r3, r2
 8000280:	d008      	beq.n	8000294 <EXTI4_15_IRQHandler+0x28>
		// clear pr flag
		EXTI->FPR1 |= LINE13;
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <EXTI4_15_IRQHandler+0x34>)
 8000284:	691a      	ldr	r2, [r3, #16]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <EXTI4_15_IRQHandler+0x34>)
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	0189      	lsls	r1, r1, #6
 800028c:	430a      	orrs	r2, r1
 800028e:	611a      	str	r2, [r3, #16]

		// do something
		exti_callback();
 8000290:	f000 f808 	bl	80002a4 <exti_callback>
	}
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	2000001c 	.word	0x2000001c
 80002a0:	40021800 	.word	0x40021800

080002a4 <exti_callback>:

static void exti_callback(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

//	GPIOA->ODR ^= LED;
//	for(int i=0; i<100000; i++)
		;
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	e000      	b.n	80002b8 <Reset_Handler+0x8>
 80002b6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffb5 	bl	8000250 <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	20000020 	.word	0x20000020

08000300 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_COMP_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	2600      	movs	r6, #0
 8000308:	4c0c      	ldr	r4, [pc, #48]	; (800033c <__libc_init_array+0x38>)
 800030a:	4d0d      	ldr	r5, [pc, #52]	; (8000340 <__libc_init_array+0x3c>)
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	2600      	movs	r6, #0
 8000316:	f000 f819 	bl	800034c <_init>
 800031a:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <__libc_init_array+0x40>)
 800031c:	4d0a      	ldr	r5, [pc, #40]	; (8000348 <__libc_init_array+0x44>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	00b3      	lsls	r3, r6, #2
 800032a:	58eb      	ldr	r3, [r5, r3]
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	00b3      	lsls	r3, r6, #2
 8000334:	58eb      	ldr	r3, [r5, r3]
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000368 	.word	0x08000368
 8000348:	08000364 	.word	0x08000364

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
