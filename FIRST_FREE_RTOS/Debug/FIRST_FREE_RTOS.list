
FIRST_FREE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005904  08005904  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800590c  0800590c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000060  08005974  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  08005974  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a94e  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003659  00000000  00000000  0003aa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b1  00000000  00000000  0003f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a0e  00000000  00000000  000408d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001860b  00000000  00000000  000442df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5fb6  00000000  00000000  0005c8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000556c  00000000  00000000  001228a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00127e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005824 	.word	0x08005824

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005824 	.word	0x08005824

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
TaskProfiler BlueTaskProfiler;
TaskProfiler RedTaskProfiler;
TaskProfiler GreenTaskProfiler;

int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa66 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f814 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8a8 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f858 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // create queue to hold a maximum of 3 structures
  xQueue = xQueueCreate(3, sizeof(Data_t));
 8000634:	2200      	movs	r2, #0
 8000636:	2125      	movs	r1, #37	; 0x25
 8000638:	2003      	movs	r0, #3
 800063a:	f003 f848 	bl	80036ce <xQueueGenericCreate>
 800063e:	0002      	movs	r2, r0
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <main+0x30>)
 8000642:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000644:	f002 fea4 	bl	8003390 <osKernelStart>
  		  &pressTaskHandle);


  */

  vTaskStartScheduler();	// start schedule
 8000648:	f003 fd4c 	bl	80040e4 <vTaskStartScheduler>

  //int ch[3] = {'H','e','l'};
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x2c>
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000110 	.word	0x20000110

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b095      	sub	sp, #84	; 0x54
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	2414      	movs	r4, #20
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	233c      	movs	r3, #60	; 0x3c
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 ffed 	bl	8005644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2310      	movs	r3, #16
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f004 ffe6 	bl	8005644 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fcad 	bl	8000fdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2202      	movs	r2, #2
 8000686:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fce5 	bl	8001074 <HAL_RCC_OscConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ae:	f000 f8c9 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2100      	movs	r1, #0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 f830 	bl	8001734 <HAL_RCC_ClockConfig>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d8:	f000 f8b4 	bl	8000844 <Error_Handler>
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b015      	add	sp, #84	; 0x54
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <MX_USART2_UART_Init+0x98>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006f0:	22e1      	movs	r2, #225	; 0xe1
 80006f2:	0252      	lsls	r2, r2, #9
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800072e:	0018      	movs	r0, r3
 8000730:	f001 feaa 	bl	8002488 <HAL_UART_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000738:	f000 f884 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fcbb 	bl	80030bc <HAL_UARTEx_SetTxFifoThreshold>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074a:	f000 f87b 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000750:	2100      	movs	r1, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fcf2 	bl	800313c <HAL_UARTEx_SetRxFifoThreshold>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800075c:	f000 f872 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fc70 	bl	8003048 <HAL_UARTEx_DisableFifoMode>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800076c:	f000 f86a 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	2000007c 	.word	0x2000007c
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	240c      	movs	r4, #12
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2314      	movs	r3, #20
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f004 ff57 	bl	8005644 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_GPIO_Init+0x9c>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_GPIO_Init+0x9c>)
 800079c:	2104      	movs	r1, #4
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_GPIO_Init+0x9c>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a6:	2204      	movs	r2, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_GPIO_Init+0x9c>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_GPIO_Init+0x9c>)
 80007b4:	2120      	movs	r1, #32
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_GPIO_Init+0x9c>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2220      	movs	r2, #32
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_GPIO_Init+0x9c>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_GPIO_Init+0x9c>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_GPIO_Init+0x9c>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fbda 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2220      	movs	r2, #32
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2202      	movs	r2, #2
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000806:	187a      	adds	r2, r7, r1
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fa5a 	bl	8000cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b009      	add	sp, #36	; 0x24
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f97f 	bl	8000b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40012c00 	.word	0x40012c00

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x50>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_MspInit+0x50>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x50>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x50>)
 8000870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_MspInit+0x50>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0549      	lsls	r1, r1, #21
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	; 0x3c
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x50>)
 800087e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	4013      	ands	r3, r2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800088a:	2302      	movs	r3, #2
 800088c:	425b      	negs	r3, r3
 800088e:	2200      	movs	r2, #0
 8000890:	2103      	movs	r1, #3
 8000892:	0018      	movs	r0, r3
 8000894:	f000 f9f2 	bl	8000c7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b09d      	sub	sp, #116	; 0x74
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	235c      	movs	r3, #92	; 0x5c
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f004 fec4 	bl	8005644 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	2410      	movs	r4, #16
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	0018      	movs	r0, r3
 80008c2:	234c      	movs	r3, #76	; 0x4c
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f004 febc 	bl	8005644 <memset>
  if(huart->Instance==USART2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <HAL_UART_MspInit+0xb8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d13e      	bne.n	8000954 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2202      	movs	r2, #2
 80008da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 f8f9 	bl	8001adc <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008ee:	f7ff ffa9 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_UART_MspInit+0xbc>)
 80008f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_UART_MspInit+0xbc>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0289      	lsls	r1, r1, #10
 80008fc:	430a      	orrs	r2, r1
 80008fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	029b      	lsls	r3, r3, #10
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0xbc>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000926:	215c      	movs	r1, #92	; 0x5c
 8000928:	187b      	adds	r3, r7, r1
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f9ba 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b01d      	add	sp, #116	; 0x74
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800096c:	232b      	movs	r3, #43	; 0x2b
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <HAL_InitTick+0xf4>)
 8000976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <HAL_InitTick+0xf4>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0109      	lsls	r1, r1, #4
 800097e:	430a      	orrs	r2, r1
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
 8000982:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_InitTick+0xf4>)
 8000984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	4013      	ands	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	230c      	movs	r3, #12
 8000992:	18fa      	adds	r2, r7, r3
 8000994:	2410      	movs	r4, #16
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f001 f874 	bl	8001a88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d104      	bne.n	80009b6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ac:	f001 f856 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 80009b0:	0003      	movs	r3, r0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b6:	f001 f851 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 80009ba:	0003      	movs	r3, r0
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c2:	4926      	ldr	r1, [pc, #152]	; (8000a5c <HAL_InitTick+0xf8>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fb9f 	bl	8000108 <__udivsi3>
 80009ca:	0003      	movs	r3, r0
 80009cc:	3b01      	subs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <HAL_InitTick+0xfc>)
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <HAL_InitTick+0x100>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_InitTick+0xfc>)
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <HAL_InitTick+0x104>)
 80009da:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_InitTick+0xfc>)
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xfc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <HAL_InitTick+0xfc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xfc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009f4:	252b      	movs	r5, #43	; 0x2b
 80009f6:	197c      	adds	r4, r7, r5
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_InitTick+0xfc>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 faaa 	bl	8001f54 <HAL_TIM_Base_Init>
 8000a00:	0003      	movs	r3, r0
 8000a02:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a04:	197b      	adds	r3, r7, r5
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d11e      	bne.n	8000a4a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a0c:	197c      	adds	r4, r7, r5
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_InitTick+0xfc>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 faff 	bl	8002014 <HAL_TIM_Base_Start_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d113      	bne.n	8000a4a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000a22:	200d      	movs	r0, #13
 8000a24:	f000 f93f 	bl	8000ca6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d809      	bhi.n	8000a42 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	0019      	movs	r1, r3
 8000a34:	200d      	movs	r0, #13
 8000a36:	f000 f921 	bl	8000c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_InitTick+0x108>)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e003      	b.n	8000a4a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	232b      	movs	r3, #43	; 0x2b
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a4a:	232b      	movs	r3, #43	; 0x2b
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	781b      	ldrb	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b00c      	add	sp, #48	; 0x30
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	000f4240 	.word	0x000f4240
 8000a60:	20000114 	.word	0x20000114
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	000003e7 	.word	0x000003e7
 8000a6c:	20000004 	.word	0x20000004

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fb28 	bl	80020d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000114 	.word	0x20000114

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f004 fe1f 	bl	8005710 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ad2:	f7ff fda5 	bl	8000620 <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ae4:	08005914 	.word	0x08005914
  ldr r2, =_sbss
 8000ae8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aec:	20001c84 	.word	0x20001c84

08000af0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_COMP_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x3c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Init+0x3c>)
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	0049      	lsls	r1, r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	2003      	movs	r0, #3
 8000b10:	f7ff ff28 	bl	8000964 <HAL_InitTick>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe96 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000160 	.word	0x20000160

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000160 	.word	0x20000160

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7e:	d809      	bhi.n	8000b94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	001a      	movs	r2, r3
 8000b86:	231f      	movs	r3, #31
 8000b88:	401a      	ands	r2, r3
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_EnableIRQ+0x30>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	000a      	movs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb4:	d828      	bhi.n	8000c08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <__NVIC_SetPriority+0xd4>)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	33c0      	adds	r3, #192	; 0xc0
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	589b      	ldr	r3, [r3, r2]
 8000bc6:	1dfa      	adds	r2, r7, #7
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	2203      	movs	r2, #3
 8000bce:	400a      	ands	r2, r1
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	21ff      	movs	r1, #255	; 0xff
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	401a      	ands	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	4003      	ands	r3, r0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	481f      	ldr	r0, [pc, #124]	; (8000c74 <__NVIC_SetPriority+0xd4>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	33c0      	adds	r3, #192	; 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c06:	e031      	b.n	8000c6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <__NVIC_SetPriority+0xd8>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0019      	movs	r1, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	400b      	ands	r3, r1
 8000c14:	3b08      	subs	r3, #8
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3306      	adds	r3, #6
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1dfa      	adds	r2, r7, #7
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	0011      	movs	r1, r2
 8000c28:	2203      	movs	r2, #3
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	21ff      	movs	r1, #255	; 0xff
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	401a      	ands	r2, r3
 8000c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	401a      	ands	r2, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	2303      	movs	r3, #3
 8000c4a:	4003      	ands	r3, r0
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <__NVIC_SetPriority+0xd8>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	001c      	movs	r4, r3
 8000c58:	230f      	movs	r3, #15
 8000c5a:	4023      	ands	r3, r4
 8000c5c:	3b08      	subs	r3, #8
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	430a      	orrs	r2, r1
 8000c62:	3306      	adds	r3, #6
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	18c3      	adds	r3, r0, r3
 8000c68:	3304      	adds	r3, #4
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b003      	add	sp, #12
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	210f      	movs	r1, #15
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff81 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	0002      	movs	r2, r0
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff ff57 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd6:	e14d      	b.n	8000f74 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4091      	lsls	r1, r2
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <HAL_GPIO_Init+0x28>
 8000cee:	e13e      	b.n	8000f6e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x40>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	58d3      	ldr	r3, [r2, r3]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2107      	movs	r1, #7
 8000dde:	400b      	ands	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_GPIO_Init+0x174>
 8000e3a:	e098      	b.n	8000f6e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e3c:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3318      	adds	r3, #24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	589b      	ldr	r3, [r3, r2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	220f      	movs	r2, #15
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x1d6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1d2>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2cc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1ce>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1ca>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1c6>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x1d8>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x1d8>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x1d8>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x1d8>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x1d8>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	00d2      	lsls	r2, r2, #3
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eb0:	4936      	ldr	r1, [pc, #216]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	035b      	lsls	r3, r3, #13
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	039b      	lsls	r3, r3, #14
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000f14:	2384      	movs	r3, #132	; 0x84
 8000f16:	58d3      	ldr	r3, [r2, r3]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f38:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000f3a:	2284      	movs	r2, #132	; 0x84
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	58d3      	ldr	r3, [r2, r3]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_GPIO_Init+0x2ba>
 8000f80:	e6aa      	b.n	8000cd8 <HAL_GPIO_Init+0x10>
  }
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	50000400 	.word	0x50000400
 8000f94:	50000800 	.word	0x50000800
 8000f98:	50000c00 	.word	0x50000c00
 8000f9c:	50001000 	.word	0x50001000

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	0008      	movs	r0, r1
 8000faa:	0011      	movs	r1, r2
 8000fac:	1cbb      	adds	r3, r7, #2
 8000fae:	1c02      	adds	r2, r0, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	1c7b      	adds	r3, r7, #1
 8000fb4:	1c0a      	adds	r2, r1, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb8:	1c7b      	adds	r3, r7, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	1cbb      	adds	r3, r7, #2
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d11f      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	0013      	movs	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	189b      	adds	r3, r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4912      	ldr	r1, [pc, #72]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff f87a 	bl	8000108 <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101a:	e008      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3b01      	subs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e001      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e009      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	401a      	ands	r2, r3
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	429a      	cmp	r2, r3
 800103e:	d0ed      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40007000 	.word	0x40007000
 8001050:	fffff9ff 	.word	0xfffff9ff
 8001054:	20000000 	.word	0x20000000
 8001058:	000f4240 	.word	0x000f4240

0800105c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	23e0      	movs	r3, #224	; 0xe0
 8001066:	01db      	lsls	r3, r3, #7
 8001068:	4013      	ands	r3, r2
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	f000 fb50 	bl	8001728 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d100      	bne.n	8001094 <HAL_RCC_OscConfig+0x20>
 8001092:	e07c      	b.n	800118e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001094:	4bc3      	ldr	r3, [pc, #780]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2238      	movs	r2, #56	; 0x38
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109e:	4bc1      	ldr	r3, [pc, #772]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x40>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d002      	beq.n	80010ba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4bba      	ldr	r3, [pc, #744]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d062      	beq.n	800118c <HAL_RCC_OscConfig+0x118>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d15e      	bne.n	800118c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e32a      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	429a      	cmp	r2, r3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_OscConfig+0x7a>
 80010de:	4bb1      	ldr	r3, [pc, #708]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4bb0      	ldr	r3, [pc, #704]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0249      	lsls	r1, r1, #9
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e020      	b.n	8001130 <HAL_RCC_OscConfig+0xbc>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	23a0      	movs	r3, #160	; 0xa0
 80010f4:	02db      	lsls	r3, r3, #11
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d10e      	bne.n	8001118 <HAL_RCC_OscConfig+0xa4>
 80010fa:	4baa      	ldr	r3, [pc, #680]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4ba9      	ldr	r3, [pc, #676]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	02c9      	lsls	r1, r1, #11
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	4ba6      	ldr	r3, [pc, #664]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4ba5      	ldr	r3, [pc, #660]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0249      	lsls	r1, r1, #9
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xbc>
 8001118:	4ba2      	ldr	r3, [pc, #648]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4ba1      	ldr	r3, [pc, #644]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800111e:	49a2      	ldr	r1, [pc, #648]	; (80013a8 <HAL_RCC_OscConfig+0x334>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	4b9f      	ldr	r3, [pc, #636]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b9e      	ldr	r3, [pc, #632]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800112a:	49a0      	ldr	r1, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x338>)
 800112c:	400a      	ands	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d014      	beq.n	8001162 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fd0e 	bl	8000b58 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001142:	f7ff fd09 	bl	8000b58 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e2e9      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001154:	4b93      	ldr	r3, [pc, #588]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	029b      	lsls	r3, r3, #10
 800115c:	4013      	ands	r3, r2
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0xce>
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fcf9 	bl	8000b58 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcf4 	bl	8000b58 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2d4      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	029b      	lsls	r3, r3, #10
 8001186:	4013      	ands	r3, r2
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0xf8>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d100      	bne.n	800119a <HAL_RCC_OscConfig+0x126>
 8001198:	e099      	b.n	80012ce <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2238      	movs	r2, #56	; 0x38
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a4:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d102      	bne.n	80011ba <HAL_RCC_OscConfig+0x146>
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d002      	beq.n	80011c0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d135      	bne.n	800122c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_OscConfig+0x164>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e2a7      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a74      	ldr	r2, [pc, #464]	; (80013b0 <HAL_RCC_OscConfig+0x33c>)
 80011de:	4013      	ands	r3, r2
 80011e0:	0019      	movs	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	021a      	lsls	r2, r3, #8
 80011e8:	4b6e      	ldr	r3, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d112      	bne.n	800121a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a6e      	ldr	r2, [pc, #440]	; (80013b4 <HAL_RCC_OscConfig+0x340>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001208:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0adb      	lsrs	r3, r3, #11
 800120e:	2207      	movs	r2, #7
 8001210:	4013      	ands	r3, r2
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x344>)
 8001214:	40da      	lsrs	r2, r3
 8001216:	4b69      	ldr	r3, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x348>)
 8001218:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x34c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fba0 	bl	8000964 <HAL_InitTick>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d051      	beq.n	80012cc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e27d      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d030      	beq.n	8001296 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001234:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HAL_RCC_OscConfig+0x340>)
 800123a:	4013      	ands	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	4b58      	ldr	r3, [pc, #352]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0049      	lsls	r1, r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fc7f 	bl	8000b58 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc7a 	bl	8000b58 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e25a      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4013      	ands	r3, r2
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_RCC_OscConfig+0x33c>)
 8001284:	4013      	ands	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	021a      	lsls	r2, r3, #8
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	e01b      	b.n	80012ce <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800129c:	4949      	ldr	r1, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x350>)
 800129e:	400a      	ands	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc59 	bl	8000b58 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc54 	bl	8000b58 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e234      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x238>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2208      	movs	r2, #8
 80012d4:	4013      	ands	r3, r2
 80012d6:	d047      	beq.n	8001368 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2238      	movs	r2, #56	; 0x38
 80012de:	4013      	ands	r3, r2
 80012e0:	2b18      	cmp	r3, #24
 80012e2:	d10a      	bne.n	80012fa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d03c      	beq.n	8001368 <HAL_RCC_OscConfig+0x2f4>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d138      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e216      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001304:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fc23 	bl	8000b58 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fc1e 	bl	8000b58 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1fe      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d0f1      	beq.n	8001318 <HAL_RCC_OscConfig+0x2a4>
 8001334:	e018      	b.n	8001368 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001342:	f7ff fc09 	bl	8000b58 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fc04 	bl	8000b58 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1e4      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d1f1      	bne.n	800134c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	4013      	ands	r3, r2
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x300>
 8001372:	e0c7      	b.n	8001504 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	231f      	movs	r3, #31
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2238      	movs	r2, #56	; 0x38
 8001382:	4013      	ands	r3, r2
 8001384:	2b20      	cmp	r3, #32
 8001386:	d11f      	bne.n	80013c8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_RCC_OscConfig+0x330>)
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d100      	bne.n	8001394 <HAL_RCC_OscConfig+0x320>
 8001392:	e0b7      	b.n	8001504 <HAL_RCC_OscConfig+0x490>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d000      	beq.n	800139e <HAL_RCC_OscConfig+0x32a>
 800139c:	e0b2      	b.n	8001504 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c2      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000
 80013a8:	fffeffff 	.word	0xfffeffff
 80013ac:	fffbffff 	.word	0xfffbffff
 80013b0:	ffff80ff 	.word	0xffff80ff
 80013b4:	ffffc7ff 	.word	0xffffc7ff
 80013b8:	00f42400 	.word	0x00f42400
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004
 80013c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013c8:	4bb5      	ldr	r3, [pc, #724]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80013ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	055b      	lsls	r3, r3, #21
 80013d0:	4013      	ands	r3, r2
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x364>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x366>
 80013d8:	2300      	movs	r3, #0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d011      	beq.n	8001402 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4bb0      	ldr	r3, [pc, #704]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80013e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013e2:	4baf      	ldr	r3, [pc, #700]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0549      	lsls	r1, r1, #21
 80013e8:	430a      	orrs	r2, r1
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80013ec:	4bac      	ldr	r3, [pc, #688]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80013ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	055b      	lsls	r3, r3, #21
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013fa:	231f      	movs	r3, #31
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001402:	4ba8      	ldr	r3, [pc, #672]	; (80016a4 <HAL_RCC_OscConfig+0x630>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4013      	ands	r3, r2
 800140c:	d11a      	bne.n	8001444 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800140e:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x630>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4ba4      	ldr	r3, [pc, #656]	; (80016a4 <HAL_RCC_OscConfig+0x630>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0049      	lsls	r1, r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb9c 	bl	8000b58 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fb97 	bl	8000b58 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e177      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	4b9a      	ldr	r3, [pc, #616]	; (80016a4 <HAL_RCC_OscConfig+0x630>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4013      	ands	r3, r2
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x3e6>
 800144c:	4b94      	ldr	r3, [pc, #592]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800144e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001450:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	65da      	str	r2, [r3, #92]	; 0x5c
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x420>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x408>
 8001462:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001466:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001468:	2104      	movs	r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	65da      	str	r2, [r3, #92]	; 0x5c
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	65da      	str	r2, [r3, #92]	; 0x5c
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x420>
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800147e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001480:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001482:	2101      	movs	r1, #1
 8001484:	438a      	bics	r2, r1
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c
 8001488:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800148a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800148c:	4b84      	ldr	r3, [pc, #528]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800148e:	2104      	movs	r1, #4
 8001490:	438a      	bics	r2, r1
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d014      	beq.n	80014c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fb5c 	bl	8000b58 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a4:	e009      	b.n	80014ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fb57 	bl	8000b58 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a7d      	ldr	r2, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x634>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e136      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x432>
 80014c4:	e013      	b.n	80014ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fb47 	bl	8000b58 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ce:	e009      	b.n	80014e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb42 	bl	8000b58 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x634>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e121      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014ee:	231f      	movs	r3, #31
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b69      	ldr	r3, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80014fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80014fe:	496b      	ldr	r1, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x638>)
 8001500:	400a      	ands	r2, r1
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	d039      	beq.n	8001582 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01b      	beq.n	800154e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	03c9      	lsls	r1, r1, #15
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fb18 	bl	8000b58 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152e:	f7ff fb13 	bl	8000b58 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0f3      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001540:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x4ba>
 800154c:	e019      	b.n	8001582 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800154e:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001554:	4956      	ldr	r1, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x63c>)
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fafd 	bl	8000b58 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001564:	f7ff faf8 	bl	8000b58 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0d8      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x518>
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2238      	movs	r2, #56	; 0x38
 8001592:	4013      	ands	r3, r2
 8001594:	2b10      	cmp	r3, #16
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x526>
 8001598:	e07b      	b.n	8001692 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d156      	bne.n	8001650 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80015a8:	4942      	ldr	r1, [pc, #264]	; (80016b4 <HAL_RCC_OscConfig+0x640>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fad3 	bl	8000b58 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff face 	bl	8000b58 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0ae      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ca:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	049b      	lsls	r3, r3, #18
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d6:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4a37      	ldr	r2, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x644>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	431a      	orrs	r2, r3
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0449      	lsls	r1, r1, #17
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	0549      	lsls	r1, r1, #21
 8001622:	430a      	orrs	r2, r1
 8001624:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fa97 	bl	8000b58 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fa92 	bl	8000b58 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e072      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	049b      	lsls	r3, r3, #18
 800164a:	4013      	ands	r3, r2
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x5bc>
 800164e:	e06a      	b.n	8001726 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001656:	4917      	ldr	r1, [pc, #92]	; (80016b4 <HAL_RCC_OscConfig+0x640>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fa7c 	bl	8000b58 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fa77 	bl	8000b58 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e057      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	049b      	lsls	r3, r3, #18
 8001680:	4013      	ands	r3, r2
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_OscConfig+0x62c>)
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <HAL_RCC_OscConfig+0x648>)
 800168c:	400a      	ands	r2, r1
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	e049      	b.n	8001726 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d112      	bne.n	80016c0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e044      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40007000 	.word	0x40007000
 80016a8:	00001388 	.word	0x00001388
 80016ac:	efffffff 	.word	0xefffffff
 80016b0:	ffbfffff 	.word	0xffbfffff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	11c1808c 	.word	0x11c1808c
 80016bc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x6bc>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2203      	movs	r2, #3
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d126      	bne.n	8001722 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2270      	movs	r2, #112	; 0x70
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11f      	bne.n	8001722 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	23fe      	movs	r3, #254	; 0xfe
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d116      	bne.n	8001722 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	23f8      	movs	r3, #248	; 0xf8
 80016f8:	039b      	lsls	r3, r3, #14
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d10e      	bne.n	8001722 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	23e0      	movs	r3, #224	; 0xe0
 8001708:	051b      	lsls	r3, r3, #20
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	0f5b      	lsrs	r3, r3, #29
 8001718:	075a      	lsls	r2, r3, #29
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b008      	add	sp, #32
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0e9      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2207      	movs	r2, #7
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d91e      	bls.n	8001794 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b73      	ldr	r3, [pc, #460]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2207      	movs	r2, #7
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	4b70      	ldr	r3, [pc, #448]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001768:	f7ff f9f6 	bl	8000b58 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001770:	e009      	b.n	8001786 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7ff f9f1 	bl	8000b58 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0ca      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001786:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d015      	beq.n	80017ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d006      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017a8:	4b60      	ldr	r3, [pc, #384]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	21e0      	movs	r1, #224	; 0xe0
 80017b0:	01c9      	lsls	r1, r1, #7
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <HAL_RCC_ClockConfig+0x1fc>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	d057      	beq.n	8001884 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4013      	ands	r3, r2
 80017e6:	d12b      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e097      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	049b      	lsls	r3, r3, #18
 80017fc:	4013      	ands	r3, r2
 80017fe:	d11f      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e08b      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4013      	ands	r3, r2
 8001816:	d113      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e07f      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d108      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e074      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e06d      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001840:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2207      	movs	r2, #7
 8001846:	4393      	bics	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7ff f980 	bl	8000b58 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	e009      	b.n	8001872 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7ff f97b 	bl	8000b58 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e054      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2238      	movs	r2, #56	; 0x38
 8001878:	401a      	ands	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ec      	bne.n	800185e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2207      	movs	r2, #7
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d21e      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2207      	movs	r2, #7
 8001898:	4393      	bics	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f958 	bl	8000b58 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7ff f953 	bl	8000b58 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e02c      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2207      	movs	r2, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2204      	movs	r2, #4
 80018d6:	4013      	ands	r3, r2
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <HAL_RCC_ClockConfig+0x200>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ee:	f000 f829 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018f2:	0001      	movs	r1, r0
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	220f      	movs	r2, #15
 80018fc:	401a      	ands	r2, r3
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_RCC_ClockConfig+0x204>)
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	58d3      	ldr	r3, [r2, r3]
 8001904:	221f      	movs	r2, #31
 8001906:	4013      	ands	r3, r2
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x208>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_ClockConfig+0x20c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff f825 	bl	8000964 <HAL_InitTick>
 800191a:	0003      	movs	r3, r0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40022000 	.word	0x40022000
 8001928:	00001388 	.word	0x00001388
 800192c:	40021000 	.word	0x40021000
 8001930:	fffff0ff 	.word	0xfffff0ff
 8001934:	ffff8fff 	.word	0xffff8fff
 8001938:	08005854 	.word	0x08005854
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	; 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	d10f      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0adb      	lsrs	r3, r3, #11
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	2201      	movs	r2, #1
 8001960:	409a      	lsls	r2, r3
 8001962:	0013      	movs	r3, r2
 8001964:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	4835      	ldr	r0, [pc, #212]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 800196a:	f7fe fbcd 	bl	8000108 <__udivsi3>
 800196e:	0003      	movs	r3, r0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e05d      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2238      	movs	r2, #56	; 0x38
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d102      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x100>)
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e054      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2238      	movs	r2, #56	; 0x38
 800198c:	4013      	ands	r3, r2
 800198e:	2b10      	cmp	r3, #16
 8001990:	d138      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x100>)
 80019b4:	f7fe fba8 	bl	8000108 <__udivsi3>
 80019b8:	0003      	movs	r3, r0
 80019ba:	0019      	movs	r1, r3
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	227f      	movs	r2, #127	; 0x7f
 80019c4:	4013      	ands	r3, r2
 80019c6:	434b      	muls	r3, r1
 80019c8:	617b      	str	r3, [r7, #20]
        break;
 80019ca:	e00d      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	227f      	movs	r2, #127	; 0x7f
 80019e0:	4013      	ands	r3, r2
 80019e2:	434b      	muls	r3, r1
 80019e4:	617b      	str	r3, [r7, #20]
        break;
 80019e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0f5b      	lsrs	r3, r3, #29
 80019ee:	2207      	movs	r2, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	3301      	adds	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	6978      	ldr	r0, [r7, #20]
 80019fa:	f7fe fb85 	bl	8000108 <__udivsi3>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e015      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2238      	movs	r2, #56	; 0x38
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d103      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2238      	movs	r2, #56	; 0x38
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b18      	cmp	r3, #24
 8001a22:	d103      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a24:	23fa      	movs	r3, #250	; 0xfa
 8001a26:	01db      	lsls	r3, r3, #7
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	e001      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a30:	693b      	ldr	r3, [r7, #16]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b006      	add	sp, #24
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	007a1200 	.word	0x007a1200

08001a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	0004      	movs	r4, r0
 8001a66:	f7ff faf9 	bl	800105c <LL_RCC_GetAPB1Prescaler>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	0b1a      	lsrs	r2, r3, #12
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	58d3      	ldr	r3, [r2, r3]
 8001a74:	221f      	movs	r2, #31
 8001a76:	4013      	ands	r3, r2
 8001a78:	40dc      	lsrs	r4, r3
 8001a7a:	0023      	movs	r3, r4
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	08005894 	.word	0x08005894

08001a88 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetClockConfig+0x4c>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	23f0      	movs	r3, #240	; 0xf0
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_GetClockConfig+0x4c>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	23e0      	movs	r3, #224	; 0xe0
 8001ab8:	01db      	lsls	r3, r3, #7
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetClockConfig+0x50>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ae4:	2313      	movs	r3, #19
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aec:	2312      	movs	r3, #18
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b00:	e0ad      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2011      	movs	r0, #17
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	4013      	ands	r3, r2
 8001b14:	d110      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0549      	lsls	r1, r1, #21
 8001b20:	430a      	orrs	r2, r1
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	055b      	lsls	r3, r3, #21
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0049      	lsls	r1, r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b46:	f7ff f807 	bl	8000b58 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b50:	f7ff f802 	bl	8000b58 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d904      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b5e:	2313      	movs	r3, #19
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2203      	movs	r2, #3
 8001b64:	701a      	strb	r2, [r3, #0]
        break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	d0ed      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b74:	2313      	movs	r3, #19
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d15e      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d014      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	0249      	lsls	r1, r1, #9
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb8:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d016      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ffc4 	bl	8000b58 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd4:	e00c      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ffbf 	bl	8000b58 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d904      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001be6:	2313      	movs	r3, #19
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	2203      	movs	r2, #3
 8001bec:	701a      	strb	r2, [r3, #0]
            break;
 8001bee:	e004      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0ed      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bfa:	2313      	movs	r3, #19
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c18:	e016      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2213      	movs	r2, #19
 8001c20:	18ba      	adds	r2, r7, r2
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e00f      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	fffffcff 	.word	0xfffffcff
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2213      	movs	r2, #19
 8001c42:	18ba      	adds	r2, r7, r2
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c48:	2311      	movs	r3, #17
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4bb6      	ldr	r3, [pc, #728]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c56:	4bb5      	ldr	r3, [pc, #724]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c58:	49b5      	ldr	r1, [pc, #724]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c68:	4bb0      	ldr	r3, [pc, #704]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	4393      	bics	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4bad      	ldr	r3, [pc, #692]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2202      	movs	r2, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c86:	4ba9      	ldr	r3, [pc, #676]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4ba5      	ldr	r3, [pc, #660]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ca4:	4ba1      	ldr	r3, [pc, #644]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	2230      	movs	r2, #48	; 0x30
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b9e      	ldr	r3, [pc, #632]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cc2:	4b9a      	ldr	r3, [pc, #616]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	4a9b      	ldr	r2, [pc, #620]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001ce2:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d02:	4b8a      	ldr	r3, [pc, #552]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	4a8d      	ldr	r2, [pc, #564]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d10:	4b86      	ldr	r3, [pc, #536]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	4a86      	ldr	r2, [pc, #536]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d40:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	4a7f      	ldr	r2, [pc, #508]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	01db      	lsls	r3, r3, #7
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d015      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d7e:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	0899      	lsrs	r1, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8a:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d9c:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	0249      	lsls	r1, r1, #9
 8001da6:	430a      	orrs	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	031b      	lsls	r3, r3, #12
 8001db2:	4013      	ands	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	039b      	lsls	r3, r3, #14
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d016      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de4:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de6:	430a      	orrs	r2, r1
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	03db      	lsls	r3, r3, #15
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d106      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0449      	lsls	r1, r1, #17
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	03db      	lsls	r3, r3, #15
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	045b      	lsls	r3, r3, #17
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0449      	lsls	r1, r1, #17
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4013      	ands	r3, r2
 8001e48:	d014      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	2203      	movs	r2, #3
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1a      	ldr	r2, [r3, #32]
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0249      	lsls	r1, r1, #9
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	019b      	lsls	r3, r3, #6
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d014      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	220c      	movs	r2, #12
 8001e86:	4393      	bics	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0249      	lsls	r1, r1, #9
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	045b      	lsls	r3, r3, #17
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0449      	lsls	r1, r1, #17
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	049b      	lsls	r3, r3, #18
 8001eec:	4013      	ands	r3, r2
 8001eee:	d016      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0449      	lsls	r1, r1, #17
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b006      	add	sp, #24
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	fffff3ff 	.word	0xfffff3ff
 8001f38:	fffffcff 	.word	0xfffffcff
 8001f3c:	fff3ffff 	.word	0xfff3ffff
 8001f40:	ffcfffff 	.word	0xffcfffff
 8001f44:	ffffcfff 	.word	0xffffcfff
 8001f48:	ffff3fff 	.word	0xffff3fff
 8001f4c:	ffbfffff 	.word	0xffbfffff
 8001f50:	feffffff 	.word	0xfeffffff

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e04a      	b.n	8001ffc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	; 0x3d
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223c      	movs	r2, #60	; 0x3c
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f841 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	2102      	movs	r1, #2
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f000 f9c7 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2248      	movs	r2, #72	; 0x48
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223e      	movs	r2, #62	; 0x3e
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2242      	movs	r2, #66	; 0x42
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2243      	movs	r2, #67	; 0x43
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2244      	movs	r2, #68	; 0x44
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2245      	movs	r2, #69	; 0x45
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2246      	movs	r2, #70	; 0x46
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2247      	movs	r2, #71	; 0x47
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223d      	movs	r2, #61	; 0x3d
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	223d      	movs	r2, #61	; 0x3d
 8002020:	5c9b      	ldrb	r3, [r3, r2]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e047      	b.n	80020bc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	223d      	movs	r2, #61	; 0x3d
 8002030:	2102      	movs	r1, #2
 8002032:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d014      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x64>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	429a      	cmp	r2, r3
 8002058:	d00e      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x64>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x64>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_TIM_Base_Start_IT+0xb8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x64>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d116      	bne.n	80020a6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d016      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0xa4>
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	429a      	cmp	r2, r3
 8002092:	d011      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a4:	e008      	b.n	80020b8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e000      	b.n	80020ba <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40014000 	.word	0x40014000
 80020d4:	00010007 	.word	0x00010007

080020d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d021      	beq.n	800213c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d01d      	beq.n	800213c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2203      	movs	r2, #3
 8002106:	4252      	negs	r2, r2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2203      	movs	r2, #3
 8002118:	4013      	ands	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f8ea 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8002124:	e007      	b.n	8002136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f8dd 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 f8e9 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d01e      	beq.n	800218a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2205      	movs	r2, #5
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f8c3 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8002172:	e007      	b.n	8002184 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f8b6 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f8c2 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d021      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2208      	movs	r2, #8
 8002196:	4013      	ands	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2209      	movs	r2, #9
 80021a0:	4252      	negs	r2, r2
 80021a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f89d 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 80021be:	e007      	b.n	80021d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f890 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f89c 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2210      	movs	r2, #16
 80021da:	4013      	ands	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	4013      	ands	r3, r2
 80021e4:	d01e      	beq.n	8002224 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2211      	movs	r2, #17
 80021ec:	4252      	negs	r2, r2
 80021ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2208      	movs	r2, #8
 80021f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	23c0      	movs	r3, #192	; 0xc0
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f876 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 800220c:	e007      	b.n	800221e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f869 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f875 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d00c      	beq.n	8002246 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d008      	beq.n	8002246 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4252      	negs	r2, r2
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe faed 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	4013      	ands	r3, r2
 800224c:	d104      	bne.n	8002258 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	019b      	lsls	r3, r3, #6
 8002254:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002256:	d00b      	beq.n	8002270 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	4013      	ands	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_TIM_IRQHandler+0x208>)
 8002266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f8fc 	bl	8002468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4013      	ands	r3, r2
 8002278:	d00b      	beq.n	8002292 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	4013      	ands	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_TIM_IRQHandler+0x20c>)
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f8f3 	bl	8002478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2240      	movs	r2, #64	; 0x40
 8002296:	4013      	ands	r3, r2
 8002298:	d00c      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	4013      	ands	r3, r2
 80022a0:	d008      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2241      	movs	r2, #65	; 0x41
 80022a8:	4252      	negs	r2, r2
 80022aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 f832 	bl	8002318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2220      	movs	r2, #32
 80022b8:	4013      	ands	r3, r2
 80022ba:	d00c      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	4013      	ands	r3, r2
 80022c2:	d008      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2221      	movs	r2, #33	; 0x21
 80022ca:	4252      	negs	r2, r2
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 f8c1 	bl	8002458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	ffffdf7f 	.word	0xffffdf7f
 80022e4:	fffffeff 	.word	0xfffffeff

080022e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3f      	ldr	r2, [pc, #252]	; (8002438 <TIM_Base_SetConfig+0x110>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00c      	beq.n	800235a <TIM_Base_SetConfig+0x32>
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	429a      	cmp	r2, r3
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0x32>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a3b      	ldr	r2, [pc, #236]	; (800243c <TIM_Base_SetConfig+0x114>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0x32>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <TIM_Base_SetConfig+0x118>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2270      	movs	r2, #112	; 0x70
 800235e:	4393      	bics	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <TIM_Base_SetConfig+0x110>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01c      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	429a      	cmp	r2, r3
 800237c:	d017      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <TIM_Base_SetConfig+0x114>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <TIM_Base_SetConfig+0x118>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00f      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <TIM_Base_SetConfig+0x120>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <TIM_Base_SetConfig+0x124>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x86>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <TIM_Base_SetConfig+0x128>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	4393      	bics	r3, r2
 80023c6:	001a      	movs	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <TIM_Base_SetConfig+0x110>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0xde>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <TIM_Base_SetConfig+0x120>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0xde>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <TIM_Base_SetConfig+0x124>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0xde>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <TIM_Base_SetConfig+0x128>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d103      	bne.n	800240e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2201      	movs	r2, #1
 8002426:	4393      	bics	r3, r2
 8002428:	001a      	movs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]
  }
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800
 8002444:	40002000 	.word	0x40002000
 8002448:	40014000 	.word	0x40014000
 800244c:	40014400 	.word	0x40014400
 8002450:	40014800 	.word	0x40014800
 8002454:	fffffcff 	.word	0xfffffcff

08002458 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e046      	b.n	8002528 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2288      	movs	r2, #136	; 0x88
 800249e:	589b      	ldr	r3, [r3, r2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2284      	movs	r2, #132	; 0x84
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fe f9f8 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2288      	movs	r2, #136	; 0x88
 80024b8:	2124      	movs	r1, #36	; 0x24
 80024ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fb82 	bl	8002be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f828 	bl	8002534 <UART_SetConfig>
 80024e4:	0003      	movs	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01c      	b.n	8002528 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	490d      	ldr	r1, [pc, #52]	; (8002530 <HAL_UART_Init+0xa8>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	212a      	movs	r1, #42	; 0x2a
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fc11 	bl	8002d48 <UART_CheckIdleState>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	ffffb7ff 	.word	0xffffb7ff

08002534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b090      	sub	sp, #64	; 0x40
 8002538:	af00      	add	r7, sp, #0
 800253a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800253c:	231a      	movs	r3, #26
 800253e:	2220      	movs	r2, #32
 8002540:	189b      	adds	r3, r3, r2
 8002542:	19db      	adds	r3, r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	431a      	orrs	r2, r3
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	431a      	orrs	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4313      	orrs	r3, r2
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4ac1      	ldr	r2, [pc, #772]	; (800286c <UART_SetConfig+0x338>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	430b      	orrs	r3, r1
 8002574:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4abc      	ldr	r2, [pc, #752]	; (8002870 <UART_SetConfig+0x33c>)
 800257e:	4013      	ands	r3, r2
 8002580:	0018      	movs	r0, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	0003      	movs	r3, r0
 800258c:	430b      	orrs	r3, r1
 800258e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4ab6      	ldr	r2, [pc, #728]	; (8002874 <UART_SetConfig+0x340>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <UART_SetConfig+0x80>
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4ab4      	ldr	r2, [pc, #720]	; (8002878 <UART_SetConfig+0x344>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b0:	4313      	orrs	r3, r2
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4ab0      	ldr	r2, [pc, #704]	; (800287c <UART_SetConfig+0x348>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	220f      	movs	r2, #15
 80025d2:	4393      	bics	r3, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	0003      	movs	r3, r0
 80025e0:	430b      	orrs	r3, r1
 80025e2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4aa5      	ldr	r2, [pc, #660]	; (8002880 <UART_SetConfig+0x34c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d131      	bne.n	8002652 <UART_SetConfig+0x11e>
 80025ee:	4ba5      	ldr	r3, [pc, #660]	; (8002884 <UART_SetConfig+0x350>)
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	2203      	movs	r2, #3
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d01d      	beq.n	8002636 <UART_SetConfig+0x102>
 80025fa:	d823      	bhi.n	8002644 <UART_SetConfig+0x110>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d00c      	beq.n	800261a <UART_SetConfig+0xe6>
 8002600:	d820      	bhi.n	8002644 <UART_SetConfig+0x110>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <UART_SetConfig+0xd8>
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00e      	beq.n	8002628 <UART_SetConfig+0xf4>
 800260a:	e01b      	b.n	8002644 <UART_SetConfig+0x110>
 800260c:	231b      	movs	r3, #27
 800260e:	2220      	movs	r2, #32
 8002610:	189b      	adds	r3, r3, r2
 8002612:	19db      	adds	r3, r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e154      	b.n	80028c4 <UART_SetConfig+0x390>
 800261a:	231b      	movs	r3, #27
 800261c:	2220      	movs	r2, #32
 800261e:	189b      	adds	r3, r3, r2
 8002620:	19db      	adds	r3, r3, r7
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e14d      	b.n	80028c4 <UART_SetConfig+0x390>
 8002628:	231b      	movs	r3, #27
 800262a:	2220      	movs	r2, #32
 800262c:	189b      	adds	r3, r3, r2
 800262e:	19db      	adds	r3, r3, r7
 8002630:	2204      	movs	r2, #4
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e146      	b.n	80028c4 <UART_SetConfig+0x390>
 8002636:	231b      	movs	r3, #27
 8002638:	2220      	movs	r2, #32
 800263a:	189b      	adds	r3, r3, r2
 800263c:	19db      	adds	r3, r3, r7
 800263e:	2208      	movs	r2, #8
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e13f      	b.n	80028c4 <UART_SetConfig+0x390>
 8002644:	231b      	movs	r3, #27
 8002646:	2220      	movs	r2, #32
 8002648:	189b      	adds	r3, r3, r2
 800264a:	19db      	adds	r3, r3, r7
 800264c:	2210      	movs	r2, #16
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e138      	b.n	80028c4 <UART_SetConfig+0x390>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a8c      	ldr	r2, [pc, #560]	; (8002888 <UART_SetConfig+0x354>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d131      	bne.n	80026c0 <UART_SetConfig+0x18c>
 800265c:	4b89      	ldr	r3, [pc, #548]	; (8002884 <UART_SetConfig+0x350>)
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	220c      	movs	r2, #12
 8002662:	4013      	ands	r3, r2
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d01d      	beq.n	80026a4 <UART_SetConfig+0x170>
 8002668:	d823      	bhi.n	80026b2 <UART_SetConfig+0x17e>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d00c      	beq.n	8002688 <UART_SetConfig+0x154>
 800266e:	d820      	bhi.n	80026b2 <UART_SetConfig+0x17e>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <UART_SetConfig+0x146>
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00e      	beq.n	8002696 <UART_SetConfig+0x162>
 8002678:	e01b      	b.n	80026b2 <UART_SetConfig+0x17e>
 800267a:	231b      	movs	r3, #27
 800267c:	2220      	movs	r2, #32
 800267e:	189b      	adds	r3, r3, r2
 8002680:	19db      	adds	r3, r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e11d      	b.n	80028c4 <UART_SetConfig+0x390>
 8002688:	231b      	movs	r3, #27
 800268a:	2220      	movs	r2, #32
 800268c:	189b      	adds	r3, r3, r2
 800268e:	19db      	adds	r3, r3, r7
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e116      	b.n	80028c4 <UART_SetConfig+0x390>
 8002696:	231b      	movs	r3, #27
 8002698:	2220      	movs	r2, #32
 800269a:	189b      	adds	r3, r3, r2
 800269c:	19db      	adds	r3, r3, r7
 800269e:	2204      	movs	r2, #4
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e10f      	b.n	80028c4 <UART_SetConfig+0x390>
 80026a4:	231b      	movs	r3, #27
 80026a6:	2220      	movs	r2, #32
 80026a8:	189b      	adds	r3, r3, r2
 80026aa:	19db      	adds	r3, r3, r7
 80026ac:	2208      	movs	r2, #8
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e108      	b.n	80028c4 <UART_SetConfig+0x390>
 80026b2:	231b      	movs	r3, #27
 80026b4:	2220      	movs	r2, #32
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	19db      	adds	r3, r3, r7
 80026ba:	2210      	movs	r2, #16
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e101      	b.n	80028c4 <UART_SetConfig+0x390>
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a71      	ldr	r2, [pc, #452]	; (800288c <UART_SetConfig+0x358>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d131      	bne.n	800272e <UART_SetConfig+0x1fa>
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <UART_SetConfig+0x350>)
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2230      	movs	r2, #48	; 0x30
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b30      	cmp	r3, #48	; 0x30
 80026d4:	d01d      	beq.n	8002712 <UART_SetConfig+0x1de>
 80026d6:	d823      	bhi.n	8002720 <UART_SetConfig+0x1ec>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d00c      	beq.n	80026f6 <UART_SetConfig+0x1c2>
 80026dc:	d820      	bhi.n	8002720 <UART_SetConfig+0x1ec>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <UART_SetConfig+0x1b4>
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d00e      	beq.n	8002704 <UART_SetConfig+0x1d0>
 80026e6:	e01b      	b.n	8002720 <UART_SetConfig+0x1ec>
 80026e8:	231b      	movs	r3, #27
 80026ea:	2220      	movs	r2, #32
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	19db      	adds	r3, r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e0e6      	b.n	80028c4 <UART_SetConfig+0x390>
 80026f6:	231b      	movs	r3, #27
 80026f8:	2220      	movs	r2, #32
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	19db      	adds	r3, r3, r7
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e0df      	b.n	80028c4 <UART_SetConfig+0x390>
 8002704:	231b      	movs	r3, #27
 8002706:	2220      	movs	r2, #32
 8002708:	189b      	adds	r3, r3, r2
 800270a:	19db      	adds	r3, r3, r7
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e0d8      	b.n	80028c4 <UART_SetConfig+0x390>
 8002712:	231b      	movs	r3, #27
 8002714:	2220      	movs	r2, #32
 8002716:	189b      	adds	r3, r3, r2
 8002718:	19db      	adds	r3, r3, r7
 800271a:	2208      	movs	r2, #8
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e0d1      	b.n	80028c4 <UART_SetConfig+0x390>
 8002720:	231b      	movs	r3, #27
 8002722:	2220      	movs	r2, #32
 8002724:	189b      	adds	r3, r3, r2
 8002726:	19db      	adds	r3, r3, r7
 8002728:	2210      	movs	r2, #16
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e0ca      	b.n	80028c4 <UART_SetConfig+0x390>
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a57      	ldr	r2, [pc, #348]	; (8002890 <UART_SetConfig+0x35c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d106      	bne.n	8002746 <UART_SetConfig+0x212>
 8002738:	231b      	movs	r3, #27
 800273a:	2220      	movs	r2, #32
 800273c:	189b      	adds	r3, r3, r2
 800273e:	19db      	adds	r3, r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e0be      	b.n	80028c4 <UART_SetConfig+0x390>
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a52      	ldr	r2, [pc, #328]	; (8002894 <UART_SetConfig+0x360>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d106      	bne.n	800275e <UART_SetConfig+0x22a>
 8002750:	231b      	movs	r3, #27
 8002752:	2220      	movs	r2, #32
 8002754:	189b      	adds	r3, r3, r2
 8002756:	19db      	adds	r3, r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e0b2      	b.n	80028c4 <UART_SetConfig+0x390>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <UART_SetConfig+0x364>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d106      	bne.n	8002776 <UART_SetConfig+0x242>
 8002768:	231b      	movs	r3, #27
 800276a:	2220      	movs	r2, #32
 800276c:	189b      	adds	r3, r3, r2
 800276e:	19db      	adds	r3, r3, r7
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e0a6      	b.n	80028c4 <UART_SetConfig+0x390>
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3e      	ldr	r2, [pc, #248]	; (8002874 <UART_SetConfig+0x340>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d13e      	bne.n	80027fe <UART_SetConfig+0x2ca>
 8002780:	4b40      	ldr	r3, [pc, #256]	; (8002884 <UART_SetConfig+0x350>)
 8002782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4013      	ands	r3, r2
 800278a:	22c0      	movs	r2, #192	; 0xc0
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4293      	cmp	r3, r2
 8002790:	d027      	beq.n	80027e2 <UART_SetConfig+0x2ae>
 8002792:	22c0      	movs	r2, #192	; 0xc0
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	4293      	cmp	r3, r2
 8002798:	d82a      	bhi.n	80027f0 <UART_SetConfig+0x2bc>
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	4293      	cmp	r3, r2
 80027a0:	d011      	beq.n	80027c6 <UART_SetConfig+0x292>
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d822      	bhi.n	80027f0 <UART_SetConfig+0x2bc>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <UART_SetConfig+0x284>
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	00d2      	lsls	r2, r2, #3
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <UART_SetConfig+0x2a0>
 80027b6:	e01b      	b.n	80027f0 <UART_SetConfig+0x2bc>
 80027b8:	231b      	movs	r3, #27
 80027ba:	2220      	movs	r2, #32
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	19db      	adds	r3, r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e07e      	b.n	80028c4 <UART_SetConfig+0x390>
 80027c6:	231b      	movs	r3, #27
 80027c8:	2220      	movs	r2, #32
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	19db      	adds	r3, r3, r7
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e077      	b.n	80028c4 <UART_SetConfig+0x390>
 80027d4:	231b      	movs	r3, #27
 80027d6:	2220      	movs	r2, #32
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	2204      	movs	r2, #4
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e070      	b.n	80028c4 <UART_SetConfig+0x390>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2220      	movs	r2, #32
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	19db      	adds	r3, r3, r7
 80027ea:	2208      	movs	r2, #8
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e069      	b.n	80028c4 <UART_SetConfig+0x390>
 80027f0:	231b      	movs	r3, #27
 80027f2:	2220      	movs	r2, #32
 80027f4:	189b      	adds	r3, r3, r2
 80027f6:	19db      	adds	r3, r3, r7
 80027f8:	2210      	movs	r2, #16
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e062      	b.n	80028c4 <UART_SetConfig+0x390>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <UART_SetConfig+0x344>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d157      	bne.n	80028b8 <UART_SetConfig+0x384>
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <UART_SetConfig+0x350>)
 800280a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4013      	ands	r3, r2
 8002812:	22c0      	movs	r2, #192	; 0xc0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <UART_SetConfig+0x368>
 800281a:	22c0      	movs	r2, #192	; 0xc0
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4293      	cmp	r3, r2
 8002820:	d843      	bhi.n	80028aa <UART_SetConfig+0x376>
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4293      	cmp	r3, r2
 8002828:	d011      	beq.n	800284e <UART_SetConfig+0x31a>
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	4293      	cmp	r3, r2
 8002830:	d83b      	bhi.n	80028aa <UART_SetConfig+0x376>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <UART_SetConfig+0x30c>
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0052      	lsls	r2, r2, #1
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <UART_SetConfig+0x328>
 800283e:	e034      	b.n	80028aa <UART_SetConfig+0x376>
 8002840:	231b      	movs	r3, #27
 8002842:	2220      	movs	r2, #32
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e03a      	b.n	80028c4 <UART_SetConfig+0x390>
 800284e:	231b      	movs	r3, #27
 8002850:	2220      	movs	r2, #32
 8002852:	189b      	adds	r3, r3, r2
 8002854:	19db      	adds	r3, r3, r7
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e033      	b.n	80028c4 <UART_SetConfig+0x390>
 800285c:	231b      	movs	r3, #27
 800285e:	2220      	movs	r2, #32
 8002860:	189b      	adds	r3, r3, r2
 8002862:	19db      	adds	r3, r3, r7
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e02c      	b.n	80028c4 <UART_SetConfig+0x390>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	cfff69f3 	.word	0xcfff69f3
 8002870:	ffffcfff 	.word	0xffffcfff
 8002874:	40008000 	.word	0x40008000
 8002878:	40008400 	.word	0x40008400
 800287c:	11fff4ff 	.word	0x11fff4ff
 8002880:	40013800 	.word	0x40013800
 8002884:	40021000 	.word	0x40021000
 8002888:	40004400 	.word	0x40004400
 800288c:	40004800 	.word	0x40004800
 8002890:	40004c00 	.word	0x40004c00
 8002894:	40005000 	.word	0x40005000
 8002898:	40013c00 	.word	0x40013c00
 800289c:	231b      	movs	r3, #27
 800289e:	2220      	movs	r2, #32
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	19db      	adds	r3, r3, r7
 80028a4:	2208      	movs	r2, #8
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e00c      	b.n	80028c4 <UART_SetConfig+0x390>
 80028aa:	231b      	movs	r3, #27
 80028ac:	2220      	movs	r2, #32
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	19db      	adds	r3, r3, r7
 80028b2:	2210      	movs	r2, #16
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e005      	b.n	80028c4 <UART_SetConfig+0x390>
 80028b8:	231b      	movs	r3, #27
 80028ba:	2220      	movs	r2, #32
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	2210      	movs	r2, #16
 80028c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4ac1      	ldr	r2, [pc, #772]	; (8002bd0 <UART_SetConfig+0x69c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d005      	beq.n	80028da <UART_SetConfig+0x3a6>
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4ac0      	ldr	r2, [pc, #768]	; (8002bd4 <UART_SetConfig+0x6a0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d000      	beq.n	80028da <UART_SetConfig+0x3a6>
 80028d8:	e093      	b.n	8002a02 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028da:	231b      	movs	r3, #27
 80028dc:	2220      	movs	r2, #32
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	19db      	adds	r3, r3, r7
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d015      	beq.n	8002914 <UART_SetConfig+0x3e0>
 80028e8:	dc18      	bgt.n	800291c <UART_SetConfig+0x3e8>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00d      	beq.n	800290a <UART_SetConfig+0x3d6>
 80028ee:	dc15      	bgt.n	800291c <UART_SetConfig+0x3e8>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <UART_SetConfig+0x3c6>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d005      	beq.n	8002904 <UART_SetConfig+0x3d0>
 80028f8:	e010      	b.n	800291c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028fa:	f7ff f8af 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 80028fe:	0003      	movs	r3, r0
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002902:	e014      	b.n	800292e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002904:	4bb4      	ldr	r3, [pc, #720]	; (8002bd8 <UART_SetConfig+0x6a4>)
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002908:	e011      	b.n	800292e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800290a:	f7ff f81b 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800290e:	0003      	movs	r3, r0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002912:	e00c      	b.n	800292e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800291a:	e008      	b.n	800292e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002920:	231a      	movs	r3, #26
 8002922:	2220      	movs	r2, #32
 8002924:	189b      	adds	r3, r3, r2
 8002926:	19db      	adds	r3, r3, r7
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
        break;
 800292c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <UART_SetConfig+0x402>
 8002934:	e135      	b.n	8002ba2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	4ba8      	ldr	r3, [pc, #672]	; (8002bdc <UART_SetConfig+0x6a8>)
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	5ad3      	ldrh	r3, [r2, r3]
 8002940:	0019      	movs	r1, r3
 8002942:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002944:	f7fd fbe0 	bl	8000108 <__udivsi3>
 8002948:	0003      	movs	r3, r0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	0013      	movs	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	189b      	adds	r3, r3, r2
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	429a      	cmp	r2, r3
 800295a:	d305      	bcc.n	8002968 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002964:	429a      	cmp	r2, r3
 8002966:	d906      	bls.n	8002976 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002968:	231a      	movs	r3, #26
 800296a:	2220      	movs	r2, #32
 800296c:	189b      	adds	r3, r3, r2
 800296e:	19db      	adds	r3, r3, r7
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e044      	b.n	8002a00 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	4b96      	ldr	r3, [pc, #600]	; (8002bdc <UART_SetConfig+0x6a8>)
 8002984:	0052      	lsls	r2, r2, #1
 8002986:	5ad3      	ldrh	r3, [r2, r3]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	69b8      	ldr	r0, [r7, #24]
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	f7fd fd2d 	bl	80003f4 <__aeabi_uldivmod>
 800299a:	0002      	movs	r2, r0
 800299c:	000b      	movs	r3, r1
 800299e:	0e11      	lsrs	r1, r2, #24
 80029a0:	021d      	lsls	r5, r3, #8
 80029a2:	430d      	orrs	r5, r1
 80029a4:	0214      	lsls	r4, r2, #8
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68b8      	ldr	r0, [r7, #8]
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	1900      	adds	r0, r0, r4
 80029b8:	4169      	adcs	r1, r5
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f7fd fd14 	bl	80003f4 <__aeabi_uldivmod>
 80029cc:	0002      	movs	r2, r0
 80029ce:	000b      	movs	r3, r1
 80029d0:	0013      	movs	r3, r2
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d6:	23c0      	movs	r3, #192	; 0xc0
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	429a      	cmp	r2, r3
 80029dc:	d309      	bcc.n	80029f2 <UART_SetConfig+0x4be>
 80029de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	035b      	lsls	r3, r3, #13
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d204      	bcs.n	80029f2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	e006      	b.n	8002a00 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80029f2:	231a      	movs	r3, #26
 80029f4:	2220      	movs	r2, #32
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	19db      	adds	r3, r3, r7
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80029fe:	e0d0      	b.n	8002ba2 <UART_SetConfig+0x66e>
 8002a00:	e0cf      	b.n	8002ba2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d000      	beq.n	8002a10 <UART_SetConfig+0x4dc>
 8002a0e:	e070      	b.n	8002af2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002a10:	231b      	movs	r3, #27
 8002a12:	2220      	movs	r2, #32
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d015      	beq.n	8002a4a <UART_SetConfig+0x516>
 8002a1e:	dc18      	bgt.n	8002a52 <UART_SetConfig+0x51e>
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00d      	beq.n	8002a40 <UART_SetConfig+0x50c>
 8002a24:	dc15      	bgt.n	8002a52 <UART_SetConfig+0x51e>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <UART_SetConfig+0x4fc>
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d005      	beq.n	8002a3a <UART_SetConfig+0x506>
 8002a2e:	e010      	b.n	8002a52 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff f814 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002a34:	0003      	movs	r3, r0
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a38:	e014      	b.n	8002a64 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <UART_SetConfig+0x6a4>)
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a3e:	e011      	b.n	8002a64 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a40:	f7fe ff80 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002a44:	0003      	movs	r3, r0
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a48:	e00c      	b.n	8002a64 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a50:	e008      	b.n	8002a64 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a56:	231a      	movs	r3, #26
 8002a58:	2220      	movs	r2, #32
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
        break;
 8002a62:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <UART_SetConfig+0x538>
 8002a6a:	e09a      	b.n	8002ba2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a70:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <UART_SetConfig+0x6a8>)
 8002a72:	0052      	lsls	r2, r2, #1
 8002a74:	5ad3      	ldrh	r3, [r2, r3]
 8002a76:	0019      	movs	r1, r3
 8002a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a7a:	f7fd fb45 	bl	8000108 <__udivsi3>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	005a      	lsls	r2, r3, #1
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	18d2      	adds	r2, r2, r3
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f7fd fb39 	bl	8000108 <__udivsi3>
 8002a96:	0003      	movs	r3, r0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d921      	bls.n	8002ae4 <UART_SetConfig+0x5b0>
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d21c      	bcs.n	8002ae4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	200e      	movs	r0, #14
 8002ab0:	2420      	movs	r4, #32
 8002ab2:	1903      	adds	r3, r0, r4
 8002ab4:	19db      	adds	r3, r3, r7
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	438a      	bics	r2, r1
 8002aba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b299      	uxth	r1, r3
 8002ac8:	1903      	adds	r3, r0, r4
 8002aca:	19db      	adds	r3, r3, r7
 8002acc:	1902      	adds	r2, r0, r4
 8002ace:	19d2      	adds	r2, r2, r7
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1902      	adds	r2, r0, r4
 8002adc:	19d2      	adds	r2, r2, r7
 8002ade:	8812      	ldrh	r2, [r2, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	e05e      	b.n	8002ba2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002ae4:	231a      	movs	r3, #26
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e057      	b.n	8002ba2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002af2:	231b      	movs	r3, #27
 8002af4:	2220      	movs	r2, #32
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d015      	beq.n	8002b2c <UART_SetConfig+0x5f8>
 8002b00:	dc18      	bgt.n	8002b34 <UART_SetConfig+0x600>
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00d      	beq.n	8002b22 <UART_SetConfig+0x5ee>
 8002b06:	dc15      	bgt.n	8002b34 <UART_SetConfig+0x600>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <UART_SetConfig+0x5de>
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d005      	beq.n	8002b1c <UART_SetConfig+0x5e8>
 8002b10:	e010      	b.n	8002b34 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b12:	f7fe ffa3 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002b16:	0003      	movs	r3, r0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b1a:	e014      	b.n	8002b46 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <UART_SetConfig+0x6a4>)
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b20:	e011      	b.n	8002b46 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b22:	f7fe ff0f 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002b26:	0003      	movs	r3, r0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b2a:	e00c      	b.n	8002b46 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b32:	e008      	b.n	8002b46 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b38:	231a      	movs	r3, #26
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	19db      	adds	r3, r3, r7
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
        break;
 8002b44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02a      	beq.n	8002ba2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <UART_SetConfig+0x6a8>)
 8002b52:	0052      	lsls	r2, r2, #1
 8002b54:	5ad3      	ldrh	r3, [r2, r3]
 8002b56:	0019      	movs	r1, r3
 8002b58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b5a:	f7fd fad5 	bl	8000108 <__udivsi3>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	001a      	movs	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	18d2      	adds	r2, r2, r3
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f7fd fac9 	bl	8000108 <__udivsi3>
 8002b76:	0003      	movs	r3, r0
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d90a      	bls.n	8002b96 <UART_SetConfig+0x662>
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	025b      	lsls	r3, r3, #9
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d205      	bcs.n	8002b96 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	e005      	b.n	8002ba2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002b96:	231a      	movs	r3, #26
 8002b98:	2220      	movs	r2, #32
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	19db      	adds	r3, r3, r7
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	226a      	movs	r2, #106	; 0x6a
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2268      	movs	r2, #104	; 0x68
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	2200      	movs	r2, #0
 8002bbc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002bbe:	231a      	movs	r3, #26
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b010      	add	sp, #64	; 0x40
 8002bce:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd0:	40008000 	.word	0x40008000
 8002bd4:	40008400 	.word	0x40008400
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	080058b4 	.word	0x080058b4

08002be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	2208      	movs	r2, #8
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <UART_AdvFeatureConfig+0x144>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <UART_AdvFeatureConfig+0x148>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d00b      	beq.n	8002c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a3b      	ldr	r2, [pc, #236]	; (8002d2c <UART_AdvFeatureConfig+0x14c>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <UART_AdvFeatureConfig+0x150>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	2210      	movs	r2, #16
 8002c76:	4013      	ands	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <UART_AdvFeatureConfig+0x154>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	2220      	movs	r2, #32
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <UART_AdvFeatureConfig+0x158>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	2240      	movs	r2, #64	; 0x40
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d01d      	beq.n	8002cfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <UART_AdvFeatureConfig+0x15c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	035b      	lsls	r3, r3, #13
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d10b      	bne.n	8002cfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <UART_AdvFeatureConfig+0x160>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <UART_AdvFeatureConfig+0x164>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  }
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	ffff7fff 	.word	0xffff7fff
 8002d28:	fffdffff 	.word	0xfffdffff
 8002d2c:	fffeffff 	.word	0xfffeffff
 8002d30:	fffbffff 	.word	0xfffbffff
 8002d34:	ffffefff 	.word	0xffffefff
 8002d38:	ffffdfff 	.word	0xffffdfff
 8002d3c:	ffefffff 	.word	0xffefffff
 8002d40:	ff9fffff 	.word	0xff9fffff
 8002d44:	fff7ffff 	.word	0xfff7ffff

08002d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b092      	sub	sp, #72	; 0x48
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2290      	movs	r2, #144	; 0x90
 8002d54:	2100      	movs	r1, #0
 8002d56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d58:	f7fd fefe 	bl	8000b58 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2208      	movs	r2, #8
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d12d      	bne.n	8002dca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	0391      	lsls	r1, r2, #14
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4a47      	ldr	r2, [pc, #284]	; (8002e94 <UART_CheckIdleState+0x14c>)
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f000 f88e 	bl	8002e9c <UART_WaitOnFlagUntilTimeout>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d022      	beq.n	8002dca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d8e:	2301      	movs	r3, #1
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	438a      	bics	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2288      	movs	r2, #136	; 0x88
 8002dba:	2120      	movs	r1, #32
 8002dbc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2284      	movs	r2, #132	; 0x84
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e060      	b.n	8002e8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d146      	bne.n	8002e66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	03d1      	lsls	r1, r2, #15
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <UART_CheckIdleState+0x14c>)
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f000 f859 	bl	8002e9c <UART_WaitOnFlagUntilTimeout>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d03b      	beq.n	8002e66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dee:	f3ef 8310 	mrs	r3, PRIMASK
 8002df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002df4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
 8002df8:	2301      	movs	r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4922      	ldr	r1, [pc, #136]	; (8002e98 <UART_CheckIdleState+0x150>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e20:	f3ef 8310 	mrs	r3, PRIMASK
 8002e24:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f383 8810 	msr	PRIMASK, r3
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	438a      	bics	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	228c      	movs	r2, #140	; 0x8c
 8002e56:	2120      	movs	r1, #32
 8002e58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2284      	movs	r2, #132	; 0x84
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e012      	b.n	8002e8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2288      	movs	r2, #136	; 0x88
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	228c      	movs	r2, #140	; 0x8c
 8002e72:	2120      	movs	r1, #32
 8002e74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2284      	movs	r2, #132	; 0x84
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b010      	add	sp, #64	; 0x40
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	01ffffff 	.word	0x01ffffff
 8002e98:	fffffedf 	.word	0xfffffedf

08002e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	1dfb      	adds	r3, r7, #7
 8002eaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eac:	e051      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	d04e      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7fd fe50 	bl	8000b58 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d302      	bcc.n	8002eca <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e051      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d03b      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d038      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d035      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2208      	movs	r2, #8
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d111      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f83c 	bl	8002f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2290      	movs	r2, #144	; 0x90
 8002f08:	2108      	movs	r1, #8
 8002f0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2284      	movs	r2, #132	; 0x84
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02c      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	401a      	ands	r2, r3
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d112      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f81f 	bl	8002f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2290      	movs	r2, #144	; 0x90
 8002f42:	2120      	movs	r1, #32
 8002f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2284      	movs	r2, #132	; 0x84
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	425a      	negs	r2, r3
 8002f62:	4153      	adcs	r3, r2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	001a      	movs	r2, r3
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d09e      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f84:	f3ef 8310 	mrs	r3, PRIMASK
 8002f88:	617b      	str	r3, [r7, #20]
  return(result);
 8002f8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4926      	ldr	r1, [pc, #152]	; (8003040 <UART_EndRxTransfer+0xc4>)
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fba:	623b      	str	r3, [r7, #32]
  return(result);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	491b      	ldr	r1, [pc, #108]	; (8003044 <UART_EndRxTransfer+0xc8>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d118      	bne.n	8003022 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2110      	movs	r1, #16
 8003012:	438a      	bics	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	228c      	movs	r2, #140	; 0x8c
 8003026:	2120      	movs	r1, #32
 8003028:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b00e      	add	sp, #56	; 0x38
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	fffffedf 	.word	0xfffffedf
 8003044:	effffffe 	.word	0xeffffffe

08003048 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2284      	movs	r2, #132	; 0x84
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_UARTEx_DisableFifoMode+0x16>
 800305a:	2302      	movs	r3, #2
 800305c:	e027      	b.n	80030ae <HAL_UARTEx_DisableFifoMode+0x66>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2284      	movs	r2, #132	; 0x84
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2288      	movs	r2, #136	; 0x88
 800306a:	2124      	movs	r1, #36	; 0x24
 800306c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2288      	movs	r2, #136	; 0x88
 80030a0:	2120      	movs	r1, #32
 80030a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2284      	movs	r2, #132	; 0x84
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	dfffffff 	.word	0xdfffffff

080030bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2284      	movs	r2, #132	; 0x84
 80030ca:	5c9b      	ldrb	r3, [r3, r2]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e02e      	b.n	8003132 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2284      	movs	r2, #132	; 0x84
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2288      	movs	r2, #136	; 0x88
 80030e0:	2124      	movs	r1, #36	; 0x24
 80030e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	08d9      	lsrs	r1, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f854 	bl	80031c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2288      	movs	r2, #136	; 0x88
 8003124:	2120      	movs	r1, #32
 8003126:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2284      	movs	r2, #132	; 0x84
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2284      	movs	r2, #132	; 0x84
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e02f      	b.n	80031b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2284      	movs	r2, #132	; 0x84
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2288      	movs	r2, #136	; 0x88
 8003160:	2124      	movs	r1, #36	; 0x24
 8003162:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	438a      	bics	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f813 	bl	80031c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2288      	movs	r2, #136	; 0x88
 80031a6:	2120      	movs	r1, #32
 80031a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2284      	movs	r2, #132	; 0x84
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b004      	add	sp, #16
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	f1ffffff 	.word	0xf1ffffff

080031c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	226a      	movs	r2, #106	; 0x6a
 80031d4:	2101      	movs	r1, #1
 80031d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2268      	movs	r2, #104	; 0x68
 80031dc:	2101      	movs	r1, #1
 80031de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031e0:	e043      	b.n	800326a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80031e2:	260f      	movs	r6, #15
 80031e4:	19bb      	adds	r3, r7, r6
 80031e6:	2208      	movs	r2, #8
 80031e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80031ea:	200e      	movs	r0, #14
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	2208      	movs	r2, #8
 80031f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	0e5b      	lsrs	r3, r3, #25
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	240d      	movs	r4, #13
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	2107      	movs	r1, #7
 8003202:	400a      	ands	r2, r1
 8003204:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	0f5b      	lsrs	r3, r3, #29
 800320e:	b2da      	uxtb	r2, r3
 8003210:	250c      	movs	r5, #12
 8003212:	197b      	adds	r3, r7, r5
 8003214:	2107      	movs	r1, #7
 8003216:	400a      	ands	r2, r1
 8003218:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800321a:	183b      	adds	r3, r7, r0
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	197a      	adds	r2, r7, r5
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	4914      	ldr	r1, [pc, #80]	; (8003274 <UARTEx_SetNbDataToProcess+0xb4>)
 8003224:	5c8a      	ldrb	r2, [r1, r2]
 8003226:	435a      	muls	r2, r3
 8003228:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800322a:	197b      	adds	r3, r7, r5
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <UARTEx_SetNbDataToProcess+0xb8>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003232:	0019      	movs	r1, r3
 8003234:	f7fc fff2 	bl	800021c <__divsi3>
 8003238:	0003      	movs	r3, r0
 800323a:	b299      	uxth	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	226a      	movs	r2, #106	; 0x6a
 8003240:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003242:	19bb      	adds	r3, r7, r6
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	193a      	adds	r2, r7, r4
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <UARTEx_SetNbDataToProcess+0xb4>)
 800324c:	5c8a      	ldrb	r2, [r1, r2]
 800324e:	435a      	muls	r2, r3
 8003250:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003252:	193b      	adds	r3, r7, r4
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <UARTEx_SetNbDataToProcess+0xb8>)
 8003258:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800325a:	0019      	movs	r1, r3
 800325c:	f7fc ffde 	bl	800021c <__divsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	b299      	uxth	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2268      	movs	r2, #104	; 0x68
 8003268:	5299      	strh	r1, [r3, r2]
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b005      	add	sp, #20
 8003270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	080058cc 	.word	0x080058cc
 8003278:	080058d4 	.word	0x080058d4

0800327c <__NVIC_SetPriority>:
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	0002      	movs	r2, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b7f      	cmp	r3, #127	; 0x7f
 8003290:	d828      	bhi.n	80032e4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <__NVIC_SetPriority+0xd4>)
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b25b      	sxtb	r3, r3
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	33c0      	adds	r3, #192	; 0xc0
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	589b      	ldr	r3, [r3, r2]
 80032a2:	1dfa      	adds	r2, r7, #7
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	0011      	movs	r1, r2
 80032a8:	2203      	movs	r2, #3
 80032aa:	400a      	ands	r2, r1
 80032ac:	00d2      	lsls	r2, r2, #3
 80032ae:	21ff      	movs	r1, #255	; 0xff
 80032b0:	4091      	lsls	r1, r2
 80032b2:	000a      	movs	r2, r1
 80032b4:	43d2      	mvns	r2, r2
 80032b6:	401a      	ands	r2, r3
 80032b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	401a      	ands	r2, r3
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	2303      	movs	r3, #3
 80032ca:	4003      	ands	r3, r0
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d0:	481f      	ldr	r0, [pc, #124]	; (8003350 <__NVIC_SetPriority+0xd4>)
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	430a      	orrs	r2, r1
 80032dc:	33c0      	adds	r3, #192	; 0xc0
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	501a      	str	r2, [r3, r0]
}
 80032e2:	e031      	b.n	8003348 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <__NVIC_SetPriority+0xd8>)
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	0019      	movs	r1, r3
 80032ec:	230f      	movs	r3, #15
 80032ee:	400b      	ands	r3, r1
 80032f0:	3b08      	subs	r3, #8
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3306      	adds	r3, #6
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	3304      	adds	r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1dfa      	adds	r2, r7, #7
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	0011      	movs	r1, r2
 8003304:	2203      	movs	r2, #3
 8003306:	400a      	ands	r2, r1
 8003308:	00d2      	lsls	r2, r2, #3
 800330a:	21ff      	movs	r1, #255	; 0xff
 800330c:	4091      	lsls	r1, r2
 800330e:	000a      	movs	r2, r1
 8003310:	43d2      	mvns	r2, r2
 8003312:	401a      	ands	r2, r3
 8003314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	401a      	ands	r2, r3
 800331e:	1dfb      	adds	r3, r7, #7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	0018      	movs	r0, r3
 8003324:	2303      	movs	r3, #3
 8003326:	4003      	ands	r3, r0
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <__NVIC_SetPriority+0xd8>)
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	001c      	movs	r4, r3
 8003334:	230f      	movs	r3, #15
 8003336:	4023      	ands	r3, r4
 8003338:	3b08      	subs	r3, #8
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	430a      	orrs	r2, r1
 800333e:	3306      	adds	r3, #6
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	18c3      	adds	r3, r0, r3
 8003344:	3304      	adds	r3, #4
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b003      	add	sp, #12
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <SysTick_Handler+0x1c>)
 800335e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003360:	f001 faaa 	bl	80048b8 <xTaskGetSchedulerState>
 8003364:	0003      	movs	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800336a:	f001 ff7d 	bl	8005268 <xPortSysTickHandler>
  }
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	e000e010 	.word	0xe000e010

08003378 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800337c:	2305      	movs	r3, #5
 800337e:	425b      	negs	r3, r3
 8003380:	2100      	movs	r1, #0
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff ff7a 	bl	800327c <__NVIC_SetPriority>
#endif
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003396:	f3ef 8305 	mrs	r3, IPSR
 800339a:	603b      	str	r3, [r7, #0]
  return(result);
 800339c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80033a2:	2306      	movs	r3, #6
 80033a4:	425b      	negs	r3, r3
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e010      	b.n	80033cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <osKernelStart+0x48>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d109      	bne.n	80033c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80033b2:	f7ff ffe1 	bl	8003378 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <osKernelStart+0x48>)
 80033b8:	2202      	movs	r2, #2
 80033ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80033bc:	f000 fe92 	bl	80040e4 <vTaskStartScheduler>
      stat = osOK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	e002      	b.n	80033cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80033c6:	2301      	movs	r3, #1
 80033c8:	425b      	negs	r3, r3
 80033ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	20000164 	.word	0x20000164

080033dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a06      	ldr	r2, [pc, #24]	; (8003404 <vApplicationGetIdleTaskMemory+0x28>)
 80033ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <vApplicationGetIdleTaskMemory+0x2c>)
 80033f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b004      	add	sp, #16
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000168 	.word	0x20000168
 8003408:	20000210 	.word	0x20000210

0800340c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a06      	ldr	r2, [pc, #24]	; (8003434 <vApplicationGetTimerTaskMemory+0x28>)
 800341c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a05      	ldr	r2, [pc, #20]	; (8003438 <vApplicationGetTimerTaskMemory+0x2c>)
 8003422:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	0052      	lsls	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000410 	.word	0x20000410
 8003438:	200004b8 	.word	0x200004b8

0800343c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3308      	adds	r3, #8
 8003448:	001a      	movs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	4252      	negs	r2, r2
 8003454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3308      	adds	r3, #8
 800345a:	001a      	movs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3308      	adds	r3, #8
 8003464:	001a      	movs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b002      	add	sp, #8
 800348c:	bd80      	pop	{r7, pc}

0800348e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3301      	adds	r3, #1
 80034e6:	d103      	bne.n	80034f0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e00c      	b.n	800350a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3308      	adds	r3, #8
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e002      	b.n	80034fe <vListInsert+0x2c>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d2f6      	bcs.n	80034f8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}

0800353e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6852      	ldr	r2, [r2, #4]
 800355e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d103      	bne.n	8003572 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}

0800358e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xQueueGenericReset+0x18>
 80035a2:	b672      	cpsid	i
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80035a6:	f001 fe03 	bl	80051b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	434b      	muls	r3, r1
 80035b8:	18d2      	adds	r2, r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	1e59      	subs	r1, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	434b      	muls	r3, r1
 80035dc:	18d2      	adds	r2, r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2244      	movs	r2, #68	; 0x44
 80035e6:	21ff      	movs	r1, #255	; 0xff
 80035e8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2245      	movs	r2, #69	; 0x45
 80035ee:	21ff      	movs	r1, #255	; 0xff
 80035f0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3310      	adds	r3, #16
 8003604:	0018      	movs	r0, r3
 8003606:	f000 ffbf 	bl	8004588 <xTaskRemoveFromEventList>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d00c      	beq.n	8003628 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800360e:	f001 fdbf 	bl	8005190 <vPortYield>
 8003612:	e009      	b.n	8003628 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3310      	adds	r3, #16
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff ff0f 	bl	800343c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff ff0a 	bl	800343c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003628:	f001 fdd4 	bl	80051d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800362c:	2301      	movs	r3, #1
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}

08003636 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003636:	b590      	push	{r4, r7, lr}
 8003638:	b089      	sub	sp, #36	; 0x24
 800363a:	af02      	add	r7, sp, #8
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <xQueueGenericCreateStatic+0x18>
 800364a:	b672      	cpsid	i
 800364c:	e7fe      	b.n	800364c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <xQueueGenericCreateStatic+0x22>
 8003654:	b672      	cpsid	i
 8003656:	e7fe      	b.n	8003656 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <xQueueGenericCreateStatic+0x2e>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <xQueueGenericCreateStatic+0x32>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <xQueueGenericCreateStatic+0x34>
 8003668:	2300      	movs	r3, #0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueGenericCreateStatic+0x3c>
 800366e:	b672      	cpsid	i
 8003670:	e7fe      	b.n	8003670 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <xQueueGenericCreateStatic+0x48>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <xQueueGenericCreateStatic+0x4c>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <xQueueGenericCreateStatic+0x4e>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <xQueueGenericCreateStatic+0x56>
 8003688:	b672      	cpsid	i
 800368a:	e7fe      	b.n	800368a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800368c:	2350      	movs	r3, #80	; 0x50
 800368e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b50      	cmp	r3, #80	; 0x50
 8003694:	d001      	beq.n	800369a <xQueueGenericCreateStatic+0x64>
 8003696:	b672      	cpsid	i
 8003698:	e7fe      	b.n	8003698 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800369a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2246      	movs	r2, #70	; 0x46
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036ae:	2328      	movs	r3, #40	; 0x28
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	781c      	ldrb	r4, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0023      	movs	r3, r4
 80036c0:	f000 f837 	bl	8003732 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036c4:	697b      	ldr	r3, [r7, #20]
	}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b007      	add	sp, #28
 80036cc:	bd90      	pop	{r4, r7, pc}

080036ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036ce:	b590      	push	{r4, r7, lr}
 80036d0:	b08b      	sub	sp, #44	; 0x2c
 80036d2:	af02      	add	r7, sp, #8
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <xQueueGenericCreate+0x18>
 80036e2:	b672      	cpsid	i
 80036e4:	e7fe      	b.n	80036e4 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	4353      	muls	r3, r2
 80036ec:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3350      	adds	r3, #80	; 0x50
 80036f2:	0018      	movs	r0, r3
 80036f4:	f001 fdf4 	bl	80052e0 <pvPortMalloc>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d012      	beq.n	8003728 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3350      	adds	r3, #80	; 0x50
 800370a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2246      	movs	r2, #70	; 0x46
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	781c      	ldrb	r4, [r3, #0]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	0023      	movs	r3, r4
 8003724:	f000 f805 	bl	8003732 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003728:	69bb      	ldr	r3, [r7, #24]
	}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b009      	add	sp, #36	; 0x24
 8003730:	bd90      	pop	{r4, r7, pc}

08003732 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	001a      	movs	r2, r3
 8003740:	1cfb      	adds	r3, r7, #3
 8003742:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e002      	b.n	8003758 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2101      	movs	r1, #1
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff ff10 	bl	800358e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1cfa      	adds	r2, r7, #3
 8003772:	214c      	movs	r1, #76	; 0x4c
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b004      	add	sp, #16
 800377e:	bd80      	pop	{r7, pc}

08003780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <xQueueGenericSend+0x20>
 800379c:	b672      	cpsid	i
 800379e:	e7fe      	b.n	800379e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <xQueueGenericSend+0x2e>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <xQueueGenericSend+0x32>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <xQueueGenericSend+0x34>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <xQueueGenericSend+0x3c>
 80037b8:	b672      	cpsid	i
 80037ba:	e7fe      	b.n	80037ba <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x4a>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <xQueueGenericSend+0x4e>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueGenericSend+0x50>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <xQueueGenericSend+0x58>
 80037d4:	b672      	cpsid	i
 80037d6:	e7fe      	b.n	80037d6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037d8:	f001 f86e 	bl	80048b8 <xTaskGetSchedulerState>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d102      	bne.n	80037e6 <xQueueGenericSend+0x66>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <xQueueGenericSend+0x6a>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <xQueueGenericSend+0x6c>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <xQueueGenericSend+0x74>
 80037f0:	b672      	cpsid	i
 80037f2:	e7fe      	b.n	80037f2 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037f4:	f001 fcdc 	bl	80051b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <xQueueGenericSend+0x8a>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d11e      	bne.n	8003848 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	0018      	movs	r0, r3
 8003812:	f000 f9a2 	bl	8003b5a <prvCopyDataToQueue>
 8003816:	0003      	movs	r3, r0
 8003818:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	3324      	adds	r3, #36	; 0x24
 8003826:	0018      	movs	r0, r3
 8003828:	f000 feae 	bl	8004588 <xTaskRemoveFromEventList>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d007      	beq.n	8003840 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003830:	f001 fcae 	bl	8005190 <vPortYield>
 8003834:	e004      	b.n	8003840 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800383c:	f001 fca8 	bl	8005190 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003840:	f001 fcc8 	bl	80051d4 <vPortExitCritical>
				return pdPASS;
 8003844:	2301      	movs	r3, #1
 8003846:	e05b      	b.n	8003900 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800384e:	f001 fcc1 	bl	80051d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003852:	2300      	movs	r3, #0
 8003854:	e054      	b.n	8003900 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800385c:	2314      	movs	r3, #20
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	0018      	movs	r0, r3
 8003862:	f000 feed 	bl	8004640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003866:	2301      	movs	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800386a:	f001 fcb3 	bl	80051d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800386e:	f000 fc97 	bl	80041a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003872:	f001 fc9d 	bl	80051b0 <vPortEnterCritical>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2244      	movs	r2, #68	; 0x44
 800387a:	5c9b      	ldrb	r3, [r3, r2]
 800387c:	b25b      	sxtb	r3, r3
 800387e:	3301      	adds	r3, #1
 8003880:	d103      	bne.n	800388a <xQueueGenericSend+0x10a>
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2244      	movs	r2, #68	; 0x44
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	2245      	movs	r2, #69	; 0x45
 800388e:	5c9b      	ldrb	r3, [r3, r2]
 8003890:	b25b      	sxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	d103      	bne.n	800389e <xQueueGenericSend+0x11e>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2245      	movs	r2, #69	; 0x45
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]
 800389e:	f001 fc99 	bl	80051d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038a2:	1d3a      	adds	r2, r7, #4
 80038a4:	2314      	movs	r3, #20
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	0011      	movs	r1, r2
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fedc 	bl	8004668 <xTaskCheckForTimeOut>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d11e      	bne.n	80038f2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fa54 	bl	8003d64 <prvIsQueueFull>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d011      	beq.n	80038e4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	3310      	adds	r3, #16
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fe19 	bl	8004500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f9d3 	bl	8003c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038d6:	f000 fc6f 	bl	80041b8 <xTaskResumeAll>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d18a      	bne.n	80037f4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80038de:	f001 fc57 	bl	8005190 <vPortYield>
 80038e2:	e787      	b.n	80037f4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 f9c8 	bl	8003c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ec:	f000 fc64 	bl	80041b8 <xTaskResumeAll>
 80038f0:	e780      	b.n	80037f4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f9c1 	bl	8003c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038fa:	f000 fc5d 	bl	80041b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b00a      	add	sp, #40	; 0x28
 8003906:	bd80      	pop	{r7, pc}

08003908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b08b      	sub	sp, #44	; 0x2c
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSendFromISR+0x1c>
 8003920:	b672      	cpsid	i
 8003922:	e7fe      	b.n	8003922 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <xQueueGenericSendFromISR+0x2a>
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <xQueueGenericSendFromISR+0x2e>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <xQueueGenericSendFromISR+0x30>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <xQueueGenericSendFromISR+0x38>
 800393c:	b672      	cpsid	i
 800393e:	e7fe      	b.n	800393e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSendFromISR+0x46>
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSendFromISR+0x4a>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSendFromISR+0x4c>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <xQueueGenericSendFromISR+0x54>
 8003958:	b672      	cpsid	i
 800395a:	e7fe      	b.n	800395a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800395c:	f001 fc52 	bl	8005204 <ulSetInterruptMaskFromISR>
 8003960:	0003      	movs	r3, r0
 8003962:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <xQueueGenericSendFromISR+0x6e>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d131      	bne.n	80039da <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003976:	241b      	movs	r4, #27
 8003978:	193b      	adds	r3, r7, r4
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	2145      	movs	r1, #69	; 0x45
 800397e:	5c52      	ldrb	r2, [r2, r1]
 8003980:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 f8e3 	bl	8003b5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003994:	193b      	adds	r3, r7, r4
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	d111      	bne.n	80039c2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	3324      	adds	r3, #36	; 0x24
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 fdec 	bl	8004588 <xTaskRemoveFromEventList>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d00f      	beq.n	80039d4 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e008      	b.n	80039d4 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039c2:	231b      	movs	r3, #27
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	b259      	sxtb	r1, r3
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2245      	movs	r2, #69	; 0x45
 80039d2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80039d8:	e001      	b.n	80039de <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f001 fc15 	bl	8005210 <vClearInterruptMaskFromISR>

	return xReturn;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b00b      	add	sp, #44	; 0x2c
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueReceive+0x1e>
 8003a0a:	b672      	cpsid	i
 8003a0c:	e7fe      	b.n	8003a0c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <xQueueReceive+0x2c>
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <xQueueReceive+0x30>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <xQueueReceive+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueReceive+0x3a>
 8003a26:	b672      	cpsid	i
 8003a28:	e7fe      	b.n	8003a28 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a2a:	f000 ff45 	bl	80048b8 <xTaskGetSchedulerState>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d102      	bne.n	8003a38 <xQueueReceive+0x48>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <xQueueReceive+0x4c>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <xQueueReceive+0x4e>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <xQueueReceive+0x56>
 8003a42:	b672      	cpsid	i
 8003a44:	e7fe      	b.n	8003a44 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a46:	f001 fbb3 	bl	80051b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01a      	beq.n	8003a8c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	0011      	movs	r1, r2
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 f8e7 	bl	8003c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	3310      	adds	r3, #16
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fd86 	bl	8004588 <xTaskRemoveFromEventList>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a80:	f001 fb86 	bl	8005190 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a84:	f001 fba6 	bl	80051d4 <vPortExitCritical>
				return pdPASS;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e062      	b.n	8003b52 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a92:	f001 fb9f 	bl	80051d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e05b      	b.n	8003b52 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa0:	2314      	movs	r3, #20
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 fdcb 	bl	8004640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aae:	f001 fb91 	bl	80051d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab2:	f000 fb75 	bl	80041a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ab6:	f001 fb7b 	bl	80051b0 <vPortEnterCritical>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2244      	movs	r2, #68	; 0x44
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	d103      	bne.n	8003ace <xQueueReceive+0xde>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2244      	movs	r2, #68	; 0x44
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2245      	movs	r2, #69	; 0x45
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	d103      	bne.n	8003ae2 <xQueueReceive+0xf2>
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2245      	movs	r2, #69	; 0x45
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]
 8003ae2:	f001 fb77 	bl	80051d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae6:	1d3a      	adds	r2, r7, #4
 8003ae8:	2314      	movs	r3, #20
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fdba 	bl	8004668 <xTaskCheckForTimeOut>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d11e      	bne.n	8003b36 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 f91c 	bl	8003d38 <prvIsQueueEmpty>
 8003b00:	1e03      	subs	r3, r0, #0
 8003b02:	d011      	beq.n	8003b28 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 fcf7 	bl	8004500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f8b1 	bl	8003c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b1a:	f000 fb4d 	bl	80041b8 <xTaskResumeAll>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d191      	bne.n	8003a46 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003b22:	f001 fb35 	bl	8005190 <vPortYield>
 8003b26:	e78e      	b.n	8003a46 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f8a6 	bl	8003c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b30:	f000 fb42 	bl	80041b8 <xTaskResumeAll>
 8003b34:	e787      	b.n	8003a46 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f89f 	bl	8003c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b3e:	f000 fb3b 	bl	80041b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f8f7 	bl	8003d38 <prvIsQueueEmpty>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d100      	bne.n	8003b50 <xQueueReceive+0x160>
 8003b4e:	e77a      	b.n	8003a46 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b00a      	add	sp, #40	; 0x28
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d14e      	bne.n	8003c1e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 feb3 	bl	80048f0 <xTaskPriorityDisinherit>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	e043      	b.n	8003c1e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d119      	bne.n	8003bd0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6858      	ldr	r0, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f001 fdd8 	bl	800575c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	18d2      	adds	r2, r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d32b      	bcc.n	8003c1e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e026      	b.n	8003c1e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68d8      	ldr	r0, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	f001 fdbe 	bl	800575c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	425b      	negs	r3, r3
 8003bea:	18d2      	adds	r2, r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	425b      	negs	r3, r3
 8003c06:	18d2      	adds	r2, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d105      	bne.n	8003c1e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c26:	697b      	ldr	r3, [r7, #20]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	18d2      	adds	r2, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d303      	bcc.n	8003c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68d9      	ldr	r1, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f001 fd74 	bl	800575c <memcpy>
	}
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c84:	f001 fa94 	bl	80051b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c88:	230f      	movs	r3, #15
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	2145      	movs	r1, #69	; 0x45
 8003c90:	5c52      	ldrb	r2, [r2, r1]
 8003c92:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c94:	e013      	b.n	8003cbe <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fc70 	bl	8004588 <xTaskRemoveFromEventList>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cac:	f000 fd2c 	bl	8004708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cb0:	210f      	movs	r1, #15
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cbe:	230f      	movs	r3, #15
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	dce5      	bgt.n	8003c96 <prvUnlockQueue+0x1a>
 8003cca:	e000      	b.n	8003cce <prvUnlockQueue+0x52>
					break;
 8003ccc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2245      	movs	r2, #69	; 0x45
 8003cd2:	21ff      	movs	r1, #255	; 0xff
 8003cd4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003cd6:	f001 fa7d 	bl	80051d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cda:	f001 fa69 	bl	80051b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cde:	230e      	movs	r3, #14
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	2144      	movs	r1, #68	; 0x44
 8003ce6:	5c52      	ldrb	r2, [r2, r1]
 8003ce8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cea:	e013      	b.n	8003d14 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d016      	beq.n	8003d22 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 fc45 	bl	8004588 <xTaskRemoveFromEventList>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003d02:	f000 fd01 	bl	8004708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d06:	210e      	movs	r1, #14
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d14:	230e      	movs	r3, #14
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	dce5      	bgt.n	8003cec <prvUnlockQueue+0x70>
 8003d20:	e000      	b.n	8003d24 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003d22:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2244      	movs	r2, #68	; 0x44
 8003d28:	21ff      	movs	r1, #255	; 0xff
 8003d2a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003d2c:	f001 fa52 	bl	80051d4 <vPortExitCritical>
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d40:	f001 fa36 	bl	80051b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e001      	b.n	8003d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d56:	f001 fa3d 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d6c:	f001 fa20 	bl	80051b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d102      	bne.n	8003d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e001      	b.n	8003d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d86:	f001 fa25 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e015      	b.n	8003dd0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <vQueueAddToRegistry+0x4c>)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	00d2      	lsls	r2, r2, #3
 8003daa:	58d3      	ldr	r3, [r2, r3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <vQueueAddToRegistry+0x4c>)
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	00d2      	lsls	r2, r2, #3
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <vQueueAddToRegistry+0x4c>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dc8:	e006      	b.n	8003dd8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b07      	cmp	r3, #7
 8003dd4:	d9e6      	bls.n	8003da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	200008b8 	.word	0x200008b8

08003de4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003df4:	f001 f9dc 	bl	80051b0 <vPortEnterCritical>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2244      	movs	r2, #68	; 0x44
 8003dfc:	5c9b      	ldrb	r3, [r3, r2]
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	d103      	bne.n	8003e0c <vQueueWaitForMessageRestricted+0x28>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2244      	movs	r2, #68	; 0x44
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2245      	movs	r2, #69	; 0x45
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	b25b      	sxtb	r3, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	d103      	bne.n	8003e20 <vQueueWaitForMessageRestricted+0x3c>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2245      	movs	r2, #69	; 0x45
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]
 8003e20:	f001 f9d8 	bl	80051d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3324      	adds	r3, #36	; 0x24
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 fb81 	bl	800453c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff ff1d 	bl	8003c7c <prvUnlockQueue>
	}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b006      	add	sp, #24
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e4a:	b590      	push	{r4, r7, lr}
 8003e4c:	b08d      	sub	sp, #52	; 0x34
 8003e4e:	af04      	add	r7, sp, #16
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <xTaskCreateStatic+0x18>
 8003e5e:	b672      	cpsid	i
 8003e60:	e7fe      	b.n	8003e60 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <xTaskCreateStatic+0x22>
 8003e68:	b672      	cpsid	i
 8003e6a:	e7fe      	b.n	8003e6a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e6c:	23a8      	movs	r3, #168	; 0xa8
 8003e6e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2ba8      	cmp	r3, #168	; 0xa8
 8003e74:	d001      	beq.n	8003e7a <xTaskCreateStatic+0x30>
 8003e76:	b672      	cpsid	i
 8003e78:	e7fe      	b.n	8003e78 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e7a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <xTaskCreateStatic+0x7a>
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01d      	beq.n	8003ec4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	22a5      	movs	r2, #165	; 0xa5
 8003e96:	2102      	movs	r1, #2
 8003e98:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e9a:	683c      	ldr	r4, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	2318      	movs	r3, #24
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	0023      	movs	r3, r4
 8003eb6:	f000 f80d 	bl	8003ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f8a9 	bl	8004014 <prvAddNewTaskToReadyList>
 8003ec2:	e001      	b.n	8003ec8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b009      	add	sp, #36	; 0x24
 8003ed0:	bd90      	pop	{r4, r7, pc}
	...

08003ed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	001a      	movs	r2, r3
 8003eec:	21a5      	movs	r1, #165	; 0xa5
 8003eee:	f001 fba9 	bl	8005644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4942      	ldr	r1, [pc, #264]	; (8004004 <prvInitialiseNewTask+0x130>)
 8003efa:	468c      	mov	ip, r1
 8003efc:	4463      	add	r3, ip
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2207      	movs	r2, #7
 8003f08:	4393      	bics	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	d001      	beq.n	8003f18 <prvInitialiseNewTask+0x44>
 8003f14:	b672      	cpsid	i
 8003f16:	e7fe      	b.n	8003f16 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e013      	b.n	8003f4c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	7818      	ldrb	r0, [r3, #0]
 8003f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2e:	2134      	movs	r1, #52	; 0x34
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	18d3      	adds	r3, r2, r3
 8003f34:	185b      	adds	r3, r3, r1
 8003f36:	1c02      	adds	r2, r0, #0
 8003f38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	18d3      	adds	r3, r2, r3
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d9e8      	bls.n	8003f24 <prvInitialiseNewTask+0x50>
 8003f52:	e000      	b.n	8003f56 <prvInitialiseNewTask+0x82>
			{
				break;
 8003f54:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	2243      	movs	r2, #67	; 0x43
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	e003      	b.n	8003f68 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	2234      	movs	r2, #52	; 0x34
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b37      	cmp	r3, #55	; 0x37
 8003f6c:	d901      	bls.n	8003f72 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f6e:	2337      	movs	r3, #55	; 0x37
 8003f70:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	2200      	movs	r2, #0
 8003f82:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	3304      	adds	r3, #4
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff fa75 	bl	8003478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	3318      	adds	r3, #24
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fa70 	bl	8003478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2238      	movs	r2, #56	; 0x38
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	22a0      	movs	r2, #160	; 0xa0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	22a4      	movs	r2, #164	; 0xa4
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	3354      	adds	r3, #84	; 0x54
 8003fc2:	224c      	movs	r2, #76	; 0x4c
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f001 fb3c 	bl	8005644 <memset>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <prvInitialiseNewTask+0x134>)
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <prvInitialiseNewTask+0x138>)
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <prvInitialiseNewTask+0x13c>)
 8003fdc:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f001 f845 	bl	8005074 <pxPortInitialiseStack>
 8003fea:	0002      	movs	r2, r0
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b006      	add	sp, #24
 8004002:	bd80      	pop	{r7, pc}
 8004004:	3fffffff 	.word	0x3fffffff
 8004008:	20001b44 	.word	0x20001b44
 800400c:	20001bac 	.word	0x20001bac
 8004010:	20001c14 	.word	0x20001c14

08004014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800401c:	f001 f8c8 	bl	80051b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <prvAddNewTaskToReadyList+0xb8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <prvAddNewTaskToReadyList+0xb8>)
 8004028:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <prvAddNewTaskToReadyList+0xbc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004032:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <prvAddNewTaskToReadyList+0xbc>)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <prvAddNewTaskToReadyList+0xb8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d110      	bne.n	8004062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004040:	f000 fb7c 	bl	800473c <prvInitialiseTaskLists>
 8004044:	e00d      	b.n	8004062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <prvAddNewTaskToReadyList+0xc0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <prvAddNewTaskToReadyList+0xbc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	429a      	cmp	r2, r3
 800405a:	d802      	bhi.n	8004062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <prvAddNewTaskToReadyList+0xbc>)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 800406a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d903      	bls.n	8004088 <prvAddNewTaskToReadyList+0x74>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	0013      	movs	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	189b      	adds	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <prvAddNewTaskToReadyList+0xcc>)
 8004096:	189a      	adds	r2, r3, r2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	0019      	movs	r1, r3
 800409e:	0010      	movs	r0, r2
 80040a0:	f7ff f9f5 	bl	800348e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a4:	f001 f896 	bl	80051d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <prvAddNewTaskToReadyList+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <prvAddNewTaskToReadyList+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d201      	bcs.n	80040c2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040be:	f001 f867 	bl	8005190 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	20000dcc 	.word	0x20000dcc
 80040d0:	200008f8 	.word	0x200008f8
 80040d4:	20000dd8 	.word	0x20000dd8
 80040d8:	20000de8 	.word	0x20000de8
 80040dc:	20000dd4 	.word	0x20000dd4
 80040e0:	200008fc 	.word	0x200008fc

080040e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040f2:	003a      	movs	r2, r7
 80040f4:	1d39      	adds	r1, r7, #4
 80040f6:	2308      	movs	r3, #8
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff f96e 	bl	80033dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004100:	683c      	ldr	r4, [r7, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	491e      	ldr	r1, [pc, #120]	; (8004180 <vTaskStartScheduler+0x9c>)
 8004108:	481e      	ldr	r0, [pc, #120]	; (8004184 <vTaskStartScheduler+0xa0>)
 800410a:	9202      	str	r2, [sp, #8]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	0022      	movs	r2, r4
 8004116:	f7ff fe98 	bl	8003e4a <xTaskCreateStatic>
 800411a:	0002      	movs	r2, r0
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <vTaskStartScheduler+0xa4>)
 800411e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <vTaskStartScheduler+0xa4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004128:	2301      	movs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e001      	b.n	8004132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d103      	bne.n	8004140 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004138:	f000 fc8a 	bl	8004a50 <xTimerCreateTimerTask>
 800413c:	0003      	movs	r3, r0
 800413e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d113      	bne.n	800416e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004146:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <vTaskStartScheduler+0xa8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3354      	adds	r3, #84	; 0x54
 800414e:	001a      	movs	r2, r3
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <vTaskStartScheduler+0xac>)
 8004152:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <vTaskStartScheduler+0xb0>)
 8004156:	2201      	movs	r2, #1
 8004158:	4252      	negs	r2, r2
 800415a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <vTaskStartScheduler+0xb4>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004162:	4b0e      	ldr	r3, [pc, #56]	; (800419c <vTaskStartScheduler+0xb8>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004168:	f000 ffee 	bl	8005148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800416c:	e004      	b.n	8004178 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	d101      	bne.n	8004178 <vTaskStartScheduler+0x94>
 8004174:	b672      	cpsid	i
 8004176:	e7fe      	b.n	8004176 <vTaskStartScheduler+0x92>
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b005      	add	sp, #20
 800417e:	bd90      	pop	{r4, r7, pc}
 8004180:	0800583c 	.word	0x0800583c
 8004184:	0800471d 	.word	0x0800471d
 8004188:	20000df0 	.word	0x20000df0
 800418c:	200008f8 	.word	0x200008f8
 8004190:	2000005c 	.word	0x2000005c
 8004194:	20000dec 	.word	0x20000dec
 8004198:	20000dd8 	.word	0x20000dd8
 800419c:	20000dd0 	.word	0x20000dd0

080041a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <vTaskSuspendAll+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <vTaskSuspendAll+0x14>)
 80041ac:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000df4 	.word	0x20000df4

080041b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <xTaskResumeAll+0xf8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <xTaskResumeAll+0x1a>
 80041ce:	b672      	cpsid	i
 80041d0:	e7fe      	b.n	80041d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041d2:	f000 ffed 	bl	80051b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d6:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <xTaskResumeAll+0xf8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1e5a      	subs	r2, r3, #1
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <xTaskResumeAll+0xf8>)
 80041de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e0:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <xTaskResumeAll+0xf8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d15b      	bne.n	80042a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <xTaskResumeAll+0xfc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d057      	beq.n	80042a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041f0:	e02f      	b.n	8004252 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <xTaskResumeAll+0x100>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3318      	adds	r3, #24
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff f99d 	bl	800353e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3304      	adds	r3, #4
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff f998 	bl	800353e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <xTaskResumeAll+0x104>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d903      	bls.n	8004222 <xTaskResumeAll+0x6a>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <xTaskResumeAll+0x104>)
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	0013      	movs	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	189b      	adds	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <xTaskResumeAll+0x108>)
 8004230:	189a      	adds	r2, r3, r2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3304      	adds	r3, #4
 8004236:	0019      	movs	r1, r3
 8004238:	0010      	movs	r0, r2
 800423a:	f7ff f928 	bl	800348e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <xTaskResumeAll+0x10c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <xTaskResumeAll+0x110>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004252:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <xTaskResumeAll+0x100>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1cb      	bne.n	80041f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004260:	f000 fb0c 	bl	800487c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <xTaskResumeAll+0x114>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00f      	beq.n	8004290 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004270:	f000 f83c 	bl	80042ec <xTaskIncrementTick>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d002      	beq.n	800427e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <xTaskResumeAll+0x110>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f2      	bne.n	8004270 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <xTaskResumeAll+0x114>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <xTaskResumeAll+0x110>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800429c:	f000 ff78 	bl	8005190 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042a0:	f000 ff98 	bl	80051d4 <vPortExitCritical>

	return xAlreadyYielded;
 80042a4:	68bb      	ldr	r3, [r7, #8]
}
 80042a6:	0018      	movs	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b004      	add	sp, #16
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	20000df4 	.word	0x20000df4
 80042b4:	20000dcc 	.word	0x20000dcc
 80042b8:	20000d8c 	.word	0x20000d8c
 80042bc:	20000dd4 	.word	0x20000dd4
 80042c0:	200008fc 	.word	0x200008fc
 80042c4:	200008f8 	.word	0x200008f8
 80042c8:	20000de0 	.word	0x20000de0
 80042cc:	20000ddc 	.word	0x20000ddc

080042d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <xTaskGetTickCount+0x18>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042dc:	687b      	ldr	r3, [r7, #4]
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000dd0 	.word	0x20000dd0

080042ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <xTaskIncrementTick+0x134>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d000      	beq.n	8004300 <xTaskIncrementTick+0x14>
 80042fe:	e084      	b.n	800440a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004300:	4b48      	ldr	r3, [pc, #288]	; (8004424 <xTaskIncrementTick+0x138>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <xTaskIncrementTick+0x138>)
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d117      	bne.n	8004344 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004314:	4b44      	ldr	r3, [pc, #272]	; (8004428 <xTaskIncrementTick+0x13c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <xTaskIncrementTick+0x36>
 800431e:	b672      	cpsid	i
 8004320:	e7fe      	b.n	8004320 <xTaskIncrementTick+0x34>
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <xTaskIncrementTick+0x13c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	4b40      	ldr	r3, [pc, #256]	; (800442c <xTaskIncrementTick+0x140>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <xTaskIncrementTick+0x13c>)
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	4b3e      	ldr	r3, [pc, #248]	; (800442c <xTaskIncrementTick+0x140>)
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <xTaskIncrementTick+0x144>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	4b3c      	ldr	r3, [pc, #240]	; (8004430 <xTaskIncrementTick+0x144>)
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f000 fa9c 	bl	800487c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004344:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <xTaskIncrementTick+0x148>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	429a      	cmp	r2, r3
 800434c:	d349      	bcc.n	80043e2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <xTaskIncrementTick+0x13c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <xTaskIncrementTick+0x148>)
 800435a:	2201      	movs	r2, #1
 800435c:	4252      	negs	r2, r2
 800435e:	601a      	str	r2, [r3, #0]
					break;
 8004360:	e03f      	b.n	80043e2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <xTaskIncrementTick+0x13c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d203      	bcs.n	8004382 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <xTaskIncrementTick+0x148>)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004380:	e02f      	b.n	80043e2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3304      	adds	r3, #4
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff f8d9 	bl	800353e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3318      	adds	r3, #24
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff f8d0 	bl	800353e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	4b25      	ldr	r3, [pc, #148]	; (8004438 <xTaskIncrementTick+0x14c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d903      	bls.n	80043b2 <xTaskIncrementTick+0xc6>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b22      	ldr	r3, [pc, #136]	; (8004438 <xTaskIncrementTick+0x14c>)
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b6:	0013      	movs	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <xTaskIncrementTick+0x150>)
 80043c0:	189a      	adds	r2, r3, r2
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3304      	adds	r3, #4
 80043c6:	0019      	movs	r1, r3
 80043c8:	0010      	movs	r0, r2
 80043ca:	f7ff f860 	bl	800348e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <xTaskIncrementTick+0x154>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3b8      	bcc.n	800434e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e0:	e7b5      	b.n	800434e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <xTaskIncrementTick+0x154>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4914      	ldr	r1, [pc, #80]	; (800443c <xTaskIncrementTick+0x150>)
 80043ea:	0013      	movs	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	585b      	ldr	r3, [r3, r1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d901      	bls.n	80043fc <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <xTaskIncrementTick+0x158>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e004      	b.n	8004414 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xTaskIncrementTick+0x15c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <xTaskIncrementTick+0x15c>)
 8004412:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004414:	697b      	ldr	r3, [r7, #20]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b006      	add	sp, #24
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	20000df4 	.word	0x20000df4
 8004424:	20000dd0 	.word	0x20000dd0
 8004428:	20000d84 	.word	0x20000d84
 800442c:	20000d88 	.word	0x20000d88
 8004430:	20000de4 	.word	0x20000de4
 8004434:	20000dec 	.word	0x20000dec
 8004438:	20000dd4 	.word	0x20000dd4
 800443c:	200008fc 	.word	0x200008fc
 8004440:	200008f8 	.word	0x200008f8
 8004444:	20000de0 	.word	0x20000de0
 8004448:	20000ddc 	.word	0x20000ddc

0800444c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004452:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <vTaskSwitchContext+0x9c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <vTaskSwitchContext+0xa0>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004460:	e03d      	b.n	80044de <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <vTaskSwitchContext+0xa0>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <vTaskSwitchContext+0xa4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	e007      	b.n	8004480 <vTaskSwitchContext+0x34>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <vTaskSwitchContext+0x2e>
 8004476:	b672      	cpsid	i
 8004478:	e7fe      	b.n	8004478 <vTaskSwitchContext+0x2c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3b01      	subs	r3, #1
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	491c      	ldr	r1, [pc, #112]	; (80044f4 <vTaskSwitchContext+0xa8>)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	0013      	movs	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	189b      	adds	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	585b      	ldr	r3, [r3, r1]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <vTaskSwitchContext+0x24>
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	0013      	movs	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	189b      	adds	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <vTaskSwitchContext+0xa8>)
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d104      	bne.n	80044c2 <vTaskSwitchContext+0x76>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <vTaskSwitchContext+0xac>)
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <vTaskSwitchContext+0xa4>)
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <vTaskSwitchContext+0xac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3354      	adds	r3, #84	; 0x54
 80044d8:	001a      	movs	r2, r3
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <vTaskSwitchContext+0xb0>)
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000df4 	.word	0x20000df4
 80044ec:	20000de0 	.word	0x20000de0
 80044f0:	20000dd4 	.word	0x20000dd4
 80044f4:	200008fc 	.word	0x200008fc
 80044f8:	200008f8 	.word	0x200008f8
 80044fc:	2000005c 	.word	0x2000005c

08004500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <vTaskPlaceOnEventList+0x14>
 8004510:	b672      	cpsid	i
 8004512:	e7fe      	b.n	8004512 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004514:	4b08      	ldr	r3, [pc, #32]	; (8004538 <vTaskPlaceOnEventList+0x38>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3318      	adds	r3, #24
 800451a:	001a      	movs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f7fe ffd6 	bl	80034d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	0018      	movs	r0, r3
 800452c:	f000 fa3c 	bl	80049a8 <prvAddCurrentTaskToDelayedList>
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200008f8 	.word	0x200008f8

0800453c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <vTaskPlaceOnEventListRestricted+0x16>
 800454e:	b672      	cpsid	i
 8004550:	e7fe      	b.n	8004550 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <vTaskPlaceOnEventListRestricted+0x48>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3318      	adds	r3, #24
 8004558:	001a      	movs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	0011      	movs	r1, r2
 800455e:	0018      	movs	r0, r3
 8004560:	f7fe ff95 	bl	800348e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800456a:	2301      	movs	r3, #1
 800456c:	425b      	negs	r3, r3
 800456e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fa16 	bl	80049a8 <prvAddCurrentTaskToDelayedList>
	}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200008f8 	.word	0x200008f8

08004588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xTaskRemoveFromEventList+0x1a>
 800459e:	b672      	cpsid	i
 80045a0:	e7fe      	b.n	80045a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3318      	adds	r3, #24
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fe ffc9 	bl	800353e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <xTaskRemoveFromEventList+0xa0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3304      	adds	r3, #4
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe ffc0 	bl	800353e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <xTaskRemoveFromEventList+0xa4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d903      	bls.n	80045d2 <xTaskRemoveFromEventList+0x4a>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <xTaskRemoveFromEventList+0xa4>)
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	0013      	movs	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <xTaskRemoveFromEventList+0xa8>)
 80045e0:	189a      	adds	r2, r3, r2
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3304      	adds	r3, #4
 80045e6:	0019      	movs	r1, r3
 80045e8:	0010      	movs	r0, r2
 80045ea:	f7fe ff50 	bl	800348e <vListInsertEnd>
 80045ee:	e007      	b.n	8004600 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3318      	adds	r3, #24
 80045f4:	001a      	movs	r2, r3
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <xTaskRemoveFromEventList+0xac>)
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fe ff47 	bl	800348e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <xTaskRemoveFromEventList+0xb0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d905      	bls.n	800461a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <xTaskRemoveFromEventList+0xb4>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e001      	b.n	800461e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b004      	add	sp, #16
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000df4 	.word	0x20000df4
 800462c:	20000dd4 	.word	0x20000dd4
 8004630:	200008fc 	.word	0x200008fc
 8004634:	20000d8c 	.word	0x20000d8c
 8004638:	200008f8 	.word	0x200008f8
 800463c:	20000de0 	.word	0x20000de0

08004640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <vTaskInternalSetTimeOutState+0x20>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <vTaskInternalSetTimeOutState+0x24>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000de4 	.word	0x20000de4
 8004664:	20000dd0 	.word	0x20000dd0

08004668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <xTaskCheckForTimeOut+0x14>
 8004678:	b672      	cpsid	i
 800467a:	e7fe      	b.n	800467a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <xTaskCheckForTimeOut+0x1e>
 8004682:	b672      	cpsid	i
 8004684:	e7fe      	b.n	8004684 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004686:	f000 fd93 	bl	80051b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <xTaskCheckForTimeOut+0x98>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	d102      	bne.n	80046a8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e024      	b.n	80046f2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <xTaskCheckForTimeOut+0x9c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d007      	beq.n	80046c4 <xTaskCheckForTimeOut+0x5c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e016      	b.n	80046f2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d20c      	bcs.n	80046e8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff ffaf 	bl	8004640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e004      	b.n	80046f2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80046f2:	f000 fd6f 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 80046f6:	697b      	ldr	r3, [r7, #20]
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b006      	add	sp, #24
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000dd0 	.word	0x20000dd0
 8004704:	20000de4 	.word	0x20000de4

08004708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <vTaskMissedYield+0x10>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000de0 	.word	0x20000de0

0800471c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004724:	f000 f84e 	bl	80047c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <prvIdleTask+0x1c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d9f9      	bls.n	8004724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004730:	f000 fd2e 	bl	8005190 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004734:	e7f6      	b.n	8004724 <prvIdleTask+0x8>
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	200008fc 	.word	0x200008fc

0800473c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	e00c      	b.n	8004762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	0013      	movs	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	189b      	adds	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <prvInitialiseTaskLists+0x68>)
 8004754:	189b      	adds	r3, r3, r2
 8004756:	0018      	movs	r0, r3
 8004758:	f7fe fe70 	bl	800343c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3301      	adds	r3, #1
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b37      	cmp	r3, #55	; 0x37
 8004766:	d9ef      	bls.n	8004748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <prvInitialiseTaskLists+0x6c>)
 800476a:	0018      	movs	r0, r3
 800476c:	f7fe fe66 	bl	800343c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <prvInitialiseTaskLists+0x70>)
 8004772:	0018      	movs	r0, r3
 8004774:	f7fe fe62 	bl	800343c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <prvInitialiseTaskLists+0x74>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe fe5e 	bl	800343c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <prvInitialiseTaskLists+0x78>)
 8004782:	0018      	movs	r0, r3
 8004784:	f7fe fe5a 	bl	800343c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <prvInitialiseTaskLists+0x7c>)
 800478a:	0018      	movs	r0, r3
 800478c:	f7fe fe56 	bl	800343c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <prvInitialiseTaskLists+0x80>)
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <prvInitialiseTaskLists+0x6c>)
 8004794:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <prvInitialiseTaskLists+0x84>)
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <prvInitialiseTaskLists+0x70>)
 800479a:	601a      	str	r2, [r3, #0]
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200008fc 	.word	0x200008fc
 80047a8:	20000d5c 	.word	0x20000d5c
 80047ac:	20000d70 	.word	0x20000d70
 80047b0:	20000d8c 	.word	0x20000d8c
 80047b4:	20000da0 	.word	0x20000da0
 80047b8:	20000db8 	.word	0x20000db8
 80047bc:	20000d84 	.word	0x20000d84
 80047c0:	20000d88 	.word	0x20000d88

080047c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ca:	e01a      	b.n	8004802 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80047cc:	f000 fcf0 	bl	80051b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <prvCheckTasksWaitingTermination+0x50>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fe feae 	bl	800353e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1e5a      	subs	r2, r3, #1
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1e5a      	subs	r2, r3, #1
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80047f6:	f000 fced 	bl	80051d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 f80f 	bl	8004820 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e0      	bne.n	80047cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000da0 	.word	0x20000da0
 8004818:	20000dcc 	.word	0x20000dcc
 800481c:	20000db4 	.word	0x20000db4

08004820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3354      	adds	r3, #84	; 0x54
 800482c:	0018      	movs	r0, r3
 800482e:	f000 ff11 	bl	8005654 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	22a5      	movs	r2, #165	; 0xa5
 8004836:	5c9b      	ldrb	r3, [r3, r2]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	0018      	movs	r0, r3
 8004842:	f000 fdf9 	bl	8005438 <vPortFree>
				vPortFree( pxTCB );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f000 fdf5 	bl	8005438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800484e:	e010      	b.n	8004872 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	22a5      	movs	r2, #165	; 0xa5
 8004854:	5c9b      	ldrb	r3, [r3, r2]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d104      	bne.n	8004864 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 fdeb 	bl	8005438 <vPortFree>
	}
 8004862:	e006      	b.n	8004872 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	22a5      	movs	r2, #165	; 0xa5
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d001      	beq.n	8004872 <prvDeleteTCB+0x52>
 800486e:	b672      	cpsid	i
 8004870:	e7fe      	b.n	8004870 <prvDeleteTCB+0x50>
	}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <prvResetNextTaskUnblockTime+0x34>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <prvResetNextTaskUnblockTime+0x38>)
 800488e:	2201      	movs	r2, #1
 8004890:	4252      	negs	r2, r2
 8004892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004894:	e008      	b.n	80048a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <prvResetNextTaskUnblockTime+0x34>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <prvResetNextTaskUnblockTime+0x38>)
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000d84 	.word	0x20000d84
 80048b4:	20000dec 	.word	0x20000dec

080048b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <xTaskGetSchedulerState+0x30>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048c6:	2301      	movs	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	e008      	b.n	80048de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <xTaskGetSchedulerState+0x34>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048d4:	2302      	movs	r3, #2
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	e001      	b.n	80048de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048de:	687b      	ldr	r3, [r7, #4]
	}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000dd8 	.word	0x20000dd8
 80048ec:	20000df4 	.word	0x20000df4

080048f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d044      	beq.n	8004990 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <xTaskPriorityDisinherit+0xac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <xTaskPriorityDisinherit+0x24>
 8004910:	b672      	cpsid	i
 8004912:	e7fe      	b.n	8004912 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <xTaskPriorityDisinherit+0x30>
 800491c:	b672      	cpsid	i
 800491e:	e7fe      	b.n	800491e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	429a      	cmp	r2, r3
 8004934:	d02c      	beq.n	8004990 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d128      	bne.n	8004990 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3304      	adds	r3, #4
 8004942:	0018      	movs	r0, r3
 8004944:	f7fe fdfb 	bl	800353e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2238      	movs	r2, #56	; 0x38
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskPriorityDisinherit+0xb0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d903      	bls.n	8004970 <xTaskPriorityDisinherit+0x80>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <xTaskPriorityDisinherit+0xb0>)
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	0013      	movs	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	189b      	adds	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <xTaskPriorityDisinherit+0xb4>)
 800497e:	189a      	adds	r2, r3, r2
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3304      	adds	r3, #4
 8004984:	0019      	movs	r1, r3
 8004986:	0010      	movs	r0, r2
 8004988:	f7fe fd81 	bl	800348e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004990:	68fb      	ldr	r3, [r7, #12]
	}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b004      	add	sp, #16
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	200008f8 	.word	0x200008f8
 80049a0:	20000dd4 	.word	0x20000dd4
 80049a4:	200008fc 	.word	0x200008fc

080049a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049b2:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <prvAddCurrentTaskToDelayedList+0x90>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	0018      	movs	r0, r3
 80049c0:	f7fe fdbd 	bl	800353e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3301      	adds	r3, #1
 80049c8:	d10b      	bne.n	80049e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <prvAddCurrentTaskToDelayedList+0x98>)
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fe fd57 	bl	800348e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049e0:	e026      	b.n	8004a30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	18d3      	adds	r3, r2, r3
 80049e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d209      	bcs.n	8004a0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3304      	adds	r3, #4
 8004a04:	0019      	movs	r1, r3
 8004a06:	0010      	movs	r0, r2
 8004a08:	f7fe fd63 	bl	80034d2 <vListInsert>
}
 8004a0c:	e010      	b.n	8004a30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3304      	adds	r3, #4
 8004a18:	0019      	movs	r1, r3
 8004a1a:	0010      	movs	r0, r2
 8004a1c:	f7fe fd59 	bl	80034d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d202      	bcs.n	8004a30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b004      	add	sp, #16
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000dd0 	.word	0x20000dd0
 8004a3c:	200008f8 	.word	0x200008f8
 8004a40:	20000db8 	.word	0x20000db8
 8004a44:	20000d88 	.word	0x20000d88
 8004a48:	20000d84 	.word	0x20000d84
 8004a4c:	20000dec 	.word	0x20000dec

08004a50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a5a:	f000 fac9 	bl	8004ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <xTimerCreateTimerTask+0x6c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a6e:	003a      	movs	r2, r7
 8004a70:	1d39      	adds	r1, r7, #4
 8004a72:	2308      	movs	r3, #8
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fe fcc8 	bl	800340c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a7c:	683c      	ldr	r4, [r7, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	490f      	ldr	r1, [pc, #60]	; (8004ac0 <xTimerCreateTimerTask+0x70>)
 8004a84:	480f      	ldr	r0, [pc, #60]	; (8004ac4 <xTimerCreateTimerTask+0x74>)
 8004a86:	9202      	str	r2, [sp, #8]
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	0022      	movs	r2, r4
 8004a92:	f7ff f9da 	bl	8003e4a <xTaskCreateStatic>
 8004a96:	0002      	movs	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <xTimerCreateTimerTask+0x78>)
 8004a9a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <xTimerCreateTimerTask+0x78>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <xTimerCreateTimerTask+0x62>
 8004aae:	b672      	cpsid	i
 8004ab0:	e7fe      	b.n	8004ab0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b005      	add	sp, #20
 8004aba:	bd90      	pop	{r4, r7, pc}
 8004abc:	20000e28 	.word	0x20000e28
 8004ac0:	08005844 	.word	0x08005844
 8004ac4:	08004be9 	.word	0x08004be9
 8004ac8:	20000e2c 	.word	0x20000e2c

08004acc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b08b      	sub	sp, #44	; 0x2c
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <xTimerGenericCommand+0x1c>
 8004ae4:	b672      	cpsid	i
 8004ae6:	e7fe      	b.n	8004ae6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <xTimerGenericCommand+0x90>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d030      	beq.n	8004b52 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004af0:	2414      	movs	r4, #20
 8004af2:	193b      	adds	r3, r7, r4
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004af8:	193b      	adds	r3, r7, r4
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	dc19      	bgt.n	8004b3e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b0a:	f7ff fed5 	bl	80048b8 <xTaskGetSchedulerState>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d109      	bne.n	8004b28 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <xTimerGenericCommand+0x90>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1a:	1939      	adds	r1, r7, r4
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f7fe fe2f 	bl	8003780 <xQueueGenericSend>
 8004b22:	0003      	movs	r3, r0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e014      	b.n	8004b52 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <xTimerGenericCommand+0x90>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	2314      	movs	r3, #20
 8004b2e:	18f9      	adds	r1, r7, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	2200      	movs	r2, #0
 8004b34:	f7fe fe24 	bl	8003780 <xQueueGenericSend>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e009      	b.n	8004b52 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <xTimerGenericCommand+0x90>)
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	2314      	movs	r3, #20
 8004b46:	18f9      	adds	r1, r7, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f7fe fedd 	bl	8003908 <xQueueGenericSendFromISR>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b00b      	add	sp, #44	; 0x2c
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	20000e28 	.word	0x20000e28

08004b60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <prvProcessExpiredTimer+0x84>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3304      	adds	r3, #4
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fe fce0 	bl	800353e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2228      	movs	r2, #40	; 0x28
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	001a      	movs	r2, r3
 8004b86:	2304      	movs	r3, #4
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d019      	beq.n	8004bc0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	18d1      	adds	r1, r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f8c3 	bl	8004d24 <prvInsertTimerInActiveList>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d017      	beq.n	8004bd2 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	f7ff ff8d 	bl	8004acc <xTimerGenericCommand>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <prvProcessExpiredTimer+0x72>
 8004bbc:	b672      	cpsid	i
 8004bbe:	e7fe      	b.n	8004bbe <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2228      	movs	r2, #40	; 0x28
 8004bc4:	5c9b      	ldrb	r3, [r3, r2]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4393      	bics	r3, r2
 8004bca:	b2d9      	uxtb	r1, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2228      	movs	r2, #40	; 0x28
 8004bd0:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	0010      	movs	r0, r2
 8004bda:	4798      	blx	r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000e20 	.word	0x20000e20

08004be8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 f853 	bl	8004ca0 <prvGetNextExpireTime>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	0011      	movs	r1, r2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 f803 	bl	8004c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c0a:	f000 f8cd 	bl	8004da8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c0e:	e7ef      	b.n	8004bf0 <prvTimerTask+0x8>

08004c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c1a:	f7ff fac1 	bl	80041a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c1e:	2308      	movs	r3, #8
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 f85e 	bl	8004ce4 <prvSampleTimeNow>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d12b      	bne.n	8004c8a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x42>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d808      	bhi.n	8004c52 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004c40:	f7ff faba 	bl	80041b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7ff ff88 	bl	8004b60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c50:	e01d      	b.n	8004c8e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <prvProcessTimerOrBlockTask+0x88>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <prvProcessTimerOrBlockTask+0x56>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <prvProcessTimerOrBlockTask+0x58>
 8004c66:	2300      	movs	r3, #0
 8004c68:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <prvProcessTimerOrBlockTask+0x8c>)
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	0019      	movs	r1, r3
 8004c78:	f7ff f8b4 	bl	8003de4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c7c:	f7ff fa9c 	bl	80041b8 <xTaskResumeAll>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d104      	bne.n	8004c8e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8004c84:	f000 fa84 	bl	8005190 <vPortYield>
}
 8004c88:	e001      	b.n	8004c8e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8004c8a:	f7ff fa95 	bl	80041b8 <xTaskResumeAll>
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b004      	add	sp, #16
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	20000e24 	.word	0x20000e24
 8004c9c:	20000e28 	.word	0x20000e28

08004ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <prvGetNextExpireTime+0x40>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <prvGetNextExpireTime+0x16>
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	e000      	b.n	8004cb8 <prvGetNextExpireTime+0x18>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <prvGetNextExpireTime+0x40>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e001      	b.n	8004cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	20000e20 	.word	0x20000e20

08004ce4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cec:	f7ff faf0 	bl	80042d0 <xTaskGetTickCount>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvSampleTimeNow+0x3c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d205      	bcs.n	8004d0a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004cfe:	f000 f919 	bl	8004f34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e002      	b.n	8004d10 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <prvSampleTimeNow+0x3c>)
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004d16:	68fb      	ldr	r3, [r7, #12]
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b004      	add	sp, #16
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000e30 	.word	0x20000e30

08004d24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d812      	bhi.n	8004d70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e01b      	b.n	8004d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <prvInsertTimerInActiveList+0x7c>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3304      	adds	r3, #4
 8004d66:	0019      	movs	r1, r3
 8004d68:	0010      	movs	r0, r2
 8004d6a:	f7fe fbb2 	bl	80034d2 <vListInsert>
 8004d6e:	e012      	b.n	8004d96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d206      	bcs.n	8004d86 <prvInsertTimerInActiveList+0x62>
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e007      	b.n	8004d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <prvInsertTimerInActiveList+0x80>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	0019      	movs	r1, r3
 8004d90:	0010      	movs	r0, r2
 8004d92:	f7fe fb9e 	bl	80034d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b006      	add	sp, #24
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000e24 	.word	0x20000e24
 8004da4:	20000e20 	.word	0x20000e20

08004da8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b08d      	sub	sp, #52	; 0x34
 8004dac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dae:	e0ac      	b.n	8004f0a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004db0:	2208      	movs	r2, #8
 8004db2:	18bb      	adds	r3, r7, r2
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0f      	bge.n	8004dda <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dba:	18bb      	adds	r3, r7, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <prvProcessReceivedCommands+0x22>
 8004dc6:	b672      	cpsid	i
 8004dc8:	e7fe      	b.n	8004dc8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	6858      	ldr	r0, [r3, #4]
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dda:	2208      	movs	r2, #8
 8004ddc:	18bb      	adds	r3, r7, r2
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <prvProcessReceivedCommands+0x3e>
 8004de4:	e091      	b.n	8004f0a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004de6:	18bb      	adds	r3, r7, r2
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	3304      	adds	r3, #4
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fe fba0 	bl	800353e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7ff ff6f 	bl	8004ce4 <prvSampleTimeNow>
 8004e06:	0003      	movs	r3, r0
 8004e08:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	d900      	bls.n	8004e16 <prvProcessReceivedCommands+0x6e>
 8004e14:	e078      	b.n	8004f08 <prvProcessReceivedCommands+0x160>
 8004e16:	009a      	lsls	r2, r3, #2
 8004e18:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <prvProcessReceivedCommands+0x184>)
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2228      	movs	r2, #40	; 0x28
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	2201      	movs	r2, #1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	b2d9      	uxtb	r1, r3
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2228      	movs	r2, #40	; 0x28
 8004e30:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e32:	2408      	movs	r4, #8
 8004e34:	193b      	adds	r3, r7, r4
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	18d1      	adds	r1, r2, r3
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	6a38      	ldr	r0, [r7, #32]
 8004e46:	f7ff ff6d 	bl	8004d24 <prvInsertTimerInActiveList>
 8004e4a:	1e03      	subs	r3, r0, #0
 8004e4c:	d05d      	beq.n	8004f0a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	0010      	movs	r0, r2
 8004e56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2228      	movs	r2, #40	; 0x28
 8004e5c:	5c9b      	ldrb	r3, [r3, r2]
 8004e5e:	001a      	movs	r2, r3
 8004e60:	2304      	movs	r3, #4
 8004e62:	4013      	ands	r3, r2
 8004e64:	d051      	beq.n	8004f0a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	18d2      	adds	r2, r2, r3
 8004e70:	6a38      	ldr	r0, [r7, #32]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f7ff fe27 	bl	8004acc <xTimerGenericCommand>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d140      	bne.n	8004f0a <prvProcessReceivedCommands+0x162>
 8004e88:	b672      	cpsid	i
 8004e8a:	e7fe      	b.n	8004e8a <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	2228      	movs	r2, #40	; 0x28
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	2201      	movs	r2, #1
 8004e94:	4393      	bics	r3, r2
 8004e96:	b2d9      	uxtb	r1, r3
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	2228      	movs	r2, #40	; 0x28
 8004e9c:	5499      	strb	r1, [r3, r2]
					break;
 8004e9e:	e034      	b.n	8004f0a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2228      	movs	r2, #40	; 0x28
 8004ea4:	5c9b      	ldrb	r3, [r3, r2]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	b2d9      	uxtb	r1, r3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	2228      	movs	r2, #40	; 0x28
 8004eb0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <prvProcessReceivedCommands+0x120>
 8004ec4:	b672      	cpsid	i
 8004ec6:	e7fe      	b.n	8004ec6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	18d1      	adds	r1, r2, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	6a38      	ldr	r0, [r7, #32]
 8004ed6:	f7ff ff25 	bl	8004d24 <prvInsertTimerInActiveList>
					break;
 8004eda:	e016      	b.n	8004f0a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2228      	movs	r2, #40	; 0x28
 8004ee0:	5c9b      	ldrb	r3, [r3, r2]
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d104      	bne.n	8004ef4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 faa3 	bl	8005438 <vPortFree>
 8004ef2:	e00a      	b.n	8004f0a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2228      	movs	r2, #40	; 0x28
 8004ef8:	5c9b      	ldrb	r3, [r3, r2]
 8004efa:	2201      	movs	r2, #1
 8004efc:	4393      	bics	r3, r2
 8004efe:	b2d9      	uxtb	r1, r3
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2228      	movs	r2, #40	; 0x28
 8004f04:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f06:	e000      	b.n	8004f0a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8004f08:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <prvProcessReceivedCommands+0x188>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2208      	movs	r2, #8
 8004f10:	18b9      	adds	r1, r7, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7fe fd6b 	bl	80039f0 <xQueueReceive>
 8004f1a:	1e03      	subs	r3, r0, #0
 8004f1c:	d000      	beq.n	8004f20 <prvProcessReceivedCommands+0x178>
 8004f1e:	e747      	b.n	8004db0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b00b      	add	sp, #44	; 0x2c
 8004f28:	bd90      	pop	{r4, r7, pc}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	080058dc 	.word	0x080058dc
 8004f30:	20000e28 	.word	0x20000e28

08004f34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f3a:	e041      	b.n	8004fc0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3304      	adds	r3, #4
 8004f54:	0018      	movs	r0, r3
 8004f56:	f7fe faf2 	bl	800353e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	0010      	movs	r0, r2
 8004f62:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2228      	movs	r2, #40	; 0x28
 8004f68:	5c9b      	ldrb	r3, [r3, r2]
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d026      	beq.n	8004fc0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d90e      	bls.n	8004fa2 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3304      	adds	r3, #4
 8004f98:	0019      	movs	r1, r3
 8004f9a:	0010      	movs	r0, r2
 8004f9c:	f7fe fa99 	bl	80034d2 <vListInsert>
 8004fa0:	e00e      	b.n	8004fc0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	f7ff fd8d 	bl	8004acc <xTimerGenericCommand>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <prvSwitchTimerLists+0x8c>
 8004fbc:	b672      	cpsid	i
 8004fbe:	e7fe      	b.n	8004fbe <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1b8      	bne.n	8004f3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <prvSwitchTimerLists+0xb8>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <prvSwitchTimerLists+0xb4>)
 8004fd6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <prvSwitchTimerLists+0xb8>)
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b006      	add	sp, #24
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	20000e20 	.word	0x20000e20
 8004fec:	20000e24 	.word	0x20000e24

08004ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ff6:	f000 f8db 	bl	80051b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <prvCheckForValidListAndQueue+0x64>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d123      	bne.n	800504a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <prvCheckForValidListAndQueue+0x68>)
 8005004:	0018      	movs	r0, r3
 8005006:	f7fe fa19 	bl	800343c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <prvCheckForValidListAndQueue+0x6c>)
 800500c:	0018      	movs	r0, r3
 800500e:	f7fe fa15 	bl	800343c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <prvCheckForValidListAndQueue+0x70>)
 8005014:	4a10      	ldr	r2, [pc, #64]	; (8005058 <prvCheckForValidListAndQueue+0x68>)
 8005016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <prvCheckForValidListAndQueue+0x74>)
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <prvCheckForValidListAndQueue+0x6c>)
 800501c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvCheckForValidListAndQueue+0x78>)
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <prvCheckForValidListAndQueue+0x7c>)
 8005022:	2100      	movs	r1, #0
 8005024:	9100      	str	r1, [sp, #0]
 8005026:	2110      	movs	r1, #16
 8005028:	200a      	movs	r0, #10
 800502a:	f7fe fb04 	bl	8003636 <xQueueGenericCreateStatic>
 800502e:	0002      	movs	r2, r0
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <prvCheckForValidListAndQueue+0x64>)
 8005032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvCheckForValidListAndQueue+0x64>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <prvCheckForValidListAndQueue+0x64>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <prvCheckForValidListAndQueue+0x80>)
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f7fe fea5 	bl	8003d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800504a:	f000 f8c3 	bl	80051d4 <vPortExitCritical>
}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000e28 	.word	0x20000e28
 8005058:	20000df8 	.word	0x20000df8
 800505c:	20000e0c 	.word	0x20000e0c
 8005060:	20000e20 	.word	0x20000e20
 8005064:	20000e24 	.word	0x20000e24
 8005068:	20000ed4 	.word	0x20000ed4
 800506c:	20000e34 	.word	0x20000e34
 8005070:	0800584c 	.word	0x0800584c

08005074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b04      	subs	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	0452      	lsls	r2, r2, #17
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b04      	subs	r3, #4
 800509e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <pxPortInitialiseStack+0x50>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b14      	subs	r3, #20
 80050aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b20      	subs	r3, #32
 80050b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050b8:	68fb      	ldr	r3, [r7, #12]
}
 80050ba:	0018      	movs	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	b004      	add	sp, #16
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	080050c9 	.word	0x080050c9

080050c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <prvTaskExitError+0x2c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	d001      	beq.n	80050de <prvTaskExitError+0x16>
 80050da:	b672      	cpsid	i
 80050dc:	e7fe      	b.n	80050dc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80050de:	b672      	cpsid	i
	while( ulDummy == 0 )
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0fc      	beq.n	80050e2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	2000000c 	.word	0x2000000c

080050f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005110 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005110:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <pxCurrentTCBConst2>)
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	3020      	adds	r0, #32
 8005118:	f380 8809 	msr	PSP, r0
 800511c:	2002      	movs	r0, #2
 800511e:	f380 8814 	msr	CONTROL, r0
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005128:	46ae      	mov	lr, r5
 800512a:	bc08      	pop	{r3}
 800512c:	bc04      	pop	{r2}
 800512e:	b662      	cpsie	i
 8005130:	4718      	bx	r3
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46c0      	nop			; (mov r8, r8)

08005140 <pxCurrentTCBConst2>:
 8005140:	200008f8 	.word	0x200008f8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46c0      	nop			; (mov r8, r8)

08005148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <xPortStartScheduler+0x40>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <xPortStartScheduler+0x40>)
 8005152:	21ff      	movs	r1, #255	; 0xff
 8005154:	0409      	lsls	r1, r1, #16
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <xPortStartScheduler+0x40>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <xPortStartScheduler+0x40>)
 8005160:	21ff      	movs	r1, #255	; 0xff
 8005162:	0609      	lsls	r1, r1, #24
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005168:	f000 f898 	bl	800529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <xPortStartScheduler+0x44>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005172:	f7ff ffcd 	bl	8005110 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005176:	f7ff f969 	bl	800444c <vTaskSwitchContext>
	prvTaskExitError();
 800517a:	f7ff ffa5 	bl	80050c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	e000ed20 	.word	0xe000ed20
 800518c:	2000000c 	.word	0x2000000c

08005190 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <vPortYield+0x1c>)
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	0552      	lsls	r2, r2, #21
 800519a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800519c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80051a0:	f3bf 8f6f 	isb	sy
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80051b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <vPortEnterCritical+0x20>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <vPortEnterCritical+0x20>)
 80051be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80051c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80051c4:	f3bf 8f6f 	isb	sy
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051d8:	4b09      	ldr	r3, [pc, #36]	; (8005200 <vPortExitCritical+0x2c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <vPortExitCritical+0x10>
 80051e0:	b672      	cpsid	i
 80051e2:	e7fe      	b.n	80051e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <vPortExitCritical+0x2c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1e5a      	subs	r2, r3, #1
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <vPortExitCritical+0x2c>)
 80051ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <vPortExitCritical+0x2c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d100      	bne.n	80051f8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80051f6:	b662      	cpsie	i
	}
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	2000000c 	.word	0x2000000c

08005204 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005204:	f3ef 8010 	mrs	r0, PRIMASK
 8005208:	b672      	cpsid	i
 800520a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	0018      	movs	r0, r3

08005210 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005210:	f380 8810 	msr	PRIMASK, r0
 8005214:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005216:	46c0      	nop			; (mov r8, r8)
	...

08005220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005220:	f3ef 8009 	mrs	r0, PSP
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <pxCurrentTCBConst>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	3820      	subs	r0, #32
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800522e:	4644      	mov	r4, r8
 8005230:	464d      	mov	r5, r9
 8005232:	4656      	mov	r6, sl
 8005234:	465f      	mov	r7, fp
 8005236:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005238:	b508      	push	{r3, lr}
 800523a:	b672      	cpsid	i
 800523c:	f7ff f906 	bl	800444c <vTaskSwitchContext>
 8005240:	b662      	cpsie	i
 8005242:	bc0c      	pop	{r2, r3}
 8005244:	6811      	ldr	r1, [r2, #0]
 8005246:	6808      	ldr	r0, [r1, #0]
 8005248:	3010      	adds	r0, #16
 800524a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800524c:	46a0      	mov	r8, r4
 800524e:	46a9      	mov	r9, r5
 8005250:	46b2      	mov	sl, r6
 8005252:	46bb      	mov	fp, r7
 8005254:	f380 8809 	msr	PSP, r0
 8005258:	3820      	subs	r0, #32
 800525a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800525c:	4718      	bx	r3
 800525e:	46c0      	nop			; (mov r8, r8)

08005260 <pxCurrentTCBConst>:
 8005260:	200008f8 	.word	0x200008f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46c0      	nop			; (mov r8, r8)

08005268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800526e:	f7ff ffc9 	bl	8005204 <ulSetInterruptMaskFromISR>
 8005272:	0003      	movs	r3, r0
 8005274:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005276:	f7ff f839 	bl	80042ec <xTaskIncrementTick>
 800527a:	1e03      	subs	r3, r0, #0
 800527c:	d003      	beq.n	8005286 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <xPortSysTickHandler+0x30>)
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	0552      	lsls	r2, r2, #21
 8005284:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0018      	movs	r0, r3
 800528a:	f7ff ffc1 	bl	8005210 <vClearInterruptMaskFromISR>
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	22fa      	movs	r2, #250	; 0xfa
 80052b2:	0091      	lsls	r1, r2, #2
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7fa ff27 	bl	8000108 <__udivsi3>
 80052ba:	0003      	movs	r3, r0
 80052bc:	001a      	movs	r2, r3
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052c0:	3a01      	subs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80052c4:	4b02      	ldr	r3, [pc, #8]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c6:	2207      	movs	r2, #7
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000000 	.word	0x20000000
 80052dc:	e000e014 	.word	0xe000e014

080052e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80052ec:	f7fe ff58 	bl	80041a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <pvPortMalloc+0x140>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052f8:	f000 f8ec 	bl	80054d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052fc:	4b49      	ldr	r3, [pc, #292]	; (8005424 <pvPortMalloc+0x144>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4013      	ands	r3, r2
 8005304:	d000      	beq.n	8005308 <pvPortMalloc+0x28>
 8005306:	e07e      	b.n	8005406 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d012      	beq.n	8005334 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800530e:	2208      	movs	r2, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	189b      	adds	r3, r3, r2
 8005314:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2207      	movs	r2, #7
 800531a:	4013      	ands	r3, r2
 800531c:	d00a      	beq.n	8005334 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2207      	movs	r2, #7
 8005322:	4393      	bics	r3, r2
 8005324:	3308      	adds	r3, #8
 8005326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2207      	movs	r2, #7
 800532c:	4013      	ands	r3, r2
 800532e:	d001      	beq.n	8005334 <pvPortMalloc+0x54>
 8005330:	b672      	cpsid	i
 8005332:	e7fe      	b.n	8005332 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d065      	beq.n	8005406 <pvPortMalloc+0x126>
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <pvPortMalloc+0x148>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d860      	bhi.n	8005406 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <pvPortMalloc+0x14c>)
 8005346:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005348:	4b38      	ldr	r3, [pc, #224]	; (800542c <pvPortMalloc+0x14c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800534e:	e004      	b.n	800535a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d903      	bls.n	800536c <pvPortMalloc+0x8c>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f1      	bne.n	8005350 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800536c:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <pvPortMalloc+0x140>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	429a      	cmp	r2, r3
 8005374:	d047      	beq.n	8005406 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2208      	movs	r2, #8
 800537c:	189b      	adds	r3, r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	2308      	movs	r3, #8
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	429a      	cmp	r2, r3
 8005396:	d916      	bls.n	80053c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	18d3      	adds	r3, r2, r3
 800539e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2207      	movs	r2, #7
 80053a4:	4013      	ands	r3, r2
 80053a6:	d001      	beq.n	80053ac <pvPortMalloc+0xcc>
 80053a8:	b672      	cpsid	i
 80053aa:	e7fe      	b.n	80053aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 f8e7 	bl	8005594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <pvPortMalloc+0x148>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <pvPortMalloc+0x148>)
 80053d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <pvPortMalloc+0x148>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <pvPortMalloc+0x150>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d203      	bcs.n	80053e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <pvPortMalloc+0x148>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <pvPortMalloc+0x150>)
 80053e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <pvPortMalloc+0x144>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <pvPortMalloc+0x154>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <pvPortMalloc+0x154>)
 8005404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005406:	f7fe fed7 	bl	80041b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2207      	movs	r2, #7
 800540e:	4013      	ands	r3, r2
 8005410:	d001      	beq.n	8005416 <pvPortMalloc+0x136>
 8005412:	b672      	cpsid	i
 8005414:	e7fe      	b.n	8005414 <pvPortMalloc+0x134>
	return pvReturn;
 8005416:	68fb      	ldr	r3, [r7, #12]
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b006      	add	sp, #24
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20001b2c 	.word	0x20001b2c
 8005424:	20001b40 	.word	0x20001b40
 8005428:	20001b30 	.word	0x20001b30
 800542c:	20001b24 	.word	0x20001b24
 8005430:	20001b34 	.word	0x20001b34
 8005434:	20001b38 	.word	0x20001b38

08005438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03a      	beq.n	80054c0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800544a:	2308      	movs	r3, #8
 800544c:	425b      	negs	r3, r3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	18d3      	adds	r3, r2, r3
 8005452:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <vPortFree+0x90>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4013      	ands	r3, r2
 8005462:	d101      	bne.n	8005468 <vPortFree+0x30>
 8005464:	b672      	cpsid	i
 8005466:	e7fe      	b.n	8005466 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <vPortFree+0x3c>
 8005470:	b672      	cpsid	i
 8005472:	e7fe      	b.n	8005472 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <vPortFree+0x90>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4013      	ands	r3, r2
 800547e:	d01f      	beq.n	80054c0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11b      	bne.n	80054c0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <vPortFree+0x90>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005498:	f7fe fe82 	bl	80041a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <vPortFree+0x94>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	18d2      	adds	r2, r2, r3
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <vPortFree+0x94>)
 80054a8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 f871 	bl	8005594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vPortFree+0x98>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <vPortFree+0x98>)
 80054ba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80054bc:	f7fe fe7c 	bl	80041b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b004      	add	sp, #16
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20001b40 	.word	0x20001b40
 80054cc:	20001b30 	.word	0x20001b30
 80054d0:	20001b3c 	.word	0x20001b3c

080054d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054da:	23c0      	movs	r3, #192	; 0xc0
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e0:	4b26      	ldr	r3, [pc, #152]	; (800557c <prvHeapInit+0xa8>)
 80054e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2207      	movs	r2, #7
 80054e8:	4013      	ands	r3, r2
 80054ea:	d00c      	beq.n	8005506 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3307      	adds	r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2207      	movs	r2, #7
 80054f6:	4393      	bics	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <prvHeapInit+0xa8>)
 8005502:	18d3      	adds	r3, r2, r3
 8005504:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <prvHeapInit+0xac>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <prvHeapInit+0xac>)
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800551e:	2208      	movs	r2, #8
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2207      	movs	r2, #7
 800552a:	4393      	bics	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <prvHeapInit+0xb0>)
 8005532:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <prvHeapInit+0xb0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <prvHeapInit+0xb0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <prvHeapInit+0xb0>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <prvHeapInit+0xb4>)
 8005560:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <prvHeapInit+0xb8>)
 8005568:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <prvHeapInit+0xbc>)
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	0612      	lsls	r2, r2, #24
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	20000f24 	.word	0x20000f24
 8005580:	20001b24 	.word	0x20001b24
 8005584:	20001b2c 	.word	0x20001b2c
 8005588:	20001b34 	.word	0x20001b34
 800558c:	20001b30 	.word	0x20001b30
 8005590:	20001b40 	.word	0x20001b40

08005594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800559c:	4b27      	ldr	r3, [pc, #156]	; (800563c <prvInsertBlockIntoFreeList+0xa8>)
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e002      	b.n	80055a8 <prvInsertBlockIntoFreeList+0x14>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d8f7      	bhi.n	80055a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	18d3      	adds	r3, r2, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d108      	bne.n	80055d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	18d2      	adds	r2, r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	18d2      	adds	r2, r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d118      	bne.n	800561c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <prvInsertBlockIntoFreeList+0xac>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d00d      	beq.n	8005612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	18d2      	adds	r2, r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e008      	b.n	8005624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <prvInsertBlockIntoFreeList+0xac>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e003      	b.n	8005624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d002      	beq.n	8005632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b004      	add	sp, #16
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	20001b24 	.word	0x20001b24
 8005640:	20001b2c 	.word	0x20001b2c

08005644 <memset>:
 8005644:	0003      	movs	r3, r0
 8005646:	1882      	adds	r2, r0, r2
 8005648:	4293      	cmp	r3, r2
 800564a:	d100      	bne.n	800564e <memset+0xa>
 800564c:	4770      	bx	lr
 800564e:	7019      	strb	r1, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	e7f9      	b.n	8005648 <memset+0x4>

08005654 <_reclaim_reent>:
 8005654:	4b2d      	ldr	r3, [pc, #180]	; (800570c <_reclaim_reent+0xb8>)
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	0004      	movs	r4, r0
 800565c:	4283      	cmp	r3, r0
 800565e:	d042      	beq.n	80056e6 <_reclaim_reent+0x92>
 8005660:	69c3      	ldr	r3, [r0, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <_reclaim_reent+0x28>
 8005666:	2500      	movs	r5, #0
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	42ab      	cmp	r3, r5
 800566c:	d140      	bne.n	80056f0 <_reclaim_reent+0x9c>
 800566e:	69e3      	ldr	r3, [r4, #28]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	2900      	cmp	r1, #0
 8005674:	d002      	beq.n	800567c <_reclaim_reent+0x28>
 8005676:	0020      	movs	r0, r4
 8005678:	f000 f87a 	bl	8005770 <_free_r>
 800567c:	6961      	ldr	r1, [r4, #20]
 800567e:	2900      	cmp	r1, #0
 8005680:	d002      	beq.n	8005688 <_reclaim_reent+0x34>
 8005682:	0020      	movs	r0, r4
 8005684:	f000 f874 	bl	8005770 <_free_r>
 8005688:	69e1      	ldr	r1, [r4, #28]
 800568a:	2900      	cmp	r1, #0
 800568c:	d002      	beq.n	8005694 <_reclaim_reent+0x40>
 800568e:	0020      	movs	r0, r4
 8005690:	f000 f86e 	bl	8005770 <_free_r>
 8005694:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005696:	2900      	cmp	r1, #0
 8005698:	d002      	beq.n	80056a0 <_reclaim_reent+0x4c>
 800569a:	0020      	movs	r0, r4
 800569c:	f000 f868 	bl	8005770 <_free_r>
 80056a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d002      	beq.n	80056ac <_reclaim_reent+0x58>
 80056a6:	0020      	movs	r0, r4
 80056a8:	f000 f862 	bl	8005770 <_free_r>
 80056ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d002      	beq.n	80056b8 <_reclaim_reent+0x64>
 80056b2:	0020      	movs	r0, r4
 80056b4:	f000 f85c 	bl	8005770 <_free_r>
 80056b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d002      	beq.n	80056c4 <_reclaim_reent+0x70>
 80056be:	0020      	movs	r0, r4
 80056c0:	f000 f856 	bl	8005770 <_free_r>
 80056c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d002      	beq.n	80056d0 <_reclaim_reent+0x7c>
 80056ca:	0020      	movs	r0, r4
 80056cc:	f000 f850 	bl	8005770 <_free_r>
 80056d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d002      	beq.n	80056dc <_reclaim_reent+0x88>
 80056d6:	0020      	movs	r0, r4
 80056d8:	f000 f84a 	bl	8005770 <_free_r>
 80056dc:	6a23      	ldr	r3, [r4, #32]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <_reclaim_reent+0x92>
 80056e2:	0020      	movs	r0, r4
 80056e4:	4798      	blx	r3
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	5949      	ldr	r1, [r1, r5]
 80056ea:	2900      	cmp	r1, #0
 80056ec:	d108      	bne.n	8005700 <_reclaim_reent+0xac>
 80056ee:	3504      	adds	r5, #4
 80056f0:	69e3      	ldr	r3, [r4, #28]
 80056f2:	68d9      	ldr	r1, [r3, #12]
 80056f4:	2d80      	cmp	r5, #128	; 0x80
 80056f6:	d1f7      	bne.n	80056e8 <_reclaim_reent+0x94>
 80056f8:	0020      	movs	r0, r4
 80056fa:	f000 f839 	bl	8005770 <_free_r>
 80056fe:	e7b6      	b.n	800566e <_reclaim_reent+0x1a>
 8005700:	680e      	ldr	r6, [r1, #0]
 8005702:	0020      	movs	r0, r4
 8005704:	f000 f834 	bl	8005770 <_free_r>
 8005708:	0031      	movs	r1, r6
 800570a:	e7ee      	b.n	80056ea <_reclaim_reent+0x96>
 800570c:	2000005c 	.word	0x2000005c

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	2600      	movs	r6, #0
 8005714:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x38>)
 8005716:	4d0d      	ldr	r5, [pc, #52]	; (800574c <__libc_init_array+0x3c>)
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	2600      	movs	r6, #0
 8005722:	f000 f87f 	bl	8005824 <_init>
 8005726:	4c0a      	ldr	r4, [pc, #40]	; (8005750 <__libc_init_array+0x40>)
 8005728:	4d0a      	ldr	r5, [pc, #40]	; (8005754 <__libc_init_array+0x44>)
 800572a:	1b64      	subs	r4, r4, r5
 800572c:	10a4      	asrs	r4, r4, #2
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	00b3      	lsls	r3, r6, #2
 8005736:	58eb      	ldr	r3, [r5, r3]
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	00b3      	lsls	r3, r6, #2
 8005740:	58eb      	ldr	r3, [r5, r3]
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	0800590c 	.word	0x0800590c
 800574c:	0800590c 	.word	0x0800590c
 8005750:	08005910 	.word	0x08005910
 8005754:	0800590c 	.word	0x0800590c

08005758 <__retarget_lock_acquire_recursive>:
 8005758:	4770      	bx	lr

0800575a <__retarget_lock_release_recursive>:
 800575a:	4770      	bx	lr

0800575c <memcpy>:
 800575c:	2300      	movs	r3, #0
 800575e:	b510      	push	{r4, lr}
 8005760:	429a      	cmp	r2, r3
 8005762:	d100      	bne.n	8005766 <memcpy+0xa>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	5ccc      	ldrb	r4, [r1, r3]
 8005768:	54c4      	strb	r4, [r0, r3]
 800576a:	3301      	adds	r3, #1
 800576c:	e7f8      	b.n	8005760 <memcpy+0x4>
	...

08005770 <_free_r>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	0005      	movs	r5, r0
 8005774:	2900      	cmp	r1, #0
 8005776:	d010      	beq.n	800579a <_free_r+0x2a>
 8005778:	1f0c      	subs	r4, r1, #4
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	da00      	bge.n	8005782 <_free_r+0x12>
 8005780:	18e4      	adds	r4, r4, r3
 8005782:	0028      	movs	r0, r5
 8005784:	f000 f83e 	bl	8005804 <__malloc_lock>
 8005788:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <_free_r+0x90>)
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <_free_r+0x2c>
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6014      	str	r4, [r2, #0]
 8005794:	0028      	movs	r0, r5
 8005796:	f000 f83d 	bl	8005814 <__malloc_unlock>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x42>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d1f3      	bne.n	8005790 <_free_r+0x20>
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	1809      	adds	r1, r1, r0
 80057ae:	6021      	str	r1, [r4, #0]
 80057b0:	e7ee      	b.n	8005790 <_free_r+0x20>
 80057b2:	001a      	movs	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <_free_r+0x4e>
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	d9f9      	bls.n	80057b2 <_free_r+0x42>
 80057be:	6811      	ldr	r1, [r2, #0]
 80057c0:	1850      	adds	r0, r2, r1
 80057c2:	42a0      	cmp	r0, r4
 80057c4:	d10b      	bne.n	80057de <_free_r+0x6e>
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	1809      	adds	r1, r1, r0
 80057ca:	1850      	adds	r0, r2, r1
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	4283      	cmp	r3, r0
 80057d0:	d1e0      	bne.n	8005794 <_free_r+0x24>
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	1841      	adds	r1, r0, r1
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	6053      	str	r3, [r2, #4]
 80057dc:	e7da      	b.n	8005794 <_free_r+0x24>
 80057de:	42a0      	cmp	r0, r4
 80057e0:	d902      	bls.n	80057e8 <_free_r+0x78>
 80057e2:	230c      	movs	r3, #12
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	e7d5      	b.n	8005794 <_free_r+0x24>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	1821      	adds	r1, r4, r0
 80057ec:	428b      	cmp	r3, r1
 80057ee:	d103      	bne.n	80057f8 <_free_r+0x88>
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	1809      	adds	r1, r1, r0
 80057f6:	6021      	str	r1, [r4, #0]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	6054      	str	r4, [r2, #4]
 80057fc:	e7ca      	b.n	8005794 <_free_r+0x24>
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	20001c80 	.word	0x20001c80

08005804 <__malloc_lock>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4802      	ldr	r0, [pc, #8]	; (8005810 <__malloc_lock+0xc>)
 8005808:	f7ff ffa6 	bl	8005758 <__retarget_lock_acquire_recursive>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	20001c7c 	.word	0x20001c7c

08005814 <__malloc_unlock>:
 8005814:	b510      	push	{r4, lr}
 8005816:	4802      	ldr	r0, [pc, #8]	; (8005820 <__malloc_unlock+0xc>)
 8005818:	f7ff ff9f 	bl	800575a <__retarget_lock_release_recursive>
 800581c:	bd10      	pop	{r4, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	20001c7c 	.word	0x20001c7c

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
