
Butt_led_uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000564  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000644  08000644  0001064c  2**0
                  CONTENTS
  4 .ARM          00000000  08000644  08000644  0001064c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000644  0800064c  0001064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800064c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800064c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001064c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010674  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000065e  00000000  00000000  000106b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000271  00000000  00000000  00010d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00010f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006b  00000000  00000000  00011020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010c4a  00000000  00000000  0001108b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006fc  00000000  00000000  00021cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fe9a  00000000  00000000  000223d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001d0  00000000  00000000  0008226c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0008243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800060c 	.word	0x0800060c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800060c 	.word	0x0800060c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void dma1_stream_init(uint32_t src, uint32_t dst, uint32_t len);
static void dma_callback(void);

char key;
int main(void)
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
//	int btn_state_cntr = 0;
	char msg[31] = "Hello from the other side\n\r";
 800025a:	0039      	movs	r1, r7
 800025c:	4a23      	ldr	r2, [pc, #140]	; (80002ec <main+0x98>)
 800025e:	000b      	movs	r3, r1
 8000260:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000262:	c331      	stmia	r3!, {r0, r4, r5}
 8000264:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000266:	c331      	stmia	r3!, {r0, r4, r5}
 8000268:	6812      	ldr	r2, [r2, #0]
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	000b      	movs	r3, r1
 800026e:	331c      	adds	r3, #28
 8000270:	2203      	movs	r2, #3
 8000272:	2100      	movs	r1, #0
 8000274:	0018      	movs	r0, r3
 8000276:	f000 f99c 	bl	80005b2 <memset>

	

	/*Clock configuration*/
	// Enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <main+0x9c>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <main+0x9c>)
 8000280:	2101      	movs	r1, #1
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]

	// enable clock access to GPIOC
	RCC_IOPENR_R |= GPIOCEN;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <main+0x9c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <main+0x9c>)
 800028c:	2104      	movs	r1, #4
 800028e:	430a      	orrs	r2, r1
 8000290:	601a      	str	r2, [r3, #0]

	// // enable clock access to usart2
	RCC_APBENR1_R |= USART2EN;
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <main+0xa0>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0xa0>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]


	// configure LED as out put pin
	GPIOA_MODER_R |= (1U<<10);
 80002a0:	23a0      	movs	r3, #160	; 0xa0
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	23a0      	movs	r3, #160	; 0xa0
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	00c9      	lsls	r1, r1, #3
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R &= ~(1U<<11);
 80002b2:	23a0      	movs	r3, #160	; 0xa0
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	23a0      	movs	r3, #160	; 0xa0
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	490e      	ldr	r1, [pc, #56]	; (80002f8 <main+0xa4>)
 80002be:	400a      	ands	r2, r1
 80002c0:	601a      	str	r2, [r3, #0]


	/*Configure user_button as input pin*/
	GPIOC_MODE_R &= ~(1U<<26);
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <main+0xa8>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <main+0xa8>)
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <main+0xac>)
 80002ca:	400a      	ands	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
	GPIOC_MODE_R &= ~(1U<<27);
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <main+0xa8>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <main+0xa8>)
 80002d4:	490b      	ldr	r1, [pc, #44]	; (8000304 <main+0xb0>)
 80002d6:	400a      	ands	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

	usart2_init();
 80002da:	f000 f817 	bl	800030c <usart2_init>

	dma1_stream_init((uint32_t)msg, (uint32_t)&USART2_TDR_R, 31);
 80002de:	003b      	movs	r3, r7
 80002e0:	4909      	ldr	r1, [pc, #36]	; (8000308 <main+0xb4>)
 80002e2:	221f      	movs	r2, #31
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 f8ad 	bl	8000444 <dma1_stream_init>


    /* Loop forever */
	for(;;){
 80002ea:	e7fe      	b.n	80002ea <main+0x96>
 80002ec:	08000624 	.word	0x08000624
 80002f0:	40021034 	.word	0x40021034
 80002f4:	4002103c 	.word	0x4002103c
 80002f8:	fffff7ff 	.word	0xfffff7ff
 80002fc:	50000800 	.word	0x50000800
 8000300:	fbffffff 	.word	0xfbffffff
 8000304:	f7ffffff 	.word	0xf7ffffff
 8000308:	40004428 	.word	0x40004428

0800030c <usart2_init>:
	} 
	
}

void usart2_init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	// to know the pin the usart you are using is connected
	
	// eg PA2 usartx AF1

	// configure gpioa2 tx pin moder to alternate function	
	GPIOA_MODER_R &= ~(1U<<4);
 8000310:	23a0      	movs	r3, #160	; 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	23a0      	movs	r3, #160	; 0xa0
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2110      	movs	r1, #16
 800031c:	438a      	bics	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<5);
 8000320:	23a0      	movs	r3, #160	; 0xa0
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	23a0      	movs	r3, #160	; 0xa0
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	2120      	movs	r1, #32
 800032c:	430a      	orrs	r2, r1
 800032e:	601a      	str	r2, [r3, #0]

	// set alternate function type to AF1: GPIOA_AFR
	// configure uart 8-11
	GPIOA_AFRL_R |= (1U<<8);
 8000330:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <usart2_init+0xe0>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <usart2_init+0xe0>)
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	0049      	lsls	r1, r1, #1
 800033a:	430a      	orrs	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<9);
 800033e:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <usart2_init+0xe0>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <usart2_init+0xe0>)
 8000344:	492a      	ldr	r1, [pc, #168]	; (80003f0 <usart2_init+0xe4>)
 8000346:	400a      	ands	r2, r1
 8000348:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<10);
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <usart2_init+0xe0>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b27      	ldr	r3, [pc, #156]	; (80003ec <usart2_init+0xe0>)
 8000350:	4928      	ldr	r1, [pc, #160]	; (80003f4 <usart2_init+0xe8>)
 8000352:	400a      	ands	r2, r1
 8000354:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<11);
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <usart2_init+0xe0>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b24      	ldr	r3, [pc, #144]	; (80003ec <usart2_init+0xe0>)
 800035c:	4926      	ldr	r1, [pc, #152]	; (80003f8 <usart2_init+0xec>)
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]


	// configure gpioa3 that pin moder to alternate function	
	GPIOA_MODER_R &= ~(1U<<6);
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	23a0      	movs	r3, #160	; 0xa0
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	438a      	bics	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<7);
 8000372:	23a0      	movs	r3, #160	; 0xa0
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	23a0      	movs	r3, #160	; 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	430a      	orrs	r2, r1
 8000380:	601a      	str	r2, [r3, #0]

	// set alternate function type to AF1: GPIOA_AFR
	// configure uart 8-11
	GPIOA_AFRL_R |= (1U<<12);
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <usart2_init+0xe0>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <usart2_init+0xe0>)
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	0149      	lsls	r1, r1, #5
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<13);
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <usart2_init+0xe0>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <usart2_init+0xe0>)
 8000396:	4919      	ldr	r1, [pc, #100]	; (80003fc <usart2_init+0xf0>)
 8000398:	400a      	ands	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<14);
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <usart2_init+0xe0>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <usart2_init+0xe0>)
 80003a2:	4917      	ldr	r1, [pc, #92]	; (8000400 <usart2_init+0xf4>)
 80003a4:	400a      	ands	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<15);
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <usart2_init+0xe0>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <usart2_init+0xe0>)
 80003ae:	4915      	ldr	r1, [pc, #84]	; (8000404 <usart2_init+0xf8>)
 80003b0:	400a      	ands	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]

	// configure usart2 baudrate
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80003b4:	23e1      	movs	r3, #225	; 0xe1
 80003b6:	025b      	lsls	r3, r3, #9
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <usart2_init+0xfc>)
 80003ba:	0019      	movs	r1, r3
 80003bc:	0010      	movs	r0, r2
 80003be:	f000 f827 	bl	8000410 <uart_set_baudrate>


	// set usart tx 
	USART2_CR1_R |= USART2_CR1_TE;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <usart2_init+0x100>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <usart2_init+0x100>)
 80003c8:	2108      	movs	r1, #8
 80003ca:	430a      	orrs	r2, r1
 80003cc:	601a      	str	r2, [r3, #0]

	//set usart rx
	USART2_CR1_R |= USART2_CR1_RE;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <usart2_init+0x100>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <usart2_init+0x100>)
 80003d4:	2104      	movs	r1, #4
 80003d6:	430a      	orrs	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]

	// enable usart module
	USART2_CR1_R |= USART2_CR1_UE;
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <usart2_init+0x100>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <usart2_init+0x100>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]


}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	50000020 	.word	0x50000020
 80003f0:	fffffdff 	.word	0xfffffdff
 80003f4:	fffffbff 	.word	0xfffffbff
 80003f8:	fffff7ff 	.word	0xfffff7ff
 80003fc:	ffffdfff 	.word	0xffffdfff
 8000400:	ffffbfff 	.word	0xffffbfff
 8000404:	ffff7fff 	.word	0xffff7fff
 8000408:	00f42400 	.word	0x00f42400
 800040c:	40004400 	.word	0x40004400

08000410 <uart_set_baudrate>:

	// write to transmit data_register
	USART2_TDR_R = (ch & 0xFF);
}

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baud_rate){
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
	// USARTx->BRR = ((periph_clk + (baud_rate/2U)) / baud_rate);
	USART2_BRR_R |= ((periph_clk + (baud_rate/2U)) / baud_rate);
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <uart_set_baudrate+0x30>)
 800041c:	681c      	ldr	r4, [r3, #0]
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	085a      	lsrs	r2, r3, #1
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	6839      	ldr	r1, [r7, #0]
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fe6d 	bl	8000108 <__udivsi3>
 800042e:	0003      	movs	r3, r0
 8000430:	001a      	movs	r2, r3
 8000432:	4b03      	ldr	r3, [pc, #12]	; (8000440 <uart_set_baudrate+0x30>)
 8000434:	4322      	orrs	r2, r4
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b003      	add	sp, #12
 800043e:	bd90      	pop	{r4, r7, pc}
 8000440:	4000440c 	.word	0x4000440c

08000444 <dma1_stream_init>:
	if(key == 'y') GPIOA_ODR_R |= LED_PIN;
	else if(key == 'n') GPIOA_ODR_R &= ~LED_PIN;
}


void dma1_stream_init(uint32_t src, uint32_t dst, uint32_t len){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	// enable clock access to DMA
	RCC->AHBENR |= RCC_DMA1_EN;
 8000450:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <dma1_stream_init+0xc4>)
 8000452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <dma1_stream_init+0xc4>)
 8000456:	2101      	movs	r1, #1
 8000458:	430a      	orrs	r2, r1
 800045a:	639a      	str	r2, [r3, #56]	; 0x38
	// disable dma1 stream(channel)
	// search dma channel registers
	//DMA1_Channel6->CCR &= ~DMA_CCRx_EN;

	// wait until DMA channel 5 is disabled
	while(DMA1_Channel6->CCR & DMA_CCRx_EN)
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <dma1_stream_init+0xc8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	d1fa      	bne.n	800045e <dma1_stream_init+0x1a>
		;



	// clear all interrupt flags of stream 20-23
	DMA1->IFCR |= (1U<<20);
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <dma1_stream_init+0xcc>)
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <dma1_stream_init+0xcc>)
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	0349      	lsls	r1, r1, #13
 8000472:	430a      	orrs	r2, r1
 8000474:	605a      	str	r2, [r3, #4]
	DMA1->IFCR |= (1U<<21);
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <dma1_stream_init+0xcc>)
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <dma1_stream_init+0xcc>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0389      	lsls	r1, r1, #14
 8000480:	430a      	orrs	r2, r1
 8000482:	605a      	str	r2, [r3, #4]
	DMA1->IFCR |= (1U<<22);
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <dma1_stream_init+0xcc>)
 8000486:	685a      	ldr	r2, [r3, #4]
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <dma1_stream_init+0xcc>)
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	03c9      	lsls	r1, r1, #15
 800048e:	430a      	orrs	r2, r1
 8000490:	605a      	str	r2, [r3, #4]
	DMA1->IFCR |= (1U<<23);
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <dma1_stream_init+0xcc>)
 8000494:	685a      	ldr	r2, [r3, #4]
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <dma1_stream_init+0xcc>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0409      	lsls	r1, r1, #16
 800049c:	430a      	orrs	r2, r1
 800049e:	605a      	str	r2, [r3, #4]



	// set the destination buffer ( peripheral register address )
	DMA1_Channel6->CPAR = dst;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <dma1_stream_init+0xc8>)
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	609a      	str	r2, [r3, #8]

	// set the source buffer (memory buffer)
	DMA1_Channel6->CMAR = src;
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <dma1_stream_init+0xc8>)
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	60da      	str	r2, [r3, #12]

	// set length
	DMA1_Channel6->CNDTR = len;
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <dma1_stream_init+0xc8>)
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]

	// select stream6 channel4
//	DMA1_Channel6->CCR;

	// enable memory increment
	DMA1_Channel6->CCR |= DMA_MINC;
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <dma1_stream_init+0xc8>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <dma1_stream_init+0xc8>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	430a      	orrs	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]

	// configure transfer direction 0:peripheral to memory
	DMA1_Channel6->CCR |= DMA_DIR;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <dma1_stream_init+0xc8>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <dma1_stream_init+0xc8>)
 80004c4:	2110      	movs	r1, #16
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]

	// enable DMA transfer complete interrupt
	DMA1_Channel6->CCR |= DMA_TCIE;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <dma1_stream_init+0xc8>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <dma1_stream_init+0xc8>)
 80004d0:	2102      	movs	r1, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]


	// enable direct mode and diasble FIFO
	DMA1_Channel6->CCR |= (1U<<5); // circular mode
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <dma1_stream_init+0xc8>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <dma1_stream_init+0xc8>)
 80004dc:	2120      	movs	r1, #32
 80004de:	430a      	orrs	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]

	// enable DMA1 channel6
	DMA1_Channel6->CCR |= DMA_CCRx_EN;
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <dma1_stream_init+0xc8>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <dma1_stream_init+0xc8>)
 80004e8:	2101      	movs	r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	601a      	str	r2, [r3, #0]

	// enable uart2 transmitter DMA, usart_cr3
	//USART2->CR3 |= USART2_CR3_DMAT;
	USART2_CR3_R |= USART2_CR3_DMAT;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <dma1_stream_init+0xd0>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <dma1_stream_init+0xd0>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]



	// DMA interrupt enable in nvic
	NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80004fa:	200b      	movs	r0, #11
 80004fc:	f7ff fe90 	bl	8000220 <__NVIC_EnableIRQ>

}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	4002006c 	.word	0x4002006c
 8000510:	40020000 	.word	0x40020000
 8000514:	40004408 	.word	0x40004408

08000518 <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler>:

// bcos we enable DMA transfer complete interrupt
void DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	// check for transfer complete interrupt
	if(DMA1->ISR & DMA_ISR_TCIF6){
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler+0x28>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4013      	ands	r3, r2
 8000526:	d008      	beq.n	800053a <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler+0x22>
		// clear interrupt flag
		DMA1->IFCR |= DMA1_IFCR_CTCIF6;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler+0x28>)
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler+0x28>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0389      	lsls	r1, r1, #14
 8000532:	430a      	orrs	r2, r1
 8000534:	605a      	str	r2, [r3, #4]

		// do something
		dma_callback();
 8000536:	f000 f805 	bl	8000544 <dma_callback>

	}
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020000 	.word	0x40020000

08000544 <dma_callback>:

static void dma_callback(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	// turn on led when transfer is complete
	GPIOA_ODR_R |= LED_PIN;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <dma_callback+0x18>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <dma_callback+0x18>)
 800054e:	2120      	movs	r1, #32
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	50000014 	.word	0x50000014

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000564:	e000      	b.n	8000568 <Reset_Handler+0x8>
 8000566:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 f819 	bl	80005c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fe5f 	bl	8000254 <main>

08000596 <LoopForever>:

LoopForever:
  b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a4:	0800064c 	.word	0x0800064c
  ldr r2, =_sbss
 80005a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC_COMP_IRQHandler>

080005b2 <memset>:
 80005b2:	0003      	movs	r3, r0
 80005b4:	1882      	adds	r2, r0, r2
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d100      	bne.n	80005bc <memset+0xa>
 80005ba:	4770      	bx	lr
 80005bc:	7019      	strb	r1, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	e7f9      	b.n	80005b6 <memset+0x4>
	...

080005c4 <__libc_init_array>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2600      	movs	r6, #0
 80005c8:	4c0c      	ldr	r4, [pc, #48]	; (80005fc <__libc_init_array+0x38>)
 80005ca:	4d0d      	ldr	r5, [pc, #52]	; (8000600 <__libc_init_array+0x3c>)
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	42a6      	cmp	r6, r4
 80005d2:	d109      	bne.n	80005e8 <__libc_init_array+0x24>
 80005d4:	2600      	movs	r6, #0
 80005d6:	f000 f819 	bl	800060c <_init>
 80005da:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <__libc_init_array+0x40>)
 80005dc:	4d0a      	ldr	r5, [pc, #40]	; (8000608 <__libc_init_array+0x44>)
 80005de:	1b64      	subs	r4, r4, r5
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d105      	bne.n	80005f2 <__libc_init_array+0x2e>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	00b3      	lsls	r3, r6, #2
 80005ea:	58eb      	ldr	r3, [r5, r3]
 80005ec:	4798      	blx	r3
 80005ee:	3601      	adds	r6, #1
 80005f0:	e7ee      	b.n	80005d0 <__libc_init_array+0xc>
 80005f2:	00b3      	lsls	r3, r6, #2
 80005f4:	58eb      	ldr	r3, [r5, r3]
 80005f6:	4798      	blx	r3
 80005f8:	3601      	adds	r6, #1
 80005fa:	e7f2      	b.n	80005e2 <__libc_init_array+0x1e>
 80005fc:	08000644 	.word	0x08000644
 8000600:	08000644 	.word	0x08000644
 8000604:	08000648 	.word	0x08000648
 8000608:	08000644 	.word	0x08000644

0800060c <_init>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr

08000618 <_fini>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr
