
embedede_program_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005774  08005774  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800577c  0800577c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000060  080057e4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010cc  080057e4  000210cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017484  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003317  00000000  00000000  0003754f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001109  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003649  00000000  00000000  0003cf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c90  00000000  00000000  0004058a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4ef  00000000  00000000  0005821a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051fc  00000000  00000000  0012570c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005660 	.word	0x08005660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005660 	.word	0x08005660

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fc27 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f843 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f95b 	bl	80008f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000642:	f000 f93b 	bl	80008bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000646:	f000 f8eb 	bl	8000820 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800064a:	f000 f883 	bl	8000754 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800064e:	252c      	movs	r5, #44	; 0x2c
 8000650:	197b      	adds	r3, r7, r5
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0x7c>)
 8000654:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000656:	c313      	stmia	r3!, {r0, r1, r4}
 8000658:	ca03      	ldmia	r2!, {r0, r1}
 800065a:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065c:	197b      	adds	r3, r7, r5
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f003 fef6 	bl	8004452 <osThreadCreate>
 8000666:	0002      	movs	r2, r0
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0x80>)
 800066a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readADCTask, StartReadADCTask, osPriorityNormal, 0, 128);
 800066c:	2518      	movs	r5, #24
 800066e:	197b      	adds	r3, r7, r5
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <main+0x84>)
 8000672:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000674:	c313      	stmia	r3!, {r0, r1, r4}
 8000676:	ca03      	ldmia	r2!, {r0, r1}
 8000678:	c303      	stmia	r3!, {r0, r1}
  readADCTaskHandle = osThreadCreate(osThread(readADCTask), NULL);
 800067a:	197b      	adds	r3, r7, r5
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f003 fee7 	bl	8004452 <osThreadCreate>
 8000684:	0002      	movs	r2, r0
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <main+0x88>)
 8000688:	601a      	str	r2, [r3, #0]

  //osThreadDef(transmitADCTask, StartTransmitADCTask, osPriorityNormal, 0 , 128);
  //transmitADCTaskHandle = osThreadCreate(osThread(transmitADCTask), NULL);

  osThreadDef(extraTask, StartExtraTask, osPriorityNormal, 0 , 128);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0x8c>)
 800068e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000690:	c313      	stmia	r3!, {r0, r1, r4}
 8000692:	ca03      	ldmia	r2!, {r0, r1}
 8000694:	c303      	stmia	r3!, {r0, r1}
  extraTaskHandle = osThreadCreate(osThread(extraTask), NULL);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2100      	movs	r1, #0
 800069a:	0018      	movs	r0, r3
 800069c:	f003 fed9 	bl	8004452 <osThreadCreate>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <main+0x90>)
 80006a4:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a6:	f003 fecc 	bl	8004442 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <main+0x7a>
 80006ac:	08005684 	.word	0x08005684
 80006b0:	200001e4 	.word	0x200001e4
 80006b4:	080056a4 	.word	0x080056a4
 80006b8:	200001e8 	.word	0x200001e8
 80006bc:	080056c4 	.word	0x080056c4
 80006c0:	200001ec 	.word	0x200001ec

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b095      	sub	sp, #84	; 0x54
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	2414      	movs	r4, #20
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	233c      	movs	r3, #60	; 0x3c
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f004 fedd 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	2310      	movs	r3, #16
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 fed6 	bl	8005494 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fc9b 	bl	8002028 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2240      	movs	r2, #64	; 0x40
 800070a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fcd3 	bl	80020c0 <HAL_RCC_OscConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800071e:	f000 f9db 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f002 f81e 	bl	8002780 <HAL_RCC_ClockConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000748:	f000 f9c6 	bl	8000ad8 <Error_Handler>
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b015      	add	sp, #84	; 0x54
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0018      	movs	r0, r3
 800075e:	230c      	movs	r3, #12
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f004 fe96 	bl	8005494 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_ADC1_Init+0xc4>)
 800076a:	4a2c      	ldr	r2, [pc, #176]	; (800081c <MX_ADC1_Init+0xc8>)
 800076c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	05d2      	lsls	r2, r2, #23
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000778:	2208      	movs	r2, #8
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_ADC1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_ADC1_Init+0xc4>)
 800078a:	2204      	movs	r2, #4
 800078c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000796:	2200      	movs	r2, #0
 8000798:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC1_Init+0xc4>)
 800079c:	2201      	movs	r2, #1
 800079e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007b4:	222c      	movs	r2, #44	; 0x2c
 80007b6:	2101      	movs	r1, #1
 80007b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007ce:	223c      	movs	r2, #60	; 0x3c
 80007d0:	2100      	movs	r1, #0
 80007d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fc8d 	bl	80010fc <HAL_ADC_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007e6:	f000 f977 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_ADC1_Init+0xc4>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe22 	bl	800144c <HAL_ADC_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800080c:	f000 f964 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000008c 	.word	0x2000008c
 800081c:	40012400 	.word	0x40012400

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <MX_USART2_UART_Init+0x98>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800082c:	22e1      	movs	r2, #225	; 0xe1
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fe32 	bl	80034d4 <HAL_UART_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f930 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fce7 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f927 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800088c:	2100      	movs	r1, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f003 fd1e 	bl	80042d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f91e 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x94>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f003 fc9c 	bl	80041dc <HAL_UARTEx_DisableFifoMode>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f916 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000150 	.word	0x20000150
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	430a      	orrs	r2, r1
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_DMA_Init+0x38>)
 80008d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2103      	movs	r1, #3
 80008de:	2009      	movs	r0, #9
 80008e0:	f001 f814 	bl	800190c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e4:	2009      	movs	r0, #9
 80008e6:	f001 f826 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	240c      	movs	r4, #12
 8000900:	193b      	adds	r3, r7, r4
 8000902:	0018      	movs	r0, r3
 8000904:	2314      	movs	r3, #20
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 fdc3 	bl	8005494 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_GPIO_Init+0xf0>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2204      	movs	r2, #4
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <MX_GPIO_Init+0xf0>)
 800092c:	2120      	movs	r1, #32
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2220      	movs	r2, #32
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_GPIO_Init+0xf0>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_GPIO_Init+0xf0>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fb44 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_D1_BLUE_Pin|LED_D2_RED_Pin, GPIO_PIN_RESET);
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_GPIO_Init+0xf4>)
 8000966:	2200      	movs	r2, #0
 8000968:	2130      	movs	r1, #48	; 0x30
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fb3e 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2220      	movs	r2, #32
 8000974:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2201      	movs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2202      	movs	r2, #2
 8000986:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000988:	193a      	adds	r2, r7, r4
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f001 f9bf 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D1_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_D1_BLUE_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2210      	movs	r2, #16
 800099a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_D1_BLUE_GPIO_Port, &GPIO_InitStruct);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <MX_GPIO_Init+0xf4>)
 80009b2:	0019      	movs	r1, r3
 80009b4:	0010      	movs	r0, r2
 80009b6:	f001 f9ad 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_RED_Pin */
  GPIO_InitStruct.Pin = LED_D2_RED_Pin;
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2220      	movs	r2, #32
 80009c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2201      	movs	r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_D2_RED_GPIO_Port, &GPIO_InitStruct);
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <MX_GPIO_Init+0xf4>)
 80009d8:	0019      	movs	r1, r3
 80009da:	0010      	movs	r0, r2
 80009dc:	f001 f99a 	bl	8001d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b009      	add	sp, #36	; 0x24
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	50000800 	.word	0x50000800

080009f0 <vApplicationIdleHook>:
/**
 * @brief Function implementing vApplicationIdleHook in-built function
 * @param argument: Not used
 * @retval None
 */
void vApplicationIdleHook(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	idleTaskProfiler++;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <vApplicationIdleHook+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <vApplicationIdleHook+0x14>)
 80009fc:	601a      	str	r2, [r3, #0]
	// do something when schedule is idle
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000088 	.word	0x20000088

08000a08 <StartExtraTask>:
 * @brief Function implementing the extraTask thread
 * @param argument: Not used
 * @retval None
 */

void StartExtraTask(void const * argument){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	for(;;){
		extraTaskProfiler++;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <StartExtraTask+0x1c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <StartExtraTask+0x1c>)
 8000a18:	601a      	str	r2, [r3, #0]
		  //vTaskDelay(_250ms);
		  vTaskDelay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f003 ff42 	bl	80048a4 <vTaskDelay>
		extraTaskProfiler++;
 8000a20:	e7f6      	b.n	8000a10 <StartExtraTask+0x8>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000084 	.word	0x20000084

08000a28 <StartReadADCTask>:
//#define LED_D1_BLUE_Pin GPIO_PIN_4
//#define LED_D1_BLUE_GPIO_Port GPIOC
//#define LED_D2_RED_Pin GPIO_PIN_5
//#define LED_D2_RED_GPIO_Port GPIOC

void StartReadADCTask(void const * argument){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	for(;;){

		ReadADCTaskProfiler++;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <StartReadADCTask+0x48>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <StartReadADCTask+0x48>)
 8000a38:	601a      	str	r2, [r3, #0]
		  vTaskDelay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f003 ff32 	bl	80048a4 <vTaskDelay>
				suspend_green %= 30;
		}

		*/

		HAL_GPIO_WritePin(LED_D1_BLUE_GPIO_Port, LED_D1_BLUE_Pin, GPIO_PIN_RESET);
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <StartReadADCTask+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	2110      	movs	r1, #16
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fad0 	bl	8001fec <HAL_GPIO_WritePin>
		osDelay(500);
 8000a4c:	23fa      	movs	r3, #250	; 0xfa
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	0018      	movs	r0, r3
 8000a52:	f003 fd26 	bl	80044a2 <osDelay>
		HAL_GPIO_WritePin(LED_D1_BLUE_GPIO_Port, LED_D1_BLUE_Pin, GPIO_PIN_SET);
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <StartReadADCTask+0x4c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fac5 	bl	8001fec <HAL_GPIO_WritePin>
		osDelay(500);
 8000a62:	23fa      	movs	r3, #250	; 0xfa
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 fd1b 	bl	80044a2 <osDelay>
		ReadADCTaskProfiler++;
 8000a6c:	e7e0      	b.n	8000a30 <StartReadADCTask+0x8>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000080 	.word	0x20000080
 8000a74:	50000800 	.word	0x50000800

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const char* msg = "hello world";
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <StartDefaultTask+0x30>)
 8000a82:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  DefaultTaskProfiler++;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <StartDefaultTask+0x34>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <StartDefaultTask+0x34>)
 8000a8c:	601a      	str	r2, [r3, #0]
    osDelay(100);

    */

    // Transmit via uart
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fb39 	bl	8000108 <strlen>
 8000a96:	0003      	movs	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <StartDefaultTask+0x38>)
 8000aa2:	f002 fd6d 	bl	8003580 <HAL_UART_Transmit>
	  DefaultTaskProfiler++;
 8000aa6:	e7ed      	b.n	8000a84 <StartDefaultTask+0xc>
 8000aa8:	080056d8 	.word	0x080056d8
 8000aac:	2000007c 	.word	0x2000007c
 8000ab0:	20000150 	.word	0x20000150

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f9ff 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_MspInit+0x50>)
 8000aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_MspInit+0x50>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	641a      	str	r2, [r3, #64]	; 0x40
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x50>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x50>)
 8000b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_MspInit+0x50>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	0549      	lsls	r1, r1, #21
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_MspInit+0x50>)
 8000b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	4013      	ands	r3, r2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b1e:	2302      	movs	r3, #2
 8000b20:	425b      	negs	r3, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	2103      	movs	r1, #3
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fef0 	bl	800190c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b08b      	sub	sp, #44	; 0x2c
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	2414      	movs	r4, #20
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2314      	movs	r3, #20
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f004 fca2 	bl	8005494 <memset>
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_ADC_MspInit+0xd8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d155      	bne.n	8000c06 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0349      	lsls	r1, r1, #13
 8000b64:	430a      	orrs	r2, r1
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	035b      	lsls	r3, r3, #13
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <HAL_ADC_MspInit+0xdc>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2203      	movs	r2, #3
 8000b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2203      	movs	r2, #3
 8000b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	193a      	adds	r2, r7, r4
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 f8b3 	bl	8001d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_ADC_MspInit+0xe4>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	0052      	lsls	r2, r2, #1
 8000bd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bde:	2220      	movs	r2, #32
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0152      	lsls	r2, r2, #5
 8000be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 feb3 	bl	8001958 <HAL_DMA_Init>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000bf6:	f7ff ff6f 	bl	8000ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_ADC_MspInit+0xe0>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b00b      	add	sp, #44	; 0x2c
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40012400 	.word	0x40012400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	200000f0 	.word	0x200000f0
 8000c1c:	40020008 	.word	0x40020008

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b09d      	sub	sp, #116	; 0x74
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	235c      	movs	r3, #92	; 0x5c
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f004 fc2e 	bl	8005494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	2410      	movs	r4, #16
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	234c      	movs	r3, #76	; 0x4c
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f004 fc26 	bl	8005494 <memset>
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_UART_MspInit+0xb8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d13e      	bne.n	8000cd0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2202      	movs	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 ff61 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c6a:	f7ff ff35 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0289      	lsls	r1, r1, #10
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ca2:	215c      	movs	r1, #92	; 0x5c
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2202      	movs	r2, #2
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	187a      	adds	r2, r7, r1
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 f822 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b01d      	add	sp, #116	; 0x74
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ce8:	232b      	movs	r3, #43	; 0x2b
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <HAL_InitTick+0xf4>)
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <HAL_InitTick+0xf4>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0109      	lsls	r1, r1, #4
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfe:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <HAL_InitTick+0xf4>)
 8000d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4013      	ands	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	18fa      	adds	r2, r7, r3
 8000d10:	2410      	movs	r4, #16
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fedc 	bl	8002ad4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d104      	bne.n	8000d32 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d28:	f001 febe 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d32:	f001 feb9 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8000d36:	0003      	movs	r3, r0
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	4926      	ldr	r1, [pc, #152]	; (8000dd8 <HAL_InitTick+0xf8>)
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff f9e9 	bl	8000118 <__udivsi3>
 8000d46:	0003      	movs	r3, r0
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d4e:	4a24      	ldr	r2, [pc, #144]	; (8000de0 <HAL_InitTick+0x100>)
 8000d50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d54:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <HAL_InitTick+0x104>)
 8000d56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d5a:	6a3a      	ldr	r2, [r7, #32]
 8000d5c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d70:	252b      	movs	r5, #43	; 0x2b
 8000d72:	197c      	adds	r4, r7, r5
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f912 	bl	8002fa0 <HAL_TIM_Base_Init>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11e      	bne.n	8000dc6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d88:	197c      	adds	r4, r7, r5
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0xfc>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 f967 	bl	8003060 <HAL_TIM_Base_Start_IT>
 8000d92:	0003      	movs	r3, r0
 8000d94:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d113      	bne.n	8000dc6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d9e:	200d      	movs	r0, #13
 8000da0:	f000 fdc9 	bl	8001936 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d809      	bhi.n	8000dbe <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	0019      	movs	r1, r3
 8000db0:	200d      	movs	r0, #13
 8000db2:	f000 fdab 	bl	800190c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_InitTick+0x108>)
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e003      	b.n	8000dc6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	232b      	movs	r3, #43	; 0x2b
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000dc6:	232b      	movs	r3, #43	; 0x2b
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b00c      	add	sp, #48	; 0x30
 8000dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	000f4240 	.word	0x000f4240
 8000ddc:	200001f0 	.word	0x200001f0
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	000003e7 	.word	0x000003e7
 8000de8:	20000004 	.word	0x20000004

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <DMA1_Channel1_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 fe56 	bl	8001ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	200000f0 	.word	0x200000f0

08000e10 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f002 f984 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	200001f0 	.word	0x200001f0

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fff6 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e62:	f004 fb7d 	bl	8005560 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e66:	f7ff fbe3 	bl	8000630 <main>

08000e6a <LoopForever>:

LoopForever:
  b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e78:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 8000e7c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e80:	200010cc 	.word	0x200010cc

08000e84 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_COMP_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x3c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Init+0x3c>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0049      	lsls	r1, r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f7ff ff1c 	bl	8000ce0 <HAL_InitTick>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe16 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	18d2      	adds	r2, r2, r3
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_IncTick+0x20>)
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	2000023c 	.word	0x2000023c

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_GetTick+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	2000023c 	.word	0x2000023c

08000f00 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f10:	401a      	ands	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	fe3fffff 	.word	0xfe3fffff

08000f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	23e0      	movs	r3, #224	; 0xe0
 8000f36:	045b      	lsls	r3, r3, #17
 8000f38:	4013      	ands	r3, r2
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	2104      	movs	r1, #4
 8000f56:	400a      	ands	r2, r1
 8000f58:	2107      	movs	r1, #7
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	43d2      	mvns	r2, r2
 8000f60:	401a      	ands	r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2104      	movs	r1, #4
 8000f66:	400b      	ands	r3, r1
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4099      	lsls	r1, r3
 8000f6c:	000b      	movs	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	400a      	ands	r2, r1
 8000f90:	2107      	movs	r1, #7
 8000f92:	4091      	lsls	r1, r2
 8000f94:	000a      	movs	r2, r1
 8000f96:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f9e:	40da      	lsrs	r2, r3
 8000fa0:	0013      	movs	r3, r2
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	211f      	movs	r1, #31
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	4091      	lsls	r1, r2
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	401a      	ands	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0e9b      	lsrs	r3, r3, #26
 8000fce:	210f      	movs	r1, #15
 8000fd0:	4019      	ands	r1, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	201f      	movs	r0, #31
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	4099      	lsls	r1, r3
 8000fda:	000b      	movs	r3, r1
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	035b      	lsls	r3, r3, #13
 8000ffc:	0b5b      	lsrs	r3, r3, #13
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	0352      	lsls	r2, r2, #13
 800101e:	0b52      	lsrs	r2, r2, #13
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	0212      	lsls	r2, r2, #8
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	400b      	ands	r3, r1
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001052:	400b      	ands	r3, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	07ffff00 	.word	0x07ffff00

08001068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <LL_ADC_EnableInternalRegulator+0x24>)
 8001076:	4013      	ands	r3, r2
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0552      	lsls	r2, r2, #21
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	6fffffe8 	.word	0x6fffffe8

08001090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	055b      	lsls	r3, r3, #21
 80010a0:	401a      	ands	r2, r3
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d101      	bne.n	80010ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <LL_ADC_IsEnabled+0x18>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <LL_ADC_IsEnabled+0x1a>
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d101      	bne.n	80010f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	231f      	movs	r3, #31
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e17f      	b.n	8001422 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fd03 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2254      	movs	r2, #84	; 0x54
 800113c:	2100      	movs	r1, #0
 800113e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ffa3 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d115      	bne.n	800117a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff ff88 	bl	8001068 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001158:	4bb4      	ldr	r3, [pc, #720]	; (800142c <HAL_ADC_Init+0x330>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	49b4      	ldr	r1, [pc, #720]	; (8001430 <HAL_ADC_Init+0x334>)
 800115e:	0018      	movs	r0, r3
 8001160:	f7fe ffda 	bl	8000118 <__udivsi3>
 8001164:	0003      	movs	r3, r0
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800116c:	e002      	b.n	8001174 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff86 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d10f      	bne.n	80011a8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	2210      	movs	r2, #16
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001198:	2201      	movs	r2, #1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011a0:	231f      	movs	r3, #31
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ff94 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 80011b2:	0003      	movs	r3, r0
 80011b4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	2210      	movs	r2, #16
 80011bc:	4013      	ands	r3, r2
 80011be:	d000      	beq.n	80011c2 <HAL_ADC_Init+0xc6>
 80011c0:	e122      	b.n	8001408 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d000      	beq.n	80011ca <HAL_ADC_Init+0xce>
 80011c8:	e11e      	b.n	8001408 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a99      	ldr	r2, [pc, #612]	; (8001434 <HAL_ADC_Init+0x338>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	2202      	movs	r2, #2
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff ff6a 	bl	80010b8 <LL_ADC_IsEnabled>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d000      	beq.n	80011ea <HAL_ADC_Init+0xee>
 80011e8:	e0ad      	b.n	8001346 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e1b      	ldrb	r3, [r3, #24]
 80011f2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7e5b      	ldrb	r3, [r3, #25]
 80011fa:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7e9b      	ldrb	r3, [r3, #26]
 8001202:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001204:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HAL_ADC_Init+0x118>
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	e000      	b.n	8001216 <HAL_ADC_Init+0x11a>
 8001214:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001216:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800121c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da04      	bge.n	8001230 <HAL_ADC_Init+0x134>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	e001      	b.n	8001234 <HAL_ADC_Init+0x138>
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001234:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	212c      	movs	r1, #44	; 0x2c
 800123a:	5c5b      	ldrb	r3, [r3, r1]
 800123c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800123e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2220      	movs	r2, #32
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d115      	bne.n	800127c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e9b      	ldrb	r3, [r3, #26]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	0252      	lsls	r2, r2, #9
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	e00b      	b.n	800127c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	2220      	movs	r2, #32
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2201      	movs	r2, #1
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00a      	beq.n	800129a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001288:	23e0      	movs	r3, #224	; 0xe0
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001292:	4313      	orrs	r3, r2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_ADC_Init+0x33c>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0f9b      	lsrs	r3, r3, #30
 80012b6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012bc:	4313      	orrs	r3, r2
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	223c      	movs	r2, #60	; 0x3c
 80012c8:	5c9b      	ldrb	r3, [r3, r2]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d111      	bne.n	80012f2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0f9b      	lsrs	r3, r3, #30
 80012d4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012da:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80012e0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80012e6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	2201      	movs	r2, #1
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_ADC_Init+0x340>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	430a      	orrs	r2, r1
 8001306:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	23c0      	movs	r3, #192	; 0xc0
 800130e:	061b      	lsls	r3, r3, #24
 8001310:	429a      	cmp	r2, r3
 8001312:	d018      	beq.n	8001346 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	429a      	cmp	r2, r3
 800131e:	d012      	beq.n	8001346 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	061b      	lsls	r3, r3, #24
 8001328:	429a      	cmp	r2, r3
 800132a:	d00c      	beq.n	8001346 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_ADC_Init+0x344>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a44      	ldr	r2, [pc, #272]	; (8001444 <HAL_ADC_Init+0x348>)
 8001332:	4013      	ands	r3, r2
 8001334:	0019      	movs	r1, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	23f0      	movs	r3, #240	; 0xf0
 800133c:	039b      	lsls	r3, r3, #14
 800133e:	401a      	ands	r2, r3
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <HAL_ADC_Init+0x344>)
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	001a      	movs	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	f7ff fdf6 	bl	8000f42 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	493a      	ldr	r1, [pc, #232]	; (8001448 <HAL_ADC_Init+0x34c>)
 8001360:	001a      	movs	r2, r3
 8001362:	f7ff fdee 	bl	8000f42 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2110      	movs	r1, #16
 800137a:	4249      	negs	r1, r1
 800137c:	430a      	orrs	r2, r1
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
 8001380:	e018      	b.n	80013b4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	039b      	lsls	r3, r3, #14
 800138a:	429a      	cmp	r2, r3
 800138c:	d112      	bne.n	80013b4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	3b01      	subs	r3, #1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	221c      	movs	r2, #28
 800139e:	4013      	ands	r3, r2
 80013a0:	2210      	movs	r2, #16
 80013a2:	4252      	negs	r2, r2
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0011      	movs	r1, r2
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2100      	movs	r1, #0
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff fdde 	bl	8000f7c <LL_ADC_GetSamplingTimeCommonChannels>
 80013c0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10b      	bne.n	80013e2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	2203      	movs	r2, #3
 80013d6:	4393      	bics	r3, r2
 80013d8:	2201      	movs	r2, #1
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e0:	e01c      	b.n	800141c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	2212      	movs	r2, #18
 80013e8:	4393      	bics	r3, r2
 80013ea:	2210      	movs	r2, #16
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2201      	movs	r2, #1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013fe:	231f      	movs	r3, #31
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001406:	e009      	b.n	800141c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	2210      	movs	r2, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001414:	231f      	movs	r3, #31
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800141c:	231f      	movs	r3, #31
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b008      	add	sp, #32
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000000 	.word	0x20000000
 8001430:	00030d40 	.word	0x00030d40
 8001434:	fffffefd 	.word	0xfffffefd
 8001438:	ffde0201 	.word	0xffde0201
 800143c:	1ffffc02 	.word	0x1ffffc02
 8001440:	40012708 	.word	0x40012708
 8001444:	ffc3ffff 	.word	0xffc3ffff
 8001448:	07ffff04 	.word	0x07ffff04

0800144c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001456:	2317      	movs	r3, #23
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2254      	movs	r2, #84	; 0x54
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x24>
 800146c:	2302      	movs	r3, #2
 800146e:	e1c0      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x3a6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2254      	movs	r2, #84	; 0x54
 8001474:	2101      	movs	r1, #1
 8001476:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fe2c 	bl	80010da <LL_ADC_REG_IsConversionOngoing>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d000      	beq.n	8001488 <HAL_ADC_ConfigChannel+0x3c>
 8001486:	e1a3      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d100      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x46>
 8001490:	e143      	b.n	800171a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	429a      	cmp	r2, r3
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014a2:	4ac1      	ldr	r2, [pc, #772]	; (80017a8 <HAL_ADC_ConfigChannel+0x35c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d108      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f7ff fd99 	bl	8000fea <LL_ADC_REG_SetSequencerChAdd>
 80014b8:	e0c9      	b.n	800164e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	211f      	movs	r1, #31
 80014c4:	400b      	ands	r3, r1
 80014c6:	210f      	movs	r1, #15
 80014c8:	4099      	lsls	r1, r3
 80014ca:	000b      	movs	r3, r1
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	035b      	lsls	r3, r3, #13
 80014d8:	0b5b      	lsrs	r3, r3, #13
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x9c>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0e9b      	lsrs	r3, r3, #26
 80014e2:	221f      	movs	r2, #31
 80014e4:	4013      	ands	r3, r2
 80014e6:	e098      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	d000      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0xa8>
 80014f2:	e091      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1cc>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d000      	beq.n	8001500 <HAL_ADC_ConfigChannel+0xb4>
 80014fe:	e089      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1c8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2204      	movs	r2, #4
 8001506:	4013      	ands	r3, r2
 8001508:	d000      	beq.n	800150c <HAL_ADC_ConfigChannel+0xc0>
 800150a:	e081      	b.n	8001610 <HAL_ADC_ConfigChannel+0x1c4>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xcc>
 8001516:	e079      	b.n	800160c <HAL_ADC_ConfigChannel+0x1c0>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2210      	movs	r2, #16
 800151e:	4013      	ands	r3, r2
 8001520:	d000      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xd8>
 8001522:	e071      	b.n	8001608 <HAL_ADC_ConfigChannel+0x1bc>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2220      	movs	r2, #32
 800152a:	4013      	ands	r3, r2
 800152c:	d000      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xe4>
 800152e:	e069      	b.n	8001604 <HAL_ADC_ConfigChannel+0x1b8>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	4013      	ands	r3, r2
 8001538:	d000      	beq.n	800153c <HAL_ADC_ConfigChannel+0xf0>
 800153a:	e061      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1b4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	4013      	ands	r3, r2
 8001544:	d000      	beq.n	8001548 <HAL_ADC_ConfigChannel+0xfc>
 8001546:	e059      	b.n	80015fc <HAL_ADC_ConfigChannel+0x1b0>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4013      	ands	r3, r2
 8001552:	d151      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1ac>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d149      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1a8>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4013      	ands	r3, r2
 800156a:	d141      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1a4>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d139      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1a0>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	4013      	ands	r3, r2
 8001582:	d131      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x19c>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	019b      	lsls	r3, r3, #6
 800158c:	4013      	ands	r3, r2
 800158e:	d129      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x198>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4013      	ands	r3, r2
 800159a:	d121      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x194>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4013      	ands	r3, r2
 80015a6:	d119      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x190>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	4013      	ands	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x18c>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d109      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x188>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	02db      	lsls	r3, r3, #11
 80015c8:	4013      	ands	r3, r2
 80015ca:	d001      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x184>
 80015cc:	2312      	movs	r3, #18
 80015ce:	e024      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015d0:	2300      	movs	r3, #0
 80015d2:	e022      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015d4:	2311      	movs	r3, #17
 80015d6:	e020      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015d8:	2310      	movs	r3, #16
 80015da:	e01e      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015dc:	230f      	movs	r3, #15
 80015de:	e01c      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015e0:	230e      	movs	r3, #14
 80015e2:	e01a      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015e4:	230d      	movs	r3, #13
 80015e6:	e018      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	230c      	movs	r3, #12
 80015ea:	e016      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	230b      	movs	r3, #11
 80015ee:	e014      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	230a      	movs	r3, #10
 80015f2:	e012      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	2309      	movs	r3, #9
 80015f6:	e010      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	2308      	movs	r3, #8
 80015fa:	e00e      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 80015fc:	2307      	movs	r3, #7
 80015fe:	e00c      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001600:	2306      	movs	r3, #6
 8001602:	e00a      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001604:	2305      	movs	r3, #5
 8001606:	e008      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001608:	2304      	movs	r3, #4
 800160a:	e006      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 800160c:	2303      	movs	r3, #3
 800160e:	e004      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	2302      	movs	r3, #2
 8001612:	e002      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_ADC_ConfigChannel+0x1ce>
 8001618:	2300      	movs	r3, #0
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	6852      	ldr	r2, [r2, #4]
 800161e:	201f      	movs	r0, #31
 8001620:	4002      	ands	r2, r0
 8001622:	4093      	lsls	r3, r2
 8001624:	000a      	movs	r2, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	429a      	cmp	r2, r3
 800163a:	d808      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	001a      	movs	r2, r3
 800164a:	f7ff fcae 	bl	8000faa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	001a      	movs	r2, r3
 800165c:	f7ff fce8 	bl	8001030 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db00      	blt.n	800166a <HAL_ADC_ConfigChannel+0x21e>
 8001668:	e0bc      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fc5b 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_ADC_ConfigChannel+0x364>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d122      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001688:	d11d      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	4313      	orrs	r3, r2
 8001692:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 8001694:	0019      	movs	r1, r3
 8001696:	0010      	movs	r0, r2
 8001698:	f7ff fc32 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_ADC_ConfigChannel+0x368>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4945      	ldr	r1, [pc, #276]	; (80017b8 <HAL_ADC_ConfigChannel+0x36c>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd38 	bl	8000118 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	0013      	movs	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016b6:	e002      	b.n	80016be <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f9      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016c4:	e08e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a3c      	ldr	r2, [pc, #240]	; (80017bc <HAL_ADC_ConfigChannel+0x370>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d10e      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	045b      	lsls	r3, r3, #17
 80016d6:	4013      	ands	r3, r2
 80016d8:	d109      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	0452      	lsls	r2, r2, #17
 80016e0:	4313      	orrs	r3, r2
 80016e2:	4a32      	ldr	r2, [pc, #200]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 80016e4:	0019      	movs	r1, r3
 80016e6:	0010      	movs	r0, r2
 80016e8:	f7ff fc0a 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
 80016ec:	e07a      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <HAL_ADC_ConfigChannel+0x374>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d000      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x2ae>
 80016f8:	e074      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	03db      	lsls	r3, r3, #15
 8001700:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001702:	d000      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x2ba>
 8001704:	e06e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	03d2      	lsls	r2, r2, #15
 800170c:	4313      	orrs	r3, r2
 800170e:	4a27      	ldr	r2, [pc, #156]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 8001710:	0019      	movs	r1, r3
 8001712:	0010      	movs	r0, r2
 8001714:	f7ff fbf4 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
 8001718:	e064      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	429a      	cmp	r2, r3
 8001724:	d004      	beq.n	8001730 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_ADC_ConfigChannel+0x35c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d107      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0019      	movs	r1, r3
 800173a:	0010      	movs	r0, r2
 800173c:	f7ff fc66 	bl	800100c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	da4d      	bge.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff fbec 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_ADC_ConfigChannel+0x364>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_ADC_ConfigChannel+0x378>)
 8001762:	4013      	ands	r3, r2
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7ff fbc9 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
 800176e:	e039      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <HAL_ADC_ConfigChannel+0x370>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d108      	bne.n	800178c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_ADC_ConfigChannel+0x37c>)
 800177e:	4013      	ands	r3, r2
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f7ff fbbb 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
 800178a:	e02b      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_ADC_ConfigChannel+0x374>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d126      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_ADC_ConfigChannel+0x380>)
 800179a:	4013      	ands	r3, r2
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_ADC_ConfigChannel+0x360>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f7ff fbad 	bl	8000f00 <LL_ADC_SetCommonPathInternalCh>
 80017a6:	e01d      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x398>
 80017a8:	80000004 	.word	0x80000004
 80017ac:	40012708 	.word	0x40012708
 80017b0:	b0001000 	.word	0xb0001000
 80017b4:	20000000 	.word	0x20000000
 80017b8:	00030d40 	.word	0x00030d40
 80017bc:	b8004000 	.word	0xb8004000
 80017c0:	b4002000 	.word	0xb4002000
 80017c4:	ff7fffff 	.word	0xff7fffff
 80017c8:	feffffff 	.word	0xfeffffff
 80017cc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	2220      	movs	r2, #32
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017dc:	2317      	movs	r3, #23
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2254      	movs	r2, #84	; 0x54
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017ec:	2317      	movs	r3, #23
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b006      	add	sp, #24
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b7f      	cmp	r3, #127	; 0x7f
 800180e:	d809      	bhi.n	8001824 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	001a      	movs	r2, r3
 8001816:	231f      	movs	r3, #31
 8001818:	401a      	ands	r2, r3
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_EnableIRQ+0x30>)
 800181c:	2101      	movs	r1, #1
 800181e:	4091      	lsls	r1, r2
 8001820:	000a      	movs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b7f      	cmp	r3, #127	; 0x7f
 8001844:	d828      	bhi.n	8001898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	589b      	ldr	r3, [r3, r2]
 8001856:	1dfa      	adds	r2, r7, #7
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0011      	movs	r1, r2
 800185c:	2203      	movs	r2, #3
 800185e:	400a      	ands	r2, r1
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	21ff      	movs	r1, #255	; 0xff
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	401a      	ands	r2, r3
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	2303      	movs	r3, #3
 800187e:	4003      	ands	r3, r0
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	481f      	ldr	r0, [pc, #124]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	430a      	orrs	r2, r1
 8001890:	33c0      	adds	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001896:	e031      	b.n	80018fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0019      	movs	r1, r3
 80018a0:	230f      	movs	r3, #15
 80018a2:	400b      	ands	r3, r1
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3306      	adds	r3, #6
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	; 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <__NVIC_SetPriority+0xd8>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	230f      	movs	r3, #15
 80018ea:	4023      	ands	r3, r4
 80018ec:	3b08      	subs	r3, #8
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	430a      	orrs	r2, r1
 80018f2:	3306      	adds	r3, #6
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	18c3      	adds	r3, r0, r3
 80018f8:	3304      	adds	r3, #4
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b003      	add	sp, #12
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	210f      	movs	r1, #15
 8001918:	187b      	adds	r3, r7, r1
 800191a:	1c02      	adds	r2, r0, #0
 800191c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	187b      	adds	r3, r7, r1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff81 	bl	8001830 <__NVIC_SetPriority>
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	0002      	movs	r2, r0
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff57 	bl	80017fc <__NVIC_EnableIRQ>
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e091      	b.n	8001a8e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	001a      	movs	r2, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_DMA_Init+0x140>)
 8001972:	429a      	cmp	r2, r3
 8001974:	d810      	bhi.n	8001998 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_DMA_Init+0x144>)
 800197c:	4694      	mov	ip, r2
 800197e:	4463      	add	r3, ip
 8001980:	2114      	movs	r1, #20
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fbc8 	bl	8000118 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	009a      	lsls	r2, r3, #2
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <HAL_DMA_Init+0x148>)
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
 8001996:	e00f      	b.n	80019b8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <HAL_DMA_Init+0x14c>)
 800199e:	4694      	mov	ip, r2
 80019a0:	4463      	add	r3, ip
 80019a2:	2114      	movs	r1, #20
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe fbb7 	bl	8000118 <__udivsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	009a      	lsls	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_DMA_Init+0x150>)
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2225      	movs	r2, #37	; 0x25
 80019bc:	2102      	movs	r1, #2
 80019be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4938      	ldr	r1, [pc, #224]	; (8001aac <HAL_DMA_Init+0x154>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 f915 	bl	8001c38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	01db      	lsls	r3, r3, #7
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d102      	bne.n	8001a20 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	217f      	movs	r1, #127	; 0x7f
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d011      	beq.n	8001a64 <HAL_DMA_Init+0x10c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d80d      	bhi.n	8001a64 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 f93e 	bl	8001ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	e008      	b.n	8001a76 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2225      	movs	r2, #37	; 0x25
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40020407 	.word	0x40020407
 8001a9c:	bffdfff8 	.word	0xbffdfff8
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	bffdfbf8 	.word	0xbffdfbf8
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	ffff800f 	.word	0xffff800f

08001ab0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	221c      	movs	r2, #28
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d026      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2220      	movs	r2, #32
 8001aec:	4013      	ands	r3, r2
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2104      	movs	r1, #4
 8001afc:	438a      	bics	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	221c      	movs	r2, #28
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4091      	lsls	r1, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x6e>
 8001b1c:	e080      	b.n	8001c20 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	0010      	movs	r0, r2
 8001b26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b28:	e07a      	b.n	8001c20 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	221c      	movs	r2, #28
 8001b30:	4013      	ands	r3, r2
 8001b32:	2202      	movs	r2, #2
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d03c      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x108>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d038      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d10b      	bne.n	8001b6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2225      	movs	r2, #37	; 0x25
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_DMA_IRQHandler+0x17c>)
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d909      	bls.n	8001b8a <HAL_DMA_IRQHandler+0xda>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	221c      	movs	r2, #28
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_DMA_IRQHandler+0x180>)
 8001b80:	2102      	movs	r1, #2
 8001b82:	4091      	lsls	r1, r2
 8001b84:	000a      	movs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	e008      	b.n	8001b9c <HAL_DMA_IRQHandler+0xec>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	221c      	movs	r2, #28
 8001b90:	401a      	ands	r2, r3
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_DMA_IRQHandler+0x184>)
 8001b94:	2102      	movs	r1, #2
 8001b96:	4091      	lsls	r1, r2
 8001b98:	000a      	movs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d039      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001bb6:	e033      	b.n	8001c20 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	221c      	movs	r2, #28
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d02a      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x172>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d026      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	210e      	movs	r1, #14
 8001be0:	438a      	bics	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	221c      	movs	r2, #28
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4091      	lsls	r1, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2225      	movs	r2, #37	; 0x25
 8001c02:	2101      	movs	r1, #1
 8001c04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2224      	movs	r2, #36	; 0x24
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46c0      	nop			; (mov r8, r8)
}
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40020080 	.word	0x40020080
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020000 	.word	0x40020000

08001c38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	001a      	movs	r2, r3
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d814      	bhi.n	8001c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001c56:	189a      	adds	r2, r3, r2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	001a      	movs	r2, r3
 8001c62:	23ff      	movs	r3, #255	; 0xff
 8001c64:	4013      	ands	r3, r2
 8001c66:	3b08      	subs	r3, #8
 8001c68:	2114      	movs	r1, #20
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fa54 	bl	8000118 <__udivsi3>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e014      	b.n	8001ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001c80:	189a      	adds	r2, r3, r2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	4013      	ands	r3, r2
 8001c90:	3b08      	subs	r3, #8
 8001c92:	2114      	movs	r1, #20
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7fe fa3f 	bl	8000118 <__udivsi3>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	221f      	movs	r2, #31
 8001caa:	4013      	ands	r3, r2
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020407 	.word	0x40020407
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	4002081c 	.word	0x4002081c
 8001cc8:	40020880 	.word	0x40020880

08001ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	227f      	movs	r2, #127	; 0x7f
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ce2:	4694      	mov	ip, r2
 8001ce4:	4463      	add	r3, ip
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	001a      	movs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	1000823f 	.word	0x1000823f
 8001d10:	40020940 	.word	0x40020940

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e14d      	b.n	8001fc0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4091      	lsls	r1, r2
 8001d2e:	000a      	movs	r2, r1
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d100      	bne.n	8001d3c <HAL_GPIO_Init+0x28>
 8001d3a:	e13e      	b.n	8001fba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x40>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	43da      	mvns	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	2201      	movs	r2, #1
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	58d3      	ldr	r3, [r2, r3]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4013      	ands	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2107      	movs	r1, #7
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	401a      	ands	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d100      	bne.n	8001e88 <HAL_GPIO_Init+0x174>
 8001e86:	e098      	b.n	8001fba <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e88:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3318      	adds	r3, #24
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	589b      	ldr	r3, [r3, r2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	23a0      	movs	r3, #160	; 0xa0
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x1d6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x1d2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x1ce>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x1ca>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a45      	ldr	r2, [pc, #276]	; (8001fe8 <HAL_GPIO_Init+0x2d4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x1c6>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001eea:	2300      	movs	r3, #0
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	2103      	movs	r1, #3
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	00d2      	lsls	r2, r2, #3
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001efc:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3318      	adds	r3, #24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	035b      	lsls	r3, r3, #13
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f60:	2384      	movs	r3, #132	; 0x84
 8001f62:	58d3      	ldr	r3, [r2, r3]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f84:	4914      	ldr	r1, [pc, #80]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f86:	2284      	movs	r2, #132	; 0x84
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	58d3      	ldr	r3, [r2, r3]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43da      	mvns	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb2:	4909      	ldr	r1, [pc, #36]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	1e13      	subs	r3, r2, #0
 8001fca:	d000      	beq.n	8001fce <HAL_GPIO_Init+0x2ba>
 8001fcc:	e6aa      	b.n	8001d24 <HAL_GPIO_Init+0x10>
  }
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b006      	add	sp, #24
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	50000800 	.word	0x50000800
 8001fe4:	50000c00 	.word	0x50000c00
 8001fe8:	50001000 	.word	0x50001000

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	0008      	movs	r0, r1
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	1cbb      	adds	r3, r7, #2
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	1c7b      	adds	r3, r7, #1
 8002000:	1c0a      	adds	r2, r1, #0
 8002002:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002004:	1c7b      	adds	r3, r7, #1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800200c:	1cbb      	adds	r3, r7, #2
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002016:	1cbb      	adds	r3, r7, #2
 8002018:	881a      	ldrh	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d11f      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	0013      	movs	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	189b      	adds	r3, r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4912      	ldr	r1, [pc, #72]	; (80020a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe f85c 	bl	8000118 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002066:	e008      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3b01      	subs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e001      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e009      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	401a      	ands	r2, r3
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	429a      	cmp	r2, r3
 800208a:	d0ed      	beq.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	40007000 	.word	0x40007000
 800209c:	fffff9ff 	.word	0xfffff9ff
 80020a0:	20000000 	.word	0x20000000
 80020a4:	000f4240 	.word	0x000f4240

080020a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	23e0      	movs	r3, #224	; 0xe0
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	4013      	ands	r3, r2
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f000 fb50 	bl	8002774 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_RCC_OscConfig+0x20>
 80020de:	e07c      	b.n	80021da <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e0:	4bc3      	ldr	r3, [pc, #780]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2238      	movs	r2, #56	; 0x38
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ea:	4bc1      	ldr	r3, [pc, #772]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2203      	movs	r2, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x40>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d002      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4bba      	ldr	r3, [pc, #744]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d062      	beq.n	80021d8 <HAL_RCC_OscConfig+0x118>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e32a      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	429a      	cmp	r2, r3
 8002128:	d107      	bne.n	800213a <HAL_RCC_OscConfig+0x7a>
 800212a:	4bb1      	ldr	r3, [pc, #708]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4bb0      	ldr	r3, [pc, #704]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0249      	lsls	r1, r1, #9
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e020      	b.n	800217c <HAL_RCC_OscConfig+0xbc>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	23a0      	movs	r3, #160	; 0xa0
 8002140:	02db      	lsls	r3, r3, #11
 8002142:	429a      	cmp	r2, r3
 8002144:	d10e      	bne.n	8002164 <HAL_RCC_OscConfig+0xa4>
 8002146:	4baa      	ldr	r3, [pc, #680]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4ba9      	ldr	r3, [pc, #676]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	02c9      	lsls	r1, r1, #11
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4ba6      	ldr	r3, [pc, #664]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4ba5      	ldr	r3, [pc, #660]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	0249      	lsls	r1, r1, #9
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002164:	4ba2      	ldr	r3, [pc, #648]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4ba1      	ldr	r3, [pc, #644]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800216a:	49a2      	ldr	r1, [pc, #648]	; (80023f4 <HAL_RCC_OscConfig+0x334>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b9f      	ldr	r3, [pc, #636]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b9e      	ldr	r3, [pc, #632]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002176:	49a0      	ldr	r1, [pc, #640]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe feb2 	bl	8000eec <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218e:	f7fe fead 	bl	8000eec <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	; 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e2e9      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a0:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0xce>
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe fe9d 	bl	8000eec <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fe98 	bl	8000eec <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e2d4      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0xf8>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x126>
 80021e4:	e099      	b.n	800231a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4b82      	ldr	r3, [pc, #520]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f0:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2203      	movs	r2, #3
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x146>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d002      	beq.n	800220c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d135      	bne.n	8002278 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x164>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e2a7      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a74      	ldr	r2, [pc, #464]	; (80023fc <HAL_RCC_OscConfig+0x33c>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	021a      	lsls	r2, r3, #8
 8002234:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d112      	bne.n	8002266 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x340>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002254:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0adb      	lsrs	r3, r3, #11
 800225a:	2207      	movs	r2, #7
 800225c:	4013      	ands	r3, r2
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x344>)
 8002260:	40da      	lsrs	r2, r3
 8002262:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_RCC_OscConfig+0x348>)
 8002264:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002266:	4b69      	ldr	r3, [pc, #420]	; (800240c <HAL_RCC_OscConfig+0x34c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe fd38 	bl	8000ce0 <HAL_InitTick>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d051      	beq.n	8002318 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e27d      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d030      	beq.n	80022e2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002280:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_RCC_OscConfig+0x340>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0049      	lsls	r1, r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fe23 	bl	8000eec <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7fe fe1e 	bl	8000eec <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e25a      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x33c>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	e01b      	b.n	800231a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80022e8:	4949      	ldr	r1, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0x350>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fdfd 	bl	8000eec <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe fdf8 	bl	8000eec <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e234      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4013      	ands	r3, r2
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x238>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002318:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2208      	movs	r2, #8
 8002320:	4013      	ands	r3, r2
 8002322:	d047      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2238      	movs	r2, #56	; 0x38
 800232a:	4013      	ands	r3, r2
 800232c:	2b18      	cmp	r3, #24
 800232e:	d10a      	bne.n	8002346 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002330:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d03c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2f4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d138      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e216      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002354:	2101      	movs	r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fdc7 	bl	8000eec <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fdc2 	bl	8000eec <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1fe      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d0f1      	beq.n	8002364 <HAL_RCC_OscConfig+0x2a4>
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 8002388:	2101      	movs	r1, #1
 800238a:	438a      	bics	r2, r1
 800238c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fdad 	bl	8000eec <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe fda8 	bl	8000eec <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1e4      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d1f1      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d100      	bne.n	80023c0 <HAL_RCC_OscConfig+0x300>
 80023be:	e0c7      	b.n	8002550 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c0:	231f      	movs	r3, #31
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2238      	movs	r2, #56	; 0x38
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d11f      	bne.n	8002414 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x330>)
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x320>
 80023de:	e0b7      	b.n	8002550 <HAL_RCC_OscConfig+0x490>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d000      	beq.n	80023ea <HAL_RCC_OscConfig+0x32a>
 80023e8:	e0b2      	b.n	8002550 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1c2      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000
 80023f4:	fffeffff 	.word	0xfffeffff
 80023f8:	fffbffff 	.word	0xfffbffff
 80023fc:	ffff80ff 	.word	0xffff80ff
 8002400:	ffffc7ff 	.word	0xffffc7ff
 8002404:	00f42400 	.word	0x00f42400
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004
 8002410:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002414:	4bb5      	ldr	r3, [pc, #724]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4013      	ands	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x364>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x366>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d011      	beq.n	800244e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4bb0      	ldr	r3, [pc, #704]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800242c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242e:	4baf      	ldr	r3, [pc, #700]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0549      	lsls	r1, r1, #21
 8002434:	430a      	orrs	r2, r1
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
 8002438:	4bac      	ldr	r3, [pc, #688]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800243a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	055b      	lsls	r3, r3, #21
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4ba8      	ldr	r3, [pc, #672]	; (80026f0 <HAL_RCC_OscConfig+0x630>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d11a      	bne.n	8002490 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245a:	4ba5      	ldr	r3, [pc, #660]	; (80026f0 <HAL_RCC_OscConfig+0x630>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4ba4      	ldr	r3, [pc, #656]	; (80026f0 <HAL_RCC_OscConfig+0x630>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0049      	lsls	r1, r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd40 	bl	8000eec <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe fd3b 	bl	8000eec <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e177      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	4b9a      	ldr	r3, [pc, #616]	; (80026f0 <HAL_RCC_OscConfig+0x630>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3e6>
 8002498:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800249a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800249c:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800249e:	2101      	movs	r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x420>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x408>
 80024ae:	4b8f      	ldr	r3, [pc, #572]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024b2:	4b8e      	ldr	r3, [pc, #568]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024b4:	2104      	movs	r1, #4
 80024b6:	430a      	orrs	r2, r1
 80024b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024ba:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0x420>
 80024c8:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024cc:	4b87      	ldr	r3, [pc, #540]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	438a      	bics	r2, r1
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024d4:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d8:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80024da:	2104      	movs	r1, #4
 80024dc:	438a      	bics	r2, r1
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d014      	beq.n	8002512 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fd00 	bl	8000eec <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f0:	e009      	b.n	8002506 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe fcfb 	bl	8000eec <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a7d      	ldr	r2, [pc, #500]	; (80026f4 <HAL_RCC_OscConfig+0x634>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e136      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	4b79      	ldr	r3, [pc, #484]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x432>
 8002510:	e013      	b.n	800253a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fceb 	bl	8000eec <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251a:	e009      	b.n	8002530 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fce6 	bl	8000eec <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	4a73      	ldr	r2, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x634>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e121      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800254a:	496b      	ldr	r1, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x638>)
 800254c:	400a      	ands	r2, r1
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2220      	movs	r2, #32
 8002556:	4013      	ands	r3, r2
 8002558:	d039      	beq.n	80025ce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01b      	beq.n	800259a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	03c9      	lsls	r1, r1, #15
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fcbc 	bl	8000eec <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257a:	f7fe fcb7 	bl	8000eec <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0f3      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	4013      	ands	r3, r2
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x4ba>
 8002598:	e019      	b.n	80025ce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025a0:	4956      	ldr	r1, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x63c>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fca1 	bl	8000eec <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025b0:	f7fe fc9c 	bl	8000eec <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0d8      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	4013      	ands	r3, r2
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d100      	bne.n	80025d8 <HAL_RCC_OscConfig+0x518>
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2238      	movs	r2, #56	; 0x38
 80025de:	4013      	ands	r3, r2
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d100      	bne.n	80025e6 <HAL_RCC_OscConfig+0x526>
 80025e4:	e07b      	b.n	80026de <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d156      	bne.n	800269c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80025f4:	4942      	ldr	r1, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0x640>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fc77 	bl	8000eec <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fc72 	bl	8000eec <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0ae      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	049b      	lsls	r3, r3, #18
 800261e:	4013      	ands	r3, r2
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a37      	ldr	r2, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x644>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	431a      	orrs	r2, r3
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002652:	430a      	orrs	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0449      	lsls	r1, r1, #17
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0549      	lsls	r1, r1, #21
 800266e:	430a      	orrs	r2, r1
 8002670:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fc3b 	bl	8000eec <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fc36 	bl	8000eec <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e072      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	049b      	lsls	r3, r3, #18
 8002696:	4013      	ands	r3, r2
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x5bc>
 800269a:	e06a      	b.n	8002772 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80026a2:	4917      	ldr	r1, [pc, #92]	; (8002700 <HAL_RCC_OscConfig+0x640>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc20 	bl	8000eec <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe fc1b 	bl	8000eec <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e057      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	049b      	lsls	r3, r3, #18
 80026cc:	4013      	ands	r3, r2
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_OscConfig+0x62c>)
 80026d6:	490c      	ldr	r1, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x648>)
 80026d8:	400a      	ands	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	e049      	b.n	8002772 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d112      	bne.n	800270c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e044      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	00001388 	.word	0x00001388
 80026f8:	efffffff 	.word	0xefffffff
 80026fc:	ffbfffff 	.word	0xffbfffff
 8002700:	feffffff 	.word	0xfeffffff
 8002704:	11c1808c 	.word	0x11c1808c
 8002708:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x6bc>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	401a      	ands	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	429a      	cmp	r2, r3
 800271e:	d126      	bne.n	800276e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2270      	movs	r2, #112	; 0x70
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d11f      	bne.n	800276e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	23fe      	movs	r3, #254	; 0xfe
 8002732:	01db      	lsls	r3, r3, #7
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	23f8      	movs	r3, #248	; 0xf8
 8002744:	039b      	lsls	r3, r3, #14
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d10e      	bne.n	800276e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	23e0      	movs	r3, #224	; 0xe0
 8002754:	051b      	lsls	r3, r3, #20
 8002756:	401a      	ands	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	0f5b      	lsrs	r3, r3, #29
 8002764:	075a      	lsls	r2, r3, #29
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b008      	add	sp, #32
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0e9      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2207      	movs	r2, #7
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d91e      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2207      	movs	r2, #7
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	4b70      	ldr	r3, [pc, #448]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fb9a 	bl	8000eec <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fe fb95 	bl	8000eec <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0ca      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2207      	movs	r2, #7
 80027d8:	4013      	ands	r3, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1ee      	bne.n	80027be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
 80027f2:	d006      	beq.n	8002802 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027f4:	4b60      	ldr	r3, [pc, #384]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80027fa:	21e0      	movs	r1, #224	; 0xe0
 80027fc:	01c9      	lsls	r1, r1, #7
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002802:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <HAL_RCC_ClockConfig+0x1fc>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d057      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d12b      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e097      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d107      	bne.n	8002850 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	049b      	lsls	r3, r3, #18
 8002848:	4013      	ands	r3, r2
 800284a:	d11f      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e08b      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4013      	ands	r3, r2
 8002862:	d113      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e07f      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d106      	bne.n	800287e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d108      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e074      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2202      	movs	r2, #2
 8002884:	4013      	ands	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e06d      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2207      	movs	r2, #7
 8002892:	4393      	bics	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fb24 	bl	8000eec <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a8:	e009      	b.n	80028be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7fe fb1f 	bl	8000eec <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a2f      	ldr	r2, [pc, #188]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e054      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2238      	movs	r2, #56	; 0x38
 80028c4:	401a      	ands	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ec      	bne.n	80028aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2207      	movs	r2, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d21e      	bcs.n	800291c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fafc 	bl	8000eec <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f8:	e009      	b.n	800290e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7fe faf7 	bl	8000eec <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e02c      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2207      	movs	r2, #7
 8002914:	4013      	ands	r3, r2
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_RCC_ClockConfig+0x200>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800293a:	f000 f829 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800293e:	0001      	movs	r1, r0
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	220f      	movs	r2, #15
 8002948:	401a      	ands	r2, r3
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x204>)
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	58d3      	ldr	r3, [r2, r3]
 8002950:	221f      	movs	r2, #31
 8002952:	4013      	ands	r3, r2
 8002954:	000a      	movs	r2, r1
 8002956:	40da      	lsrs	r2, r3
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x208>)
 800295a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x20c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fe f9bd 	bl	8000ce0 <HAL_InitTick>
 8002966:	0003      	movs	r3, r0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022000 	.word	0x40022000
 8002974:	00001388 	.word	0x00001388
 8002978:	40021000 	.word	0x40021000
 800297c:	fffff0ff 	.word	0xfffff0ff
 8002980:	ffff8fff 	.word	0xffff8fff
 8002984:	080056ec 	.word	0x080056ec
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2238      	movs	r2, #56	; 0x38
 800299c:	4013      	ands	r3, r2
 800299e:	d10f      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029a0:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0adb      	lsrs	r3, r3, #11
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	4835      	ldr	r0, [pc, #212]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 80029b6:	f7fd fbaf 	bl	8000118 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e05d      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2238      	movs	r2, #56	; 0x38
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x100>)
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2238      	movs	r2, #56	; 0x38
 80029d8:	4013      	ands	r3, r2
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d138      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2203      	movs	r2, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	2207      	movs	r2, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	3301      	adds	r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4824      	ldr	r0, [pc, #144]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a00:	f7fd fb8a 	bl	8000118 <__udivsi3>
 8002a04:	0003      	movs	r3, r0
 8002a06:	0019      	movs	r1, r3
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	227f      	movs	r2, #127	; 0x7f
 8002a10:	4013      	ands	r3, r2
 8002a12:	434b      	muls	r3, r1
 8002a14:	617b      	str	r3, [r7, #20]
        break;
 8002a16:	e00d      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	481c      	ldr	r0, [pc, #112]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a1c:	f7fd fb7c 	bl	8000118 <__udivsi3>
 8002a20:	0003      	movs	r3, r0
 8002a22:	0019      	movs	r1, r3
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	227f      	movs	r2, #127	; 0x7f
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	434b      	muls	r3, r1
 8002a30:	617b      	str	r3, [r7, #20]
        break;
 8002a32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0f5b      	lsrs	r3, r3, #29
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	3301      	adds	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6978      	ldr	r0, [r7, #20]
 8002a46:	f7fd fb67 	bl	8000118 <__udivsi3>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e015      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2238      	movs	r2, #56	; 0x38
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d103      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2238      	movs	r2, #56	; 0x38
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b18      	cmp	r3, #24
 8002a6e:	d103      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a70:	23fa      	movs	r3, #250	; 0xfa
 8002a72:	01db      	lsls	r3, r3, #7
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e001      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a7c:	693b      	ldr	r3, [r7, #16]
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b006      	add	sp, #24
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000000 	.word	0x20000000

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002aac:	f7ff fff2 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab0:	0004      	movs	r4, r0
 8002ab2:	f7ff faf9 	bl	80020a8 <LL_RCC_GetAPB1Prescaler>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	0b1a      	lsrs	r2, r3, #12
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	40dc      	lsrs	r4, r3
 8002ac6:	0023      	movs	r3, r4
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	0800572c 	.word	0x0800572c

08002ad4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_GetClockConfig+0x4c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2207      	movs	r2, #7
 8002aea:	401a      	ands	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_GetClockConfig+0x4c>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	23f0      	movs	r3, #240	; 0xf0
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_RCC_GetClockConfig+0x4c>)
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	23e0      	movs	r3, #224	; 0xe0
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetClockConfig+0x50>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2207      	movs	r2, #7
 8002b12:	401a      	ands	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b30:	2313      	movs	r3, #19
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b38:	2312      	movs	r3, #18
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b4c:	e0ad      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2011      	movs	r0, #17
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	055b      	lsls	r3, r3, #21
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d110      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	0549      	lsls	r1, r1, #21
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	055b      	lsls	r3, r3, #21
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b84:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	0049      	lsls	r1, r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b92:	f7fe f9ab 	bl	8000eec <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe f9a6 	bl	8000eec <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d904      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002baa:	2313      	movs	r3, #19
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2203      	movs	r2, #3
 8002bb0:	701a      	strb	r2, [r3, #0]
        break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0ed      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bc0:	2313      	movs	r3, #19
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d15e      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bce:	23c0      	movs	r3, #192	; 0xc0
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d019      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0249      	lsls	r1, r1, #9
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c04:	491e      	ldr	r1, [pc, #120]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d016      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f968 	bl	8000eec <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c20:	e00c      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe f963 	bl	8000eec <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d904      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c32:	2313      	movs	r3, #19
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2203      	movs	r2, #3
 8002c38:	701a      	strb	r2, [r3, #0]
            break;
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d0ed      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c46:	2313      	movs	r3, #19
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c60:	430a      	orrs	r2, r1
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c64:	e016      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c66:	2312      	movs	r3, #18
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2213      	movs	r2, #19
 8002c6c:	18ba      	adds	r2, r7, r2
 8002c6e:	7812      	ldrb	r2, [r2, #0]
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e00f      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	fffffcff 	.word	0xfffffcff
 8002c80:	fffeffff 	.word	0xfffeffff
 8002c84:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	2312      	movs	r3, #18
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2213      	movs	r2, #19
 8002c8e:	18ba      	adds	r2, r7, r2
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c94:	2311      	movs	r3, #17
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4bb6      	ldr	r3, [pc, #728]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca2:	4bb5      	ldr	r3, [pc, #724]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ca4:	49b5      	ldr	r1, [pc, #724]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4bb0      	ldr	r3, [pc, #704]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4393      	bics	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4bad      	ldr	r3, [pc, #692]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd2:	4ba9      	ldr	r3, [pc, #676]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	4393      	bics	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4ba5      	ldr	r3, [pc, #660]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2204      	movs	r2, #4
 8002cec:	4013      	ands	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf0:	4ba1      	ldr	r3, [pc, #644]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2230      	movs	r2, #48	; 0x30
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b9e      	ldr	r3, [pc, #632]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0e:	4b9a      	ldr	r3, [pc, #616]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	4a9b      	ldr	r2, [pc, #620]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b96      	ldr	r3, [pc, #600]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	015b      	lsls	r3, r3, #5
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002d2e:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	4a94      	ldr	r2, [pc, #592]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d4e:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	4a8d      	ldr	r2, [pc, #564]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5c:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4a86      	ldr	r2, [pc, #536]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8c:	4b7a      	ldr	r3, [pc, #488]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	4a7f      	ldr	r2, [pc, #508]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	4013      	ands	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	01db      	lsls	r3, r3, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dca:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	0899      	lsrs	r1, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd6:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d106      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0249      	lsls	r1, r1, #9
 8002df2:	430a      	orrs	r2, r1
 8002df4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	031b      	lsls	r3, r3, #12
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	4393      	bics	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	039b      	lsls	r3, r3, #14
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d016      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e22:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	4a5c      	ldr	r2, [pc, #368]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e30:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	03db      	lsls	r3, r3, #15
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0449      	lsls	r1, r1, #17
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	03db      	lsls	r3, r3, #15
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d016      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	4a4e      	ldr	r2, [pc, #312]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	045b      	lsls	r3, r3, #17
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	0449      	lsls	r1, r1, #17
 8002e86:	430a      	orrs	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	d014      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eb2:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0249      	lsls	r1, r1, #9
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d014      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	220c      	movs	r2, #12
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	0249      	lsls	r1, r1, #9
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	045b      	lsls	r3, r3, #17
 8002efe:	4013      	ands	r3, r2
 8002f00:	d016      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f12:	430a      	orrs	r2, r1
 8002f14:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d106      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0449      	lsls	r1, r1, #17
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	049b      	lsls	r3, r3, #18
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0449      	lsls	r1, r1, #17
 8002f66:	430a      	orrs	r2, r1
 8002f68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f6a:	2312      	movs	r3, #18
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	efffffff 	.word	0xefffffff
 8002f80:	fffff3ff 	.word	0xfffff3ff
 8002f84:	fffffcff 	.word	0xfffffcff
 8002f88:	fff3ffff 	.word	0xfff3ffff
 8002f8c:	ffcfffff 	.word	0xffcfffff
 8002f90:	ffffcfff 	.word	0xffffcfff
 8002f94:	ffff3fff 	.word	0xffff3fff
 8002f98:	ffbfffff 	.word	0xffbfffff
 8002f9c:	feffffff 	.word	0xfeffffff

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e04a      	b.n	8003048 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	223d      	movs	r2, #61	; 0x3d
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	223c      	movs	r2, #60	; 0x3c
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f841 	bl	8003050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	223d      	movs	r2, #61	; 0x3d
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	f000 f9c7 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2248      	movs	r2, #72	; 0x48
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	223e      	movs	r2, #62	; 0x3e
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223f      	movs	r2, #63	; 0x3f
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2241      	movs	r2, #65	; 0x41
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2242      	movs	r2, #66	; 0x42
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2243      	movs	r2, #67	; 0x43
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2244      	movs	r2, #68	; 0x44
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2245      	movs	r2, #69	; 0x45
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2246      	movs	r2, #70	; 0x46
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2247      	movs	r2, #71	; 0x47
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223d      	movs	r2, #61	; 0x3d
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	223d      	movs	r2, #61	; 0x3d
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d001      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e047      	b.n	8003108 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	223d      	movs	r2, #61	; 0x3d
 800307c:	2102      	movs	r1, #2
 800307e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_TIM_Base_Start_IT+0xb0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d014      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x64>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	05db      	lsls	r3, r3, #23
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d00e      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x64>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_TIM_Base_Start_IT+0xb4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x64>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_TIM_Base_Start_IT+0xb8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x64>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_TIM_Base_Start_IT+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d116      	bne.n	80030f2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_TIM_Base_Start_IT+0xc0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d016      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0xa4>
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d011      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	e008      	b.n	8003104 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e000      	b.n	8003106 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40014000 	.word	0x40014000
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2202      	movs	r2, #2
 8003140:	4013      	ands	r3, r2
 8003142:	d021      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2203      	movs	r2, #3
 8003152:	4252      	negs	r2, r2
 8003154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f8ea 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003170:	e007      	b.n	8003182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f8dd 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f000 f8e9 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2204      	movs	r2, #4
 8003194:	4013      	ands	r3, r2
 8003196:	d01e      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2205      	movs	r2, #5
 800319e:	4252      	negs	r2, r2
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	23c0      	movs	r3, #192	; 0xc0
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f8c3 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 80031be:	e007      	b.n	80031d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f8b6 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f8c2 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2208      	movs	r2, #8
 80031da:	4013      	ands	r3, r2
 80031dc:	d021      	beq.n	8003222 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2208      	movs	r2, #8
 80031e2:	4013      	ands	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2209      	movs	r2, #9
 80031ec:	4252      	negs	r2, r2
 80031ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2203      	movs	r2, #3
 80031fe:	4013      	ands	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f89d 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 800320a:	e007      	b.n	800321c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f890 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 f89c 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2210      	movs	r2, #16
 8003226:	4013      	ands	r3, r2
 8003228:	d022      	beq.n	8003270 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2210      	movs	r2, #16
 800322e:	4013      	ands	r3, r2
 8003230:	d01e      	beq.n	8003270 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2211      	movs	r2, #17
 8003238:	4252      	negs	r2, r2
 800323a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2208      	movs	r2, #8
 8003240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	23c0      	movs	r3, #192	; 0xc0
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f876 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003258:	e007      	b.n	800326a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f869 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 f875 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d00c      	beq.n	8003292 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d008      	beq.n	8003292 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2202      	movs	r2, #2
 8003286:	4252      	negs	r2, r2
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd fc11 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	4013      	ands	r3, r2
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	019b      	lsls	r3, r3, #6
 80032a0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032a2:	d00b      	beq.n	80032bc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	4013      	ands	r3, r2
 80032aa:	d007      	beq.n	80032bc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_TIM_IRQHandler+0x208>)
 80032b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8fc 	bl	80034b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00b      	beq.n	80032de <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	4013      	ands	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_TIM_IRQHandler+0x20c>)
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f8f3 	bl	80034c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	4013      	ands	r3, r2
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	4013      	ands	r3, r2
 80032ec:	d008      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2241      	movs	r2, #65	; 0x41
 80032f4:	4252      	negs	r2, r2
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 f832 	bl	8003364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d00c      	beq.n	8003322 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	4013      	ands	r3, r2
 800330e:	d008      	beq.n	8003322 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	4252      	negs	r2, r2
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f8c1 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	ffffdf7f 	.word	0xffffdf7f
 8003330:	fffffeff 	.word	0xfffffeff

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <TIM_Base_SetConfig+0x110>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00c      	beq.n	80033a6 <TIM_Base_SetConfig+0x32>
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	429a      	cmp	r2, r3
 8003394:	d007      	beq.n	80033a6 <TIM_Base_SetConfig+0x32>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <TIM_Base_SetConfig+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0x32>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a3a      	ldr	r2, [pc, #232]	; (800348c <TIM_Base_SetConfig+0x118>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2270      	movs	r2, #112	; 0x70
 80033aa:	4393      	bics	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a32      	ldr	r2, [pc, #200]	; (8003484 <TIM_Base_SetConfig+0x110>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01c      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <TIM_Base_SetConfig+0x114>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2d      	ldr	r2, [pc, #180]	; (800348c <TIM_Base_SetConfig+0x118>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x86>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0x128>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <TIM_Base_SetConfig+0x12c>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	4393      	bics	r3, r2
 8003412:	001a      	movs	r2, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <TIM_Base_SetConfig+0x110>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00b      	beq.n	8003452 <TIM_Base_SetConfig+0xde>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <TIM_Base_SetConfig+0x120>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0xde>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <TIM_Base_SetConfig+0x124>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0xde>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a13      	ldr	r2, [pc, #76]	; (800349c <TIM_Base_SetConfig+0x128>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d103      	bne.n	800345a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2201      	movs	r2, #1
 8003472:	4393      	bics	r3, r2
 8003474:	001a      	movs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]
  }
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b004      	add	sp, #16
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40002000 	.word	0x40002000
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800
 80034a0:	fffffcff 	.word	0xfffffcff

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e046      	b.n	8003574 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2288      	movs	r2, #136	; 0x88
 80034ea:	589b      	ldr	r3, [r3, r2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2284      	movs	r2, #132	; 0x84
 80034f4:	2100      	movs	r1, #0
 80034f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7fd fb90 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2288      	movs	r2, #136	; 0x88
 8003504:	2124      	movs	r1, #36	; 0x24
 8003506:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fc26 	bl	8003d74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f8cc 	bl	80036c8 <UART_SetConfig>
 8003530:	0003      	movs	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01c      	b.n	8003574 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	490d      	ldr	r1, [pc, #52]	; (800357c <HAL_UART_Init+0xa8>)
 8003546:	400a      	ands	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	212a      	movs	r1, #42	; 0x2a
 8003556:	438a      	bics	r2, r1
 8003558:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fcb5 	bl	8003edc <UART_CheckIdleState>
 8003572:	0003      	movs	r3, r0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}
 800357c:	ffffb7ff 	.word	0xffffb7ff

08003580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	1dbb      	adds	r3, r7, #6
 800358e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2288      	movs	r2, #136	; 0x88
 8003594:	589b      	ldr	r3, [r3, r2]
 8003596:	2b20      	cmp	r3, #32
 8003598:	d000      	beq.n	800359c <HAL_UART_Transmit+0x1c>
 800359a:	e090      	b.n	80036be <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_UART_Transmit+0x2a>
 80035a2:	1dbb      	adds	r3, r7, #6
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e088      	b.n	80036c0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	015b      	lsls	r3, r3, #5
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d109      	bne.n	80035ce <HAL_UART_Transmit+0x4e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	d001      	beq.n	80035ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e078      	b.n	80036c0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2290      	movs	r2, #144	; 0x90
 80035d2:	2100      	movs	r1, #0
 80035d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2288      	movs	r2, #136	; 0x88
 80035da:	2121      	movs	r1, #33	; 0x21
 80035dc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035de:	f7fd fc85 	bl	8000eec <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1dba      	adds	r2, r7, #6
 80035ea:	2154      	movs	r1, #84	; 0x54
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1dba      	adds	r2, r7, #6
 80035f4:	2156      	movs	r1, #86	; 0x56
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	015b      	lsls	r3, r3, #5
 8003602:	429a      	cmp	r2, r3
 8003604:	d108      	bne.n	8003618 <HAL_UART_Transmit+0x98>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e003      	b.n	8003620 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003620:	e030      	b.n	8003684 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	0013      	movs	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	f000 fcfe 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d005      	beq.n	8003644 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2288      	movs	r2, #136	; 0x88
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e03d      	b.n	80036c0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	001a      	movs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	05d2      	lsls	r2, r2, #23
 8003656:	0dd2      	lsrs	r2, r2, #23
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	3302      	adds	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e007      	b.n	8003672 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3301      	adds	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2256      	movs	r2, #86	; 0x56
 8003676:	5a9b      	ldrh	r3, [r3, r2]
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b299      	uxth	r1, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2256      	movs	r2, #86	; 0x56
 8003682:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2256      	movs	r2, #86	; 0x56
 8003688:	5a9b      	ldrh	r3, [r3, r2]
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1c8      	bne.n	8003622 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	0013      	movs	r3, r2
 800369a:	2200      	movs	r2, #0
 800369c:	2140      	movs	r1, #64	; 0x40
 800369e:	f000 fcc7 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2288      	movs	r2, #136	; 0x88
 80036aa:	2120      	movs	r1, #32
 80036ac:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e006      	b.n	80036c0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2288      	movs	r2, #136	; 0x88
 80036b6:	2120      	movs	r1, #32
 80036b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b008      	add	sp, #32
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	b090      	sub	sp, #64	; 0x40
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d0:	231a      	movs	r3, #26
 80036d2:	2220      	movs	r2, #32
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4ac1      	ldr	r2, [pc, #772]	; (8003a00 <UART_SetConfig+0x338>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	430b      	orrs	r3, r1
 8003708:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4abc      	ldr	r2, [pc, #752]	; (8003a04 <UART_SetConfig+0x33c>)
 8003712:	4013      	ands	r3, r2
 8003714:	0018      	movs	r0, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	0003      	movs	r3, r0
 8003720:	430b      	orrs	r3, r1
 8003722:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4ab6      	ldr	r2, [pc, #728]	; (8003a08 <UART_SetConfig+0x340>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <UART_SetConfig+0x80>
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4ab4      	ldr	r2, [pc, #720]	; (8003a0c <UART_SetConfig+0x344>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003744:	4313      	orrs	r3, r2
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4ab0      	ldr	r2, [pc, #704]	; (8003a10 <UART_SetConfig+0x348>)
 8003750:	4013      	ands	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375a:	430b      	orrs	r3, r1
 800375c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	220f      	movs	r2, #15
 8003766:	4393      	bics	r3, r2
 8003768:	0018      	movs	r0, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	0003      	movs	r3, r0
 8003774:	430b      	orrs	r3, r1
 8003776:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4aa5      	ldr	r2, [pc, #660]	; (8003a14 <UART_SetConfig+0x34c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d131      	bne.n	80037e6 <UART_SetConfig+0x11e>
 8003782:	4ba5      	ldr	r3, [pc, #660]	; (8003a18 <UART_SetConfig+0x350>)
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	2203      	movs	r2, #3
 8003788:	4013      	ands	r3, r2
 800378a:	2b03      	cmp	r3, #3
 800378c:	d01d      	beq.n	80037ca <UART_SetConfig+0x102>
 800378e:	d823      	bhi.n	80037d8 <UART_SetConfig+0x110>
 8003790:	2b02      	cmp	r3, #2
 8003792:	d00c      	beq.n	80037ae <UART_SetConfig+0xe6>
 8003794:	d820      	bhi.n	80037d8 <UART_SetConfig+0x110>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0xd8>
 800379a:	2b01      	cmp	r3, #1
 800379c:	d00e      	beq.n	80037bc <UART_SetConfig+0xf4>
 800379e:	e01b      	b.n	80037d8 <UART_SetConfig+0x110>
 80037a0:	231b      	movs	r3, #27
 80037a2:	2220      	movs	r2, #32
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e154      	b.n	8003a58 <UART_SetConfig+0x390>
 80037ae:	231b      	movs	r3, #27
 80037b0:	2220      	movs	r2, #32
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	19db      	adds	r3, r3, r7
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e14d      	b.n	8003a58 <UART_SetConfig+0x390>
 80037bc:	231b      	movs	r3, #27
 80037be:	2220      	movs	r2, #32
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	19db      	adds	r3, r3, r7
 80037c4:	2204      	movs	r2, #4
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e146      	b.n	8003a58 <UART_SetConfig+0x390>
 80037ca:	231b      	movs	r3, #27
 80037cc:	2220      	movs	r2, #32
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	19db      	adds	r3, r3, r7
 80037d2:	2208      	movs	r2, #8
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e13f      	b.n	8003a58 <UART_SetConfig+0x390>
 80037d8:	231b      	movs	r3, #27
 80037da:	2220      	movs	r2, #32
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	2210      	movs	r2, #16
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e138      	b.n	8003a58 <UART_SetConfig+0x390>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a8c      	ldr	r2, [pc, #560]	; (8003a1c <UART_SetConfig+0x354>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d131      	bne.n	8003854 <UART_SetConfig+0x18c>
 80037f0:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <UART_SetConfig+0x350>)
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	220c      	movs	r2, #12
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d01d      	beq.n	8003838 <UART_SetConfig+0x170>
 80037fc:	d823      	bhi.n	8003846 <UART_SetConfig+0x17e>
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d00c      	beq.n	800381c <UART_SetConfig+0x154>
 8003802:	d820      	bhi.n	8003846 <UART_SetConfig+0x17e>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <UART_SetConfig+0x146>
 8003808:	2b04      	cmp	r3, #4
 800380a:	d00e      	beq.n	800382a <UART_SetConfig+0x162>
 800380c:	e01b      	b.n	8003846 <UART_SetConfig+0x17e>
 800380e:	231b      	movs	r3, #27
 8003810:	2220      	movs	r2, #32
 8003812:	189b      	adds	r3, r3, r2
 8003814:	19db      	adds	r3, r3, r7
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e11d      	b.n	8003a58 <UART_SetConfig+0x390>
 800381c:	231b      	movs	r3, #27
 800381e:	2220      	movs	r2, #32
 8003820:	189b      	adds	r3, r3, r2
 8003822:	19db      	adds	r3, r3, r7
 8003824:	2202      	movs	r2, #2
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e116      	b.n	8003a58 <UART_SetConfig+0x390>
 800382a:	231b      	movs	r3, #27
 800382c:	2220      	movs	r2, #32
 800382e:	189b      	adds	r3, r3, r2
 8003830:	19db      	adds	r3, r3, r7
 8003832:	2204      	movs	r2, #4
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e10f      	b.n	8003a58 <UART_SetConfig+0x390>
 8003838:	231b      	movs	r3, #27
 800383a:	2220      	movs	r2, #32
 800383c:	189b      	adds	r3, r3, r2
 800383e:	19db      	adds	r3, r3, r7
 8003840:	2208      	movs	r2, #8
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e108      	b.n	8003a58 <UART_SetConfig+0x390>
 8003846:	231b      	movs	r3, #27
 8003848:	2220      	movs	r2, #32
 800384a:	189b      	adds	r3, r3, r2
 800384c:	19db      	adds	r3, r3, r7
 800384e:	2210      	movs	r2, #16
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e101      	b.n	8003a58 <UART_SetConfig+0x390>
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	; (8003a20 <UART_SetConfig+0x358>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d131      	bne.n	80038c2 <UART_SetConfig+0x1fa>
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <UART_SetConfig+0x350>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	2230      	movs	r2, #48	; 0x30
 8003864:	4013      	ands	r3, r2
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d01d      	beq.n	80038a6 <UART_SetConfig+0x1de>
 800386a:	d823      	bhi.n	80038b4 <UART_SetConfig+0x1ec>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d00c      	beq.n	800388a <UART_SetConfig+0x1c2>
 8003870:	d820      	bhi.n	80038b4 <UART_SetConfig+0x1ec>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <UART_SetConfig+0x1b4>
 8003876:	2b10      	cmp	r3, #16
 8003878:	d00e      	beq.n	8003898 <UART_SetConfig+0x1d0>
 800387a:	e01b      	b.n	80038b4 <UART_SetConfig+0x1ec>
 800387c:	231b      	movs	r3, #27
 800387e:	2220      	movs	r2, #32
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e0e6      	b.n	8003a58 <UART_SetConfig+0x390>
 800388a:	231b      	movs	r3, #27
 800388c:	2220      	movs	r2, #32
 800388e:	189b      	adds	r3, r3, r2
 8003890:	19db      	adds	r3, r3, r7
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e0df      	b.n	8003a58 <UART_SetConfig+0x390>
 8003898:	231b      	movs	r3, #27
 800389a:	2220      	movs	r2, #32
 800389c:	189b      	adds	r3, r3, r2
 800389e:	19db      	adds	r3, r3, r7
 80038a0:	2204      	movs	r2, #4
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e0d8      	b.n	8003a58 <UART_SetConfig+0x390>
 80038a6:	231b      	movs	r3, #27
 80038a8:	2220      	movs	r2, #32
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	19db      	adds	r3, r3, r7
 80038ae:	2208      	movs	r2, #8
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e0d1      	b.n	8003a58 <UART_SetConfig+0x390>
 80038b4:	231b      	movs	r3, #27
 80038b6:	2220      	movs	r2, #32
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	2210      	movs	r2, #16
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e0ca      	b.n	8003a58 <UART_SetConfig+0x390>
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <UART_SetConfig+0x35c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d106      	bne.n	80038da <UART_SetConfig+0x212>
 80038cc:	231b      	movs	r3, #27
 80038ce:	2220      	movs	r2, #32
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	19db      	adds	r3, r3, r7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e0be      	b.n	8003a58 <UART_SetConfig+0x390>
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <UART_SetConfig+0x360>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d106      	bne.n	80038f2 <UART_SetConfig+0x22a>
 80038e4:	231b      	movs	r3, #27
 80038e6:	2220      	movs	r2, #32
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e0b2      	b.n	8003a58 <UART_SetConfig+0x390>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <UART_SetConfig+0x364>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d106      	bne.n	800390a <UART_SetConfig+0x242>
 80038fc:	231b      	movs	r3, #27
 80038fe:	2220      	movs	r2, #32
 8003900:	189b      	adds	r3, r3, r2
 8003902:	19db      	adds	r3, r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e0a6      	b.n	8003a58 <UART_SetConfig+0x390>
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <UART_SetConfig+0x340>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d13e      	bne.n	8003992 <UART_SetConfig+0x2ca>
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <UART_SetConfig+0x350>)
 8003916:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003918:	23c0      	movs	r3, #192	; 0xc0
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4013      	ands	r3, r2
 800391e:	22c0      	movs	r2, #192	; 0xc0
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	4293      	cmp	r3, r2
 8003924:	d027      	beq.n	8003976 <UART_SetConfig+0x2ae>
 8003926:	22c0      	movs	r2, #192	; 0xc0
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	4293      	cmp	r3, r2
 800392c:	d82a      	bhi.n	8003984 <UART_SetConfig+0x2bc>
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	4293      	cmp	r3, r2
 8003934:	d011      	beq.n	800395a <UART_SetConfig+0x292>
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	4293      	cmp	r3, r2
 800393c:	d822      	bhi.n	8003984 <UART_SetConfig+0x2bc>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <UART_SetConfig+0x284>
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	00d2      	lsls	r2, r2, #3
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <UART_SetConfig+0x2a0>
 800394a:	e01b      	b.n	8003984 <UART_SetConfig+0x2bc>
 800394c:	231b      	movs	r3, #27
 800394e:	2220      	movs	r2, #32
 8003950:	189b      	adds	r3, r3, r2
 8003952:	19db      	adds	r3, r3, r7
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	e07e      	b.n	8003a58 <UART_SetConfig+0x390>
 800395a:	231b      	movs	r3, #27
 800395c:	2220      	movs	r2, #32
 800395e:	189b      	adds	r3, r3, r2
 8003960:	19db      	adds	r3, r3, r7
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e077      	b.n	8003a58 <UART_SetConfig+0x390>
 8003968:	231b      	movs	r3, #27
 800396a:	2220      	movs	r2, #32
 800396c:	189b      	adds	r3, r3, r2
 800396e:	19db      	adds	r3, r3, r7
 8003970:	2204      	movs	r2, #4
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e070      	b.n	8003a58 <UART_SetConfig+0x390>
 8003976:	231b      	movs	r3, #27
 8003978:	2220      	movs	r2, #32
 800397a:	189b      	adds	r3, r3, r2
 800397c:	19db      	adds	r3, r3, r7
 800397e:	2208      	movs	r2, #8
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e069      	b.n	8003a58 <UART_SetConfig+0x390>
 8003984:	231b      	movs	r3, #27
 8003986:	2220      	movs	r2, #32
 8003988:	189b      	adds	r3, r3, r2
 800398a:	19db      	adds	r3, r3, r7
 800398c:	2210      	movs	r2, #16
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e062      	b.n	8003a58 <UART_SetConfig+0x390>
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <UART_SetConfig+0x344>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d157      	bne.n	8003a4c <UART_SetConfig+0x384>
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <UART_SetConfig+0x350>)
 800399e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a0:	23c0      	movs	r3, #192	; 0xc0
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	22c0      	movs	r2, #192	; 0xc0
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d040      	beq.n	8003a30 <UART_SetConfig+0x368>
 80039ae:	22c0      	movs	r2, #192	; 0xc0
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d843      	bhi.n	8003a3e <UART_SetConfig+0x376>
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d011      	beq.n	80039e2 <UART_SetConfig+0x31a>
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d83b      	bhi.n	8003a3e <UART_SetConfig+0x376>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <UART_SetConfig+0x30c>
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	0052      	lsls	r2, r2, #1
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <UART_SetConfig+0x328>
 80039d2:	e034      	b.n	8003a3e <UART_SetConfig+0x376>
 80039d4:	231b      	movs	r3, #27
 80039d6:	2220      	movs	r2, #32
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e03a      	b.n	8003a58 <UART_SetConfig+0x390>
 80039e2:	231b      	movs	r3, #27
 80039e4:	2220      	movs	r2, #32
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	19db      	adds	r3, r3, r7
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e033      	b.n	8003a58 <UART_SetConfig+0x390>
 80039f0:	231b      	movs	r3, #27
 80039f2:	2220      	movs	r2, #32
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	19db      	adds	r3, r3, r7
 80039f8:	2204      	movs	r2, #4
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e02c      	b.n	8003a58 <UART_SetConfig+0x390>
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	cfff69f3 	.word	0xcfff69f3
 8003a04:	ffffcfff 	.word	0xffffcfff
 8003a08:	40008000 	.word	0x40008000
 8003a0c:	40008400 	.word	0x40008400
 8003a10:	11fff4ff 	.word	0x11fff4ff
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40004800 	.word	0x40004800
 8003a24:	40004c00 	.word	0x40004c00
 8003a28:	40005000 	.word	0x40005000
 8003a2c:	40013c00 	.word	0x40013c00
 8003a30:	231b      	movs	r3, #27
 8003a32:	2220      	movs	r2, #32
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2208      	movs	r2, #8
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e00c      	b.n	8003a58 <UART_SetConfig+0x390>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2210      	movs	r2, #16
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e005      	b.n	8003a58 <UART_SetConfig+0x390>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2210      	movs	r2, #16
 8003a56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4ac1      	ldr	r2, [pc, #772]	; (8003d64 <UART_SetConfig+0x69c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d005      	beq.n	8003a6e <UART_SetConfig+0x3a6>
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4ac0      	ldr	r2, [pc, #768]	; (8003d68 <UART_SetConfig+0x6a0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d000      	beq.n	8003a6e <UART_SetConfig+0x3a6>
 8003a6c:	e093      	b.n	8003b96 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a6e:	231b      	movs	r3, #27
 8003a70:	2220      	movs	r2, #32
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	19db      	adds	r3, r3, r7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d015      	beq.n	8003aa8 <UART_SetConfig+0x3e0>
 8003a7c:	dc18      	bgt.n	8003ab0 <UART_SetConfig+0x3e8>
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d00d      	beq.n	8003a9e <UART_SetConfig+0x3d6>
 8003a82:	dc15      	bgt.n	8003ab0 <UART_SetConfig+0x3e8>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <UART_SetConfig+0x3c6>
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d005      	beq.n	8003a98 <UART_SetConfig+0x3d0>
 8003a8c:	e010      	b.n	8003ab0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8e:	f7ff f80b 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003a92:	0003      	movs	r3, r0
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a96:	e014      	b.n	8003ac2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4bb4      	ldr	r3, [pc, #720]	; (8003d6c <UART_SetConfig+0x6a4>)
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a9c:	e011      	b.n	8003ac2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe ff77 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aa6:	e00c      	b.n	8003ac2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aae:	e008      	b.n	8003ac2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ab4:	231a      	movs	r3, #26
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
        break;
 8003ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d100      	bne.n	8003aca <UART_SetConfig+0x402>
 8003ac8:	e135      	b.n	8003d36 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	4ba8      	ldr	r3, [pc, #672]	; (8003d70 <UART_SetConfig+0x6a8>)
 8003ad0:	0052      	lsls	r2, r2, #1
 8003ad2:	5ad3      	ldrh	r3, [r2, r3]
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ad8:	f7fc fb1e 	bl	8000118 <__udivsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d305      	bcc.n	8003afc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d906      	bls.n	8003b0a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003afc:	231a      	movs	r3, #26
 8003afe:	2220      	movs	r2, #32
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e044      	b.n	8003b94 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b16:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <UART_SetConfig+0x6a8>)
 8003b18:	0052      	lsls	r2, r2, #1
 8003b1a:	5ad3      	ldrh	r3, [r2, r3]
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	69b8      	ldr	r0, [r7, #24]
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	f7fc fc6b 	bl	8000404 <__aeabi_uldivmod>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	000b      	movs	r3, r1
 8003b32:	0e11      	lsrs	r1, r2, #24
 8003b34:	021d      	lsls	r5, r3, #8
 8003b36:	430d      	orrs	r5, r1
 8003b38:	0214      	lsls	r4, r2, #8
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68b8      	ldr	r0, [r7, #8]
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	1900      	adds	r0, r0, r4
 8003b4c:	4169      	adcs	r1, r5
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f7fc fc52 	bl	8000404 <__aeabi_uldivmod>
 8003b60:	0002      	movs	r2, r0
 8003b62:	000b      	movs	r3, r1
 8003b64:	0013      	movs	r3, r2
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d309      	bcc.n	8003b86 <UART_SetConfig+0x4be>
 8003b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	035b      	lsls	r3, r3, #13
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d204      	bcs.n	8003b86 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	e006      	b.n	8003b94 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003b86:	231a      	movs	r3, #26
 8003b88:	2220      	movs	r2, #32
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003b92:	e0d0      	b.n	8003d36 <UART_SetConfig+0x66e>
 8003b94:	e0cf      	b.n	8003d36 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d000      	beq.n	8003ba4 <UART_SetConfig+0x4dc>
 8003ba2:	e070      	b.n	8003c86 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003ba4:	231b      	movs	r3, #27
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d015      	beq.n	8003bde <UART_SetConfig+0x516>
 8003bb2:	dc18      	bgt.n	8003be6 <UART_SetConfig+0x51e>
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d00d      	beq.n	8003bd4 <UART_SetConfig+0x50c>
 8003bb8:	dc15      	bgt.n	8003be6 <UART_SetConfig+0x51e>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <UART_SetConfig+0x4fc>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d005      	beq.n	8003bce <UART_SetConfig+0x506>
 8003bc2:	e010      	b.n	8003be6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7fe ff70 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bcc:	e014      	b.n	8003bf8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <UART_SetConfig+0x6a4>)
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bd2:	e011      	b.n	8003bf8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd4:	f7fe fedc 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bea:	231a      	movs	r3, #26
 8003bec:	2220      	movs	r2, #32
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	19db      	adds	r3, r3, r7
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
        break;
 8003bf6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d100      	bne.n	8003c00 <UART_SetConfig+0x538>
 8003bfe:	e09a      	b.n	8003d36 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c04:	4b5a      	ldr	r3, [pc, #360]	; (8003d70 <UART_SetConfig+0x6a8>)
 8003c06:	0052      	lsls	r2, r2, #1
 8003c08:	5ad3      	ldrh	r3, [r2, r3]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c0e:	f7fc fa83 	bl	8000118 <__udivsi3>
 8003c12:	0003      	movs	r3, r0
 8003c14:	005a      	lsls	r2, r3, #1
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	18d2      	adds	r2, r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0019      	movs	r1, r3
 8003c24:	0010      	movs	r0, r2
 8003c26:	f7fc fa77 	bl	8000118 <__udivsi3>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d921      	bls.n	8003c78 <UART_SetConfig+0x5b0>
 8003c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	025b      	lsls	r3, r3, #9
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d21c      	bcs.n	8003c78 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	200e      	movs	r0, #14
 8003c44:	2420      	movs	r4, #32
 8003c46:	1903      	adds	r3, r0, r4
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2207      	movs	r2, #7
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b299      	uxth	r1, r3
 8003c5c:	1903      	adds	r3, r0, r4
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	1902      	adds	r2, r0, r4
 8003c62:	19d2      	adds	r2, r2, r7
 8003c64:	8812      	ldrh	r2, [r2, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1902      	adds	r2, r0, r4
 8003c70:	19d2      	adds	r2, r2, r7
 8003c72:	8812      	ldrh	r2, [r2, #0]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	e05e      	b.n	8003d36 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003c78:	231a      	movs	r3, #26
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	2201      	movs	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e057      	b.n	8003d36 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c86:	231b      	movs	r3, #27
 8003c88:	2220      	movs	r2, #32
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d015      	beq.n	8003cc0 <UART_SetConfig+0x5f8>
 8003c94:	dc18      	bgt.n	8003cc8 <UART_SetConfig+0x600>
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d00d      	beq.n	8003cb6 <UART_SetConfig+0x5ee>
 8003c9a:	dc15      	bgt.n	8003cc8 <UART_SetConfig+0x600>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0x5de>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0x5e8>
 8003ca4:	e010      	b.n	8003cc8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca6:	f7fe feff 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003caa:	0003      	movs	r3, r0
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cae:	e014      	b.n	8003cda <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <UART_SetConfig+0x6a4>)
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cb4:	e011      	b.n	8003cda <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7fe fe6b 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cbe:	e00c      	b.n	8003cda <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cc6:	e008      	b.n	8003cda <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ccc:	231a      	movs	r3, #26
 8003cce:	2220      	movs	r2, #32
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
        break;
 8003cd8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02a      	beq.n	8003d36 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce4:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <UART_SetConfig+0x6a8>)
 8003ce6:	0052      	lsls	r2, r2, #1
 8003ce8:	5ad3      	ldrh	r3, [r2, r3]
 8003cea:	0019      	movs	r1, r3
 8003cec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cee:	f7fc fa13 	bl	8000118 <__udivsi3>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	18d2      	adds	r2, r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0019      	movs	r1, r3
 8003d04:	0010      	movs	r0, r2
 8003d06:	f7fc fa07 	bl	8000118 <__udivsi3>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2b0f      	cmp	r3, #15
 8003d12:	d90a      	bls.n	8003d2a <UART_SetConfig+0x662>
 8003d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	025b      	lsls	r3, r3, #9
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d205      	bcs.n	8003d2a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	e005      	b.n	8003d36 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2a:	231a      	movs	r3, #26
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	19db      	adds	r3, r3, r7
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	226a      	movs	r2, #106	; 0x6a
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2268      	movs	r2, #104	; 0x68
 8003d42:	2101      	movs	r1, #1
 8003d44:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	2200      	movs	r2, #0
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003d52:	231a      	movs	r3, #26
 8003d54:	2220      	movs	r2, #32
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	781b      	ldrb	r3, [r3, #0]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b010      	add	sp, #64	; 0x40
 8003d62:	bdb0      	pop	{r4, r5, r7, pc}
 8003d64:	40008000 	.word	0x40008000
 8003d68:	40008400 	.word	0x40008400
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	0800574c 	.word	0x0800574c

08003d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	2208      	movs	r2, #8
 8003d82:	4013      	ands	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <UART_AdvFeatureConfig+0x144>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <UART_AdvFeatureConfig+0x148>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <UART_AdvFeatureConfig+0x14c>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2204      	movs	r2, #4
 8003de8:	4013      	ands	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <UART_AdvFeatureConfig+0x150>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	2210      	movs	r2, #16
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <UART_AdvFeatureConfig+0x154>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d00b      	beq.n	8003e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <UART_AdvFeatureConfig+0x158>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <UART_AdvFeatureConfig+0x15c>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	035b      	lsls	r3, r3, #13
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d10b      	bne.n	8003e8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <UART_AdvFeatureConfig+0x160>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <UART_AdvFeatureConfig+0x164>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	ffff7fff 	.word	0xffff7fff
 8003ebc:	fffdffff 	.word	0xfffdffff
 8003ec0:	fffeffff 	.word	0xfffeffff
 8003ec4:	fffbffff 	.word	0xfffbffff
 8003ec8:	ffffefff 	.word	0xffffefff
 8003ecc:	ffffdfff 	.word	0xffffdfff
 8003ed0:	ffefffff 	.word	0xffefffff
 8003ed4:	ff9fffff 	.word	0xff9fffff
 8003ed8:	fff7ffff 	.word	0xfff7ffff

08003edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b092      	sub	sp, #72	; 0x48
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2290      	movs	r2, #144	; 0x90
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eec:	f7fc fffe 	bl	8000eec <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2208      	movs	r2, #8
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d12d      	bne.n	8003f5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	0391      	lsls	r1, r2, #14
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4a47      	ldr	r2, [pc, #284]	; (8004028 <UART_CheckIdleState+0x14c>)
 8003f0c:	9200      	str	r2, [sp, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f88e 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 8003f14:	1e03      	subs	r3, r0, #0
 8003f16:	d022      	beq.n	8003f5e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f18:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f22:	2301      	movs	r3, #1
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	f383 8810 	msr	PRIMASK, r3
}
 8003f48:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2288      	movs	r2, #136	; 0x88
 8003f4e:	2120      	movs	r1, #32
 8003f50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2284      	movs	r2, #132	; 0x84
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e060      	b.n	8004020 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2204      	movs	r2, #4
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d146      	bne.n	8003ffa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	03d1      	lsls	r1, r2, #15
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <UART_CheckIdleState+0x14c>)
 8003f76:	9200      	str	r2, [sp, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f000 f859 	bl	8004030 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d03b      	beq.n	8003ffa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4922      	ldr	r1, [pc, #136]	; (800402c <UART_CheckIdleState+0x150>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	228c      	movs	r2, #140	; 0x8c
 8003fea:	2120      	movs	r1, #32
 8003fec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2284      	movs	r2, #132	; 0x84
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e012      	b.n	8004020 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2288      	movs	r2, #136	; 0x88
 8003ffe:	2120      	movs	r1, #32
 8004000:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	228c      	movs	r2, #140	; 0x8c
 8004006:	2120      	movs	r1, #32
 8004008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2284      	movs	r2, #132	; 0x84
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b010      	add	sp, #64	; 0x40
 8004026:	bd80      	pop	{r7, pc}
 8004028:	01ffffff 	.word	0x01ffffff
 800402c:	fffffedf 	.word	0xfffffedf

08004030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	1dfb      	adds	r3, r7, #7
 800403e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	e051      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3301      	adds	r3, #1
 8004046:	d04e      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004048:	f7fc ff50 	bl	8000eec <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e051      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2204      	movs	r2, #4
 800406a:	4013      	ands	r3, r2
 800406c:	d03b      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d038      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d035      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	2b08      	cmp	r3, #8
 8004086:	d111      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2208      	movs	r2, #8
 800408e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f83c 	bl	8004110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2290      	movs	r2, #144	; 0x90
 800409c:	2108      	movs	r1, #8
 800409e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2284      	movs	r2, #132	; 0x84
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02c      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	401a      	ands	r2, r3
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	429a      	cmp	r2, r3
 80040be:	d112      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f81f 	bl	8004110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2290      	movs	r2, #144	; 0x90
 80040d6:	2120      	movs	r1, #32
 80040d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2284      	movs	r2, #132	; 0x84
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	425a      	negs	r2, r3
 80040f6:	4153      	adcs	r3, r2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	001a      	movs	r2, r3
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d09e      	beq.n	8004042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b004      	add	sp, #16
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004118:	f3ef 8310 	mrs	r3, PRIMASK
 800411c:	617b      	str	r3, [r7, #20]
  return(result);
 800411e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
 8004122:	2301      	movs	r3, #1
 8004124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4926      	ldr	r1, [pc, #152]	; (80041d4 <UART_EndRxTransfer+0xc4>)
 800413a:	400a      	ands	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	623b      	str	r3, [r7, #32]
  return(result);
 8004150:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
 8004154:	2301      	movs	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	491b      	ldr	r1, [pc, #108]	; (80041d8 <UART_EndRxTransfer+0xc8>)
 800416c:	400a      	ands	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d118      	bne.n	80041b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	60bb      	str	r3, [r7, #8]
  return(result);
 800418a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418e:	2301      	movs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2110      	movs	r1, #16
 80041a6:	438a      	bics	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	228c      	movs	r2, #140	; 0x8c
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b00e      	add	sp, #56	; 0x38
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	fffffedf 	.word	0xfffffedf
 80041d8:	effffffe 	.word	0xeffffffe

080041dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2284      	movs	r2, #132	; 0x84
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e027      	b.n	8004242 <HAL_UARTEx_DisableFifoMode+0x66>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2284      	movs	r2, #132	; 0x84
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2288      	movs	r2, #136	; 0x88
 80041fe:	2124      	movs	r1, #36	; 0x24
 8004200:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a0b      	ldr	r2, [pc, #44]	; (800424c <HAL_UARTEx_DisableFifoMode+0x70>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2288      	movs	r2, #136	; 0x88
 8004234:	2120      	movs	r1, #32
 8004236:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2284      	movs	r2, #132	; 0x84
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	dfffffff 	.word	0xdfffffff

08004250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2284      	movs	r2, #132	; 0x84
 800425e:	5c9b      	ldrb	r3, [r3, r2]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e02e      	b.n	80042c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2284      	movs	r2, #132	; 0x84
 800426c:	2101      	movs	r1, #1
 800426e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2288      	movs	r2, #136	; 0x88
 8004274:	2124      	movs	r1, #36	; 0x24
 8004276:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	08d9      	lsrs	r1, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f854 	bl	8004354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2288      	movs	r2, #136	; 0x88
 80042b8:	2120      	movs	r1, #32
 80042ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2284      	movs	r2, #132	; 0x84
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2284      	movs	r2, #132	; 0x84
 80042de:	5c9b      	ldrb	r3, [r3, r2]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e02f      	b.n	8004348 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2284      	movs	r2, #132	; 0x84
 80042ec:	2101      	movs	r1, #1
 80042ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2288      	movs	r2, #136	; 0x88
 80042f4:	2124      	movs	r1, #36	; 0x24
 80042f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2101      	movs	r1, #1
 800430c:	438a      	bics	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f813 	bl	8004354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2288      	movs	r2, #136	; 0x88
 800433a:	2120      	movs	r1, #32
 800433c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2284      	movs	r2, #132	; 0x84
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	f1ffffff 	.word	0xf1ffffff

08004354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	226a      	movs	r2, #106	; 0x6a
 8004368:	2101      	movs	r1, #1
 800436a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2268      	movs	r2, #104	; 0x68
 8004370:	2101      	movs	r1, #1
 8004372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004374:	e043      	b.n	80043fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004376:	260f      	movs	r6, #15
 8004378:	19bb      	adds	r3, r7, r6
 800437a:	2208      	movs	r2, #8
 800437c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800437e:	200e      	movs	r0, #14
 8004380:	183b      	adds	r3, r7, r0
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	0e5b      	lsrs	r3, r3, #25
 800438e:	b2da      	uxtb	r2, r3
 8004390:	240d      	movs	r4, #13
 8004392:	193b      	adds	r3, r7, r4
 8004394:	2107      	movs	r1, #7
 8004396:	400a      	ands	r2, r1
 8004398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	0f5b      	lsrs	r3, r3, #29
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	250c      	movs	r5, #12
 80043a6:	197b      	adds	r3, r7, r5
 80043a8:	2107      	movs	r1, #7
 80043aa:	400a      	ands	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ae:	183b      	adds	r3, r7, r0
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	197a      	adds	r2, r7, r5
 80043b4:	7812      	ldrb	r2, [r2, #0]
 80043b6:	4914      	ldr	r1, [pc, #80]	; (8004408 <UARTEx_SetNbDataToProcess+0xb4>)
 80043b8:	5c8a      	ldrb	r2, [r1, r2]
 80043ba:	435a      	muls	r2, r3
 80043bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80043be:	197b      	adds	r3, r7, r5
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <UARTEx_SetNbDataToProcess+0xb8>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043c6:	0019      	movs	r1, r3
 80043c8:	f7fb ff30 	bl	800022c <__divsi3>
 80043cc:	0003      	movs	r3, r0
 80043ce:	b299      	uxth	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	226a      	movs	r2, #106	; 0x6a
 80043d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043d6:	19bb      	adds	r3, r7, r6
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	193a      	adds	r2, r7, r4
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	490a      	ldr	r1, [pc, #40]	; (8004408 <UARTEx_SetNbDataToProcess+0xb4>)
 80043e0:	5c8a      	ldrb	r2, [r1, r2]
 80043e2:	435a      	muls	r2, r3
 80043e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UARTEx_SetNbDataToProcess+0xb8>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043ee:	0019      	movs	r1, r3
 80043f0:	f7fb ff1c 	bl	800022c <__divsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	b299      	uxth	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2268      	movs	r2, #104	; 0x68
 80043fc:	5299      	strh	r1, [r3, r2]
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b005      	add	sp, #20
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	08005764 	.word	0x08005764
 800440c:	0800576c 	.word	0x0800576c

08004410 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	0002      	movs	r2, r0
 8004418:	1dbb      	adds	r3, r7, #6
 800441a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004420:	1dbb      	adds	r3, r7, #6
 8004422:	2200      	movs	r2, #0
 8004424:	5e9b      	ldrsh	r3, [r3, r2]
 8004426:	2b84      	cmp	r3, #132	; 0x84
 8004428:	d006      	beq.n	8004438 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800442a:	1dbb      	adds	r3, r7, #6
 800442c:	2200      	movs	r2, #0
 800442e:	5e9a      	ldrsh	r2, [r3, r2]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	3303      	adds	r3, #3
 8004436:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004438:	68fb      	ldr	r3, [r7, #12]
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}

08004442 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004446:	f000 fa53 	bl	80048f0 <vTaskStartScheduler>
  
  return osOK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004454:	b087      	sub	sp, #28
 8004456:	af02      	add	r7, sp, #8
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685c      	ldr	r4, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004468:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2208      	movs	r2, #8
 800446e:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff ffcd 	bl	8004410 <makeFreeRtosPriority>
 8004476:	0001      	movs	r1, r0
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	230c      	movs	r3, #12
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	9100      	str	r1, [sp, #0]
 8004482:	0013      	movs	r3, r2
 8004484:	0032      	movs	r2, r6
 8004486:	0029      	movs	r1, r5
 8004488:	0020      	movs	r0, r4
 800448a:	f000 f8c7 	bl	800461c <xTaskCreate>
 800448e:	0003      	movs	r3, r0
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b005      	add	sp, #20
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <osDelay+0x16>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	e000      	b.n	80044ba <osDelay+0x18>
 80044b8:	2301      	movs	r3, #1
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f9f2 	bl	80048a4 <vTaskDelay>
  
  return osOK;
 80044c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}

080044ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3308      	adds	r3, #8
 80044d6:	001a      	movs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	4252      	negs	r2, r2
 80044e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3308      	adds	r3, #8
 80044e8:	001a      	movs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3308      	adds	r3, #8
 80044f2:	001a      	movs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}

08004506 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}

08004560 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3301      	adds	r3, #1
 8004574:	d103      	bne.n	800457e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e00c      	b.n	8004598 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3308      	adds	r3, #8
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e002      	b.n	800458c <vListInsert+0x2c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d2f6      	bcs.n	8004586 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}

080045cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6892      	ldr	r2, [r2, #8]
 80045e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6852      	ldr	r2, [r2, #4]
 80045ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d103      	bne.n	8004600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}

0800461c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b08d      	sub	sp, #52	; 0x34
 8004620:	af04      	add	r7, sp, #16
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	1dbb      	adds	r3, r7, #6
 800462a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	0018      	movs	r0, r3
 8004634:	f000 fd7c 	bl	8005130 <pvPortMalloc>
 8004638:	0003      	movs	r3, r0
 800463a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004642:	20a0      	movs	r0, #160	; 0xa0
 8004644:	f000 fd74 	bl	8005130 <pvPortMalloc>
 8004648:	0003      	movs	r3, r0
 800464a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
 8004658:	e006      	b.n	8004668 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 fe13 	bl	8005288 <vPortFree>
 8004662:	e001      	b.n	8004668 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800466e:	1dbb      	adds	r3, r7, #6
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	683c      	ldr	r4, [r7, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	2300      	movs	r3, #0
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0023      	movs	r3, r4
 800468a:	f000 f80f 	bl	80046ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f8a3 	bl	80047dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004696:	2301      	movs	r3, #1
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	e002      	b.n	80046a2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800469c:	2301      	movs	r3, #1
 800469e:	425b      	negs	r3, r3
 80046a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046a2:	69bb      	ldr	r3, [r7, #24]
	}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b009      	add	sp, #36	; 0x24
 80046aa:	bd90      	pop	{r4, r7, pc}

080046ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4942      	ldr	r1, [pc, #264]	; (80047cc <prvInitialiseNewTask+0x120>)
 80046c2:	468c      	mov	ip, r1
 80046c4:	4463      	add	r3, ip
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	18d3      	adds	r3, r2, r3
 80046ca:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2207      	movs	r2, #7
 80046d0:	4393      	bics	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2207      	movs	r2, #7
 80046d8:	4013      	ands	r3, r2
 80046da:	d001      	beq.n	80046e0 <prvInitialiseNewTask+0x34>
 80046dc:	b672      	cpsid	i
 80046de:	e7fe      	b.n	80046de <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d020      	beq.n	8004728 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e013      	b.n	8004714 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	18d3      	adds	r3, r2, r3
 80046f2:	7818      	ldrb	r0, [r3, #0]
 80046f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f6:	2134      	movs	r1, #52	; 0x34
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	18d3      	adds	r3, r2, r3
 80046fc:	185b      	adds	r3, r3, r1
 80046fe:	1c02      	adds	r2, r0, #0
 8004700:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d9e8      	bls.n	80046ec <prvInitialiseNewTask+0x40>
 800471a:	e000      	b.n	800471e <prvInitialiseNewTask+0x72>
			{
				break;
 800471c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2243      	movs	r2, #67	; 0x43
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]
 8004726:	e003      	b.n	8004730 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	2234      	movs	r2, #52	; 0x34
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d901      	bls.n	800473a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004736:	2306      	movs	r3, #6
 8004738:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	2200      	movs	r2, #0
 800474a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	3304      	adds	r3, #4
 8004750:	0018      	movs	r0, r3
 8004752:	f7ff fed8 	bl	8004506 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	3318      	adds	r3, #24
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff fed3 	bl	8004506 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004764:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2207      	movs	r2, #7
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	2298      	movs	r2, #152	; 0x98
 800477a:	2100      	movs	r1, #0
 800477c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	229c      	movs	r2, #156	; 0x9c
 8004782:	2100      	movs	r1, #0
 8004784:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	334c      	adds	r3, #76	; 0x4c
 800478a:	224c      	movs	r2, #76	; 0x4c
 800478c:	2100      	movs	r1, #0
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fe80 	bl	8005494 <memset>
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <prvInitialiseNewTask+0x124>)
 8004798:	651a      	str	r2, [r3, #80]	; 0x50
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <prvInitialiseNewTask+0x128>)
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <prvInitialiseNewTask+0x12c>)
 80047a4:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 fb8d 	bl	8004ecc <pxPortInitialiseStack>
 80047b2:	0002      	movs	r2, r0
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b006      	add	sp, #24
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	3fffffff 	.word	0x3fffffff
 80047d0:	20000f8c 	.word	0x20000f8c
 80047d4:	20000ff4 	.word	0x20000ff4
 80047d8:	2000105c 	.word	0x2000105c

080047dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047e4:	f000 fc0c 	bl	8005000 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <prvAddNewTaskToReadyList+0xb0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <prvAddNewTaskToReadyList+0xb0>)
 80047f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <prvAddNewTaskToReadyList+0xb4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047fa:	4b25      	ldr	r3, [pc, #148]	; (8004890 <prvAddNewTaskToReadyList+0xb4>)
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004800:	4b22      	ldr	r3, [pc, #136]	; (800488c <prvAddNewTaskToReadyList+0xb0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d110      	bne.n	800482a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004808:	f000 fa66 	bl	8004cd8 <prvInitialiseTaskLists>
 800480c:	e00d      	b.n	800482a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <prvAddNewTaskToReadyList+0xb8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <prvAddNewTaskToReadyList+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	d802      	bhi.n	800482a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <prvAddNewTaskToReadyList+0xb4>)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <prvAddNewTaskToReadyList+0xbc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <prvAddNewTaskToReadyList+0xbc>)
 8004832:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4b18      	ldr	r3, [pc, #96]	; (800489c <prvAddNewTaskToReadyList+0xc0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d903      	bls.n	8004848 <prvAddNewTaskToReadyList+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <prvAddNewTaskToReadyList+0xc0>)
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	0013      	movs	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	189b      	adds	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <prvAddNewTaskToReadyList+0xc4>)
 8004856:	189a      	adds	r2, r3, r2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	0019      	movs	r1, r3
 800485e:	0010      	movs	r0, r2
 8004860:	f7ff fe5c 	bl	800451c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004864:	f000 fbde 	bl	8005024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <prvAddNewTaskToReadyList+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <prvAddNewTaskToReadyList+0xb4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	429a      	cmp	r2, r3
 800487c:	d201      	bcs.n	8004882 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800487e:	f000 fbaf 	bl	8004fe0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	20000340 	.word	0x20000340
 8004890:	20000240 	.word	0x20000240
 8004894:	2000034c 	.word	0x2000034c
 8004898:	2000035c 	.word	0x2000035c
 800489c:	20000348 	.word	0x20000348
 80048a0:	20000244 	.word	0x20000244

080048a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <vTaskDelay+0x48>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <vTaskDelay+0x1e>
 80048be:	b672      	cpsid	i
 80048c0:	e7fe      	b.n	80048c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80048c2:	f000 f855 	bl	8004970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 faaa 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048d0:	f000 f85a 	bl	8004988 <xTaskResumeAll>
 80048d4:	0003      	movs	r3, r0
 80048d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80048de:	f000 fb7f 	bl	8004fe0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b004      	add	sp, #16
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000368 	.word	0x20000368

080048f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80048f6:	4916      	ldr	r1, [pc, #88]	; (8004950 <vTaskStartScheduler+0x60>)
 80048f8:	4816      	ldr	r0, [pc, #88]	; (8004954 <vTaskStartScheduler+0x64>)
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <vTaskStartScheduler+0x68>)
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	2300      	movs	r3, #0
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2300      	movs	r3, #0
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	f7ff fe89 	bl	800461c <xTaskCreate>
 800490a:	0003      	movs	r3, r0
 800490c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d113      	bne.n	800493c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004914:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <vTaskStartScheduler+0x6c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	334c      	adds	r3, #76	; 0x4c
 800491c:	001a      	movs	r2, r3
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <vTaskStartScheduler+0x70>)
 8004920:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <vTaskStartScheduler+0x74>)
 8004924:	2201      	movs	r2, #1
 8004926:	4252      	negs	r2, r2
 8004928:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <vTaskStartScheduler+0x78>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <vTaskStartScheduler+0x7c>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004936:	f000 fb2f 	bl	8004f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800493a:	e004      	b.n	8004946 <vTaskStartScheduler+0x56>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3301      	adds	r3, #1
 8004940:	d101      	bne.n	8004946 <vTaskStartScheduler+0x56>
 8004942:	b672      	cpsid	i
 8004944:	e7fe      	b.n	8004944 <vTaskStartScheduler+0x54>
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	080056e4 	.word	0x080056e4
 8004954:	08004cb5 	.word	0x08004cb5
 8004958:	20000364 	.word	0x20000364
 800495c:	20000240 	.word	0x20000240
 8004960:	2000005c 	.word	0x2000005c
 8004964:	20000360 	.word	0x20000360
 8004968:	2000034c 	.word	0x2000034c
 800496c:	20000344 	.word	0x20000344

08004970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <vTaskSuspendAll+0x14>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	4b02      	ldr	r3, [pc, #8]	; (8004984 <vTaskSuspendAll+0x14>)
 800497c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000368 	.word	0x20000368

08004988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004996:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <xTaskResumeAll+0xf8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <xTaskResumeAll+0x1a>
 800499e:	b672      	cpsid	i
 80049a0:	e7fe      	b.n	80049a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049a2:	f000 fb2d 	bl	8005000 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049a6:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <xTaskResumeAll+0xf8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <xTaskResumeAll+0xf8>)
 80049ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <xTaskResumeAll+0xf8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d15b      	bne.n	8004a70 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049b8:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <xTaskResumeAll+0xfc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d057      	beq.n	8004a70 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c0:	e02f      	b.n	8004a22 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <xTaskResumeAll+0x100>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3318      	adds	r3, #24
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff fdfc 	bl	80045cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3304      	adds	r3, #4
 80049d8:	0018      	movs	r0, r3
 80049da:	f7ff fdf7 	bl	80045cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <xTaskResumeAll+0x104>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d903      	bls.n	80049f2 <xTaskResumeAll+0x6a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ee:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <xTaskResumeAll+0x104>)
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	0013      	movs	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <xTaskResumeAll+0x108>)
 8004a00:	189a      	adds	r2, r3, r2
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3304      	adds	r3, #4
 8004a06:	0019      	movs	r1, r3
 8004a08:	0010      	movs	r0, r2
 8004a0a:	f7ff fd87 	bl	800451c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <xTaskResumeAll+0x10c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <xTaskResumeAll+0x110>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a22:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <xTaskResumeAll+0x100>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cb      	bne.n	80049c2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a30:	f000 f9da 	bl	8004de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <xTaskResumeAll+0x114>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00f      	beq.n	8004a60 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a40:	f000 f82e 	bl	8004aa0 <xTaskIncrementTick>
 8004a44:	1e03      	subs	r3, r0, #0
 8004a46:	d002      	beq.n	8004a4e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <xTaskResumeAll+0x110>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f2      	bne.n	8004a40 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <xTaskResumeAll+0x114>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a60:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <xTaskResumeAll+0x110>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a6c:	f000 fab8 	bl	8004fe0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a70:	f000 fad8 	bl	8005024 <vPortExitCritical>

	return xAlreadyYielded;
 8004a74:	68bb      	ldr	r3, [r7, #8]
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	20000368 	.word	0x20000368
 8004a84:	20000340 	.word	0x20000340
 8004a88:	20000300 	.word	0x20000300
 8004a8c:	20000348 	.word	0x20000348
 8004a90:	20000244 	.word	0x20000244
 8004a94:	20000240 	.word	0x20000240
 8004a98:	20000354 	.word	0x20000354
 8004a9c:	20000350 	.word	0x20000350

08004aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aaa:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <xTaskIncrementTick+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d000      	beq.n	8004ab4 <xTaskIncrementTick+0x14>
 8004ab2:	e084      	b.n	8004bbe <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab4:	4b48      	ldr	r3, [pc, #288]	; (8004bd8 <xTaskIncrementTick+0x138>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004abc:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <xTaskIncrementTick+0x138>)
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d117      	bne.n	8004af8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ac8:	4b44      	ldr	r3, [pc, #272]	; (8004bdc <xTaskIncrementTick+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <xTaskIncrementTick+0x36>
 8004ad2:	b672      	cpsid	i
 8004ad4:	e7fe      	b.n	8004ad4 <xTaskIncrementTick+0x34>
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <xTaskIncrementTick+0x13c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <xTaskIncrementTick+0x140>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <xTaskIncrementTick+0x13c>)
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <xTaskIncrementTick+0x140>)
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <xTaskIncrementTick+0x144>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	4b3c      	ldr	r3, [pc, #240]	; (8004be4 <xTaskIncrementTick+0x144>)
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f000 f978 	bl	8004de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <xTaskIncrementTick+0x148>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d349      	bcc.n	8004b96 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <xTaskIncrementTick+0x13c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <xTaskIncrementTick+0x148>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4252      	negs	r2, r2
 8004b12:	601a      	str	r2, [r3, #0]
					break;
 8004b14:	e03f      	b.n	8004b96 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b16:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <xTaskIncrementTick+0x13c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d203      	bcs.n	8004b36 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <xTaskIncrementTick+0x148>)
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b34:	e02f      	b.n	8004b96 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7ff fd46 	bl	80045cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fd3d 	bl	80045cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	4b25      	ldr	r3, [pc, #148]	; (8004bec <xTaskIncrementTick+0x14c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d903      	bls.n	8004b66 <xTaskIncrementTick+0xc6>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <xTaskIncrementTick+0x14c>)
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004b74:	189a      	adds	r2, r3, r2
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	0010      	movs	r0, r2
 8004b7e:	f7ff fccd 	bl	800451c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d3b8      	bcc.n	8004b02 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b94:	e7b5      	b.n	8004b02 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b96:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4914      	ldr	r1, [pc, #80]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004b9e:	0013      	movs	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	585b      	ldr	r3, [r3, r1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d901      	bls.n	8004bb0 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bb0:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <xTaskIncrementTick+0x158>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e004      	b.n	8004bc8 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004bc6:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bc8:	697b      	ldr	r3, [r7, #20]
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b006      	add	sp, #24
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000368 	.word	0x20000368
 8004bd8:	20000344 	.word	0x20000344
 8004bdc:	200002f8 	.word	0x200002f8
 8004be0:	200002fc 	.word	0x200002fc
 8004be4:	20000358 	.word	0x20000358
 8004be8:	20000360 	.word	0x20000360
 8004bec:	20000348 	.word	0x20000348
 8004bf0:	20000244 	.word	0x20000244
 8004bf4:	20000240 	.word	0x20000240
 8004bf8:	20000354 	.word	0x20000354
 8004bfc:	20000350 	.word	0x20000350

08004c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <vTaskSwitchContext+0x9c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <vTaskSwitchContext+0xa0>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c14:	e03d      	b.n	8004c92 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <vTaskSwitchContext+0xa0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <vTaskSwitchContext+0xa4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	e007      	b.n	8004c34 <vTaskSwitchContext+0x34>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <vTaskSwitchContext+0x2e>
 8004c2a:	b672      	cpsid	i
 8004c2c:	e7fe      	b.n	8004c2c <vTaskSwitchContext+0x2c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	491c      	ldr	r1, [pc, #112]	; (8004ca8 <vTaskSwitchContext+0xa8>)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	0013      	movs	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	585b      	ldr	r3, [r3, r1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ee      	beq.n	8004c24 <vTaskSwitchContext+0x24>
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	0013      	movs	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	189b      	adds	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <vTaskSwitchContext+0xa8>)
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d104      	bne.n	8004c76 <vTaskSwitchContext+0x76>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <vTaskSwitchContext+0xac>)
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <vTaskSwitchContext+0xa4>)
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <vTaskSwitchContext+0xac>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	334c      	adds	r3, #76	; 0x4c
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <vTaskSwitchContext+0xb0>)
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	20000368 	.word	0x20000368
 8004ca0:	20000354 	.word	0x20000354
 8004ca4:	20000348 	.word	0x20000348
 8004ca8:	20000244 	.word	0x20000244
 8004cac:	20000240 	.word	0x20000240
 8004cb0:	2000005c 	.word	0x2000005c

08004cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cbc:	f000 f850 	bl	8004d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <prvIdleTask+0x20>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d901      	bls.n	8004ccc <prvIdleTask+0x18>
			{
				taskYIELD();
 8004cc8:	f000 f98a 	bl	8004fe0 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004ccc:	f7fb fe90 	bl	80009f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004cd0:	e7f4      	b.n	8004cbc <prvIdleTask+0x8>
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	20000244 	.word	0x20000244

08004cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	e00c      	b.n	8004cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <prvInitialiseTaskLists+0x68>)
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7ff fbe9 	bl	80044ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d9ef      	bls.n	8004ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <prvInitialiseTaskLists+0x6c>)
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7ff fbdf 	bl	80044ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <prvInitialiseTaskLists+0x70>)
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff fbdb 	bl	80044ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <prvInitialiseTaskLists+0x74>)
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff fbd7 	bl	80044ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <prvInitialiseTaskLists+0x78>)
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff fbd3 	bl	80044ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <prvInitialiseTaskLists+0x7c>)
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff fbcf 	bl	80044ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <prvInitialiseTaskLists+0x80>)
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <prvInitialiseTaskLists+0x6c>)
 8004d30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvInitialiseTaskLists+0x84>)
 8004d34:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvInitialiseTaskLists+0x70>)
 8004d36:	601a      	str	r2, [r3, #0]
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000244 	.word	0x20000244
 8004d44:	200002d0 	.word	0x200002d0
 8004d48:	200002e4 	.word	0x200002e4
 8004d4c:	20000300 	.word	0x20000300
 8004d50:	20000314 	.word	0x20000314
 8004d54:	2000032c 	.word	0x2000032c
 8004d58:	200002f8 	.word	0x200002f8
 8004d5c:	200002fc 	.word	0x200002fc

08004d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d66:	e01a      	b.n	8004d9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004d68:	f000 f94a 	bl	8005000 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <prvCheckTasksWaitingTermination+0x50>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff fc27 	bl	80045cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1e5a      	subs	r2, r3, #1
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004d92:	f000 f947 	bl	8005024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f80f 	bl	8004dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e0      	bne.n	8004d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000314 	.word	0x20000314
 8004db4:	20000340 	.word	0x20000340
 8004db8:	20000328 	.word	0x20000328

08004dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	334c      	adds	r3, #76	; 0x4c
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 fb6b 	bl	80054a4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fa58 	bl	8005288 <vPortFree>
			vPortFree( pxTCB );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 fa54 	bl	8005288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b002      	add	sp, #8
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <prvResetNextTaskUnblockTime+0x34>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <prvResetNextTaskUnblockTime+0x38>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4252      	negs	r2, r2
 8004dfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e00:	e008      	b.n	8004e14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <prvResetNextTaskUnblockTime+0x34>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <prvResetNextTaskUnblockTime+0x38>)
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200002f8 	.word	0x200002f8
 8004e20:	20000360 	.word	0x20000360

08004e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7ff fbc6 	bl	80045cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3301      	adds	r3, #1
 8004e44:	d10b      	bne.n	8004e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7ff fb60 	bl	800451c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e5c:	e026      	b.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	18d3      	adds	r3, r2, r3
 8004e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d209      	bcs.n	8004e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	0019      	movs	r1, r3
 8004e82:	0010      	movs	r0, r2
 8004e84:	f7ff fb6c 	bl	8004560 <vListInsert>
}
 8004e88:	e010      	b.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3304      	adds	r3, #4
 8004e94:	0019      	movs	r1, r3
 8004e96:	0010      	movs	r0, r2
 8004e98:	f7ff fb62 	bl	8004560 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d202      	bcs.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000344 	.word	0x20000344
 8004eb8:	20000240 	.word	0x20000240
 8004ebc:	2000032c 	.word	0x2000032c
 8004ec0:	200002fc 	.word	0x200002fc
 8004ec4:	200002f8 	.word	0x200002f8
 8004ec8:	20000360 	.word	0x20000360

08004ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b04      	subs	r3, #4
 8004edc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2280      	movs	r2, #128	; 0x80
 8004ee2:	0452      	lsls	r2, r2, #17
 8004ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <pxPortInitialiseStack+0x50>)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b14      	subs	r3, #20
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b20      	subs	r3, #32
 8004f0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b004      	add	sp, #16
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	08004f21 	.word	0x08004f21

08004f20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <prvTaskExitError+0x2c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	d001      	beq.n	8004f36 <prvTaskExitError+0x16>
 8004f32:	b672      	cpsid	i
 8004f34:	e7fe      	b.n	8004f34 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004f36:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0fc      	beq.n	8004f3a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b002      	add	sp, #8
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	0000      	movs	r0, r0
 8004f5c:	0000      	movs	r0, r0
	...

08004f60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004f60:	4a0b      	ldr	r2, [pc, #44]	; (8004f90 <pxCurrentTCBConst2>)
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	3020      	adds	r0, #32
 8004f68:	f380 8809 	msr	PSP, r0
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	f380 8814 	msr	CONTROL, r0
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004f78:	46ae      	mov	lr, r5
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	bc04      	pop	{r2}
 8004f7e:	b662      	cpsie	i
 8004f80:	4718      	bx	r3
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46c0      	nop			; (mov r8, r8)

08004f90 <pxCurrentTCBConst2>:
 8004f90:	20000240 	.word	0x20000240
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	46c0      	nop			; (mov r8, r8)

08004f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <xPortStartScheduler+0x40>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <xPortStartScheduler+0x40>)
 8004fa2:	21ff      	movs	r1, #255	; 0xff
 8004fa4:	0409      	lsls	r1, r1, #16
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <xPortStartScheduler+0x40>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <xPortStartScheduler+0x40>)
 8004fb0:	21ff      	movs	r1, #255	; 0xff
 8004fb2:	0609      	lsls	r1, r1, #24
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fb8:	f000 f898 	bl	80050ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <xPortStartScheduler+0x44>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004fc2:	f7ff ffcd 	bl	8004f60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fc6:	f7ff fe1b 	bl	8004c00 <vTaskSwitchContext>
	prvTaskExitError();
 8004fca:	f7ff ffa9 	bl	8004f20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	e000ed20 	.word	0xe000ed20
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <vPortYield+0x1c>)
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	0552      	lsls	r2, r2, #21
 8004fea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004fec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ff0:	f3bf 8f6f 	isb	sy
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005004:	b672      	cpsid	i
	uxCriticalNesting++;
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <vPortEnterCritical+0x20>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <vPortEnterCritical+0x20>)
 800500e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005010:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005014:	f3bf 8f6f 	isb	sy
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	2000000c 	.word	0x2000000c

08005024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <vPortExitCritical+0x2c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <vPortExitCritical+0x10>
 8005030:	b672      	cpsid	i
 8005032:	e7fe      	b.n	8005032 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <vPortExitCritical+0x2c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <vPortExitCritical+0x2c>)
 800503c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <vPortExitCritical+0x2c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d100      	bne.n	8005048 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005046:	b662      	cpsie	i
	}
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	2000000c 	.word	0x2000000c

08005054 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005054:	f3ef 8010 	mrs	r0, PRIMASK
 8005058:	b672      	cpsid	i
 800505a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	0018      	movs	r0, r3

08005060 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005060:	f380 8810 	msr	PRIMASK, r0
 8005064:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005066:	46c0      	nop			; (mov r8, r8)
	...

08005070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005070:	f3ef 8009 	mrs	r0, PSP
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <pxCurrentTCBConst>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	3820      	subs	r0, #32
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800507e:	4644      	mov	r4, r8
 8005080:	464d      	mov	r5, r9
 8005082:	4656      	mov	r6, sl
 8005084:	465f      	mov	r7, fp
 8005086:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005088:	b508      	push	{r3, lr}
 800508a:	b672      	cpsid	i
 800508c:	f7ff fdb8 	bl	8004c00 <vTaskSwitchContext>
 8005090:	b662      	cpsie	i
 8005092:	bc0c      	pop	{r2, r3}
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	6808      	ldr	r0, [r1, #0]
 8005098:	3010      	adds	r0, #16
 800509a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800509c:	46a0      	mov	r8, r4
 800509e:	46a9      	mov	r9, r5
 80050a0:	46b2      	mov	sl, r6
 80050a2:	46bb      	mov	fp, r7
 80050a4:	f380 8809 	msr	PSP, r0
 80050a8:	3820      	subs	r0, #32
 80050aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80050ac:	4718      	bx	r3
 80050ae:	46c0      	nop			; (mov r8, r8)

080050b0 <pxCurrentTCBConst>:
 80050b0:	20000240 	.word	0x20000240
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46c0      	nop			; (mov r8, r8)

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80050be:	f7ff ffc9 	bl	8005054 <ulSetInterruptMaskFromISR>
 80050c2:	0003      	movs	r3, r0
 80050c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c6:	f7ff fceb 	bl	8004aa0 <xTaskIncrementTick>
 80050ca:	1e03      	subs	r3, r0, #0
 80050cc:	d003      	beq.n	80050d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SysTick_Handler+0x30>)
 80050d0:	2280      	movs	r2, #128	; 0x80
 80050d2:	0552      	lsls	r2, r2, #21
 80050d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f7ff ffc1 	bl	8005060 <vClearInterruptMaskFromISR>
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b002      	add	sp, #8
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	22fa      	movs	r2, #250	; 0xfa
 8005102:	0091      	lsls	r1, r2, #2
 8005104:	0018      	movs	r0, r3
 8005106:	f7fb f807 	bl	8000118 <__udivsi3>
 800510a:	0003      	movs	r3, r0
 800510c:	001a      	movs	r2, r3
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <vPortSetupTimerInterrupt+0x40>)
 8005110:	3a01      	subs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005116:	2207      	movs	r2, #7
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	e000e014 	.word	0xe000e014

08005130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800513c:	f7ff fc18 	bl	8004970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005140:	4b4b      	ldr	r3, [pc, #300]	; (8005270 <pvPortMalloc+0x140>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005148:	f000 f8ec 	bl	8005324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <pvPortMalloc+0x144>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4013      	ands	r3, r2
 8005154:	d000      	beq.n	8005158 <pvPortMalloc+0x28>
 8005156:	e07e      	b.n	8005256 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800515e:	2208      	movs	r2, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	189b      	adds	r3, r3, r2
 8005164:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2207      	movs	r2, #7
 800516a:	4013      	ands	r3, r2
 800516c:	d00a      	beq.n	8005184 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2207      	movs	r2, #7
 8005172:	4393      	bics	r3, r2
 8005174:	3308      	adds	r3, #8
 8005176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2207      	movs	r2, #7
 800517c:	4013      	ands	r3, r2
 800517e:	d001      	beq.n	8005184 <pvPortMalloc+0x54>
 8005180:	b672      	cpsid	i
 8005182:	e7fe      	b.n	8005182 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d065      	beq.n	8005256 <pvPortMalloc+0x126>
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <pvPortMalloc+0x148>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d860      	bhi.n	8005256 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <pvPortMalloc+0x14c>)
 8005196:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005198:	4b38      	ldr	r3, [pc, #224]	; (800527c <pvPortMalloc+0x14c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519e:	e004      	b.n	80051aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <pvPortMalloc+0x8c>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f1      	bne.n	80051a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051bc:	4b2c      	ldr	r3, [pc, #176]	; (8005270 <pvPortMalloc+0x140>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d047      	beq.n	8005256 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2308      	movs	r3, #8
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d916      	bls.n	8005216 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2207      	movs	r2, #7
 80051f4:	4013      	ands	r3, r2
 80051f6:	d001      	beq.n	80051fc <pvPortMalloc+0xcc>
 80051f8:	b672      	cpsid	i
 80051fa:	e7fe      	b.n	80051fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0018      	movs	r0, r3
 8005212:	f000 f8e7 	bl	80053e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005216:	4b18      	ldr	r3, [pc, #96]	; (8005278 <pvPortMalloc+0x148>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	4b15      	ldr	r3, [pc, #84]	; (8005278 <pvPortMalloc+0x148>)
 8005222:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <pvPortMalloc+0x148>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <pvPortMalloc+0x150>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d203      	bcs.n	8005238 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <pvPortMalloc+0x148>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <pvPortMalloc+0x150>)
 8005236:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <pvPortMalloc+0x144>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <pvPortMalloc+0x154>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <pvPortMalloc+0x154>)
 8005254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005256:	f7ff fb97 	bl	8004988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2207      	movs	r2, #7
 800525e:	4013      	ands	r3, r2
 8005260:	d001      	beq.n	8005266 <pvPortMalloc+0x136>
 8005262:	b672      	cpsid	i
 8005264:	e7fe      	b.n	8005264 <pvPortMalloc+0x134>
	return pvReturn;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b006      	add	sp, #24
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000f74 	.word	0x20000f74
 8005274:	20000f88 	.word	0x20000f88
 8005278:	20000f78 	.word	0x20000f78
 800527c:	20000f6c 	.word	0x20000f6c
 8005280:	20000f7c 	.word	0x20000f7c
 8005284:	20000f80 	.word	0x20000f80

08005288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03a      	beq.n	8005310 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800529a:	2308      	movs	r3, #8
 800529c:	425b      	negs	r3, r3
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <vPortFree+0x90>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	d101      	bne.n	80052b8 <vPortFree+0x30>
 80052b4:	b672      	cpsid	i
 80052b6:	e7fe      	b.n	80052b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <vPortFree+0x3c>
 80052c0:	b672      	cpsid	i
 80052c2:	e7fe      	b.n	80052c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <vPortFree+0x90>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4013      	ands	r3, r2
 80052ce:	d01f      	beq.n	8005310 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11b      	bne.n	8005310 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <vPortFree+0x90>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	401a      	ands	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052e8:	f7ff fb42 	bl	8004970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <vPortFree+0x94>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	18d2      	adds	r2, r2, r3
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <vPortFree+0x94>)
 80052f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 f871 	bl	80053e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vPortFree+0x98>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <vPortFree+0x98>)
 800530a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800530c:	f7ff fb3c 	bl	8004988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b004      	add	sp, #16
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000f88 	.word	0x20000f88
 800531c:	20000f78 	.word	0x20000f78
 8005320:	20000f84 	.word	0x20000f84

08005324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800532a:	23c0      	movs	r3, #192	; 0xc0
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005330:	4b26      	ldr	r3, [pc, #152]	; (80053cc <prvHeapInit+0xa8>)
 8005332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2207      	movs	r2, #7
 8005338:	4013      	ands	r3, r2
 800533a:	d00c      	beq.n	8005356 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3307      	adds	r3, #7
 8005340:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2207      	movs	r2, #7
 8005346:	4393      	bics	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <prvHeapInit+0xa8>)
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <prvHeapInit+0xac>)
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005360:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <prvHeapInit+0xac>)
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800536e:	2208      	movs	r2, #8
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2207      	movs	r2, #7
 800537a:	4393      	bics	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <prvHeapInit+0xb0>)
 8005382:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <prvHeapInit+0xb0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2200      	movs	r2, #0
 800538a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <prvHeapInit+0xb0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	1ad2      	subs	r2, r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <prvHeapInit+0xb0>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <prvHeapInit+0xb4>)
 80053b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <prvHeapInit+0xb8>)
 80053b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <prvHeapInit+0xbc>)
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	0612      	lsls	r2, r2, #24
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	2000036c 	.word	0x2000036c
 80053d0:	20000f6c 	.word	0x20000f6c
 80053d4:	20000f74 	.word	0x20000f74
 80053d8:	20000f7c 	.word	0x20000f7c
 80053dc:	20000f78 	.word	0x20000f78
 80053e0:	20000f88 	.word	0x20000f88

080053e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053ec:	4b27      	ldr	r3, [pc, #156]	; (800548c <prvInsertBlockIntoFreeList+0xa8>)
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e002      	b.n	80053f8 <prvInsertBlockIntoFreeList+0x14>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d8f7      	bhi.n	80053f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d108      	bne.n	8005426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	18d2      	adds	r2, r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d118      	bne.n	800546c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <prvInsertBlockIntoFreeList+0xac>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d00d      	beq.n	8005462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e008      	b.n	8005474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005462:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <prvInsertBlockIntoFreeList+0xac>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e003      	b.n	8005474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d002      	beq.n	8005482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b004      	add	sp, #16
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	20000f6c 	.word	0x20000f6c
 8005490:	20000f74 	.word	0x20000f74

08005494 <memset>:
 8005494:	0003      	movs	r3, r0
 8005496:	1882      	adds	r2, r0, r2
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	7019      	strb	r1, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <_reclaim_reent>:
 80054a4:	4b2d      	ldr	r3, [pc, #180]	; (800555c <_reclaim_reent+0xb8>)
 80054a6:	b570      	push	{r4, r5, r6, lr}
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0004      	movs	r4, r0
 80054ac:	4283      	cmp	r3, r0
 80054ae:	d042      	beq.n	8005536 <_reclaim_reent+0x92>
 80054b0:	69c3      	ldr	r3, [r0, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <_reclaim_reent+0x28>
 80054b6:	2500      	movs	r5, #0
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	42ab      	cmp	r3, r5
 80054bc:	d140      	bne.n	8005540 <_reclaim_reent+0x9c>
 80054be:	69e3      	ldr	r3, [r4, #28]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	2900      	cmp	r1, #0
 80054c4:	d002      	beq.n	80054cc <_reclaim_reent+0x28>
 80054c6:	0020      	movs	r0, r4
 80054c8:	f000 f870 	bl	80055ac <_free_r>
 80054cc:	6961      	ldr	r1, [r4, #20]
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d002      	beq.n	80054d8 <_reclaim_reent+0x34>
 80054d2:	0020      	movs	r0, r4
 80054d4:	f000 f86a 	bl	80055ac <_free_r>
 80054d8:	69e1      	ldr	r1, [r4, #28]
 80054da:	2900      	cmp	r1, #0
 80054dc:	d002      	beq.n	80054e4 <_reclaim_reent+0x40>
 80054de:	0020      	movs	r0, r4
 80054e0:	f000 f864 	bl	80055ac <_free_r>
 80054e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d002      	beq.n	80054f0 <_reclaim_reent+0x4c>
 80054ea:	0020      	movs	r0, r4
 80054ec:	f000 f85e 	bl	80055ac <_free_r>
 80054f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d002      	beq.n	80054fc <_reclaim_reent+0x58>
 80054f6:	0020      	movs	r0, r4
 80054f8:	f000 f858 	bl	80055ac <_free_r>
 80054fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054fe:	2900      	cmp	r1, #0
 8005500:	d002      	beq.n	8005508 <_reclaim_reent+0x64>
 8005502:	0020      	movs	r0, r4
 8005504:	f000 f852 	bl	80055ac <_free_r>
 8005508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800550a:	2900      	cmp	r1, #0
 800550c:	d002      	beq.n	8005514 <_reclaim_reent+0x70>
 800550e:	0020      	movs	r0, r4
 8005510:	f000 f84c 	bl	80055ac <_free_r>
 8005514:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005516:	2900      	cmp	r1, #0
 8005518:	d002      	beq.n	8005520 <_reclaim_reent+0x7c>
 800551a:	0020      	movs	r0, r4
 800551c:	f000 f846 	bl	80055ac <_free_r>
 8005520:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005522:	2900      	cmp	r1, #0
 8005524:	d002      	beq.n	800552c <_reclaim_reent+0x88>
 8005526:	0020      	movs	r0, r4
 8005528:	f000 f840 	bl	80055ac <_free_r>
 800552c:	6a23      	ldr	r3, [r4, #32]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <_reclaim_reent+0x92>
 8005532:	0020      	movs	r0, r4
 8005534:	4798      	blx	r3
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	5949      	ldr	r1, [r1, r5]
 800553a:	2900      	cmp	r1, #0
 800553c:	d108      	bne.n	8005550 <_reclaim_reent+0xac>
 800553e:	3504      	adds	r5, #4
 8005540:	69e3      	ldr	r3, [r4, #28]
 8005542:	68d9      	ldr	r1, [r3, #12]
 8005544:	2d80      	cmp	r5, #128	; 0x80
 8005546:	d1f7      	bne.n	8005538 <_reclaim_reent+0x94>
 8005548:	0020      	movs	r0, r4
 800554a:	f000 f82f 	bl	80055ac <_free_r>
 800554e:	e7b6      	b.n	80054be <_reclaim_reent+0x1a>
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	0020      	movs	r0, r4
 8005554:	f000 f82a 	bl	80055ac <_free_r>
 8005558:	0031      	movs	r1, r6
 800555a:	e7ee      	b.n	800553a <_reclaim_reent+0x96>
 800555c:	2000005c 	.word	0x2000005c

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	2600      	movs	r6, #0
 8005564:	4c0c      	ldr	r4, [pc, #48]	; (8005598 <__libc_init_array+0x38>)
 8005566:	4d0d      	ldr	r5, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005568:	1b64      	subs	r4, r4, r5
 800556a:	10a4      	asrs	r4, r4, #2
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	2600      	movs	r6, #0
 8005572:	f000 f875 	bl	8005660 <_init>
 8005576:	4c0a      	ldr	r4, [pc, #40]	; (80055a0 <__libc_init_array+0x40>)
 8005578:	4d0a      	ldr	r5, [pc, #40]	; (80055a4 <__libc_init_array+0x44>)
 800557a:	1b64      	subs	r4, r4, r5
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	00b3      	lsls	r3, r6, #2
 8005586:	58eb      	ldr	r3, [r5, r3]
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	00b3      	lsls	r3, r6, #2
 8005590:	58eb      	ldr	r3, [r5, r3]
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	0800577c 	.word	0x0800577c
 800559c:	0800577c 	.word	0x0800577c
 80055a0:	08005780 	.word	0x08005780
 80055a4:	0800577c 	.word	0x0800577c

080055a8 <__retarget_lock_acquire_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__retarget_lock_release_recursive>:
 80055aa:	4770      	bx	lr

080055ac <_free_r>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	0005      	movs	r5, r0
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d010      	beq.n	80055d6 <_free_r+0x2a>
 80055b4:	1f0c      	subs	r4, r1, #4
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da00      	bge.n	80055be <_free_r+0x12>
 80055bc:	18e4      	adds	r4, r4, r3
 80055be:	0028      	movs	r0, r5
 80055c0:	f000 f83e 	bl	8005640 <__malloc_lock>
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <_free_r+0x90>)
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <_free_r+0x2c>
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6014      	str	r4, [r2, #0]
 80055d0:	0028      	movs	r0, r5
 80055d2:	f000 f83d 	bl	8005650 <__malloc_unlock>
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d908      	bls.n	80055ee <_free_r+0x42>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428b      	cmp	r3, r1
 80055e2:	d1f3      	bne.n	80055cc <_free_r+0x20>
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	1809      	adds	r1, r1, r0
 80055ea:	6021      	str	r1, [r4, #0]
 80055ec:	e7ee      	b.n	80055cc <_free_r+0x20>
 80055ee:	001a      	movs	r2, r3
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <_free_r+0x4e>
 80055f6:	42a3      	cmp	r3, r4
 80055f8:	d9f9      	bls.n	80055ee <_free_r+0x42>
 80055fa:	6811      	ldr	r1, [r2, #0]
 80055fc:	1850      	adds	r0, r2, r1
 80055fe:	42a0      	cmp	r0, r4
 8005600:	d10b      	bne.n	800561a <_free_r+0x6e>
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	1809      	adds	r1, r1, r0
 8005606:	1850      	adds	r0, r2, r1
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	4283      	cmp	r3, r0
 800560c:	d1e0      	bne.n	80055d0 <_free_r+0x24>
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	1841      	adds	r1, r0, r1
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	6053      	str	r3, [r2, #4]
 8005618:	e7da      	b.n	80055d0 <_free_r+0x24>
 800561a:	42a0      	cmp	r0, r4
 800561c:	d902      	bls.n	8005624 <_free_r+0x78>
 800561e:	230c      	movs	r3, #12
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	e7d5      	b.n	80055d0 <_free_r+0x24>
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	1821      	adds	r1, r4, r0
 8005628:	428b      	cmp	r3, r1
 800562a:	d103      	bne.n	8005634 <_free_r+0x88>
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	1809      	adds	r1, r1, r0
 8005632:	6021      	str	r1, [r4, #0]
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	6054      	str	r4, [r2, #4]
 8005638:	e7ca      	b.n	80055d0 <_free_r+0x24>
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	200010c8 	.word	0x200010c8

08005640 <__malloc_lock>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4802      	ldr	r0, [pc, #8]	; (800564c <__malloc_lock+0xc>)
 8005644:	f7ff ffb0 	bl	80055a8 <__retarget_lock_acquire_recursive>
 8005648:	bd10      	pop	{r4, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	200010c4 	.word	0x200010c4

08005650 <__malloc_unlock>:
 8005650:	b510      	push	{r4, lr}
 8005652:	4802      	ldr	r0, [pc, #8]	; (800565c <__malloc_unlock+0xc>)
 8005654:	f7ff ffa9 	bl	80055aa <__retarget_lock_release_recursive>
 8005658:	bd10      	pop	{r4, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	200010c4 	.word	0x200010c4

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
