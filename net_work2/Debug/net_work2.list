
net_work2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aedc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d34  0801b0ac  0801b0ac  0002b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fde0  0801fde0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fde0  0801fde0  0002fde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fde8  0801fde8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fde8  0801fde8  0002fde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fdec  0801fdec  0002fdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801fdf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a4  0801fe94  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000144  0801ff34  00030144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b570  200001e8  0801ffd4  000301e8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2000b758  0801ffd4  0003b758  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 15 .debug_info   00030dc1  00000000  00000000  00030257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000650a  00000000  00000000  00061018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002760  00000000  00000000  00067528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002078  00000000  00000000  00069c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000357ac  00000000  00000000  0006bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00038577  00000000  00000000  000a14ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001117e1  00000000  00000000  000d9a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b840  00000000  00000000  001eb204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001f6a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b094 	.word	0x0801b094

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801b094 	.word	0x0801b094

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
    if (file == 1 || file == 2) {
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <_write+0x18>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d107      	bne.n	8000f1c <_write+0x28>
      extern UART_HandleTypeDef huart3;
      HAL_UART_Transmit(&huart3, (unsigned char *) ptr, len, 999);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <_write+0x34>)
 8000f18:	f00c f87e 	bl	800d018 <HAL_UART_Transmit>
    }
    return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
  }
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000204 	.word	0x20000204

08000f2c <mg_millis>:

uint64_t mg_millis(void) {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f30:	f009 f8d4 	bl	800a0dc <HAL_GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2200      	movs	r2, #0
 8000f38:	461c      	mov	r4, r3
 8000f3a:	4615      	mov	r5, r2
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	462b      	mov	r3, r5
}
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f48 <ev_handler>:


static void ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_HTTP_MSG) {
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2b0b      	cmp	r3, #11
 8000f58:	d10d      	bne.n	8000f76 <ev_handler+0x2e>
    struct mg_http_message *hm = ev_data;  // Parsed HTTP request
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	617b      	str	r3, [r7, #20]
    // mg_http_reply(c, 200, "", "ok\r\n");
    mg_http_reply(c, 200, "", "hello, current time: %llu\r\n", mg_millis());
 8000f5e:	f7ff ffe5 	bl	8000f2c <mg_millis>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	e9cd 2300 	strd	r2, r3, [sp]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <ev_handler+0x38>)
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <ev_handler+0x3c>)
 8000f6e:	21c8      	movs	r1, #200	; 0xc8
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f002 fc77 	bl	8003864 <mg_http_reply>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0801b0ac 	.word	0x0801b0ac
 8000f84:	0801b0c8 	.word	0x0801b0c8

08000f88 <run_mongoose1>:



static void run_mongoose1(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0b4      	sub	sp, #208	; 0xd0
 8000f8c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN WHILE */
    struct mg_mgr mgr;
    mg_mgr_init(&mgr);
 8000f8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fd10 	bl	80049b8 <mg_mgr_init>
    mg_log_set(MG_LL_DEBUG);
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <run_mongoose1+0x9c>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	601a      	str	r2, [r3, #0]
    mg_http_listen(&mgr, "http://0.0.0.0:8000", ev_handler, NULL);
 8000f9e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <run_mongoose1+0xa0>)
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <run_mongoose1+0xa4>)
 8000fa8:	f003 f914 	bl	80041d4 <mg_http_listen>

    // On STM32Fxx, use _stm32f suffix instead of _stm32h
    struct mg_tcpip_driver_stm32f_data driver_data = {.mdc_cr = 4};
 8000fac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    struct mg_tcpip_if mif = {.mac = {2, 3, 4, 5, 6, 7},
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f019 fa2f 	bl	801a426 <memset>
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <run_mongoose1+0xa8>)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd0:	6018      	str	r0, [r3, #0]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	8019      	strh	r1, [r3, #0]
//                               Uncomment below for static configuration:
                               .ip = mg_htonl(MG_U32(192, 168, 0, 223)),
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <run_mongoose1+0xac>)
 8000fd8:	f007 fec8 	bl	8008d6c <mg_ntohl>
 8000fdc:	4603      	mov	r3, r0
    struct mg_tcpip_if mif = {.mac = {2, 3, 4, 5, 6, 7},
 8000fde:	60bb      	str	r3, [r7, #8]
                               .mask = mg_htonl(MG_U32(255, 255, 255, 0)),
 8000fe0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000fe4:	f007 fec2 	bl	8008d6c <mg_ntohl>
 8000fe8:	4603      	mov	r3, r0
    struct mg_tcpip_if mif = {.mac = {2, 3, 4, 5, 6, 7},
 8000fea:	60fb      	str	r3, [r7, #12]
                               .gw = mg_htonl(MG_U32(192, 168, 0, 1)),
 8000fec:	4812      	ldr	r0, [pc, #72]	; (8001038 <run_mongoose1+0xb0>)
 8000fee:	f007 febd 	bl	8008d6c <mg_ntohl>
 8000ff2:	4603      	mov	r3, r0
    struct mg_tcpip_if mif = {.mac = {2, 3, 4, 5, 6, 7},
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <run_mongoose1+0xb4>)
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
                              .driver = &mg_tcpip_driver_stm32f,
                              .driver_data = &driver_data};
    NVIC_EnableIRQ(ETH_IRQn);
 8001000:	203d      	movs	r0, #61	; 0x3d
 8001002:	f7ff ff59 	bl	8000eb8 <__NVIC_EnableIRQ>
    mg_tcpip_init(&mgr, &mif);
 8001006:	463a      	mov	r2, r7
 8001008:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f006 fb46 	bl	80076a0 <mg_tcpip_init>

    while (1) {
      mg_mgr_poll(&mgr, 0);
 8001014:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f006 fd62 	bl	8007ae4 <mg_mgr_poll>
 8001020:	e7f8      	b.n	8001014 <run_mongoose1+0x8c>
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000
 8001028:	08000f49 	.word	0x08000f49
 800102c:	0801b0cc 	.word	0x0801b0cc
 8001030:	0801b0e0 	.word	0x0801b0e0
 8001034:	c0a800df 	.word	0xc0a800df
 8001038:	c0a80001 	.word	0xc0a80001
 800103c:	20000008 	.word	0x20000008

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f009 f829 	bl	800a09a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f816 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f8b2 	bl	80011b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001050:	f000 f880 	bl	8001154 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8001054:	f00c fc98 	bl	800d988 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  run_mongoose1();
 8001058:	f7ff ff96 	bl	8000f88 <run_mongoose1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Tick: %lu\r\n", HAL_GetTick());
 800105c:	f009 f83e 	bl	800a0dc <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	4619      	mov	r1, r3
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <main+0x34>)
 8001066:	f019 f957 	bl	801a318 <iprintf>
	  HAL_Delay(500);
 800106a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106e:	f009 f841 	bl	800a0f4 <HAL_Delay>
	  printf("Tick: %lu\r\n", HAL_GetTick());
 8001072:	e7f3      	b.n	800105c <main+0x1c>
 8001074:	0801b0e8 	.word	0x0801b0e8

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f019 f9cd 	bl	801a426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800109c:	f00a fb4e 	bl	800b73c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <SystemClock_Config+0xd4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a29      	ldr	r2, [pc, #164]	; (800114c <SystemClock_Config+0xd4>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xd4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemClock_Config+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a24      	ldr	r2, [pc, #144]	; (8001150 <SystemClock_Config+0xd8>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <SystemClock_Config+0xd8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010e8:	23d8      	movs	r3, #216	; 0xd8
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a fb7f 	bl	800b7fc <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001104:	f000 f8bc 	bl	8001280 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001108:	f00a fb28 	bl	800b75c <HAL_PWREx_EnableOverDrive>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001112:	f000 f8b5 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001122:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2107      	movs	r1, #7
 8001134:	4618      	mov	r0, r3
 8001136:	f00a fe05 	bl	800bd44 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001140:	f000 f89e 	bl	8001280 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART3_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001198:	f00b fef0 	bl	800cf7c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f86d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000204 	.word	0x20000204
 80011b0:	40004800 	.word	0x40004800

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_GPIO_Init+0xa4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_GPIO_Init+0xa4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_GPIO_Init+0xa4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126e:	f008 ff21 	bl	800a0b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>

0800128a <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e002      	b.n	80012a0 <mg_dns_free+0x16>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d1f7      	bne.n	800129a <mg_dns_free+0x10>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]
  free(d);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f018 fdb0 	bl	8019e18 <free>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	3330      	adds	r3, #48	; 0x30
 80012ce:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e00d      	b.n	80012f4 <mg_resolve_cancel+0x34>
    tmp = d->next;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d103      	bne.n	80012f0 <mg_resolve_cancel+0x30>
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f7ff ffcd 	bl	800128a <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ee      	bne.n	80012d8 <mg_resolve_cancel+0x18>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <mg_call+0x24>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <mg_call+0x38>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	4798      	blx	r3
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001344:	b40e      	push	{r1, r2, r3}
 8001346:	b580      	push	{r7, lr}
 8001348:	b095      	sub	sp, #84	; 0x54
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 800134e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001352:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	f107 0010 	add.w	r0, r7, #16
 800135c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	f006 fcf6 	bl	8007d50 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <mg_error+0x74>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd0f      	ble.n	800138c <mg_error+0x48>
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <mg_error+0x78>)
 800136e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001372:	4913      	ldr	r1, [pc, #76]	; (80013c0 <mg_error+0x7c>)
 8001374:	2001      	movs	r0, #1
 8001376:	f003 f877 	bl	8004468 <mg_log_prefix>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <mg_error+0x80>)
 8001388:	f003 f8be 	bl	8004508 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	461a      	mov	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffae 	bl	8001304 <mg_call>
}
 80013a8:	bf00      	nop
 80013aa:	3754      	adds	r7, #84	; 0x54
 80013ac:	46bd      	mov	sp, r7
 80013ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b2:	b003      	add	sp, #12
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	0801f8d8 	.word	0x0801f8d8
 80013c0:	0801b0f4 	.word	0x0801b0f4
 80013c4:	0801b238 	.word	0x0801b238

080013c8 <is_digit>:
#endif




static bool is_digit(int c) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b2f      	cmp	r3, #47	; 0x2f
 80013d4:	dd04      	ble.n	80013e0 <is_digit+0x18>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b39      	cmp	r3, #57	; 0x39
 80013da:	dc01      	bgt.n	80013e0 <is_digit+0x18>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <is_digit+0x1a>
 80013e0:	2300      	movs	r3, #0
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  int n = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	617a      	str	r2, [r7, #20]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	2265      	movs	r2, #101	; 0x65
 8001412:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	617a      	str	r2, [r7, #20]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800142c:	dd01      	ble.n	8001432 <addexp+0x3e>
 800142e:	2300      	movs	r3, #0
 8001430:	e057      	b.n	80014e2 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b09      	cmp	r3, #9
 8001436:	dc07      	bgt.n	8001448 <addexp+0x54>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	617a      	str	r2, [r7, #20]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	2230      	movs	r2, #48	; 0x30
 8001446:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b63      	cmp	r3, #99	; 0x63
 800144c:	dd1c      	ble.n	8001488 <addexp+0x94>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <addexp+0xfc>)
 8001452:	fb82 1203 	smull	r1, r2, r2, r3
 8001456:	1152      	asrs	r2, r2, #5
 8001458:	17db      	asrs	r3, r3, #31
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	6179      	str	r1, [r7, #20]
 8001464:	4619      	mov	r1, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	440b      	add	r3, r1
 800146a:	3230      	adds	r2, #48	; 0x30
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <addexp+0xfc>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1151      	asrs	r1, r2, #5
 800147a:	17da      	asrs	r2, r3, #31
 800147c:	1a8a      	subs	r2, r1, r2
 800147e:	2164      	movs	r1, #100	; 0x64
 8001480:	fb01 f202 	mul.w	r2, r1, r2
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b09      	cmp	r3, #9
 800148c:	dd1d      	ble.n	80014ca <addexp+0xd6>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <addexp+0x100>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1092      	asrs	r2, r2, #2
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	6179      	str	r1, [r7, #20]
 80014a4:	4619      	mov	r1, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	440b      	add	r3, r1
 80014aa:	3230      	adds	r2, #48	; 0x30
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <addexp+0x100>)
 80014b4:	fb83 1302 	smull	r1, r3, r3, r2
 80014b8:	1099      	asrs	r1, r3, #2
 80014ba:	17d3      	asrs	r3, r2, #31
 80014bc:	1ac9      	subs	r1, r1, r3
 80014be:	460b      	mov	r3, r1
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	1c59      	adds	r1, r3, #1
 80014d2:	6179      	str	r1, [r7, #20]
 80014d4:	4619      	mov	r1, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	440b      	add	r3, r1
 80014da:	3230      	adds	r2, #48	; 0x30
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
  return n;
 80014e0:	697b      	ldr	r3, [r7, #20]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	51eb851f 	.word	0x51eb851f
 80014f4:	66666667 	.word	0x66666667

080014f8 <xisinf>:

static int xisinf(double x) {
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001506:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800150a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	000a      	movs	r2, r1
 8001518:	2300      	movs	r3, #0
 800151a:	4613      	mov	r3, r2
 800151c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <xisinf+0x4c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d106      	bne.n	8001534 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8001526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800152a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <xisinf+0x3c>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <xisinf+0x3e>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	7ff00000 	.word	0x7ff00000

08001548 <xisnan>:

static int xisnan(double x) {
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001556:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800155a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	000a      	movs	r2, r1
 8001568:	2300      	movs	r3, #0
 800156a:	4613      	mov	r3, r2
 800156c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001574:	4613      	mov	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001580:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <xisnan+0x54>)
 8001584:	4293      	cmp	r3, r2
 8001586:	bf8c      	ite	hi
 8001588:	2301      	movhi	r3, #1
 800158a:	2300      	movls	r3, #0
 800158c:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	7ff00000 	.word	0x7ff00000

080015a0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b0a0      	sub	sp, #128	; 0x80
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6178      	str	r0, [r7, #20]
 80015a8:	6139      	str	r1, [r7, #16]
 80015aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	673b      	str	r3, [r7, #112]	; 0x70
 80015b6:	2300      	movs	r3, #0
 80015b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015ba:	2300      	movs	r3, #0
 80015bc:	66bb      	str	r3, [r7, #104]	; 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ca:	f7ff fa9d 	bl	8000b08 <__aeabi_dcmpeq>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <mg_dtoa+0x44>
 80015d4:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <mg_dtoa+0x250>)
 80015d6:	4a87      	ldr	r2, [pc, #540]	; (80017f4 <mg_dtoa+0x254>)
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f006 fbe0 	bl	8007da0 <mg_snprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	e2ec      	b.n	8001bbe <mg_dtoa+0x61e>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80015e4:	ed97 0b02 	vldr	d0, [r7, #8]
 80015e8:	f7ff ff86 	bl	80014f8 <xisinf>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d014      	beq.n	800161c <mg_dtoa+0x7c>
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015fe:	f7ff faab 	bl	8000b58 <__aeabi_dcmpgt>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <mg_dtoa+0x6c>
 8001608:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <mg_dtoa+0x258>)
 800160a:	e000      	b.n	800160e <mg_dtoa+0x6e>
 800160c:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <mg_dtoa+0x25c>)
 800160e:	4a79      	ldr	r2, [pc, #484]	; (80017f4 <mg_dtoa+0x254>)
 8001610:	6939      	ldr	r1, [r7, #16]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f006 fbc4 	bl	8007da0 <mg_snprintf>
 8001618:	4603      	mov	r3, r0
 800161a:	e2d0      	b.n	8001bbe <mg_dtoa+0x61e>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800161c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001620:	f7ff ff92 	bl	8001548 <xisnan>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <mg_dtoa+0x9a>
 800162a:	4b75      	ldr	r3, [pc, #468]	; (8001800 <mg_dtoa+0x260>)
 800162c:	4a71      	ldr	r2, [pc, #452]	; (80017f4 <mg_dtoa+0x254>)
 800162e:	6939      	ldr	r1, [r7, #16]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f006 fbb5 	bl	8007da0 <mg_snprintf>
 8001636:	4603      	mov	r3, r0
 8001638:	e2c1      	b.n	8001bbe <mg_dtoa+0x61e>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001646:	f7ff fa69 	bl	8000b1c <__aeabi_dcmplt>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00d      	beq.n	800166c <mg_dtoa+0xcc>
 8001650:	68bc      	ldr	r4, [r7, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001658:	e9c7 4502 	strd	r4, r5, [r7, #8]
 800165c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	673a      	str	r2, [r7, #112]	; 0x70
 8001662:	3378      	adds	r3, #120	; 0x78
 8001664:	443b      	add	r3, r7
 8001666:	222d      	movs	r2, #45	; 0x2d
 8001668:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 800166c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001670:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  if (tz) {
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02d      	beq.n	80016d6 <mg_dtoa+0x136>
    mul = 1.0;
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <mg_dtoa+0x264>)
 8001680:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001684:	e00a      	b.n	800169c <mg_dtoa+0xfc>
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <mg_dtoa+0x268>)
 800168c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001690:	f7fe ffd2 	bl	8000638 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <mg_dtoa+0x268>)
 80016a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a6:	f7ff fa4d 	bl	8000b44 <__aeabi_dcmpge>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d017      	beq.n	80016e0 <mg_dtoa+0x140>
 80016b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b8:	f7ff f8e8 	bl	800088c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <mg_dtoa+0x268>)
 80016ca:	f7ff fa3b 	bl	8000b44 <__aeabi_dcmpge>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1d8      	bne.n	8001686 <mg_dtoa+0xe6>
 80016d4:	e010      	b.n	80016f8 <mg_dtoa+0x158>
  } else {
    mul = 0.1;
 80016d6:	a344      	add	r3, pc, #272	; (adr r3, 80017e8 <mg_dtoa+0x248>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80016e0:	e00a      	b.n	80016f8 <mg_dtoa+0x158>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <mg_dtoa+0x268>)
 80016e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80016ec:	f7ff f8ce 	bl	800088c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <mg_dtoa+0x264>)
 80016fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001702:	f7ff fa15 	bl	8000b30 <__aeabi_dcmple>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d011      	beq.n	8001730 <mg_dtoa+0x190>
 800170c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001714:	f7ff f8ba 	bl	800088c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <mg_dtoa+0x264>)
 8001726:	f7ff fa03 	bl	8000b30 <__aeabi_dcmple>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1d8      	bne.n	80016e2 <mg_dtoa+0x142>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001730:	2300      	movs	r3, #0
 8001732:	677b      	str	r3, [r7, #116]	; 0x74
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <mg_dtoa+0x26c>)
 800173a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800174a:	e00d      	b.n	8001768 <mg_dtoa+0x1c8>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <mg_dtoa+0x268>)
 8001752:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001756:	f7ff f899 	bl	800088c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001764:	3301      	adds	r3, #1
 8001766:	677b      	str	r3, [r7, #116]	; 0x74
 8001768:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbed      	blt.n	800174c <mg_dtoa+0x1ac>

  d += t;
 8001770:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	e9c7 2302 	strd	r2, r3, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <mg_dtoa+0x264>)
 800178a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 800178e:	e00d      	b.n	80017ac <mg_dtoa+0x20c>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <mg_dtoa+0x268>)
 8001796:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800179a:	f7fe ff4d 	bl	8000638 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80017a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017a8:	3301      	adds	r3, #1
 80017aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <mg_dtoa+0x268>)
 80017b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b6:	f7ff f9c5 	bl	8000b44 <__aeabi_dcmpge>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d011      	beq.n	80017e4 <mg_dtoa+0x244>
 80017c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c8:	f7ff f860 	bl	800088c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <mg_dtoa+0x268>)
 80017da:	f7ff f9b3 	bl	8000b44 <__aeabi_dcmpge>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1d5      	bne.n	8001790 <mg_dtoa+0x1f0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80017e4:	e022      	b.n	800182c <mg_dtoa+0x28c>
 80017e6:	bf00      	nop
 80017e8:	9999999a 	.word	0x9999999a
 80017ec:	3fb99999 	.word	0x3fb99999
 80017f0:	0801b244 	.word	0x0801b244
 80017f4:	0801b248 	.word	0x0801b248
 80017f8:	0801b24c 	.word	0x0801b24c
 80017fc:	0801b250 	.word	0x0801b250
 8001800:	0801b258 	.word	0x0801b258
 8001804:	3ff00000 	.word	0x3ff00000
 8001808:	40240000 	.word	0x40240000
 800180c:	40140000 	.word	0x40140000
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4ba6      	ldr	r3, [pc, #664]	; (8001ab0 <mg_dtoa+0x510>)
 8001816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800181a:	f7ff f837 	bl	800088c <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001828:	3b01      	subs	r3, #1
 800182a:	66bb      	str	r3, [r7, #104]	; 0x68
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4ba0      	ldr	r3, [pc, #640]	; (8001ab4 <mg_dtoa+0x514>)
 8001832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001836:	f7ff f971 	bl	8000b1c <__aeabi_dcmplt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d011      	beq.n	8001864 <mg_dtoa+0x2c4>
 8001840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001848:	f7ff f820 	bl	800088c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <mg_dtoa+0x514>)
 800185a:	f7ff f95f 	bl	8000b1c <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1d5      	bne.n	8001810 <mg_dtoa+0x270>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d037      	beq.n	80018da <mg_dtoa+0x33a>
 800186a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	db33      	blt.n	80018da <mg_dtoa+0x33a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b01      	cmp	r3, #1
 8001876:	dd30      	ble.n	80018da <mg_dtoa+0x33a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001878:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800187c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001880:	f7ff f804 	bl	800088c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	ec43 2b17 	vmov	d7, r2, r3
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f107 0018 	add.w	r0, r7, #24
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	2128      	movs	r1, #40	; 0x28
 800189e:	f7ff fe7f 	bl	80015a0 <mg_dtoa>
 80018a2:	4603      	mov	r3, r0
 80018a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80018a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018aa:	4413      	add	r3, r2
 80018ac:	f107 0218 	add.w	r2, r7, #24
 80018b0:	4413      	add	r3, r2
 80018b2:	222b      	movs	r2, #43	; 0x2b
 80018b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd9c 	bl	80013f4 <addexp>
 80018bc:	4602      	mov	r2, r0
 80018be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c0:	4413      	add	r3, r2
 80018c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018cc:	4a7a      	ldr	r2, [pc, #488]	; (8001ab8 <mg_dtoa+0x518>)
 80018ce:	6939      	ldr	r1, [r7, #16]
 80018d0:	6978      	ldr	r0, [r7, #20]
 80018d2:	f006 fa65 	bl	8007da0 <mg_snprintf>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e171      	b.n	8001bbe <mg_dtoa+0x61e>
  } else if (tz && e <= -width && width > 1) {
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d039      	beq.n	8001954 <mg_dtoa+0x3b4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	425b      	negs	r3, r3
 80018e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dc34      	bgt.n	8001954 <mg_dtoa+0x3b4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	dd31      	ble.n	8001954 <mg_dtoa+0x3b4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80018f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018f8:	f7fe ffc8 	bl	800088c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b17 	vmov	d7, r2, r3
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f107 0018 	add.w	r0, r7, #24
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	eeb0 0a47 	vmov.f32	s0, s14
 8001910:	eef0 0a67 	vmov.f32	s1, s15
 8001914:	2128      	movs	r1, #40	; 0x28
 8001916:	f7ff fe43 	bl	80015a0 <mg_dtoa>
 800191a:	4603      	mov	r3, r0
 800191c:	66fb      	str	r3, [r7, #108]	; 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 800191e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001922:	4413      	add	r3, r2
 8001924:	f107 0218 	add.w	r2, r7, #24
 8001928:	18d0      	adds	r0, r2, r3
 800192a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800192c:	425b      	negs	r3, r3
 800192e:	222d      	movs	r2, #45	; 0x2d
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff fd5f 	bl	80013f4 <addexp>
 8001936:	4602      	mov	r2, r0
 8001938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800193a:	4413      	add	r3, r2
 800193c:	66fb      	str	r3, [r7, #108]	; 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001946:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <mg_dtoa+0x518>)
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f006 fa28 	bl	8007da0 <mg_snprintf>
 8001950:	4603      	mov	r3, r0
 8001952:	e134      	b.n	8001bbe <mg_dtoa+0x61e>
  } else {
    int targ_width = width;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	677b      	str	r3, [r7, #116]	; 0x74
 800195c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001960:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001964:	e03f      	b.n	80019e6 <mg_dtoa+0x446>
      int ch = (int) (d / t);
 8001966:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800196a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196e:	f7fe ff8d 	bl	800088c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8f7 	bl	8000b6c <__aeabi_d2iz>
 800197e:	4603      	mov	r3, r0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc02      	bgt.n	800198e <mg_dtoa+0x3ee>
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198a:	2b00      	cmp	r3, #0
 800198c:	dd0c      	ble.n	80019a8 <mg_dtoa+0x408>
 800198e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001990:	b2da      	uxtb	r2, r3
 8001992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001998:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800199a:	440b      	add	r3, r1
 800199c:	3230      	adds	r2, #48	; 0x30
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	3378      	adds	r3, #120	; 0x78
 80019a2:	443b      	add	r3, r7
 80019a4:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 80019a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019aa:	f7fe fddb 	bl	8000564 <__aeabi_i2d>
 80019ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019b2:	f7fe fe41 	bl	8000638 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019be:	f7fe fc83 	bl	80002c8 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <mg_dtoa+0x510>)
 80019d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019d4:	f7fe ff5a 	bl	800088c <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80019e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e2:	3301      	adds	r3, #1
 80019e4:	677b      	str	r3, [r7, #116]	; 0x74
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <mg_dtoa+0x514>)
 80019ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019f0:	f7ff f8a8 	bl	8000b44 <__aeabi_dcmpge>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <mg_dtoa+0x464>
 80019fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019fe:	4413      	add	r3, r2
 8001a00:	2b27      	cmp	r3, #39	; 0x27
 8001a02:	ddb0      	ble.n	8001966 <mg_dtoa+0x3c6>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8001a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11b      	bne.n	8001a42 <mg_dtoa+0x4a2>
 8001a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	673a      	str	r2, [r7, #112]	; 0x70
 8001a10:	3378      	adds	r3, #120	; 0x78
 8001a12:	443b      	add	r3, r7
 8001a14:	2230      	movs	r2, #48	; 0x30
 8001a16:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8001a1a:	e012      	b.n	8001a42 <mg_dtoa+0x4a2>
 8001a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a22:	3378      	adds	r3, #120	; 0x78
 8001a24:	443b      	add	r3, r7
 8001a26:	2230      	movs	r2, #48	; 0x30
 8001a28:	f803 2c60 	strb.w	r2, [r3, #-96]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <mg_dtoa+0x510>)
 8001a32:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a36:	f7fe ff29 	bl	800088c <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <mg_dtoa+0x514>)
 8001a48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a4c:	f7ff f87a 	bl	8000b44 <__aeabi_dcmpge>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <mg_dtoa+0x4c0>
 8001a56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2b27      	cmp	r3, #39	; 0x27
 8001a5e:	dddd      	ble.n	8001a1c <mg_dtoa+0x47c>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8001a60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a64:	4413      	add	r3, r2
 8001a66:	2b27      	cmp	r3, #39	; 0x27
 8001a68:	dc09      	bgt.n	8001a7e <mg_dtoa+0x4de>
 8001a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	673a      	str	r2, [r7, #112]	; 0x70
 8001a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a72:	4413      	add	r3, r2
 8001a74:	3378      	adds	r3, #120	; 0x78
 8001a76:	443b      	add	r3, r7
 8001a78:	222e      	movs	r2, #46	; 0x2e
 8001a7a:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <mg_dtoa+0x4f8>
 8001a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	dd03      	ble.n	8001a98 <mg_dtoa+0x4f8>
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a94:	4413      	add	r3, r2
 8001a96:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	677b      	str	r3, [r7, #116]	; 0x74
 8001a9c:	a302      	add	r3, pc, #8	; (adr r3, 8001aa8 <mg_dtoa+0x508>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001aa6:	e043      	b.n	8001b30 <mg_dtoa+0x590>
 8001aa8:	9999999a 	.word	0x9999999a
 8001aac:	3fb99999 	.word	0x3fb99999
 8001ab0:	40240000 	.word	0x40240000
 8001ab4:	3ff00000 	.word	0x3ff00000
 8001ab8:	0801b25c 	.word	0x0801b25c
      int ch = (int) (d / t);
 8001abc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac4:	f7fe fee2 	bl	800088c <__aeabi_ddiv>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff f84c 	bl	8000b6c <__aeabi_d2iz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8001ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001ae2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3230      	adds	r2, #48	; 0x30
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	3378      	adds	r3, #120	; 0x78
 8001aec:	443b      	add	r3, r7
 8001aee:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8001af2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001af4:	f7fe fd36 	bl	8000564 <__aeabi_i2d>
 8001af8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001afc:	f7fe fd9c 	bl	8000638 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b08:	f7fe fbde 	bl	80002c8 <__aeabi_dsub>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <mg_dtoa+0x628>)
 8001b1a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b1e:	f7fe feb5 	bl	800088c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8001b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8001b30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b34:	4413      	add	r3, r2
 8001b36:	2b27      	cmp	r3, #39	; 0x27
 8001b38:	dc07      	bgt.n	8001b4a <mg_dtoa+0x5aa>
 8001b3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbbc      	blt.n	8001abc <mg_dtoa+0x51c>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8001b42:	e002      	b.n	8001b4a <mg_dtoa+0x5aa>
 8001b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b46:	3b01      	subs	r3, #1
 8001b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <mg_dtoa+0x5ca>
 8001b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	dd09      	ble.n	8001b6a <mg_dtoa+0x5ca>
 8001b56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	3378      	adds	r3, #120	; 0x78
 8001b60:	443b      	add	r3, r7
 8001b62:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001b66:	2b30      	cmp	r3, #48	; 0x30
 8001b68:	d0ec      	beq.n	8001b44 <mg_dtoa+0x5a4>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00f      	beq.n	8001b90 <mg_dtoa+0x5f0>
 8001b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	dd0c      	ble.n	8001b90 <mg_dtoa+0x5f0>
 8001b76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	3378      	adds	r3, #120	; 0x78
 8001b80:	443b      	add	r3, r7
 8001b82:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001b86:	2b2e      	cmp	r3, #46	; 0x2e
 8001b88:	d102      	bne.n	8001b90 <mg_dtoa+0x5f0>
 8001b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  n += s;
 8001b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b94:	4413      	add	r3, r2
 8001b96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8001b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b9a:	2b27      	cmp	r3, #39	; 0x27
 8001b9c:	dd01      	ble.n	8001ba2 <mg_dtoa+0x602>
 8001b9e:	2327      	movs	r3, #39	; 0x27
 8001ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  buf[n] = '\0';
 8001ba2:	f107 0218 	add.w	r2, r7, #24
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <mg_dtoa+0x62c>)
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f006 f8f2 	bl	8007da0 <mg_snprintf>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3778      	adds	r7, #120	; 0x78
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40240000 	.word	0x40240000
 8001bcc:	0801b248 	.word	0x0801b248

08001bd0 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <mg_lld+0x15c>)
 8001bde:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8001be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8001bec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <mg_lld+0x4a>
 8001bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da0e      	bge.n	8001c1a <mg_lld+0x4a>
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	627a      	str	r2, [r7, #36]	; 0x24
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	222d      	movs	r2, #45	; 0x2d
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4254      	negs	r4, r2
 8001c12:	eb61 0503 	sbc.w	r5, r1, r3
 8001c16:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8001c1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d021      	beq.n	8001c66 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	e019      	b.n	8001c5c <mg_lld+0x8c>
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	441a      	add	r2, r3
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	6239      	str	r1, [r7, #32]
 8001c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3a:	440b      	add	r3, r1
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	440b      	add	r3, r1
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	0902      	lsrs	r2, r0, #4
 8001c52:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001c56:	090b      	lsrs	r3, r1, #4
 8001c58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c60:	4313      	orrs	r3, r2
 8001c62:	d1e1      	bne.n	8001c28 <mg_lld+0x58>
 8001c64:	e025      	b.n	8001cb2 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
 8001c6a:	e01e      	b.n	8001caa <mg_lld+0xda>
 8001c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c70:	f04f 020a 	mov.w	r2, #10
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	f7fe ffa0 	bl	8000bbc <__aeabi_uldivmod>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	441a      	add	r2, r3
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	1c59      	adds	r1, r3, #1
 8001c84:	6239      	str	r1, [r7, #32]
 8001c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c88:	440b      	add	r3, r1
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	440b      	add	r3, r1
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c96:	f04f 020a 	mov.w	r2, #10
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f7fe ff8d 	bl	8000bbc <__aeabi_uldivmod>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	d1dc      	bne.n	8001c6c <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e022      	b.n	8001cfe <mg_lld+0x12e>
    char t = buf[s + i];
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	441a      	add	r2, r3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	441a      	add	r2, r3
 8001cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	440b      	add	r3, r1
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	440b      	add	r3, r1
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	441a      	add	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	7dfa      	ldrb	r2, [r7, #23]
 8001cf6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3d7      	bcc.n	8001cb8 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8001d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	d106      	bne.n	8001d1e <mg_lld+0x14e>
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	623a      	str	r2, [r7, #32]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2230      	movs	r2, #48	; 0x30
 8001d1c:	701a      	strb	r2, [r3, #0]
  return n + s;
 8001d1e:	6a3a      	ldr	r2, [r7, #32]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	4413      	add	r3, r2
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2c:	0801b264 	.word	0x0801b264

08001d30 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8001d42:	e009      	b.n	8001d58 <scpy+0x28>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	617a      	str	r2, [r7, #20]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	4610      	mov	r0, r2
 8001d56:	4798      	blx	r3
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d205      	bcs.n	8001d6c <scpy+0x3c>
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1eb      	bne.n	8001d44 <scpy+0x14>
  return i;
 8001d6c:	697b      	ldr	r3, [r7, #20]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8001d76:	b40c      	push	{r2, r3}
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f809 	bl	8001dac <mg_vxprintf>
 8001d9a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da8:	b002      	add	sp, #8
 8001daa:	4770      	bx	lr

08001dac <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8001dac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db0:	b0a6      	sub	sp, #152	; 0x98
 8001db2:	af02      	add	r7, sp, #8
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8001dc8:	e383      	b.n	80024d2 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b25      	cmp	r3, #37	; 0x25
 8001dd6:	f040 8369 	bne.w	80024ac <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dde:	2300      	movs	r3, #0
 8001de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001de2:	2300      	movs	r3, #0
 8001de4:	677b      	str	r3, [r7, #116]	; 0x74
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dea:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8001dec:	2320      	movs	r3, #32
 8001dee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8001e10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e14:	2b23      	cmp	r3, #35	; 0x23
 8001e16:	d10e      	bne.n	8001e36 <mg_vxprintf+0x8a>
 8001e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e22:	3301      	adds	r3, #1
 8001e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8001e36:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8001e3c:	d110      	bne.n	8001e60 <mg_vxprintf+0xb4>
 8001e3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e42:	3301      	adds	r3, #1
 8001e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8001e60:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e64:	2b30      	cmp	r3, #48	; 0x30
 8001e66:	d127      	bne.n	8001eb8 <mg_vxprintf+0x10c>
 8001e68:	2330      	movs	r3, #48	; 0x30
 8001e6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e72:	3301      	adds	r3, #1
 8001e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8001e86:	e017      	b.n	8001eb8 <mg_vxprintf+0x10c>
 8001e88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	677b      	str	r3, [r7, #116]	; 0x74
 8001e94:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b30      	subs	r3, #48	; 0x30
 8001e9e:	677b      	str	r3, [r7, #116]	; 0x74
 8001ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001eb8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fa83 	bl	80013c8 <is_digit>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1df      	bne.n	8001e88 <mg_vxprintf+0xdc>
      if (c == '.') {
 8001ec8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ece:	d153      	bne.n	8001f78 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8001ee8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001eec:	2b2a      	cmp	r3, #42	; 0x2a
 8001eee:	d113      	bne.n	8001f18 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1d19      	adds	r1, r3, #4
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8001efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f02:	3301      	adds	r3, #1
 8001f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001f16:	e02f      	b.n	8001f78 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8001f1c:	e017      	b.n	8001f4e <mg_vxprintf+0x1a2>
 8001f1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	673b      	str	r3, [r7, #112]	; 0x70
 8001f2a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f30:	4413      	add	r3, r2
 8001f32:	3b30      	subs	r3, #48	; 0x30
 8001f34:	673b      	str	r3, [r7, #112]	; 0x70
 8001f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001f4e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa38 	bl	80013c8 <is_digit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1df      	bne.n	8001f1e <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8001f5e:	e00b      	b.n	8001f78 <mg_vxprintf+0x1cc>
 8001f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f64:	3301      	adds	r3, #1
 8001f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001f78:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f7c:	2b68      	cmp	r3, #104	; 0x68
 8001f7e:	d0ef      	beq.n	8001f60 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8001f80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f84:	2b6c      	cmp	r3, #108	; 0x6c
 8001f86:	d121      	bne.n	8001fcc <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8001f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f92:	3301      	adds	r3, #1
 8001f94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8001fa6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001faa:	2b6c      	cmp	r3, #108	; 0x6c
 8001fac:	d10e      	bne.n	8001fcc <mg_vxprintf+0x220>
 8001fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8001fcc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fd0:	2b70      	cmp	r3, #112	; 0x70
 8001fd2:	d103      	bne.n	8001fdc <mg_vxprintf+0x230>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fd8:	2301      	movs	r3, #1
 8001fda:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8001fdc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d018      	beq.n	8002016 <mg_vxprintf+0x26a>
 8001fe4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fe8:	2b75      	cmp	r3, #117	; 0x75
 8001fea:	d014      	beq.n	8002016 <mg_vxprintf+0x26a>
 8001fec:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ff0:	2b78      	cmp	r3, #120	; 0x78
 8001ff2:	d010      	beq.n	8002016 <mg_vxprintf+0x26a>
 8001ff4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ff8:	2b58      	cmp	r3, #88	; 0x58
 8001ffa:	d00c      	beq.n	8002016 <mg_vxprintf+0x26a>
 8001ffc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002000:	2b70      	cmp	r3, #112	; 0x70
 8002002:	d008      	beq.n	8002016 <mg_vxprintf+0x26a>
 8002004:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002008:	2b67      	cmp	r3, #103	; 0x67
 800200a:	d004      	beq.n	8002016 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 800200c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002010:	2b66      	cmp	r3, #102	; 0x66
 8002012:	f040 816c 	bne.w	80022ee <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8002016:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002026:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800202a:	2b78      	cmp	r3, #120	; 0x78
 800202c:	d007      	beq.n	800203e <mg_vxprintf+0x292>
 800202e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002032:	2b58      	cmp	r3, #88	; 0x58
 8002034:	d003      	beq.n	800203e <mg_vxprintf+0x292>
 8002036:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800203a:	2b70      	cmp	r3, #112	; 0x70
 800203c:	d101      	bne.n	8002042 <mg_vxprintf+0x296>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <mg_vxprintf+0x298>
 8002042:	2300      	movs	r3, #0
 8002044:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002048:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <mg_vxprintf+0x2b2>
 800205a:	2302      	movs	r3, #2
 800205c:	e000      	b.n	8002060 <mg_vxprintf+0x2b4>
 800205e:	2300      	movs	r3, #0
 8002060:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8002062:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002066:	2b67      	cmp	r3, #103	; 0x67
 8002068:	d003      	beq.n	8002072 <mg_vxprintf+0x2c6>
 800206a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800206e:	2b66      	cmp	r3, #102	; 0x66
 8002070:	d124      	bne.n	80020bc <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3307      	adds	r3, #7
 8002078:	f023 0307 	bic.w	r3, r3, #7
 800207c:	f103 0108 	add.w	r1, r3, #8
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	6011      	str	r1, [r2, #0]
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 800208c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002092:	d101      	bne.n	8002098 <mg_vxprintf+0x2ec>
 8002094:	2306      	movs	r3, #6
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002098:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800209a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800209e:	2b67      	cmp	r3, #103	; 0x67
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f107 0014 	add.w	r0, r7, #20
 80020ac:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80020b0:	2128      	movs	r1, #40	; 0x28
 80020b2:	f7ff fa75 	bl	80015a0 <mg_dtoa>
 80020b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 80020ba:	e069      	b.n	8002190 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80020bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d11c      	bne.n	80020fc <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3307      	adds	r3, #7
 80020c8:	f023 0307 	bic.w	r3, r3, #7
 80020cc:	f103 0108 	add.w	r1, r3, #8
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	6011      	str	r1, [r2, #0]
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 80020dc:	f107 0114 	add.w	r1, r7, #20
 80020e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020f0:	4608      	mov	r0, r1
 80020f2:	f7ff fd6d 	bl	8001bd0 <mg_lld>
 80020f6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80020fa:	e049      	b.n	8002190 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 80020fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d123      	bne.n	800214a <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1d19      	adds	r1, r3, #4
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	6011      	str	r1, [r2, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <mg_vxprintf+0x376>
 8002118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211a:	17da      	asrs	r2, r3, #31
 800211c:	461c      	mov	r4, r3
 800211e:	4615      	mov	r5, r2
 8002120:	e003      	b.n	800212a <mg_vxprintf+0x37e>
 8002122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002124:	2200      	movs	r2, #0
 8002126:	461c      	mov	r4, r3
 8002128:	4615      	mov	r5, r2
 800212a:	f107 0114 	add.w	r1, r7, #20
 800212e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4622      	mov	r2, r4
 800213c:	462b      	mov	r3, r5
 800213e:	4608      	mov	r0, r1
 8002140:	f7ff fd46 	bl	8001bd0 <mg_lld>
 8002144:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002148:	e022      	b.n	8002190 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1d19      	adds	r1, r3, #4
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <mg_vxprintf+0x3be>
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	17da      	asrs	r2, r3, #31
 8002164:	4698      	mov	r8, r3
 8002166:	4691      	mov	r9, r2
 8002168:	e003      	b.n	8002172 <mg_vxprintf+0x3c6>
 800216a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216c:	2200      	movs	r2, #0
 800216e:	4698      	mov	r8, r3
 8002170:	4691      	mov	r9, r2
 8002172:	f107 0114 	add.w	r1, r7, #20
 8002176:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4642      	mov	r2, r8
 8002184:	464b      	mov	r3, r9
 8002186:	4608      	mov	r0, r1
 8002188:	f7ff fd22 	bl	8001bd0 <mg_lld>
 800218c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002196:	e007      	b.n	80021a8 <mg_vxprintf+0x3fc>
 8002198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800219a:	3b01      	subs	r3, #1
 800219c:	677b      	str	r3, [r7, #116]	; 0x74
 800219e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a2:	3301      	adds	r3, #1
 80021a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80021ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d202      	bcs.n	80021b8 <mg_vxprintf+0x40c>
 80021b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ef      	bne.n	8002198 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021be:	e011      	b.n	80021e4 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80021c0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80021c4:	2301      	movs	r3, #1
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff fdb1 	bl	8001d30 <scpy>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d4:	4413      	add	r3, r2
 80021d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80021da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021de:	3301      	adds	r3, #1
 80021e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d110      	bne.n	800220e <mg_vxprintf+0x462>
 80021ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10c      	bne.n	800220e <mg_vxprintf+0x462>
 80021f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d207      	bcs.n	800220e <mg_vxprintf+0x462>
 80021fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002206:	4413      	add	r3, r2
 8002208:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800220a:	429a      	cmp	r2, r3
 800220c:	d8d8      	bhi.n	80021c0 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800220e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002210:	4ab7      	ldr	r2, [pc, #732]	; (80024f0 <mg_vxprintf+0x744>)
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fd8b 	bl	8001d30 <scpy>
 800221a:	4602      	mov	r2, r0
 800221c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002220:	4413      	add	r3, r2
 8002222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800222c:	e011      	b.n	8002252 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800222e:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002232:	2301      	movs	r3, #1
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fd7a 	bl	8001d30 <scpy>
 800223c:	4602      	mov	r2, r0
 800223e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002242:	4413      	add	r3, r2
 8002244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800224c:	3301      	adds	r3, #1
 800224e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002252:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002256:	2b30      	cmp	r3, #48	; 0x30
 8002258:	d10c      	bne.n	8002274 <mg_vxprintf+0x4c8>
 800225a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800225e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <mg_vxprintf+0x4c8>
 8002264:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800226c:	4413      	add	r3, r2
 800226e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002270:	429a      	cmp	r2, r3
 8002272:	d8dc      	bhi.n	800222e <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002274:	f107 0214 	add.w	r2, r7, #20
 8002278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fd56 	bl	8001d30 <scpy>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800228a:	4413      	add	r3, r2
 800228c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002296:	e011      	b.n	80022bc <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002298:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800229c:	2301      	movs	r3, #1
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff fd45 	bl	8001d30 <scpy>
 80022a6:	4602      	mov	r2, r0
 80022a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ac:	4413      	add	r3, r2
 80022ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80022b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b6:	3301      	adds	r3, #1
 80022b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	f040 80ea 	bne.w	800249a <mg_vxprintf+0x6ee>
 80022c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80e5 	beq.w	800249a <mg_vxprintf+0x6ee>
 80022d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d6:	429a      	cmp	r2, r3
 80022d8:	f080 80df 	bcs.w	800249a <mg_vxprintf+0x6ee>
 80022dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80022e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e4:	4413      	add	r3, r2
 80022e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8d5      	bhi.n	8002298 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80022ec:	e0d5      	b.n	800249a <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80022ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022f2:	2b6d      	cmp	r3, #109	; 0x6d
 80022f4:	d003      	beq.n	80022fe <mg_vxprintf+0x552>
 80022f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022fa:	2b4d      	cmp	r3, #77	; 0x4d
 80022fc:	d128      	bne.n	8002350 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1d19      	adds	r1, r3, #4
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 800230c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002310:	2b6d      	cmp	r3, #109	; 0x6d
 8002312:	d103      	bne.n	800231c <mg_vxprintf+0x570>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	2022      	movs	r0, #34	; 0x22
 800231a:	4798      	blx	r3
        n += f(out, param, ap);
 800231c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	4798      	blx	r3
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800232c:	4413      	add	r3, r2
 800232e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 8002332:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002336:	2b6d      	cmp	r3, #109	; 0x6d
 8002338:	f040 80b1 	bne.w	800249e <mg_vxprintf+0x6f2>
 800233c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002340:	3302      	adds	r3, #2
 8002342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	2022      	movs	r0, #34	; 0x22
 800234c:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800234e:	e0a6      	b.n	800249e <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002350:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002354:	2b63      	cmp	r3, #99	; 0x63
 8002356:	d112      	bne.n	800237e <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1d19      	adds	r1, r3, #4
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6011      	str	r1, [r2, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8002366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	4610      	mov	r0, r2
 8002370:	4798      	blx	r3
        n++;
 8002372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002376:	3301      	adds	r3, #1
 8002378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800237c:	e090      	b.n	80024a0 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800237e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002382:	2b73      	cmp	r3, #115	; 0x73
 8002384:	d16b      	bne.n	800245e <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1d19      	adds	r1, r3, #4
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	6011      	str	r1, [r2, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239a:	d109      	bne.n	80023b0 <mg_vxprintf+0x604>
 800239c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <mg_vxprintf+0x600>
 80023a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80023a4:	f7fd ff84 	bl	80002b0 <strlen>
 80023a8:	4603      	mov	r3, r0
 80023aa:	e000      	b.n	80023ae <mg_vxprintf+0x602>
 80023ac:	2300      	movs	r3, #0
 80023ae:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023b6:	e011      	b.n	80023dc <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80023b8:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80023bc:	2301      	movs	r3, #1
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fcb5 	bl	8001d30 <scpy>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023cc:	4413      	add	r3, r2
 80023ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d6:	3301      	adds	r3, #1
 80023d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <mg_vxprintf+0x64e>
 80023e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d206      	bcs.n	80023fa <mg_vxprintf+0x64e>
 80023ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f2:	4413      	add	r3, r2
 80023f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d8de      	bhi.n	80023b8 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 80023fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fc95 	bl	8001d30 <scpy>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800240c:	4413      	add	r3, r2
 800240e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002418:	e011      	b.n	800243e <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 800241a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800241e:	2301      	movs	r3, #1
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff fc84 	bl	8001d30 <scpy>
 8002428:	4602      	mov	r2, r0
 800242a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800242e:	4413      	add	r3, r2
 8002430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002438:	3301      	adds	r3, #1
 800243a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800243e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02c      	beq.n	80024a0 <mg_vxprintf+0x6f4>
 8002446:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	429a      	cmp	r2, r3
 800244c:	d228      	bcs.n	80024a0 <mg_vxprintf+0x6f4>
 800244e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002454:	4413      	add	r3, r2
 8002456:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002458:	429a      	cmp	r2, r3
 800245a:	d8de      	bhi.n	800241a <mg_vxprintf+0x66e>
 800245c:	e020      	b.n	80024a0 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800245e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002462:	2b25      	cmp	r3, #37	; 0x25
 8002464:	d109      	bne.n	800247a <mg_vxprintf+0x6ce>
        out('%', param);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	2025      	movs	r0, #37	; 0x25
 800246c:	4798      	blx	r3
        n++;
 800246e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002472:	3301      	adds	r3, #1
 8002474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002478:	e012      	b.n	80024a0 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	2025      	movs	r0, #37	; 0x25
 8002480:	4798      	blx	r3
        out(c, param);
 8002482:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	4610      	mov	r0, r2
 800248c:	4798      	blx	r3
        n += 2;
 800248e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002492:	3302      	adds	r3, #2
 8002494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002498:	e002      	b.n	80024a0 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800249e:	bf00      	nop
      }
      i++;
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a4:	3301      	adds	r3, #1
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024aa:	e012      	b.n	80024d2 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b2:	4413      	add	r3, r2
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4610      	mov	r0, r2
 80024bc:	4798      	blx	r3
 80024be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024c2:	3301      	adds	r3, #1
 80024c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024cc:	3301      	adds	r3, #1
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ac74 	bne.w	8001dca <mg_vxprintf+0x1e>
    }
  }
  return n;
 80024e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3790      	adds	r7, #144	; 0x90
 80024ea:	46bd      	mov	sp, r7
 80024ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f0:	0801b278 	.word	0x0801b278

080024f4 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02d      	beq.n	8002566 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	60ba      	str	r2, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	dd05      	ble.n	8002530 <mg_ncasecmp+0x3c>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b5a      	cmp	r3, #90	; 0x5a
 8002528:	dc02      	bgt.n	8002530 <mg_ncasecmp+0x3c>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3320      	adds	r3, #32
 800252e:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	dd05      	ble.n	8002542 <mg_ncasecmp+0x4e>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b5a      	cmp	r3, #90	; 0x5a
 800253a:	dc02      	bgt.n	8002542 <mg_ncasecmp+0x4e>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3320      	adds	r3, #32
 8002540:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <mg_ncasecmp+0x72>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3b01      	subs	r3, #1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <mg_ncasecmp+0x72>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3b01      	subs	r3, #1
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1d1      	bne.n	800250a <mg_ncasecmp+0x16>
  return diff;
 8002566:	69fb      	ldr	r3, [r7, #28]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3724      	adds	r7, #36	; 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8002574:	b480      	push	{r7}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002582:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <mg_to_size_t+0x128>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	08db      	lsrs	r3, r3, #3
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80025a2:	e002      	b.n	80025aa <mg_to_size_t+0x36>
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	3301      	adds	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20b      	bcs.n	80025ca <mg_to_size_t+0x56>
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d0f2      	beq.n	80025a4 <mg_to_size_t+0x30>
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	4413      	add	r3, r2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	d0ec      	beq.n	80025a4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d22b      	bcs.n	800262a <mg_to_size_t+0xb6>
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b2d      	cmp	r3, #45	; 0x2d
 80025dc:	d125      	bne.n	800262a <mg_to_size_t+0xb6>
 80025de:	2300      	movs	r3, #0
 80025e0:	e056      	b.n	8002690 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3b30      	subs	r3, #48	; 0x30
 80025ec:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d901      	bls.n	80025fa <mg_to_size_t+0x86>
 80025f6:	2300      	movs	r3, #0
 80025f8:	e04a      	b.n	8002690 <mg_to_size_t+0x11c>
    result *= 10;
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	429a      	cmp	r2, r3
 8002610:	d901      	bls.n	8002616 <mg_to_size_t+0xa2>
 8002612:	2300      	movs	r3, #0
 8002614:	e03c      	b.n	8002690 <mg_to_size_t+0x11c>
    result += digit;
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3301      	adds	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262e:	429a      	cmp	r2, r3
 8002630:	d20f      	bcs.n	8002652 <mg_to_size_t+0xde>
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b2f      	cmp	r3, #47	; 0x2f
 800263c:	d909      	bls.n	8002652 <mg_to_size_t+0xde>
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b39      	cmp	r3, #57	; 0x39
 8002648:	d9cb      	bls.n	80025e2 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800264a:	e002      	b.n	8002652 <mg_to_size_t+0xde>
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	429a      	cmp	r2, r3
 8002658:	d20b      	bcs.n	8002672 <mg_to_size_t+0xfe>
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b20      	cmp	r3, #32
 8002664:	d0f2      	beq.n	800264c <mg_to_size_t+0xd8>
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b09      	cmp	r3, #9
 8002670:	d0ec      	beq.n	800264c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <mg_to_size_t+0x108>
 8002678:	2300      	movs	r3, #0
 800267a:	e009      	b.n	8002690 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <mg_to_size_t+0x114>
 8002684:	2300      	movs	r3, #0
 8002686:	e003      	b.n	8002690 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a3a      	ldr	r2, [r7, #32]
 800268c:	601a      	str	r2, [r3, #0]
  return true;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	372c      	adds	r7, #44	; 0x2c
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	cccccccd 	.word	0xcccccccd

080026a0 <isok>:
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b0a      	cmp	r3, #10
 80026ae:	d008      	beq.n	80026c2 <isok+0x22>
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b0d      	cmp	r3, #13
 80026b4:	d005      	beq.n	80026c2 <isok+0x22>
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d002      	beq.n	80026c2 <isok+0x22>
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2b1f      	cmp	r3, #31
 80026c0:	d901      	bls.n	80026c6 <isok+0x26>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <isok+0x28>
 80026c6:	2300      	movs	r3, #0
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e03c      	b.n	8002764 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffd4 	bl	80026a0 <isok>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <mg_http_get_request_len+0x30>
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002708:	e031      	b.n	800276e <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <mg_http_get_request_len+0x50>
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b0a      	cmp	r3, #10
 800271a:	d106      	bne.n	800272a <mg_http_get_request_len+0x50>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3b01      	subs	r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b0a      	cmp	r3, #10
 8002728:	d016      	beq.n	8002758 <mg_http_get_request_len+0x7e>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d916      	bls.n	800275e <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b0a      	cmp	r3, #10
 800273a:	d110      	bne.n	800275e <mg_http_get_request_len+0x84>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b0d      	cmp	r3, #13
 8002748:	d109      	bne.n	800275e <mg_http_get_request_len+0x84>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b02      	subs	r3, #2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	d102      	bne.n	800275e <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	e007      	b.n	800276e <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3301      	adds	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d3be      	bcc.n	80026ea <mg_http_get_request_len+0x10>
  }
  return 0;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8002776:	b580      	push	{r7, lr}
 8002778:	b088      	sub	sp, #32
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8002780:	6838      	ldr	r0, [r7, #0]
 8002782:	f7fd fd95 	bl	80002b0 <strlen>
 8002786:	61b8      	str	r0, [r7, #24]
 8002788:	231e      	movs	r3, #30
 800278a:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e01f      	b.n	80027d2 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3302      	adds	r3, #2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	3328      	adds	r3, #40	; 0x28
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10b      	bne.n	80027cc <mg_http_get_header+0x56>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fe99 	bl	80024f4 <mg_ncasecmp>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <mg_http_get_header+0x56>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	e010      	b.n	80027ee <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3301      	adds	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d208      	bcs.n	80027ec <mg_http_get_header+0x76>
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3302      	adds	r3, #2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	3304      	adds	r3, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1d2      	bne.n	8002792 <mg_http_get_header+0x1c>
  }
  return NULL;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b20      	cmp	r3, #32
 800283c:	d904      	bls.n	8002848 <clen+0x2c>
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b7d      	cmp	r3, #125	; 0x7d
 8002842:	d801      	bhi.n	8002848 <clen+0x2c>
 8002844:	2301      	movs	r3, #1
 8002846:	e054      	b.n	80028f2 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800284e:	2bc0      	cmp	r3, #192	; 0xc0
 8002850:	d10d      	bne.n	800286e <clen+0x52>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	dd0a      	ble.n	800286e <clen+0x52>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffc9 	bl	80027f6 <vcb>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <clen+0x52>
 800286a:	2302      	movs	r3, #2
 800286c:	e041      	b.n	80028f2 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002874:	2be0      	cmp	r3, #224	; 0xe0
 8002876:	d116      	bne.n	80028a6 <clen+0x8a>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b02      	cmp	r3, #2
 800287c:	dd13      	ble.n	80028a6 <clen+0x8a>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3301      	adds	r3, #1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ffb6 	bl	80027f6 <vcb>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <clen+0x8a>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3302      	adds	r3, #2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ffad 	bl	80027f6 <vcb>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <clen+0x8a>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e025      	b.n	80028f2 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80028ac:	2bf0      	cmp	r3, #240	; 0xf0
 80028ae:	d11f      	bne.n	80028f0 <clen+0xd4>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	dd1c      	ble.n	80028f0 <clen+0xd4>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff9a 	bl	80027f6 <vcb>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <clen+0xd4>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3302      	adds	r3, #2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff91 	bl	80027f6 <vcb>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <clen+0xd4>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3303      	adds	r3, #3
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff88 	bl	80027f6 <vcb>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <clen+0xd4>
    return 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	e000      	b.n	80028f2 <clen+0xd6>
  return 0;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800290c:	e007      	b.n	800291e <skiptorn+0x24>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d207      	bcs.n	8002936 <skiptorn+0x3c>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b0a      	cmp	r3, #10
 800292c:	d003      	beq.n	8002936 <skiptorn+0x3c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b0d      	cmp	r3, #13
 8002934:	d1eb      	bne.n	800290e <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d208      	bcs.n	8002950 <skiptorn+0x56>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b0d      	cmp	r3, #13
 8002944:	d106      	bne.n	8002954 <skiptorn+0x5a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d001      	beq.n	8002954 <skiptorn+0x5a>
 8002950:	2300      	movs	r3, #0
 8002952:	e017      	b.n	8002984 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d206      	bcs.n	800296a <skiptorn+0x70>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b0d      	cmp	r3, #13
 8002962:	d102      	bne.n	800296a <skiptorn+0x70>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	d205      	bcs.n	800297e <skiptorn+0x84>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b0a      	cmp	r3, #10
 800297c:	d001      	beq.n	8002982 <skiptorn+0x88>
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <skiptorn+0x8a>
  return s;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e09a      	b.n	8002ada <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d301      	bcc.n	80029c0 <mg_http_parse_headers+0x30>
 80029bc:	2300      	movs	r3, #0
 80029be:	e092      	b.n	8002ae6 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b0a      	cmp	r3, #10
 80029c6:	f000 808d 	beq.w	8002ae4 <mg_http_parse_headers+0x154>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b0d      	cmp	r3, #13
 80029d0:	d105      	bne.n	80029de <mg_http_parse_headers+0x4e>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3301      	adds	r3, #1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b0a      	cmp	r3, #10
 80029da:	f000 8083 	beq.w	8002ae4 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80029e2:	e007      	b.n	80029f4 <mg_http_parse_headers+0x64>
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	4413      	add	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	4413      	add	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d20b      	bcs.n	8002a14 <mg_http_parse_headers+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b3a      	cmp	r3, #58	; 0x3a
 8002a02:	d007      	beq.n	8002a14 <mg_http_parse_headers+0x84>
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff08 	bl	800281c <clen>
 8002a0c:	6238      	str	r0, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e7      	bne.n	80029e4 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <mg_http_parse_headers+0x8e>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e063      	b.n	8002ae6 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d206      	bcs.n	8002a34 <mg_http_parse_headers+0xa4>
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fef7 	bl	800281c <clen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <mg_http_parse_headers+0xa8>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e056      	b.n	8002ae6 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	60fa      	str	r2, [r7, #12]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b3a      	cmp	r3, #58	; 0x3a
 8002a42:	d004      	beq.n	8002a4e <mg_http_parse_headers+0xbe>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e04e      	b.n	8002ae6 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d207      	bcs.n	8002a66 <mg_http_parse_headers+0xd6>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d0f4      	beq.n	8002a48 <mg_http_parse_headers+0xb8>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	d0f0      	beq.n	8002a48 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff43 	bl	80028fa <skiptorn>
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <mg_http_parse_headers+0xf6>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e032      	b.n	8002ae6 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <mg_http_parse_headers+0x118>
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d0f2      	beq.n	8002a80 <mg_http_parse_headers+0xf0>
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d0eb      	beq.n	8002a80 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002aba:	e882 0003 	stmia.w	r2, {r0, r1}
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	f107 0210 	add.w	r2, r7, #16
 8002acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad0:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	f4ff af60 	bcc.w	80029a4 <mg_http_parse_headers+0x14>
  }
  return true;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b092      	sub	sp, #72	; 0x48
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff fdeb 	bl	80026da <mg_http_get_request_len>
 8002b04:	6478      	str	r0, [r7, #68]	; 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <mg_http_parse+0x24>
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	e000      	b.n	8002b16 <mg_http_parse+0x26>
 8002b14:	2300      	movs	r3, #0
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 8002b18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f017 fc81 	bl	801a426 <memset>
  if (req_len <= 0) return req_len;
 8002b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	dc01      	bgt.n	8002b2e <mg_http_parse+0x3e>
 8002b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2c:	e18f      	b.n	8002e4e <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->body.buf = (char *) end;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8002b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8002b6e:	e009      	b.n	8002b84 <mg_http_parse+0x94>
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	4413      	add	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d20b      	bcs.n	8002ba4 <mg_http_parse+0xb4>
 8002b8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff fe44 	bl	800281c <clen>
 8002b94:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e9      	bne.n	8002b70 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8002b9c:	e002      	b.n	8002ba4 <mg_http_parse+0xb4>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d203      	bcs.n	8002bb4 <mg_http_parse+0xc4>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d0f4      	beq.n	8002b9e <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8002bba:	e009      	b.n	8002bd0 <mg_http_parse+0xe0>
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	441a      	add	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d20b      	bcs.n	8002bf0 <mg_http_parse+0x100>
 8002bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fe1e 	bl	800281c <clen>
 8002be0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e9      	bne.n	8002bbc <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8002be8:	e002      	b.n	8002bf0 <mg_http_parse+0x100>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d203      	bcs.n	8002c00 <mg_http_parse+0x110>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d0f4      	beq.n	8002bea <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d90b      	bls.n	8002c20 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	4992      	ldr	r1, [pc, #584]	; (8002e58 <mg_http_parse+0x368>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc6f 	bl	80024f4 <mg_ncasecmp>
 8002c16:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <mg_http_parse+0x130>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <mg_http_parse+0x132>
 8002c20:	2300      	movs	r3, #0
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3318      	adds	r3, #24
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fe64 	bl	80028fa <skiptorn>
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <mg_http_parse+0x14e>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e107      	b.n	8002e4e <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d90b      	bls.n	8002c5e <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	4982      	ldr	r1, [pc, #520]	; (8002e58 <mg_http_parse+0x368>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fc50 	bl	80024f4 <mg_ncasecmp>
 8002c54:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <mg_http_parse+0x16e>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <mg_http_parse+0x170>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (!is_response && hm->proto.len > 0 &&
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d12f      	bne.n	8002cd6 <mg_http_parse+0x1e6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02b      	beq.n	8002cd6 <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8002c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d121      	bne.n	8002cd0 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d11d      	bne.n	8002cd0 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	3305      	adds	r3, #5
 8002c9a:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 8002c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c9e:	d917      	bls.n	8002cd0 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	3305      	adds	r3, #5
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b39      	cmp	r3, #57	; 0x39
 8002caa:	d811      	bhi.n	8002cd0 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	3306      	adds	r3, #6
 8002cb2:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8002cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb6:	d10b      	bne.n	8002cd0 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 8002cc0:	2b2f      	cmp	r3, #47	; 0x2f
 8002cc2:	d905      	bls.n	8002cd0 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b39      	cmp	r3, #57	; 0x39
 8002cce:	d902      	bls.n	8002cd6 <mg_http_parse+0x1e6>
    return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd4:	e0bb      	b.n	8002e4e <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6898      	ldr	r0, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	213f      	movs	r1, #63	; 0x3f
 8002ce2:	f7fd fa95 	bl	8000210 <memchr>
 8002ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	441a      	add	r2, r3
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	3301      	adds	r3, #1
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <mg_http_parse+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <mg_http_parse+0x240>
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2e:	e08e      	b.n	8002e4e <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 0220 	add.w	r2, r3, #32
 8002d36:	231e      	movs	r3, #30
 8002d38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff fe28 	bl	8002990 <mg_http_parse_headers>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d50:	e07d      	b.n	8002e4e <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8002d52:	4942      	ldr	r1, [pc, #264]	; (8002e5c <mg_http_parse+0x36c>)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fd0e 	bl	8002776 <mg_http_get_header>
 8002d5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d6e:	f7ff fc01 	bl	8002574 <mg_to_size_t>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <mg_http_parse+0x294>
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d82:	e064      	b.n	8002e4e <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9e:	d12a      	bne.n	8002df6 <mg_http_parse+0x306>
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d127      	bne.n	8002df6 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	492d      	ldr	r1, [pc, #180]	; (8002e60 <mg_http_parse+0x370>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 fa73 	bl	8008298 <mg_str_s>
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	cb0c      	ldmia	r3, {r2, r3}
 8002dba:	c903      	ldmia	r1, {r0, r1}
 8002dbc:	f005 fab6 	bl	800832c <mg_strcasecmp>
 8002dc0:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4926      	ldr	r1, [pc, #152]	; (8002e64 <mg_http_parse+0x374>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fa63 	bl	8008298 <mg_str_s>
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	cb0c      	ldmia	r3, {r2, r3}
 8002dda:	c903      	ldmia	r1, {r0, r1}
 8002ddc:	f005 faa6 	bl	800832c <mg_strcasecmp>
 8002de0:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <mg_http_parse+0x306>
    hm->body.len = 0;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8002dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e00:	d11b      	bne.n	8002e3a <mg_http_parse+0x34a>
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8002e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <mg_http_parse+0x378>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f005 fa42 	bl	8008298 <mg_str_s>
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	cb0c      	ldmia	r3, {r2, r3}
 8002e1c:	3108      	adds	r1, #8
 8002e1e:	c903      	ldmia	r1, {r0, r1}
 8002e20:	f005 fa84 	bl	800832c <mg_strcasecmp>
 8002e24:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <mg_http_parse+0x34a>
    hm->body.len = 0;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8002e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d202      	bcs.n	8002e4c <mg_http_parse+0x35c>
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4a:	e000      	b.n	8002e4e <mg_http_parse+0x35e>

  return req_len;
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3748      	adds	r7, #72	; 0x48
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0801b2d8 	.word	0x0801b2d8
 8002e5c:	0801b2e0 	.word	0x0801b2e0
 8002e60:	0801b2f0 	.word	0x0801b2f0
 8002e64:	0801b2f4 	.word	0x0801b2f4
 8002e68:	0801b2fc 	.word	0x0801b2fc

08002e6c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b64      	subs	r3, #100	; 0x64
 8002e78:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f200 8469 	bhi.w	8003754 <mg_http_status_code_str+0x8e8>
 8002e82:	a101      	add	r1, pc, #4	; (adr r1, 8002e88 <mg_http_status_code_str+0x1c>)
 8002e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e88:	08003659 	.word	0x08003659
 8002e8c:	0800365d 	.word	0x0800365d
 8002e90:	08003661 	.word	0x08003661
 8002e94:	08003755 	.word	0x08003755
 8002e98:	08003755 	.word	0x08003755
 8002e9c:	08003755 	.word	0x08003755
 8002ea0:	08003755 	.word	0x08003755
 8002ea4:	08003755 	.word	0x08003755
 8002ea8:	08003755 	.word	0x08003755
 8002eac:	08003755 	.word	0x08003755
 8002eb0:	08003755 	.word	0x08003755
 8002eb4:	08003755 	.word	0x08003755
 8002eb8:	08003755 	.word	0x08003755
 8002ebc:	08003755 	.word	0x08003755
 8002ec0:	08003755 	.word	0x08003755
 8002ec4:	08003755 	.word	0x08003755
 8002ec8:	08003755 	.word	0x08003755
 8002ecc:	08003755 	.word	0x08003755
 8002ed0:	08003755 	.word	0x08003755
 8002ed4:	08003755 	.word	0x08003755
 8002ed8:	08003755 	.word	0x08003755
 8002edc:	08003755 	.word	0x08003755
 8002ee0:	08003755 	.word	0x08003755
 8002ee4:	08003755 	.word	0x08003755
 8002ee8:	08003755 	.word	0x08003755
 8002eec:	08003755 	.word	0x08003755
 8002ef0:	08003755 	.word	0x08003755
 8002ef4:	08003755 	.word	0x08003755
 8002ef8:	08003755 	.word	0x08003755
 8002efc:	08003755 	.word	0x08003755
 8002f00:	08003755 	.word	0x08003755
 8002f04:	08003755 	.word	0x08003755
 8002f08:	08003755 	.word	0x08003755
 8002f0c:	08003755 	.word	0x08003755
 8002f10:	08003755 	.word	0x08003755
 8002f14:	08003755 	.word	0x08003755
 8002f18:	08003755 	.word	0x08003755
 8002f1c:	08003755 	.word	0x08003755
 8002f20:	08003755 	.word	0x08003755
 8002f24:	08003755 	.word	0x08003755
 8002f28:	08003755 	.word	0x08003755
 8002f2c:	08003755 	.word	0x08003755
 8002f30:	08003755 	.word	0x08003755
 8002f34:	08003755 	.word	0x08003755
 8002f38:	08003755 	.word	0x08003755
 8002f3c:	08003755 	.word	0x08003755
 8002f40:	08003755 	.word	0x08003755
 8002f44:	08003755 	.word	0x08003755
 8002f48:	08003755 	.word	0x08003755
 8002f4c:	08003755 	.word	0x08003755
 8002f50:	08003755 	.word	0x08003755
 8002f54:	08003755 	.word	0x08003755
 8002f58:	08003755 	.word	0x08003755
 8002f5c:	08003755 	.word	0x08003755
 8002f60:	08003755 	.word	0x08003755
 8002f64:	08003755 	.word	0x08003755
 8002f68:	08003755 	.word	0x08003755
 8002f6c:	08003755 	.word	0x08003755
 8002f70:	08003755 	.word	0x08003755
 8002f74:	08003755 	.word	0x08003755
 8002f78:	08003755 	.word	0x08003755
 8002f7c:	08003755 	.word	0x08003755
 8002f80:	08003755 	.word	0x08003755
 8002f84:	08003755 	.word	0x08003755
 8002f88:	08003755 	.word	0x08003755
 8002f8c:	08003755 	.word	0x08003755
 8002f90:	08003755 	.word	0x08003755
 8002f94:	08003755 	.word	0x08003755
 8002f98:	08003755 	.word	0x08003755
 8002f9c:	08003755 	.word	0x08003755
 8002fa0:	08003755 	.word	0x08003755
 8002fa4:	08003755 	.word	0x08003755
 8002fa8:	08003755 	.word	0x08003755
 8002fac:	08003755 	.word	0x08003755
 8002fb0:	08003755 	.word	0x08003755
 8002fb4:	08003755 	.word	0x08003755
 8002fb8:	08003755 	.word	0x08003755
 8002fbc:	08003755 	.word	0x08003755
 8002fc0:	08003755 	.word	0x08003755
 8002fc4:	08003755 	.word	0x08003755
 8002fc8:	08003755 	.word	0x08003755
 8002fcc:	08003755 	.word	0x08003755
 8002fd0:	08003755 	.word	0x08003755
 8002fd4:	08003755 	.word	0x08003755
 8002fd8:	08003755 	.word	0x08003755
 8002fdc:	08003755 	.word	0x08003755
 8002fe0:	08003755 	.word	0x08003755
 8002fe4:	08003755 	.word	0x08003755
 8002fe8:	08003755 	.word	0x08003755
 8002fec:	08003755 	.word	0x08003755
 8002ff0:	08003755 	.word	0x08003755
 8002ff4:	08003755 	.word	0x08003755
 8002ff8:	08003755 	.word	0x08003755
 8002ffc:	08003755 	.word	0x08003755
 8003000:	08003755 	.word	0x08003755
 8003004:	08003755 	.word	0x08003755
 8003008:	08003755 	.word	0x08003755
 800300c:	08003755 	.word	0x08003755
 8003010:	08003755 	.word	0x08003755
 8003014:	08003755 	.word	0x08003755
 8003018:	08003665 	.word	0x08003665
 800301c:	08003669 	.word	0x08003669
 8003020:	0800366d 	.word	0x0800366d
 8003024:	08003671 	.word	0x08003671
 8003028:	08003675 	.word	0x08003675
 800302c:	08003679 	.word	0x08003679
 8003030:	0800367d 	.word	0x0800367d
 8003034:	08003681 	.word	0x08003681
 8003038:	08003685 	.word	0x08003685
 800303c:	08003755 	.word	0x08003755
 8003040:	08003755 	.word	0x08003755
 8003044:	08003755 	.word	0x08003755
 8003048:	08003755 	.word	0x08003755
 800304c:	08003755 	.word	0x08003755
 8003050:	08003755 	.word	0x08003755
 8003054:	08003755 	.word	0x08003755
 8003058:	08003755 	.word	0x08003755
 800305c:	08003755 	.word	0x08003755
 8003060:	08003755 	.word	0x08003755
 8003064:	08003755 	.word	0x08003755
 8003068:	08003755 	.word	0x08003755
 800306c:	08003755 	.word	0x08003755
 8003070:	08003755 	.word	0x08003755
 8003074:	08003755 	.word	0x08003755
 8003078:	08003755 	.word	0x08003755
 800307c:	08003755 	.word	0x08003755
 8003080:	08003689 	.word	0x08003689
 8003084:	08003755 	.word	0x08003755
 8003088:	08003755 	.word	0x08003755
 800308c:	08003755 	.word	0x08003755
 8003090:	08003755 	.word	0x08003755
 8003094:	08003755 	.word	0x08003755
 8003098:	08003755 	.word	0x08003755
 800309c:	08003755 	.word	0x08003755
 80030a0:	08003755 	.word	0x08003755
 80030a4:	08003755 	.word	0x08003755
 80030a8:	08003755 	.word	0x08003755
 80030ac:	08003755 	.word	0x08003755
 80030b0:	08003755 	.word	0x08003755
 80030b4:	08003755 	.word	0x08003755
 80030b8:	08003755 	.word	0x08003755
 80030bc:	08003755 	.word	0x08003755
 80030c0:	08003755 	.word	0x08003755
 80030c4:	08003755 	.word	0x08003755
 80030c8:	08003755 	.word	0x08003755
 80030cc:	08003755 	.word	0x08003755
 80030d0:	08003755 	.word	0x08003755
 80030d4:	08003755 	.word	0x08003755
 80030d8:	08003755 	.word	0x08003755
 80030dc:	08003755 	.word	0x08003755
 80030e0:	08003755 	.word	0x08003755
 80030e4:	08003755 	.word	0x08003755
 80030e8:	08003755 	.word	0x08003755
 80030ec:	08003755 	.word	0x08003755
 80030f0:	08003755 	.word	0x08003755
 80030f4:	08003755 	.word	0x08003755
 80030f8:	08003755 	.word	0x08003755
 80030fc:	08003755 	.word	0x08003755
 8003100:	08003755 	.word	0x08003755
 8003104:	08003755 	.word	0x08003755
 8003108:	08003755 	.word	0x08003755
 800310c:	08003755 	.word	0x08003755
 8003110:	08003755 	.word	0x08003755
 8003114:	08003755 	.word	0x08003755
 8003118:	08003755 	.word	0x08003755
 800311c:	08003755 	.word	0x08003755
 8003120:	08003755 	.word	0x08003755
 8003124:	08003755 	.word	0x08003755
 8003128:	08003755 	.word	0x08003755
 800312c:	08003755 	.word	0x08003755
 8003130:	08003755 	.word	0x08003755
 8003134:	08003755 	.word	0x08003755
 8003138:	08003755 	.word	0x08003755
 800313c:	08003755 	.word	0x08003755
 8003140:	08003755 	.word	0x08003755
 8003144:	08003755 	.word	0x08003755
 8003148:	08003755 	.word	0x08003755
 800314c:	08003755 	.word	0x08003755
 8003150:	08003755 	.word	0x08003755
 8003154:	08003755 	.word	0x08003755
 8003158:	08003755 	.word	0x08003755
 800315c:	08003755 	.word	0x08003755
 8003160:	08003755 	.word	0x08003755
 8003164:	08003755 	.word	0x08003755
 8003168:	08003755 	.word	0x08003755
 800316c:	08003755 	.word	0x08003755
 8003170:	08003755 	.word	0x08003755
 8003174:	08003755 	.word	0x08003755
 8003178:	08003755 	.word	0x08003755
 800317c:	08003755 	.word	0x08003755
 8003180:	08003755 	.word	0x08003755
 8003184:	08003755 	.word	0x08003755
 8003188:	08003755 	.word	0x08003755
 800318c:	08003755 	.word	0x08003755
 8003190:	08003755 	.word	0x08003755
 8003194:	08003755 	.word	0x08003755
 8003198:	08003755 	.word	0x08003755
 800319c:	08003755 	.word	0x08003755
 80031a0:	08003755 	.word	0x08003755
 80031a4:	08003755 	.word	0x08003755
 80031a8:	0800368d 	.word	0x0800368d
 80031ac:	08003691 	.word	0x08003691
 80031b0:	08003695 	.word	0x08003695
 80031b4:	08003699 	.word	0x08003699
 80031b8:	0800369d 	.word	0x0800369d
 80031bc:	080036a1 	.word	0x080036a1
 80031c0:	08003755 	.word	0x08003755
 80031c4:	080036a5 	.word	0x080036a5
 80031c8:	080036a9 	.word	0x080036a9
 80031cc:	08003755 	.word	0x08003755
 80031d0:	08003755 	.word	0x08003755
 80031d4:	08003755 	.word	0x08003755
 80031d8:	08003755 	.word	0x08003755
 80031dc:	08003755 	.word	0x08003755
 80031e0:	08003755 	.word	0x08003755
 80031e4:	08003755 	.word	0x08003755
 80031e8:	08003755 	.word	0x08003755
 80031ec:	08003755 	.word	0x08003755
 80031f0:	08003755 	.word	0x08003755
 80031f4:	08003755 	.word	0x08003755
 80031f8:	08003755 	.word	0x08003755
 80031fc:	08003755 	.word	0x08003755
 8003200:	08003755 	.word	0x08003755
 8003204:	08003755 	.word	0x08003755
 8003208:	08003755 	.word	0x08003755
 800320c:	08003755 	.word	0x08003755
 8003210:	08003755 	.word	0x08003755
 8003214:	08003755 	.word	0x08003755
 8003218:	08003755 	.word	0x08003755
 800321c:	08003755 	.word	0x08003755
 8003220:	08003755 	.word	0x08003755
 8003224:	08003755 	.word	0x08003755
 8003228:	08003755 	.word	0x08003755
 800322c:	08003755 	.word	0x08003755
 8003230:	08003755 	.word	0x08003755
 8003234:	08003755 	.word	0x08003755
 8003238:	08003755 	.word	0x08003755
 800323c:	08003755 	.word	0x08003755
 8003240:	08003755 	.word	0x08003755
 8003244:	08003755 	.word	0x08003755
 8003248:	08003755 	.word	0x08003755
 800324c:	08003755 	.word	0x08003755
 8003250:	08003755 	.word	0x08003755
 8003254:	08003755 	.word	0x08003755
 8003258:	08003755 	.word	0x08003755
 800325c:	08003755 	.word	0x08003755
 8003260:	08003755 	.word	0x08003755
 8003264:	08003755 	.word	0x08003755
 8003268:	08003755 	.word	0x08003755
 800326c:	08003755 	.word	0x08003755
 8003270:	08003755 	.word	0x08003755
 8003274:	08003755 	.word	0x08003755
 8003278:	08003755 	.word	0x08003755
 800327c:	08003755 	.word	0x08003755
 8003280:	08003755 	.word	0x08003755
 8003284:	08003755 	.word	0x08003755
 8003288:	08003755 	.word	0x08003755
 800328c:	08003755 	.word	0x08003755
 8003290:	08003755 	.word	0x08003755
 8003294:	08003755 	.word	0x08003755
 8003298:	08003755 	.word	0x08003755
 800329c:	08003755 	.word	0x08003755
 80032a0:	08003755 	.word	0x08003755
 80032a4:	08003755 	.word	0x08003755
 80032a8:	08003755 	.word	0x08003755
 80032ac:	08003755 	.word	0x08003755
 80032b0:	08003755 	.word	0x08003755
 80032b4:	08003755 	.word	0x08003755
 80032b8:	08003755 	.word	0x08003755
 80032bc:	08003755 	.word	0x08003755
 80032c0:	08003755 	.word	0x08003755
 80032c4:	08003755 	.word	0x08003755
 80032c8:	08003755 	.word	0x08003755
 80032cc:	08003755 	.word	0x08003755
 80032d0:	08003755 	.word	0x08003755
 80032d4:	08003755 	.word	0x08003755
 80032d8:	08003755 	.word	0x08003755
 80032dc:	08003755 	.word	0x08003755
 80032e0:	08003755 	.word	0x08003755
 80032e4:	08003755 	.word	0x08003755
 80032e8:	08003755 	.word	0x08003755
 80032ec:	08003755 	.word	0x08003755
 80032f0:	08003755 	.word	0x08003755
 80032f4:	08003755 	.word	0x08003755
 80032f8:	08003755 	.word	0x08003755
 80032fc:	08003755 	.word	0x08003755
 8003300:	08003755 	.word	0x08003755
 8003304:	08003755 	.word	0x08003755
 8003308:	08003755 	.word	0x08003755
 800330c:	08003755 	.word	0x08003755
 8003310:	08003755 	.word	0x08003755
 8003314:	08003755 	.word	0x08003755
 8003318:	08003755 	.word	0x08003755
 800331c:	08003755 	.word	0x08003755
 8003320:	08003755 	.word	0x08003755
 8003324:	08003755 	.word	0x08003755
 8003328:	08003755 	.word	0x08003755
 800332c:	08003755 	.word	0x08003755
 8003330:	08003755 	.word	0x08003755
 8003334:	08003755 	.word	0x08003755
 8003338:	080036ad 	.word	0x080036ad
 800333c:	080036b1 	.word	0x080036b1
 8003340:	080036b5 	.word	0x080036b5
 8003344:	080036b9 	.word	0x080036b9
 8003348:	080036bd 	.word	0x080036bd
 800334c:	080036c1 	.word	0x080036c1
 8003350:	080036c5 	.word	0x080036c5
 8003354:	080036c9 	.word	0x080036c9
 8003358:	080036cd 	.word	0x080036cd
 800335c:	080036d1 	.word	0x080036d1
 8003360:	080036d5 	.word	0x080036d5
 8003364:	080036d9 	.word	0x080036d9
 8003368:	080036dd 	.word	0x080036dd
 800336c:	080036e1 	.word	0x080036e1
 8003370:	080036e5 	.word	0x080036e5
 8003374:	080036e9 	.word	0x080036e9
 8003378:	080036ed 	.word	0x080036ed
 800337c:	080036f1 	.word	0x080036f1
 8003380:	080036f5 	.word	0x080036f5
 8003384:	08003755 	.word	0x08003755
 8003388:	08003755 	.word	0x08003755
 800338c:	080036f9 	.word	0x080036f9
 8003390:	080036fd 	.word	0x080036fd
 8003394:	08003701 	.word	0x08003701
 8003398:	08003705 	.word	0x08003705
 800339c:	08003755 	.word	0x08003755
 80033a0:	08003709 	.word	0x08003709
 80033a4:	08003755 	.word	0x08003755
 80033a8:	0800370d 	.word	0x0800370d
 80033ac:	08003711 	.word	0x08003711
 80033b0:	08003755 	.word	0x08003755
 80033b4:	08003715 	.word	0x08003715
 80033b8:	08003755 	.word	0x08003755
 80033bc:	08003755 	.word	0x08003755
 80033c0:	08003755 	.word	0x08003755
 80033c4:	08003755 	.word	0x08003755
 80033c8:	08003755 	.word	0x08003755
 80033cc:	08003755 	.word	0x08003755
 80033d0:	08003755 	.word	0x08003755
 80033d4:	08003755 	.word	0x08003755
 80033d8:	08003755 	.word	0x08003755
 80033dc:	08003755 	.word	0x08003755
 80033e0:	08003755 	.word	0x08003755
 80033e4:	08003755 	.word	0x08003755
 80033e8:	08003719 	.word	0x08003719
 80033ec:	08003755 	.word	0x08003755
 80033f0:	08003755 	.word	0x08003755
 80033f4:	08003755 	.word	0x08003755
 80033f8:	08003755 	.word	0x08003755
 80033fc:	08003755 	.word	0x08003755
 8003400:	08003755 	.word	0x08003755
 8003404:	0800371d 	.word	0x0800371d
 8003408:	08003755 	.word	0x08003755
 800340c:	08003755 	.word	0x08003755
 8003410:	08003755 	.word	0x08003755
 8003414:	08003755 	.word	0x08003755
 8003418:	08003755 	.word	0x08003755
 800341c:	08003755 	.word	0x08003755
 8003420:	08003755 	.word	0x08003755
 8003424:	08003755 	.word	0x08003755
 8003428:	08003755 	.word	0x08003755
 800342c:	08003755 	.word	0x08003755
 8003430:	08003755 	.word	0x08003755
 8003434:	08003755 	.word	0x08003755
 8003438:	08003755 	.word	0x08003755
 800343c:	08003755 	.word	0x08003755
 8003440:	08003755 	.word	0x08003755
 8003444:	08003755 	.word	0x08003755
 8003448:	08003755 	.word	0x08003755
 800344c:	08003755 	.word	0x08003755
 8003450:	08003755 	.word	0x08003755
 8003454:	08003755 	.word	0x08003755
 8003458:	08003755 	.word	0x08003755
 800345c:	08003755 	.word	0x08003755
 8003460:	08003755 	.word	0x08003755
 8003464:	08003755 	.word	0x08003755
 8003468:	08003755 	.word	0x08003755
 800346c:	08003755 	.word	0x08003755
 8003470:	08003755 	.word	0x08003755
 8003474:	08003755 	.word	0x08003755
 8003478:	08003755 	.word	0x08003755
 800347c:	08003755 	.word	0x08003755
 8003480:	08003755 	.word	0x08003755
 8003484:	08003755 	.word	0x08003755
 8003488:	08003755 	.word	0x08003755
 800348c:	08003755 	.word	0x08003755
 8003490:	08003755 	.word	0x08003755
 8003494:	08003755 	.word	0x08003755
 8003498:	08003755 	.word	0x08003755
 800349c:	08003755 	.word	0x08003755
 80034a0:	08003755 	.word	0x08003755
 80034a4:	08003755 	.word	0x08003755
 80034a8:	08003755 	.word	0x08003755
 80034ac:	08003755 	.word	0x08003755
 80034b0:	08003755 	.word	0x08003755
 80034b4:	08003755 	.word	0x08003755
 80034b8:	08003755 	.word	0x08003755
 80034bc:	08003755 	.word	0x08003755
 80034c0:	08003755 	.word	0x08003755
 80034c4:	08003721 	.word	0x08003721
 80034c8:	08003725 	.word	0x08003725
 80034cc:	08003729 	.word	0x08003729
 80034d0:	0800372d 	.word	0x0800372d
 80034d4:	08003731 	.word	0x08003731
 80034d8:	08003735 	.word	0x08003735
 80034dc:	08003739 	.word	0x08003739
 80034e0:	0800373d 	.word	0x0800373d
 80034e4:	08003741 	.word	0x08003741
 80034e8:	08003745 	.word	0x08003745
 80034ec:	08003755 	.word	0x08003755
 80034f0:	08003749 	.word	0x08003749
 80034f4:	0800374d 	.word	0x0800374d
 80034f8:	08003755 	.word	0x08003755
 80034fc:	08003755 	.word	0x08003755
 8003500:	08003755 	.word	0x08003755
 8003504:	08003755 	.word	0x08003755
 8003508:	08003755 	.word	0x08003755
 800350c:	08003755 	.word	0x08003755
 8003510:	08003755 	.word	0x08003755
 8003514:	08003755 	.word	0x08003755
 8003518:	08003755 	.word	0x08003755
 800351c:	08003755 	.word	0x08003755
 8003520:	08003755 	.word	0x08003755
 8003524:	08003755 	.word	0x08003755
 8003528:	08003755 	.word	0x08003755
 800352c:	08003755 	.word	0x08003755
 8003530:	08003755 	.word	0x08003755
 8003534:	08003755 	.word	0x08003755
 8003538:	08003755 	.word	0x08003755
 800353c:	08003755 	.word	0x08003755
 8003540:	08003755 	.word	0x08003755
 8003544:	08003755 	.word	0x08003755
 8003548:	08003755 	.word	0x08003755
 800354c:	08003755 	.word	0x08003755
 8003550:	08003755 	.word	0x08003755
 8003554:	08003755 	.word	0x08003755
 8003558:	08003755 	.word	0x08003755
 800355c:	08003755 	.word	0x08003755
 8003560:	08003755 	.word	0x08003755
 8003564:	08003755 	.word	0x08003755
 8003568:	08003755 	.word	0x08003755
 800356c:	08003755 	.word	0x08003755
 8003570:	08003755 	.word	0x08003755
 8003574:	08003755 	.word	0x08003755
 8003578:	08003755 	.word	0x08003755
 800357c:	08003755 	.word	0x08003755
 8003580:	08003755 	.word	0x08003755
 8003584:	08003755 	.word	0x08003755
 8003588:	08003755 	.word	0x08003755
 800358c:	08003755 	.word	0x08003755
 8003590:	08003755 	.word	0x08003755
 8003594:	08003755 	.word	0x08003755
 8003598:	08003755 	.word	0x08003755
 800359c:	08003755 	.word	0x08003755
 80035a0:	08003755 	.word	0x08003755
 80035a4:	08003755 	.word	0x08003755
 80035a8:	08003755 	.word	0x08003755
 80035ac:	08003755 	.word	0x08003755
 80035b0:	08003755 	.word	0x08003755
 80035b4:	08003755 	.word	0x08003755
 80035b8:	08003755 	.word	0x08003755
 80035bc:	08003755 	.word	0x08003755
 80035c0:	08003755 	.word	0x08003755
 80035c4:	08003755 	.word	0x08003755
 80035c8:	08003755 	.word	0x08003755
 80035cc:	08003755 	.word	0x08003755
 80035d0:	08003755 	.word	0x08003755
 80035d4:	08003755 	.word	0x08003755
 80035d8:	08003755 	.word	0x08003755
 80035dc:	08003755 	.word	0x08003755
 80035e0:	08003755 	.word	0x08003755
 80035e4:	08003755 	.word	0x08003755
 80035e8:	08003755 	.word	0x08003755
 80035ec:	08003755 	.word	0x08003755
 80035f0:	08003755 	.word	0x08003755
 80035f4:	08003755 	.word	0x08003755
 80035f8:	08003755 	.word	0x08003755
 80035fc:	08003755 	.word	0x08003755
 8003600:	08003755 	.word	0x08003755
 8003604:	08003755 	.word	0x08003755
 8003608:	08003755 	.word	0x08003755
 800360c:	08003755 	.word	0x08003755
 8003610:	08003755 	.word	0x08003755
 8003614:	08003755 	.word	0x08003755
 8003618:	08003755 	.word	0x08003755
 800361c:	08003755 	.word	0x08003755
 8003620:	08003755 	.word	0x08003755
 8003624:	08003755 	.word	0x08003755
 8003628:	08003755 	.word	0x08003755
 800362c:	08003755 	.word	0x08003755
 8003630:	08003755 	.word	0x08003755
 8003634:	08003755 	.word	0x08003755
 8003638:	08003755 	.word	0x08003755
 800363c:	08003755 	.word	0x08003755
 8003640:	08003755 	.word	0x08003755
 8003644:	08003755 	.word	0x08003755
 8003648:	08003755 	.word	0x08003755
 800364c:	08003755 	.word	0x08003755
 8003650:	08003755 	.word	0x08003755
 8003654:	08003751 	.word	0x08003751
    case 100: return "Continue";
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <mg_http_status_code_str+0x8f8>)
 800365a:	e07c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <mg_http_status_code_str+0x8fc>)
 800365e:	e07a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <mg_http_status_code_str+0x900>)
 8003662:	e078      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <mg_http_status_code_str+0x904>)
 8003666:	e076      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8003668:	4b42      	ldr	r3, [pc, #264]	; (8003774 <mg_http_status_code_str+0x908>)
 800366a:	e074      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <mg_http_status_code_str+0x90c>)
 800366e:	e072      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8003670:	4b42      	ldr	r3, [pc, #264]	; (800377c <mg_http_status_code_str+0x910>)
 8003672:	e070      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <mg_http_status_code_str+0x914>)
 8003676:	e06e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8003678:	4b42      	ldr	r3, [pc, #264]	; (8003784 <mg_http_status_code_str+0x918>)
 800367a:	e06c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <mg_http_status_code_str+0x91c>)
 800367e:	e06a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8003680:	4b42      	ldr	r3, [pc, #264]	; (800378c <mg_http_status_code_str+0x920>)
 8003682:	e068      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <mg_http_status_code_str+0x924>)
 8003686:	e066      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <mg_http_status_code_str+0x928>)
 800368a:	e064      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800368c:	4b42      	ldr	r3, [pc, #264]	; (8003798 <mg_http_status_code_str+0x92c>)
 800368e:	e062      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <mg_http_status_code_str+0x930>)
 8003692:	e060      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <mg_http_status_code_str+0x934>)
 8003696:	e05e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <mg_http_status_code_str+0x938>)
 800369a:	e05c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <mg_http_status_code_str+0x93c>)
 800369e:	e05a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <mg_http_status_code_str+0x940>)
 80036a2:	e058      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 80036a4:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <mg_http_status_code_str+0x944>)
 80036a6:	e056      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <mg_http_status_code_str+0x948>)
 80036aa:	e054      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <mg_http_status_code_str+0x94c>)
 80036ae:	e052      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <mg_http_status_code_str+0x950>)
 80036b2:	e050      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <mg_http_status_code_str+0x954>)
 80036b6:	e04e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <mg_http_status_code_str+0x958>)
 80036ba:	e04c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <mg_http_status_code_str+0x95c>)
 80036be:	e04a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 80036c0:	4b42      	ldr	r3, [pc, #264]	; (80037cc <mg_http_status_code_str+0x960>)
 80036c2:	e048      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <mg_http_status_code_str+0x964>)
 80036c6:	e046      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <mg_http_status_code_str+0x968>)
 80036ca:	e044      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80036cc:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <mg_http_status_code_str+0x96c>)
 80036ce:	e042      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80036d0:	4b42      	ldr	r3, [pc, #264]	; (80037dc <mg_http_status_code_str+0x970>)
 80036d2:	e040      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80036d4:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <mg_http_status_code_str+0x974>)
 80036d6:	e03e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <mg_http_status_code_str+0x978>)
 80036da:	e03c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80036dc:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <mg_http_status_code_str+0x97c>)
 80036de:	e03a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <mg_http_status_code_str+0x980>)
 80036e2:	e038      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <mg_http_status_code_str+0x984>)
 80036e6:	e036      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <mg_http_status_code_str+0x988>)
 80036ea:	e034      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <mg_http_status_code_str+0x98c>)
 80036ee:	e032      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <mg_http_status_code_str+0x990>)
 80036f2:	e030      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80036f4:	4b42      	ldr	r3, [pc, #264]	; (8003800 <mg_http_status_code_str+0x994>)
 80036f6:	e02e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80036f8:	4b42      	ldr	r3, [pc, #264]	; (8003804 <mg_http_status_code_str+0x998>)
 80036fa:	e02c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80036fc:	4b42      	ldr	r3, [pc, #264]	; (8003808 <mg_http_status_code_str+0x99c>)
 80036fe:	e02a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8003700:	4b42      	ldr	r3, [pc, #264]	; (800380c <mg_http_status_code_str+0x9a0>)
 8003702:	e028      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <mg_http_status_code_str+0x9a4>)
 8003706:	e026      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8003708:	4b42      	ldr	r3, [pc, #264]	; (8003814 <mg_http_status_code_str+0x9a8>)
 800370a:	e024      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <mg_http_status_code_str+0x9ac>)
 800370e:	e022      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <mg_http_status_code_str+0x9b0>)
 8003712:	e020      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8003714:	4b42      	ldr	r3, [pc, #264]	; (8003820 <mg_http_status_code_str+0x9b4>)
 8003716:	e01e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <mg_http_status_code_str+0x9b8>)
 800371a:	e01c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <mg_http_status_code_str+0x9bc>)
 800371e:	e01a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <mg_http_status_code_str+0x9c0>)
 8003722:	e018      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8003724:	4b42      	ldr	r3, [pc, #264]	; (8003830 <mg_http_status_code_str+0x9c4>)
 8003726:	e016      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <mg_http_status_code_str+0x9c8>)
 800372a:	e014      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800372c:	4b42      	ldr	r3, [pc, #264]	; (8003838 <mg_http_status_code_str+0x9cc>)
 800372e:	e012      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8003730:	4b42      	ldr	r3, [pc, #264]	; (800383c <mg_http_status_code_str+0x9d0>)
 8003732:	e010      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <mg_http_status_code_str+0x9d4>)
 8003736:	e00e      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <mg_http_status_code_str+0x9d8>)
 800373a:	e00c      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <mg_http_status_code_str+0x9dc>)
 800373e:	e00a      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8003740:	4b42      	ldr	r3, [pc, #264]	; (800384c <mg_http_status_code_str+0x9e0>)
 8003742:	e008      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8003744:	4b42      	ldr	r3, [pc, #264]	; (8003850 <mg_http_status_code_str+0x9e4>)
 8003746:	e006      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <mg_http_status_code_str+0x9e8>)
 800374a:	e004      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800374c:	4b42      	ldr	r3, [pc, #264]	; (8003858 <mg_http_status_code_str+0x9ec>)
 800374e:	e002      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <mg_http_status_code_str+0x9f0>)
 8003752:	e000      	b.n	8003756 <mg_http_status_code_str+0x8ea>
    default: return "";
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <mg_http_status_code_str+0x9f4>)
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	0801b31c 	.word	0x0801b31c
 8003768:	0801b328 	.word	0x0801b328
 800376c:	0801b33c 	.word	0x0801b33c
 8003770:	0801b348 	.word	0x0801b348
 8003774:	0801b34c 	.word	0x0801b34c
 8003778:	0801b354 	.word	0x0801b354
 800377c:	0801b360 	.word	0x0801b360
 8003780:	0801b380 	.word	0x0801b380
 8003784:	0801b38c 	.word	0x0801b38c
 8003788:	0801b39c 	.word	0x0801b39c
 800378c:	0801b3ac 	.word	0x0801b3ac
 8003790:	0801b3bc 	.word	0x0801b3bc
 8003794:	0801b3d0 	.word	0x0801b3d0
 8003798:	0801b3d8 	.word	0x0801b3d8
 800379c:	0801b3ec 	.word	0x0801b3ec
 80037a0:	0801b400 	.word	0x0801b400
 80037a4:	0801b408 	.word	0x0801b408
 80037a8:	0801b414 	.word	0x0801b414
 80037ac:	0801b424 	.word	0x0801b424
 80037b0:	0801b430 	.word	0x0801b430
 80037b4:	0801b444 	.word	0x0801b444
 80037b8:	0801b458 	.word	0x0801b458
 80037bc:	0801b464 	.word	0x0801b464
 80037c0:	0801b474 	.word	0x0801b474
 80037c4:	0801b488 	.word	0x0801b488
 80037c8:	0801b494 	.word	0x0801b494
 80037cc:	0801b4a0 	.word	0x0801b4a0
 80037d0:	0801b4b4 	.word	0x0801b4b4
 80037d4:	0801b4c4 	.word	0x0801b4c4
 80037d8:	0801b4e4 	.word	0x0801b4e4
 80037dc:	0801b4f4 	.word	0x0801b4f4
 80037e0:	0801b500 	.word	0x0801b500
 80037e4:	0801b508 	.word	0x0801b508
 80037e8:	0801b518 	.word	0x0801b518
 80037ec:	0801b52c 	.word	0x0801b52c
 80037f0:	0801b540 	.word	0x0801b540
 80037f4:	0801b558 	.word	0x0801b558
 80037f8:	0801b570 	.word	0x0801b570
 80037fc:	0801b590 	.word	0x0801b590
 8003800:	0801b5a4 	.word	0x0801b5a4
 8003804:	0801b5b4 	.word	0x0801b5b4
 8003808:	0801b5c8 	.word	0x0801b5c8
 800380c:	0801b5e0 	.word	0x0801b5e0
 8003810:	0801b5e8 	.word	0x0801b5e8
 8003814:	0801b5fc 	.word	0x0801b5fc
 8003818:	0801b610 	.word	0x0801b610
 800381c:	0801b628 	.word	0x0801b628
 8003820:	0801b63c 	.word	0x0801b63c
 8003824:	0801b65c 	.word	0x0801b65c
 8003828:	0801b680 	.word	0x0801b680
 800382c:	0801b6a0 	.word	0x0801b6a0
 8003830:	0801b6b8 	.word	0x0801b6b8
 8003834:	0801b6d0 	.word	0x0801b6d0
 8003838:	0801b6e0 	.word	0x0801b6e0
 800383c:	0801b6ec 	.word	0x0801b6ec
 8003840:	0801b700 	.word	0x0801b700
 8003844:	0801b710 	.word	0x0801b710
 8003848:	0801b72c 	.word	0x0801b72c
 800384c:	0801b744 	.word	0x0801b744
 8003850:	0801b75c 	.word	0x0801b75c
 8003854:	0801b76c 	.word	0x0801b76c
 8003858:	0801b77c 	.word	0x0801b77c
 800385c:	0801b79c 	.word	0x0801b79c
 8003860:	0801b7bc 	.word	0x0801b7bc

08003864 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8003864:	b408      	push	{r3}
 8003866:	b580      	push	{r7, lr}
 8003868:	b08b      	sub	sp, #44	; 0x2c
 800386a:	af02      	add	r7, sp, #8
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8003872:	68b8      	ldr	r0, [r7, #8]
 8003874:	f7ff fafa 	bl	8002e6c <mg_http_status_code_str>
 8003878:	4602      	mov	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <mg_http_reply+0x20>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	e000      	b.n	8003886 <mg_http_reply+0x22>
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <mg_http_reply+0xa0>)
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	491e      	ldr	r1, [pc, #120]	; (8003908 <mg_http_reply+0xa4>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 ff40 	bl	8004714 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003898:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800389a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800389e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ac:	4817      	ldr	r0, [pc, #92]	; (800390c <mg_http_reply+0xa8>)
 80038ae:	f7fe fa7d 	bl	8001dac <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d916      	bls.n	80038e8 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3b0f      	subs	r3, #15
 80038c2:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80038cc:	4a10      	ldr	r2, [pc, #64]	; (8003910 <mg_http_reply+0xac>)
 80038ce:	210b      	movs	r1, #11
 80038d0:	f004 fa66 	bl	8007da0 <mg_snprintf>
 80038d4:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038da:	69f9      	ldr	r1, [r7, #28]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	440b      	add	r3, r1
 80038e0:	3b0f      	subs	r3, #15
 80038e2:	4413      	add	r3, r2
 80038e4:	2220      	movs	r2, #32
 80038e6:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 80038ee:	f36f 13c7 	bfc	r3, #7, #1
 80038f2:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
}
 80038f6:	bf00      	nop
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003900:	b001      	add	sp, #4
 8003902:	4770      	bx	lr
 8003904:	0801b7bc 	.word	0x0801b7bc
 8003908:	0801b7c0 	.word	0x0801b7c0
 800390c:	08007d31 	.word	0x08007d31
 8003910:	0801b7f4 	.word	0x0801b7f4

08003914 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f016 fa4f 	bl	8019dc4 <atoi>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <is_hex_digit>:

static bool is_hex_digit(int c) {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b2f      	cmp	r3, #47	; 0x2f
 800393c:	dd02      	ble.n	8003944 <is_hex_digit+0x14>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b39      	cmp	r3, #57	; 0x39
 8003942:	dd0b      	ble.n	800395c <is_hex_digit+0x2c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b60      	cmp	r3, #96	; 0x60
 8003948:	dd02      	ble.n	8003950 <is_hex_digit+0x20>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b66      	cmp	r3, #102	; 0x66
 800394e:	dd05      	ble.n	800395c <is_hex_digit+0x2c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	dd04      	ble.n	8003960 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b46      	cmp	r3, #70	; 0x46
 800395a:	dc01      	bgt.n	8003960 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <is_hex_digit+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b02      	cmp	r3, #2
 800398e:	dc04      	bgt.n	800399a <skip_chunk+0x26>
 8003990:	2300      	movs	r3, #0
 8003992:	e07a      	b.n	8003a8a <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	da09      	bge.n	80039b6 <skip_chunk+0x42>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ffc0 	bl	8003930 <is_hex_digit>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ee      	bne.n	8003994 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <skip_chunk+0x4e>
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c0:	e063      	b.n	8003a8a <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	dd02      	ble.n	80039ce <skip_chunk+0x5a>
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039cc:	e05d      	b.n	8003a8a <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	da0c      	bge.n	80039f0 <skip_chunk+0x7c>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b0d      	cmp	r3, #13
 80039e0:	d106      	bne.n	80039f0 <skip_chunk+0x7c>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b0a      	cmp	r3, #10
 80039ee:	d002      	beq.n	80039f6 <skip_chunk+0x82>
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039f4:	e049      	b.n	8003a8a <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 fc67 	bl	80082d2 <mg_str_n>
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	2204      	movs	r2, #4
 8003a0a:	9200      	str	r2, [sp, #0]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	f107 0114 	add.w	r1, r7, #20
 8003a12:	c903      	ldmia	r1, {r0, r1}
 8003a14:	f004 fcd1 	bl	80083ba <mg_str_to_num>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a28:	e02f      	b.n	8003a8a <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da02      	bge.n	8003a36 <skip_chunk+0xc2>
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a34:	e029      	b.n	8003a8a <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	1eda      	subs	r2, r3, #3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	dc01      	bgt.n	8003a48 <skip_chunk+0xd4>
 8003a44:	2300      	movs	r3, #0
 8003a46:	e020      	b.n	8003a8a <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b0d      	cmp	r3, #13
 8003a58:	d108      	bne.n	8003a6c <skip_chunk+0xf8>
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3303      	adds	r3, #3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b0a      	cmp	r3, #10
 8003a6a:	d002      	beq.n	8003a72 <skip_chunk+0xfe>
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a70:	e00b      	b.n	8003a8a <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	3302      	adds	r3, #2
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003aa0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003aa4:	6018      	str	r0, [r3, #0]
 8003aa6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003aaa:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003aae:	6019      	str	r1, [r3, #0]
 8003ab0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ab4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8003ab8:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8003aba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003abe:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	d031      	beq.n	8003b2c <http_cb+0x98>
 8003ac8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003acc:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b09      	cmp	r3, #9
 8003ad4:	d02a      	beq.n	8003b2c <http_cb+0x98>
 8003ad6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ada:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f040 8368 	bne.w	80041b6 <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8003ae6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003aea:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 835b 	beq.w	80041b6 <http_cb+0x722>
 8003b00:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003b04:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 834e 	bne.w	80041b6 <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 8003b1a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003b1e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8345 	beq.w	80041b6 <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8003b32:	e313      	b.n	800415c <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 8003b34:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003b38:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b40:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003b44:	4413      	add	r3, r2
 8003b46:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8003b4a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003b4e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	4619      	mov	r1, r3
 8003b62:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8003b66:	f7fe ffc3 	bl	8002af0 <mg_http_parse>
 8003b6a:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
      size_t old_len = c->recv.len;
 8003b74:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003b78:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
      if (n < 0) {
 8003b84:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da38      	bge.n	8003bfe <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8003b8c:	4bb7      	ldr	r3, [pc, #732]	; (8003e6c <http_cb+0x3d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dd10      	ble.n	8003bb6 <http_cb+0x122>
 8003b94:	4bb6      	ldr	r3, [pc, #728]	; (8003e70 <http_cb+0x3dc>)
 8003b96:	f640 125b 	movw	r2, #2395	; 0x95b
 8003b9a:	49b6      	ldr	r1, [pc, #728]	; (8003e74 <http_cb+0x3e0>)
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f000 fc63 	bl	8004468 <mg_log_prefix>
 8003ba2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ba6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4619      	mov	r1, r3
 8003bb0:	48b1      	ldr	r0, [pc, #708]	; (8003e78 <http_cb+0x3e4>)
 8003bb2:	f000 fca9 	bl	8004508 <mg_log>
        c->is_draining = 1;
 8003bb6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003bba:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8003bc4:	f043 0310 	orr.w	r3, r3, #16
 8003bc8:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8003bcc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003bd0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	bf28      	it	cs
 8003be2:	2310      	movcs	r3, #16
 8003be4:	4619      	mov	r1, r3
 8003be6:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8003bea:	f000 fcc3 	bl	8004574 <mg_hexdump>
        c->recv.len = 0;
 8003bee:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003bf2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
        return;
 8003bfc:	e2db      	b.n	80041b6 <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8003bfe:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 82c2 	beq.w	800418c <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8003c08:	f107 0210 	add.w	r2, r7, #16
 8003c0c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c10:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c14:	210a      	movs	r1, #10
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	f7fd fb74 	bl	8001304 <mg_call>
      if (c->recv.len != old_len) {
 8003c1c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c20:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d01d      	beq.n	8003c6c <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 8003c30:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <http_cb+0x3d8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	dd10      	ble.n	8003c5a <http_cb+0x1c6>
 8003c38:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <http_cb+0x3dc>)
 8003c3a:	f640 1265 	movw	r2, #2405	; 0x965
 8003c3e:	498d      	ldr	r1, [pc, #564]	; (8003e74 <http_cb+0x3e0>)
 8003c40:	2003      	movs	r0, #3
 8003c42:	f000 fc11 	bl	8004468 <mg_log_prefix>
 8003c46:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c4a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	4619      	mov	r1, r3
 8003c54:	4889      	ldr	r0, [pc, #548]	; (8003e7c <http_cb+0x3e8>)
 8003c56:	f000 fc57 	bl	8004508 <mg_log>
        c->pfn = NULL;
 8003c5a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c5e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return;
 8003c6a:	e2a4      	b.n	80041b6 <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8003c6c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c70:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	d128      	bne.n	8003ccc <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8003c7a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c7e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c86:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003c8a:	1ad2      	subs	r2, r2, r3
 8003c8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c90:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8003c98:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003c9c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ca4:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8003ca8:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8003cac:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8003cb0:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8003cb4:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8003cb8:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 8003cbc:	1a8a      	subs	r2, r1, r2
 8003cbe:	1a9a      	subs	r2, r3, r2
 8003cc0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003cc4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003cc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8003ccc:	f107 0310 	add.w	r3, r7, #16
 8003cd0:	496b      	ldr	r1, [pc, #428]	; (8003e80 <http_cb+0x3ec>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fd4f 	bl	8002776 <mg_http_get_header>
 8003cd8:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 8003cdc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01d      	beq.n	8003d20 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8003ce4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003ce8:	4966      	ldr	r1, [pc, #408]	; (8003e84 <http_cb+0x3f0>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fad4 	bl	8008298 <mg_str_s>
 8003cf0:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8003cf4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003cf8:	cb0c      	ldmia	r3, {r2, r3}
 8003cfa:	c903      	ldmia	r1, {r0, r1}
 8003cfc:	f004 fb16 	bl	800832c <mg_strcasecmp>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <http_cb+0x27a>
          is_chunked = true;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 8003d0c:	e0cf      	b.n	8003eae <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8003d0e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003d12:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003d16:	495c      	ldr	r1, [pc, #368]	; (8003e88 <http_cb+0x3f4>)
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f7fd fb13 	bl	8001344 <mg_error>
          return;
 8003d1e:	e24a      	b.n	80041b6 <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4959      	ldr	r1, [pc, #356]	; (8003e8c <http_cb+0x3f8>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fd25 	bl	8002776 <mg_http_get_header>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 80bd 	bne.w	8003eae <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8003d34:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003d38:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2205      	movs	r2, #5
 8003d40:	4953      	ldr	r1, [pc, #332]	; (8003e90 <http_cb+0x3fc>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fbd6 	bl	80024f4 <mg_ncasecmp>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	f887 326b 	strb.w	r3, [r7, #619]	; 0x26b
        bool require_content_len = false;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8003d5c:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d030      	beq.n	8003dcc <http_cb+0x338>
 8003d6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d6e:	4949      	ldr	r1, [pc, #292]	; (8003e94 <http_cb+0x400>)
 8003d70:	4618      	mov	r0, r3
 8003d72:	f004 fa91 	bl	8008298 <mg_str_s>
 8003d76:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003d7a:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 8003d7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d82:	cb0c      	ldmia	r3, {r2, r3}
 8003d84:	c903      	ldmia	r1, {r0, r1}
 8003d86:	f004 fad1 	bl	800832c <mg_strcasecmp>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8003d90:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003d94:	4940      	ldr	r1, [pc, #256]	; (8003e98 <http_cb+0x404>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 fa7e 	bl	8008298 <mg_str_s>
 8003d9c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003da0:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 8003da4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003da8:	cb0c      	ldmia	r3, {r2, r3}
 8003daa:	c903      	ldmia	r1, {r0, r1}
 8003dac:	f004 fabe 	bl	800832c <mg_strcasecmp>
 8003db0:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
          ofs += (size_t) n;  // this request has been processed
 8003dbc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003dc0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8003dca:	e022      	b.n	8003e12 <http_cb+0x37e>
        } else if (is_response) {
 8003dcc:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01e      	beq.n	8003e12 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8003dd4:	f107 0310 	add.w	r3, r7, #16
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fd9b 	bl	8003914 <mg_http_status>
 8003dde:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8003de2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003de6:	2bc7      	cmp	r3, #199	; 0xc7
 8003de8:	dd0a      	ble.n	8003e00 <http_cb+0x36c>
 8003dea:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003dee:	2bcc      	cmp	r3, #204	; 0xcc
 8003df0:	d006      	beq.n	8003e00 <http_cb+0x36c>
 8003df2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003df6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003dfa:	d001      	beq.n	8003e00 <http_cb+0x36c>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <http_cb+0x36e>
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
 8003e06:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
        }
        if (require_content_len) {
 8003e12:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d049      	beq.n	8003eae <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 8003e1a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003e1e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <http_cb+0x3b4>
 8003e32:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003e36:	f5a3 701f 	sub.w	r0, r3, #636	; 0x27c
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <http_cb+0x408>)
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <http_cb+0x408>)
 8003e3e:	f240 119b 	movw	r1, #411	; 0x19b
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	f7ff fd0e 	bl	8003864 <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <http_cb+0x3d8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	dd2e      	ble.n	8003eae <http_cb+0x41a>
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <http_cb+0x3dc>)
 8003e52:	f640 1288 	movw	r2, #2440	; 0x988
 8003e56:	4907      	ldr	r1, [pc, #28]	; (8003e74 <http_cb+0x3e0>)
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f000 fb05 	bl	8004468 <mg_log_prefix>
 8003e5e:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01e      	beq.n	8003ea4 <http_cb+0x410>
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <http_cb+0x40c>)
 8003e68:	e01d      	b.n	8003ea6 <http_cb+0x412>
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	0801f8e4 	.word	0x0801f8e4
 8003e74:	0801b0f4 	.word	0x0801b0f4
 8003e78:	0801bd0c 	.word	0x0801bd0c
 8003e7c:	0801bd24 	.word	0x0801bd24
 8003e80:	0801bd40 	.word	0x0801bd40
 8003e84:	0801bd54 	.word	0x0801bd54
 8003e88:	0801bd5c 	.word	0x0801bd5c
 8003e8c:	0801bd78 	.word	0x0801bd78
 8003e90:	0801b2d8 	.word	0x0801b2d8
 8003e94:	0801b2f4 	.word	0x0801b2f4
 8003e98:	0801b2f0 	.word	0x0801b2f0
 8003e9c:	0801b7bc 	.word	0x0801b7bc
 8003ea0:	0801bd88 	.word	0x0801bd88
 8003ea4:	4bc6      	ldr	r3, [pc, #792]	; (80041c0 <http_cb+0x72c>)
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	48c6      	ldr	r0, [pc, #792]	; (80041c4 <http_cb+0x730>)
 8003eaa:	f000 fb2d 	bl	8004508 <mg_log>
        }
      }

      if (is_chunked) {
 8003eae:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80c9 	beq.w	800404a <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8003eb8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ebc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec4:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8003ec8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003ecc:	440b      	add	r3, r1
 8003ece:	4413      	add	r3, r2
 8003ed0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8003eda:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ede:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8003ef6:	e006      	b.n	8003f06 <http_cb+0x472>
 8003ef8:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8003efc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f00:	4413      	add	r3, r2
 8003f02:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8003f06:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003f0a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003f0e:	18d0      	adds	r0, r2, r3
 8003f10:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003f14:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003f18:	1ad1      	subs	r1, r2, r3
 8003f1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003f1e:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8003f22:	f7ff fd27 	bl	8003974 <skip_chunk>
 8003f26:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
 8003f2a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd03      	ble.n	8003f3a <http_cb+0x4a6>
 8003f32:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1de      	bne.n	8003ef8 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8003f3a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8126 	beq.w	8004190 <http_cb+0x6fc>
        if (cl < 0) {
 8003f44:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da08      	bge.n	8003f5e <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 8003f4c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003f50:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8003f54:	499c      	ldr	r1, [pc, #624]	; (80041c8 <http_cb+0x734>)
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	f7fd f9f4 	bl	8001344 <mg_error>
          break;
 8003f5c:	e11b      	b.n	8004196 <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8003f64:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003f68:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f72:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8003f76:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003f7a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8003f82:	e03e      	b.n	8004002 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8003f84:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003f88:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003f8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003f90:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003f94:	18d0      	adds	r0, r2, r3
 8003f96:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003f9a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8003faa:	4619      	mov	r1, r3
 8003fac:	f016 fa21 	bl	801a3f2 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8003fb0:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8003fb4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003fb8:	4413      	add	r3, r2
 8003fba:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8003fbe:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003fc2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003fc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003fca:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8003fce:	441a      	add	r2, r3
 8003fd0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003fd4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003fd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003fdc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003fe0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003fe4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fe8:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8003fec:	441a      	add	r2, r3
 8003fee:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ff2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8003ff6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
          if (dl == 0) break;
 8003ffa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8004002:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004006:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800400a:	18d0      	adds	r0, r2, r3
 800400c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8004010:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004014:	1ad1      	subs	r1, r2, r3
 8004016:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800401a:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800401e:	f7ff fca9 	bl	8003974 <skip_chunk>
 8004022:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
 8004026:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800402a:	2b00      	cmp	r3, #0
 800402c:	dcaa      	bgt.n	8003f84 <http_cb+0x4f0>
 800402e:	e000      	b.n	8004032 <http_cb+0x59e>
          if (dl == 0) break;
 8004030:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8004032:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8004036:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800403a:	4413      	add	r3, r2
 800403c:	461a      	mov	r2, r3
 800403e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004042:	4413      	add	r3, r2
 8004044:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8004048:	e026      	b.n	8004098 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800404a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800404e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004056:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
        if (hm.body.len > len) break;  // Buffer more data
 8004066:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800406a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800406e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004072:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8004076:	429a      	cmp	r2, r3
 8004078:	f0c0 808c 	bcc.w	8004194 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800407c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004080:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8004084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004088:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800408c:	4413      	add	r3, r2
 800408e:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8004092:	4413      	add	r3, r2
 8004094:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8004098:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800409c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <http_cb+0x632>
 80040b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80040b4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80040c6:	f107 0210 	add.w	r2, r7, #16
 80040ca:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80040ce:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80040d2:	210b      	movs	r1, #11
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	f7fd f915 	bl	8001304 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 80040da:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80040de:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d034      	beq.n	800415c <http_cb+0x6c8>
 80040f2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80040f6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004100:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d128      	bne.n	800415c <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	492f      	ldr	r1, [pc, #188]	; (80041cc <http_cb+0x738>)
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fb30 	bl	8002776 <mg_http_get_header>
 8004116:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800411a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01c      	beq.n	800415c <http_cb+0x6c8>
 8004122:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004126:	492a      	ldr	r1, [pc, #168]	; (80041d0 <http_cb+0x73c>)
 8004128:	4618      	mov	r0, r3
 800412a:	f004 f8b5 	bl	8008298 <mg_str_s>
 800412e:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8004132:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004136:	cb0c      	ldmia	r3, {r2, r3}
 8004138:	c903      	ldmia	r1, {r0, r1}
 800413a:	f004 f8f7 	bl	800832c <mg_strcasecmp>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 8004144:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004148:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8004152:	f043 0310 	orr.w	r3, r3, #16
 8004156:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
          break;
 800415a:	e01c      	b.n	8004196 <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800415c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004160:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800416a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d110      	bne.n	8004196 <http_cb+0x702>
 8004174:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004178:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8004184:	429a      	cmp	r2, r3
 8004186:	f4ff acd5 	bcc.w	8003b34 <http_cb+0xa0>
 800418a:	e004      	b.n	8004196 <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 8004194:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8004196:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <http_cb+0x722>
 800419e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80041a2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3338      	adds	r3, #56	; 0x38
 80041aa:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f8d1 	bl	8004358 <mg_iobuf_del>
  }
  (void) ev_data;
}
 80041b6:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	0801bd94 	.word	0x0801bd94
 80041c4:	0801bd9c 	.word	0x0801bd9c
 80041c8:	0801bdbc 	.word	0x0801bdbc
 80041cc:	0801bdcc 	.word	0x0801bdcc
 80041d0:	0801bdd8 	.word	0x0801bdd8

080041d4 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb43 	bl	8004874 <mg_listen>
 80041ee:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <mg_http_listen+0x2a>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4a03      	ldr	r2, [pc, #12]	; (8004208 <mg_http_listen+0x34>)
 80041fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return c;
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08003a95 	.word	0x08003a95

0800420c <roundup>:





static size_t roundup(size_t size, size_t align) {
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <roundup+0x26>
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	e000      	b.n	8004234 <roundup+0x28>
 8004232:	687b      	ldr	r3, [r7, #4]
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8004240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af02      	add	r7, sp, #8
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4619      	mov	r1, r3
 8004256:	6838      	ldr	r0, [r7, #0]
 8004258:	f7ff ffd8 	bl	800420c <roundup>
 800425c:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d117      	bne.n	8004294 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f004 fd2a 	bl	8008cc8 <mg_bzero>
    free(io->buf);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f015 fdcd 	bl	8019e18 <free>
    io->buf = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	e053      	b.n	800433c <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d04e      	beq.n	800433c <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	2001      	movs	r0, #1
 80042a2:	f015 fd93 	bl	8019dcc <calloc>
 80042a6:	4603      	mov	r3, r0
 80042a8:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d028      	beq.n	8004302 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bf28      	it	cs
 80042ba:	4613      	movcs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <mg_iobuf_resize+0x9a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <mg_iobuf_resize+0x9a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4619      	mov	r1, r3
 80042d4:	6938      	ldr	r0, [r7, #16]
 80042d6:	f016 f88c 	bl	801a3f2 <memmove>
      mg_bzero(io->buf, io->size);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f004 fcef 	bl	8008cc8 <mg_bzero>
      free(io->buf);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f015 fd92 	bl	8019e18 <free>
      io->buf = (unsigned char *) p;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	e01c      	b.n	800433c <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <mg_iobuf_resize+0x108>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	dd16      	ble.n	800433c <mg_iobuf_resize+0xfc>
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <mg_iobuf_resize+0x10c>)
 8004310:	f640 2202 	movw	r2, #2562	; 0xa02
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <mg_iobuf_resize+0x110>)
 8004316:	2001      	movs	r0, #1
 8004318:	f000 f8a6 	bl	8004468 <mg_log_prefix>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	4698      	mov	r8, r3
 8004324:	4691      	mov	r9, r2
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	461c      	mov	r4, r3
 800432c:	4615      	mov	r5, r2
 800432e:	e9cd 4500 	strd	r4, r5, [sp]
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <mg_iobuf_resize+0x114>)
 8004338:	f000 f8e6 	bl	8004508 <mg_log>
    }
  }
  return ok;
 800433c:	697b      	ldr	r3, [r7, #20]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004348:	20000000 	.word	0x20000000
 800434c:	0801f8ec 	.word	0x0801f8ec
 8004350:	0801b0f4 	.word	0x0801b0f4
 8004354:	0801be18 	.word	0x0801be18

08004358 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	d902      	bls.n	8004374 <mg_iobuf_del+0x1c>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	441a      	add	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d904      	bls.n	800438c <mg_iobuf_del+0x34>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d012      	beq.n	80043ba <mg_iobuf_del+0x62>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	18d0      	adds	r0, r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	440b      	add	r3, r1
 80043a6:	18d1      	adds	r1, r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	f016 f81c 	bl	801a3f2 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <mg_iobuf_del+0x80>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	1acb      	subs	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f004 fc78 	bl	8008cc8 <mg_bzero>
  io->len -= len;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
  return len;
 80043e4:	687b      	ldr	r3, [r7, #4]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 80043f6:	2100      	movs	r1, #0
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff21 	bl	8004240 <mg_iobuf_resize>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <logc+0x20>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a05      	ldr	r2, [pc, #20]	; (800442c <logc+0x24>)
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	79fa      	ldrb	r2, [r7, #7]
 800441c:	4610      	mov	r0, r2
 800441e:	4798      	blx	r3
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000004 	.word	0x20000004
 800442c:	2000028c 	.word	0x2000028c

08004430 <logs>:

static void logs(const char *buf, size_t len) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e009      	b.n	8004454 <logs+0x24>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ffdd 	bl	8004408 <logc>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3f1      	bcc.n	8004440 <logs+0x10>
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b099      	sub	sp, #100	; 0x64
 800446c:	af06      	add	r7, sp, #24
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8004476:	212f      	movs	r1, #47	; 0x2f
 8004478:	68b8      	ldr	r0, [r7, #8]
 800447a:	f015 fffb 	bl	801a474 <strrchr>
 800447e:	6478      	str	r0, [r7, #68]	; 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <mg_log_prefix+0x28>
 8004486:	215c      	movs	r1, #92	; 0x5c
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f015 fff3 	bl	801a474 <strrchr>
 800448e:	6478      	str	r0, [r7, #68]	; 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8004490:	f7fc fd4c 	bl	8000f2c <mg_millis>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800449a:	2900      	cmp	r1, #0
 800449c:	d002      	beq.n	80044a4 <mg_log_prefix+0x3c>
 800449e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044a0:	3101      	adds	r1, #1
 80044a2:	e000      	b.n	80044a6 <mg_log_prefix+0x3e>
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	f107 0414 	add.w	r4, r7, #20
 80044aa:	6838      	ldr	r0, [r7, #0]
 80044ac:	9005      	str	r0, [sp, #20]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	9004      	str	r0, [sp, #16]
 80044b2:	9103      	str	r1, [sp, #12]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	9102      	str	r1, [sp, #8]
 80044b8:	e9cd 2300 	strd	r2, r3, [sp]
 80044bc:	4a11      	ldr	r2, [pc, #68]	; (8004504 <mg_log_prefix+0x9c>)
 80044be:	2129      	movs	r1, #41	; 0x29
 80044c0:	4620      	mov	r0, r4
 80044c2:	f003 fc6d 	bl	8007da0 <mg_snprintf>
 80044c6:	6438      	str	r0, [r7, #64]	; 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80044c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ca:	2b27      	cmp	r3, #39	; 0x27
 80044cc:	d90a      	bls.n	80044e4 <mg_log_prefix+0x7c>
 80044ce:	2327      	movs	r3, #39	; 0x27
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 80044d2:	e007      	b.n	80044e4 <mg_log_prefix+0x7c>
 80044d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	643a      	str	r2, [r7, #64]	; 0x40
 80044da:	3348      	adds	r3, #72	; 0x48
 80044dc:	443b      	add	r3, r7
 80044de:	2220      	movs	r2, #32
 80044e0:	f803 2c34 	strb.w	r2, [r3, #-52]
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	2b28      	cmp	r3, #40	; 0x28
 80044e8:	d9f4      	bls.n	80044d4 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff9b 	bl	8004430 <logs>
}
 80044fa:	bf00      	nop
 80044fc:	374c      	adds	r7, #76	; 0x4c
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}
 8004502:	bf00      	nop
 8004504:	0801be50 	.word	0x0801be50

08004508 <mg_log>:

void mg_log(const char *fmt, ...) {
 8004508:	b40f      	push	{r0, r1, r2, r3}
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <mg_log+0x34>)
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <mg_log+0x38>)
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	f7fd fc43 	bl	8001dac <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8004526:	2102      	movs	r1, #2
 8004528:	4806      	ldr	r0, [pc, #24]	; (8004544 <mg_log+0x3c>)
 800452a:	f7ff ff81 	bl	8004430 <logs>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004538:	b004      	add	sp, #16
 800453a:	4770      	bx	lr
 800453c:	20000004 	.word	0x20000004
 8004540:	2000028c 	.word	0x2000028c
 8004544:	0801b2c4 	.word	0x0801b2c4

08004548 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b09      	cmp	r3, #9
 8004554:	d804      	bhi.n	8004560 <nibble+0x18>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3330      	adds	r3, #48	; 0x30
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e003      	b.n	8004568 <nibble+0x20>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	3357      	adds	r3, #87	; 0x57
 8004566:	b2db      	uxtb	r3, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	e07a      	b.n	8004684 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2b00      	cmp	r3, #0
 8004596:	d13a      	bne.n	800460e <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <mg_hexdump+0x4a>
 800459e:	2102      	movs	r1, #2
 80045a0:	484c      	ldr	r0, [pc, #304]	; (80046d4 <mg_hexdump+0x160>)
 80045a2:	f7ff ff45 	bl	8004430 <logs>
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	2110      	movs	r1, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff3f 	bl	8004430 <logs>
 80045b2:	200a      	movs	r0, #10
 80045b4:	f7ff ff28 	bl	8004408 <logc>
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	0b1b      	lsrs	r3, r3, #12
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ffbe 	bl	8004548 <nibble>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff1a 	bl	8004408 <logc>
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ffb3 	bl	8004548 <nibble>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff0f 	bl	8004408 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ffa8 	bl	8004548 <nibble>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff04 	bl	8004408 <logc>
 8004600:	2030      	movs	r0, #48	; 0x30
 8004602:	f7ff ff01 	bl	8004408 <logc>
 8004606:	2103      	movs	r1, #3
 8004608:	4833      	ldr	r0, [pc, #204]	; (80046d8 <mg_hexdump+0x164>)
 800460a:	f7ff ff11 	bl	8004430 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	4413      	add	r3, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ff94 	bl	8004548 <nibble>
 8004620:	4603      	mov	r3, r0
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fef0 	bl	8004408 <logc>
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	4413      	add	r3, r2
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff87 	bl	8004548 <nibble>
 800463a:	4603      	mov	r3, r0
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fee3 	bl	8004408 <logc>
    logc(' ');                                         // Space after hex number
 8004642:	2020      	movs	r0, #32
 8004644:	f7ff fee0 	bl	8004408 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b1f      	cmp	r3, #31
 8004652:	d90a      	bls.n	800466a <mg_hexdump+0xf6>
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	4413      	add	r3, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b7e      	cmp	r3, #126	; 0x7e
 800465e:	d804      	bhi.n	800466a <mg_hexdump+0xf6>
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	4413      	add	r3, r2
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	e000      	b.n	800466c <mg_hexdump+0xf8>
 800466a:	222e      	movs	r2, #46	; 0x2e
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8004676:	3328      	adds	r3, #40	; 0x28
 8004678:	443b      	add	r3, r7
 800467a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	3301      	adds	r3, #1
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d380      	bcc.n	800458e <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800468c:	e00d      	b.n	80046aa <mg_hexdump+0x136>
 800468e:	2103      	movs	r1, #3
 8004690:	4811      	ldr	r0, [pc, #68]	; (80046d8 <mg_hexdump+0x164>)
 8004692:	f7ff fecd 	bl	8004430 <logs>
 8004696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80046a0:	3328      	adds	r3, #40	; 0x28
 80046a2:	443b      	add	r3, r7
 80046a4:	2220      	movs	r2, #32
 80046a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80046aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d9ed      	bls.n	800468e <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80046b2:	2102      	movs	r1, #2
 80046b4:	4807      	ldr	r0, [pc, #28]	; (80046d4 <mg_hexdump+0x160>)
 80046b6:	f7ff febb 	bl	8004430 <logs>
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	2110      	movs	r1, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff feb5 	bl	8004430 <logs>
 80046c6:	200a      	movs	r0, #10
 80046c8:	f7ff fe9e 	bl	8004408 <logc>
}
 80046cc:	bf00      	nop
 80046ce:	3728      	adds	r7, #40	; 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	0801be64 	.word	0x0801be64
 80046d8:	0801be68 	.word	0x0801be68

080046dc <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4805      	ldr	r0, [pc, #20]	; (8004710 <mg_vprintf+0x34>)
 80046fa:	f7fd fb57 	bl	8001dac <mg_vxprintf>
  return c->send.len - old;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	1ad3      	subs	r3, r2, r3
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	08007d31 	.word	0x08007d31

08004714 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8004714:	b40e      	push	{r1, r2, r3}
 8004716:	b580      	push	{r7, lr}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8004722:	f107 0320 	add.w	r3, r7, #32
 8004726:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	461a      	mov	r2, r3
 800472e:	69f9      	ldr	r1, [r7, #28]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ffd3 	bl	80046dc <mg_vprintf>
 8004736:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004744:	b003      	add	sp, #12
 8004746:	4770      	bx	lr

08004748 <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	33b0      	adds	r3, #176	; 0xb0
 8004756:	4619      	mov	r1, r3
 8004758:	2001      	movs	r0, #1
 800475a:	f015 fb37 	bl	8019dcc <calloc>
 800475e:	4603      	mov	r3, r0
 8004760:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d017      	beq.n	8004798 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004774:	675a      	str	r2, [r3, #116]	; 0x74
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	61da      	str	r2, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	635a      	str	r2, [r3, #52]	; 0x34
    MG_PROF_INIT(c);
  }
  return c;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fc fd87 	bl	80012c0 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <mg_close_conn+0x1c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d1f7      	bne.n	80047ba <mg_close_conn+0x16>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d103      	bne.n	80047e6 <mg_close_conn+0x42>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d103      	bne.n	80047fa <mg_close_conn+0x56>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2109      	movs	r1, #9
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fd80 	bl	8001304 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8004804:	4b17      	ldr	r3, [pc, #92]	; (8004864 <mg_close_conn+0xc0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b02      	cmp	r3, #2
 800480a:	dd0e      	ble.n	800482a <mg_close_conn+0x86>
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <mg_close_conn+0xc4>)
 800480e:	f640 726c 	movw	r2, #3948	; 0xf6c
 8004812:	4916      	ldr	r1, [pc, #88]	; (800486c <mg_close_conn+0xc8>)
 8004814:	2003      	movs	r0, #3
 8004816:	f7ff fe27 	bl	8004468 <mg_log_prefix>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	461a      	mov	r2, r3
 8004824:	4812      	ldr	r0, [pc, #72]	; (8004870 <mg_close_conn+0xcc>)
 8004826:	f7ff fe6f 	bl	8004508 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f004 f8cd 	bl	80089ca <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3338      	adds	r3, #56	; 0x38
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fdda 	bl	80043ee <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3348      	adds	r3, #72	; 0x48
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fdd5 	bl	80043ee <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3368      	adds	r3, #104	; 0x68
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fdd0 	bl	80043ee <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800484e:	21b0      	movs	r1, #176	; 0xb0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f004 fa39 	bl	8008cc8 <mg_bzero>
  free(c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f015 fade 	bl	8019e18 <free>
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000000 	.word	0x20000000
 8004868:	0801f8fc 	.word	0x0801f8fc
 800486c:	0801b0f4 	.word	0x0801b0f4
 8004870:	0801bf00 	.word	0x0801bf00

08004874 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff ff5e 	bl	8004748 <mg_alloc_conn>
 800488c:	6178      	str	r0, [r7, #20]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 8004894:	4b40      	ldr	r3, [pc, #256]	; (8004998 <mg_listen+0x124>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dd78      	ble.n	800498e <mg_listen+0x11a>
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <mg_listen+0x128>)
 800489e:	f640 7291 	movw	r2, #3985	; 0xf91
 80048a2:	493f      	ldr	r1, [pc, #252]	; (80049a0 <mg_listen+0x12c>)
 80048a4:	2001      	movs	r0, #1
 80048a6:	f7ff fddf 	bl	8004468 <mg_log_prefix>
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	483d      	ldr	r0, [pc, #244]	; (80049a4 <mg_listen+0x130>)
 80048ae:	f7ff fe2b 	bl	8004508 <mg_log>
 80048b2:	e06c      	b.n	800498e <mg_listen+0x11a>
  } else if (!mg_open_listener(c, url)) {
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f003 f823 	bl	8007902 <mg_open_listener>
 80048bc:	4603      	mov	r3, r0
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d017      	beq.n	80048f8 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80048c8:	4b33      	ldr	r3, [pc, #204]	; (8004998 <mg_listen+0x124>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd0d      	ble.n	80048ec <mg_listen+0x78>
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <mg_listen+0x128>)
 80048d2:	f640 7293 	movw	r2, #3987	; 0xf93
 80048d6:	4932      	ldr	r1, [pc, #200]	; (80049a0 <mg_listen+0x12c>)
 80048d8:	2001      	movs	r0, #1
 80048da:	f7ff fdc5 	bl	8004468 <mg_log_prefix>
 80048de:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <mg_listen+0x134>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4831      	ldr	r0, [pc, #196]	; (80049ac <mg_listen+0x138>)
 80048e8:	f7ff fe0e 	bl	8004508 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f015 fa93 	bl	8019e18 <free>
    c = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e04a      	b.n	800498e <mg_listen+0x11a>
  } else {
    c->is_listening = 1;
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8004906:	2204      	movs	r2, #4
 8004908:	4929      	ldr	r1, [pc, #164]	; (80049b0 <mg_listen+0x13c>)
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f015 fda0 	bl	801a450 <strncmp>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2d9      	uxtb	r1, r3
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8004922:	f361 0300 	bfi	r3, r1, #0, #1
 8004926:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	679a      	str	r2, [r3, #120]	; 0x78
    c->fn_data = fn_data;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8004944:	2200      	movs	r2, #0
 8004946:	2101      	movs	r1, #1
 8004948:	6978      	ldr	r0, [r7, #20]
 800494a:	f7fc fcdb 	bl	8001304 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 800494e:	68b8      	ldr	r0, [r7, #8]
 8004950:	f004 f88c 	bl	8008a6c <mg_url_is_ssl>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <mg_listen+0xf4>
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8004960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004964:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <mg_listen+0x124>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b02      	cmp	r3, #2
 800496e:	dd0e      	ble.n	800498e <mg_listen+0x11a>
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <mg_listen+0x128>)
 8004972:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004976:	490a      	ldr	r1, [pc, #40]	; (80049a0 <mg_listen+0x12c>)
 8004978:	2003      	movs	r0, #3
 800497a:	f7ff fd75 	bl	8004468 <mg_log_prefix>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	480a      	ldr	r0, [pc, #40]	; (80049b4 <mg_listen+0x140>)
 800498a:	f7ff fdbd 	bl	8004508 <mg_log>
  }
  return c;
 800498e:	697b      	ldr	r3, [r7, #20]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000000 	.word	0x20000000
 800499c:	0801f90c 	.word	0x0801f90c
 80049a0:	0801b0f4 	.word	0x0801b0f4
 80049a4:	0801bf28 	.word	0x0801bf28
 80049a8:	2000b750 	.word	0x2000b750
 80049ac:	0801bf30 	.word	0x0801bf30
 80049b0:	0801bf20 	.word	0x0801bf20
 80049b4:	0801b238 	.word	0x0801b238

080049b8 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 80049c0:	2248      	movs	r2, #72	; 0x48
 80049c2:	2100      	movs	r1, #0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f015 fd2e 	bl	801a426 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <mg_mgr_init+0xa8>)
 80049d4:	2204      	movs	r2, #4
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <mg_mgr_init+0xa8>)
 80049da:	2200      	movs	r2, #0
 80049dc:	711a      	strb	r2, [r3, #4]
 80049de:	2000      	movs	r0, #0
 80049e0:	f004 f9c4 	bl	8008d6c <mg_ntohl>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <mg_mgr_init+0xac>)
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	2000      	movs	r0, #0
 80049ec:	f004 f9be 	bl	8008d6c <mg_ntohl>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <mg_mgr_init+0xac>)
 80049f4:	60d3      	str	r3, [r2, #12]
 80049f6:	2000      	movs	r0, #0
 80049f8:	f004 f9b8 	bl	8008d6c <mg_ntohl>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <mg_mgr_init+0xac>)
 8004a00:	6113      	str	r3, [r2, #16]
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <mg_mgr_init+0xac>)
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <mg_mgr_init+0xb0>)
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <mg_mgr_init+0xac>)
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <mg_mgr_init+0xa8>)
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004a0e:	4915      	ldr	r1, [pc, #84]	; (8004a64 <mg_mgr_init+0xac>)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f002 fe45 	bl	80076a0 <mg_tcpip_init>
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <mg_mgr_init+0xb4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	dd0b      	ble.n	8004a36 <mg_mgr_init+0x7e>
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <mg_mgr_init+0xb8>)
 8004a20:	f640 72e8 	movw	r2, #4072	; 0xfe8
 8004a24:	4913      	ldr	r1, [pc, #76]	; (8004a74 <mg_mgr_init+0xbc>)
 8004a26:	2002      	movs	r0, #2
 8004a28:	f7ff fd1e 	bl	8004468 <mg_log_prefix>
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <mg_mgr_init+0xac>)
 8004a2e:	4912      	ldr	r1, [pc, #72]	; (8004a78 <mg_mgr_init+0xc0>)
 8004a30:	4812      	ldr	r0, [pc, #72]	; (8004a7c <mg_mgr_init+0xc4>)
 8004a32:	f7ff fd69 	bl	8004508 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
  mgr->dnstimeout = 3000;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a44:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <mg_mgr_init+0xc8>)
 8004a4a:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <mg_mgr_init+0xcc>)
 8004a50:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f004 f800 	bl	8008a58 <mg_tls_ctx_init>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20003338 	.word	0x20003338
 8004a64:	20003340 	.word	0x20003340
 8004a68:	20000008 	.word	0x20000008
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	0801f918 	.word	0x0801f918
 8004a74:	0801b0f4 	.word	0x0801b0f4
 8004a78:	08007fb9 	.word	0x08007fb9
 8004a7c:	0801bf60 	.word	0x0801bf60
 8004a80:	0801bf78 	.word	0x0801bf78
 8004a84:	0801bf8c 	.word	0x0801bf8c

08004a88 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <mg_tcpip_call+0x20>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	4798      	blx	r3
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68fc      	ldr	r4, [r7, #12]
 8004acc:	463b      	mov	r3, r7
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f003 fbfe 	bl	80082d2 <mg_str_n>
 8004ad6:	f104 0308 	add.w	r3, r4, #8
 8004ada:	463a      	mov	r2, r7
 8004adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e014      	b.n	8004b2c <csumup+0x40>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <csumup+0x2a>
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	e004      	b.n	8004b20 <csumup+0x34>
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3e6      	bcc.n	8004b02 <csumup+0x16>
  return sum;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8004b4a:	e005      	b.n	8004b58 <csumfin+0x16>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	4413      	add	r3, r2
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f5      	bne.n	8004b4c <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f004 f918 	bl	8008d9e <mg_ntohs>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7ff ffb0 	bl	8004aec <csumup>
 8004b8c:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ffd7 	bl	8004b42 <csumfin>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8004ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	33b0      	adds	r3, #176	; 0xb0
 8004bba:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d013      	beq.n	8004bea <settmout+0x4a>
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d00e      	beq.n	8004be6 <settmout+0x46>
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d008      	beq.n	8004be0 <settmout+0x40>
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d102      	bne.n	8004bda <settmout+0x3a>
 8004bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd8:	e008      	b.n	8004bec <settmout+0x4c>
 8004bda:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8004bde:	e005      	b.n	8004bec <settmout+0x4c>
 8004be0:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004be4:	e002      	b.n	8004bec <settmout+0x4c>
 8004be6:	2364      	movs	r3, #100	; 0x64
 8004be8:	e000      	b.n	8004bec <settmout+0x4c>
 8004bea:	2396      	movs	r3, #150	; 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8004bec:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	eb12 0804 	adds.w	r8, r2, r4
 8004c00:	eb43 0905 	adc.w	r9, r3, r5
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8004c10:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <settmout+0xa8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	dd12      	ble.n	8004c3e <settmout+0x9e>
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <settmout+0xac>)
 8004c1a:	f241 02a6 	movw	r2, #4262	; 0x10a6
 8004c1e:	490c      	ldr	r1, [pc, #48]	; (8004c50 <settmout+0xb0>)
 8004c20:	2004      	movs	r0, #4
 8004c22:	f7ff fc21 	bl	8004468 <mg_log_prefix>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c2a:	78f8      	ldrb	r0, [r7, #3]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c32:	e9cd 2300 	strd	r2, r3, [sp]
 8004c36:	4602      	mov	r2, r0
 8004c38:	4806      	ldr	r0, [pc, #24]	; (8004c54 <settmout+0xb4>)
 8004c3a:	f7ff fc65 	bl	8004508 <mg_log>
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c48:	20000000 	.word	0x20000000
 8004c4c:	0801f924 	.word	0x0801f924
 8004c50:	0801b0f4 	.word	0x0801b0f4
 8004c54:	0801bfac 	.word	0x0801bfac

08004c58 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6950      	ldr	r0, [r2, #20]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4798      	blx	r3
 8004c72:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d104      	bne.n	8004c86 <ether_output+0x2e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	675a      	str	r2, [r3, #116]	; 0x74
  return n;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	330e      	adds	r3, #14
 8004ca6:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2206      	movs	r2, #6
 8004cac:	21ff      	movs	r1, #255	; 0xff
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f015 fbb9 	bl	801a426 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3306      	adds	r3, #6
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	2206      	movs	r2, #6
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f015 fc74 	bl	801a5aa <memcpy>
  eth->type = mg_htons(0x806);
 8004cc2:	f640 0006 	movw	r0, #2054	; 0x806
 8004cc6:	f004 f86a 	bl	8008d9e <mg_ntohs>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8004cd2:	221c      	movs	r2, #28
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	6938      	ldr	r0, [r7, #16]
 8004cd8:	f015 fba5 	bl	801a426 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f004 f85e 	bl	8008d9e <mg_ntohs>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cee:	f004 f856 	bl	8008d9e <mg_ntohs>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	805a      	strh	r2, [r3, #2]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2206      	movs	r2, #6
 8004cfe:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2204      	movs	r2, #4
 8004d04:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8004d06:	2001      	movs	r0, #1
 8004d08:	f004 f849 	bl	8008d9e <mg_ntohs>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	80da      	strh	r2, [r3, #6]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	619a      	str	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3308      	adds	r3, #8
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	2206      	movs	r2, #6
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f015 fc3c 	bl	801a5aa <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <mg_tcpip_arp_request+0xb6>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	3312      	adds	r3, #18
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f015 fc32 	bl	801a5aa <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f103 021c 	add.w	r2, r3, #28
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff80 	bl	8004c58 <ether_output>
}
 8004d58:	bf00      	nop
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d135      	bne.n	8004dde <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8004d72:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <onstatechange+0x128>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	dd0d      	ble.n	8004d96 <onstatechange+0x36>
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <onstatechange+0x12c>)
 8004d7c:	f44f 5286 	mov.w	r2, #4288	; 0x10c0
 8004d80:	4943      	ldr	r1, [pc, #268]	; (8004e90 <onstatechange+0x130>)
 8004d82:	2002      	movs	r0, #2
 8004d84:	f7ff fb70 	bl	8004468 <mg_log_prefix>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4941      	ldr	r1, [pc, #260]	; (8004e94 <onstatechange+0x134>)
 8004d90:	4841      	ldr	r0, [pc, #260]	; (8004e98 <onstatechange+0x138>)
 8004d92:	f7ff fbb9 	bl	8004508 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8004d96:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <onstatechange+0x128>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	dd0d      	ble.n	8004dba <onstatechange+0x5a>
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <onstatechange+0x12c>)
 8004da0:	f241 02c1 	movw	r2, #4289	; 0x10c1
 8004da4:	493a      	ldr	r1, [pc, #232]	; (8004e90 <onstatechange+0x130>)
 8004da6:	2002      	movs	r0, #2
 8004da8:	f7ff fb5e 	bl	8004468 <mg_log_prefix>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3310      	adds	r3, #16
 8004db0:	461a      	mov	r2, r3
 8004db2:	4938      	ldr	r1, [pc, #224]	; (8004e94 <onstatechange+0x134>)
 8004db4:	4839      	ldr	r0, [pc, #228]	; (8004e9c <onstatechange+0x13c>)
 8004db6:	f7ff fba7 	bl	8004508 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8004dba:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <onstatechange+0x128>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	dd57      	ble.n	8004e72 <onstatechange+0x112>
 8004dc2:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <onstatechange+0x12c>)
 8004dc4:	f241 02c2 	movw	r2, #4290	; 0x10c2
 8004dc8:	4931      	ldr	r1, [pc, #196]	; (8004e90 <onstatechange+0x130>)
 8004dca:	2002      	movs	r0, #2
 8004dcc:	f7ff fb4c 	bl	8004468 <mg_log_prefix>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4932      	ldr	r1, [pc, #200]	; (8004ea0 <onstatechange+0x140>)
 8004dd6:	4833      	ldr	r0, [pc, #204]	; (8004ea4 <onstatechange+0x144>)
 8004dd8:	f7ff fb96 	bl	8004508 <mg_log>
 8004ddc:	e049      	b.n	8004e72 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d115      	bne.n	8004e14 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <onstatechange+0x128>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dd09      	ble.n	8004e04 <onstatechange+0xa4>
 8004df0:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <onstatechange+0x12c>)
 8004df2:	f241 02c4 	movw	r2, #4292	; 0x10c4
 8004df6:	4926      	ldr	r1, [pc, #152]	; (8004e90 <onstatechange+0x130>)
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f7ff fb35 	bl	8004468 <mg_log_prefix>
 8004dfe:	482a      	ldr	r0, [pc, #168]	; (8004ea8 <onstatechange+0x148>)
 8004e00:	f7ff fb82 	bl	8004508 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff3f 	bl	8004c90 <mg_tcpip_arp_request>
 8004e12:	e02e      	b.n	8004e72 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d116      	bne.n	8004e4c <onstatechange+0xec>
    MG_ERROR(("Link up"));
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <onstatechange+0x128>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dd09      	ble.n	8004e3a <onstatechange+0xda>
 8004e26:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <onstatechange+0x12c>)
 8004e28:	f241 02c7 	movw	r2, #4295	; 0x10c7
 8004e2c:	4918      	ldr	r1, [pc, #96]	; (8004e90 <onstatechange+0x130>)
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7ff fb1a 	bl	8004468 <mg_log_prefix>
 8004e34:	481d      	ldr	r0, [pc, #116]	; (8004eac <onstatechange+0x14c>)
 8004e36:	f7ff fb67 	bl	8004508 <mg_log>
    srand((unsigned int) mg_millis());
 8004e3a:	f7fc f877 	bl	8000f2c <mg_millis>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4613      	mov	r3, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f015 f89b 	bl	8019f80 <srand>
 8004e4a:	e012      	b.n	8004e72 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <onstatechange+0x128>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dd09      	ble.n	8004e72 <onstatechange+0x112>
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <onstatechange+0x12c>)
 8004e60:	f241 02ca 	movw	r2, #4298	; 0x10ca
 8004e64:	490a      	ldr	r1, [pc, #40]	; (8004e90 <onstatechange+0x130>)
 8004e66:	2001      	movs	r0, #1
 8004e68:	f7ff fafe 	bl	8004468 <mg_log_prefix>
 8004e6c:	4810      	ldr	r0, [pc, #64]	; (8004eb0 <onstatechange+0x150>)
 8004e6e:	f7ff fb4b 	bl	8004508 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	337c      	adds	r3, #124	; 0x7c
 8004e76:	461a      	mov	r2, r3
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe04 	bl	8004a88 <mg_tcpip_call>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	0801f930 	.word	0x0801f930
 8004e90:	0801b0f4 	.word	0x0801b0f4
 8004e94:	08007ef5 	.word	0x08007ef5
 8004e98:	0801bfbc 	.word	0x0801bfbc
 8004e9c:	0801bfcc 	.word	0x0801bfcc
 8004ea0:	08007fb9 	.word	0x08007fb9
 8004ea4:	0801bfdc 	.word	0x0801bfdc
 8004ea8:	0801bfec 	.word	0x0801bfec
 8004eac:	0801bff4 	.word	0x0801bff4
 8004eb0:	0801bffc 	.word	0x0801bffc

08004eb4 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	330e      	adds	r3, #14
 8004ece:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f015 fb67 	bl	801a5aa <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3306      	adds	r3, #6
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	2206      	movs	r2, #6
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f015 fb60 	bl	801a5aa <memcpy>
  eth->type = mg_htons(0x800);
 8004eea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004eee:	f003 ff56 	bl	8008d9e <mg_ntohs>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8004efa:	2214      	movs	r2, #20
 8004efc:	2100      	movs	r1, #0
 8004efe:	6938      	ldr	r0, [r7, #16]
 8004f00:	f015 fa91 	bl	801a426 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2245      	movs	r2, #69	; 0x45
 8004f08:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 8004f0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f0e:	f003 ff46 	bl	8008d9e <mg_ntohs>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3314      	adds	r3, #20
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f003 ff3b 	bl	8008d9e <mg_ntohs>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2240      	movs	r2, #64	; 0x40
 8004f34:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	79fa      	ldrb	r2, [r7, #7]
 8004f3a:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8004f48:	2114      	movs	r1, #20
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f7ff fe14 	bl	8004b78 <ipcsum>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	815a      	strh	r2, [r3, #10]
  return ip;
 8004f58:	693b      	ldr	r3, [r7, #16]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b08a      	sub	sp, #40	; 0x28
 8004f66:	af02      	add	r7, sp, #8
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	3308      	adds	r3, #8
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2211      	movs	r2, #17
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ff97 	bl	8004eb4 <tx_ip>
 8004f86:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	887a      	ldrh	r2, [r7, #2]
 8004f92:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f98:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f003 fefb 	bl	8008d9e <mg_ntohs>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	719a      	strb	r2, [r3, #6]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8004fba:	2208      	movs	r2, #8
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f7ff fd94 	bl	8004aec <csumup>
 8004fc4:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8004fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fca:	6978      	ldr	r0, [r7, #20]
 8004fcc:	f7ff fd8e 	bl	8004aec <csumup>
 8004fd0:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff fd86 	bl	8004aec <csumup>
 8004fe0:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3310      	adds	r3, #16
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f7ff fd7e 	bl	8004aec <csumup>
 8004ff0:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	7a5b      	ldrb	r3, [r3, #9]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	441a      	add	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	3308      	adds	r3, #8
 8005002:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f7ff fd9c 	bl	8004b42 <csumfin>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3308      	adds	r3, #8
 8005016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800501a:	4618      	mov	r0, r3
 800501c:	f015 f9e9 	bl	801a3f2 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	332a      	adds	r3, #42	; 0x2a
 8005024:	4619      	mov	r1, r3
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fe16 	bl	8004c58 <ether_output>
}
 800502c:	bf00      	nop
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8005034:	b5b0      	push	{r4, r5, r7, lr}
 8005036:	b0cc      	sub	sp, #304	; 0x130
 8005038:	af04      	add	r7, sp, #16
 800503a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800503e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005048:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800504c:	6001      	str	r1, [r0, #0]
 800504e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8005052:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8005056:	600a      	str	r2, [r1, #0]
 8005058:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800505c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005060:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8005062:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005066:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800506a:	4a38      	ldr	r2, [pc, #224]	; (800514c <tx_dhcp+0x118>)
 800506c:	4618      	mov	r0, r3
 800506e:	4611      	mov	r1, r2
 8005070:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005074:	461a      	mov	r2, r3
 8005076:	f015 fa98 	bl	801a5aa <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800507a:	4835      	ldr	r0, [pc, #212]	; (8005150 <tx_dhcp+0x11c>)
 800507c:	f003 fe76 	bl	8008d6c <mg_ntohl>
 8005080:	4602      	mov	r2, r0
 8005082:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005086:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800508a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800508e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005092:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	f107 0310 	add.w	r3, r7, #16
 800509c:	331c      	adds	r3, #28
 800509e:	2206      	movs	r2, #6
 80050a0:	4618      	mov	r0, r3
 80050a2:	f015 fa82 	bl	801a5aa <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 80050a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3302      	adds	r3, #2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050be:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	33f0      	adds	r3, #240	; 0xf0
 80050c6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80050ca:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80050ce:	4618      	mov	r0, r3
 80050d0:	f015 fa6b 	bl	801a5aa <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 80050d4:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <tx_dhcp+0xbc>
 80050dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80050e8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 80050f0:	2044      	movs	r0, #68	; 0x44
 80050f2:	f003 fe54 	bl	8008d9e <mg_ntohs>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461d      	mov	r5, r3
 80050fa:	2043      	movs	r0, #67	; 0x43
 80050fc:	f003 fe4f 	bl	8008d9e <mg_ntohs>
 8005100:	4603      	mov	r3, r0
 8005102:	461c      	mov	r4, r3
 8005104:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005108:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800510c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005110:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8005114:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005118:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800511c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	9401      	str	r4, [sp, #4]
 800512a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800512e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	462b      	mov	r3, r5
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	6809      	ldr	r1, [r1, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f7ff ff10 	bl	8004f62 <tx_udp>
         sizeof(dhcp));
}
 8005142:	bf00      	nop
 8005144:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005148:	46bd      	mov	sp, r7
 800514a:	bdb0      	pop	{r4, r5, r7, pc}
 800514c:	0801c008 	.word	0x0801c008
 8005150:	63825363 	.word	0x63825363

08005154 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8005154:	b5b0      	push	{r4, r5, r7, lr}
 8005156:	b090      	sub	sp, #64	; 0x40
 8005158:	af04      	add	r7, sp, #16
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8005160:	4b31      	ldr	r3, [pc, #196]	; (8005228 <tx_dhcp_request_sel+0xd4>)
 8005162:	f107 0414 	add.w	r4, r7, #20
 8005166:	461d      	mov	r5, r3
 8005168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800516a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800516c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005170:	c403      	stmia	r4!, {r0, r1}
 8005172:	8022      	strh	r2, [r4, #0]
 8005174:	3402      	adds	r4, #2
 8005176:	0c13      	lsrs	r3, r2, #16
 8005178:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	330a      	adds	r3, #10
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 800518a:	f107 0314 	add.w	r3, r7, #20
 800518e:	3310      	adds	r3, #16
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	7fdb      	ldrb	r3, [r3, #31]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <tx_dhcp_request_sel+0x5e>
 800519c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80051a6:	3318      	adds	r3, #24
 80051a8:	3330      	adds	r3, #48	; 0x30
 80051aa:	443b      	add	r3, r7
 80051ac:	2206      	movs	r2, #6
 80051ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <tx_dhcp_request_sel+0x7e>
 80051bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80051c6:	3318      	adds	r3, #24
 80051c8:	3330      	adds	r3, #48	; 0x30
 80051ca:	443b      	add	r3, r7
 80051cc:	222a      	movs	r2, #42	; 0x2a
 80051ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 80051d2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80051d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051da:	4413      	add	r3, r2
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 80051e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051e6:	3319      	adds	r3, #25
 80051e8:	2200      	movs	r2, #0
 80051ea:	9202      	str	r2, [sp, #8]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f8:	2200      	movs	r2, #0
 80051fa:	490c      	ldr	r1, [pc, #48]	; (800522c <tx_dhcp_request_sel+0xd8>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ff19 	bl	8005034 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <tx_dhcp_request_sel+0xdc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b02      	cmp	r3, #2
 8005208:	dd09      	ble.n	800521e <tx_dhcp_request_sel+0xca>
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <tx_dhcp_request_sel+0xe0>)
 800520c:	f241 121c 	movw	r2, #4380	; 0x111c
 8005210:	4909      	ldr	r1, [pc, #36]	; (8005238 <tx_dhcp_request_sel+0xe4>)
 8005212:	2003      	movs	r0, #3
 8005214:	f7ff f928 	bl	8004468 <mg_log_prefix>
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <tx_dhcp_request_sel+0xe8>)
 800521a:	f7ff f975 	bl	8004508 <mg_log>
}
 800521e:	bf00      	nop
 8005220:	3730      	adds	r7, #48	; 0x30
 8005222:	46bd      	mov	sp, r7
 8005224:	bdb0      	pop	{r4, r5, r7, pc}
 8005226:	bf00      	nop
 8005228:	0801c128 	.word	0x0801c128
 800522c:	0801f8d0 	.word	0x0801f8d0
 8005230:	20000000 	.word	0x20000000
 8005234:	0801f940 	.word	0x0801f940
 8005238:	0801b0f4 	.word	0x0801b0f4
 800523c:	0801c118 	.word	0x0801c118

08005240 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af04      	add	r7, sp, #16
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <tx_dhcp_request_re+0x50>)
 8005250:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8005252:	2301      	movs	r3, #1
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	2304      	movs	r3, #4
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	f107 0314 	add.w	r3, r7, #20
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fee4 	bl	8005034 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <tx_dhcp_request_re+0x54>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	dd09      	ble.n	8005288 <tx_dhcp_request_re+0x48>
 8005274:	4b08      	ldr	r3, [pc, #32]	; (8005298 <tx_dhcp_request_re+0x58>)
 8005276:	f241 1227 	movw	r2, #4391	; 0x1127
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <tx_dhcp_request_re+0x5c>)
 800527c:	2003      	movs	r0, #3
 800527e:	f7ff f8f3 	bl	8004468 <mg_log_prefix>
 8005282:	4807      	ldr	r0, [pc, #28]	; (80052a0 <tx_dhcp_request_re+0x60>)
 8005284:	f7ff f940 	bl	8004508 <mg_log>
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	ff030135 	.word	0xff030135
 8005294:	20000000 	.word	0x20000000
 8005298:	0801f954 	.word	0x0801f954
 800529c:	0801b0f4 	.word	0x0801b0f4
 80052a0:	0801c118 	.word	0x0801c118

080052a4 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <tx_dhcp_discover+0x5c>)
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052b6:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80052ba:	2300      	movs	r3, #0
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	2308      	movs	r3, #8
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052cc:	2200      	movs	r2, #0
 80052ce:	490d      	ldr	r1, [pc, #52]	; (8005304 <tx_dhcp_discover+0x60>)
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff feaf 	bl	8005034 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <tx_dhcp_discover+0x64>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	dd0c      	ble.n	80052f8 <tx_dhcp_discover+0x54>
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <tx_dhcp_discover+0x68>)
 80052e0:	f241 1231 	movw	r2, #4401	; 0x1131
 80052e4:	490a      	ldr	r1, [pc, #40]	; (8005310 <tx_dhcp_discover+0x6c>)
 80052e6:	2003      	movs	r0, #3
 80052e8:	f7ff f8be 	bl	8004468 <mg_log_prefix>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4908      	ldr	r1, [pc, #32]	; (8005314 <tx_dhcp_discover+0x70>)
 80052f2:	4809      	ldr	r0, [pc, #36]	; (8005318 <tx_dhcp_discover+0x74>)
 80052f4:	f7ff f908 	bl	8004508 <mg_log>
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	0801c164 	.word	0x0801c164
 8005304:	0801f8d0 	.word	0x0801f8d0
 8005308:	20000000 	.word	0x20000000
 800530c:	0801f968 	.word	0x0801f968
 8005310:	0801b0f4 	.word	0x0801b0f4
 8005314:	08007fb9 	.word	0x08007fb9
 8005318:	0801c144 	.word	0x0801c144

0800531c <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e057      	b.n	80053e6 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <getpeer+0x4c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f103 000e 	add.w	r0, r3, #14
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	331c      	adds	r3, #28
 800535a:	2204      	movs	r2, #4
 800535c:	4619      	mov	r1, r3
 800535e:	f015 f838 	bl	801a3d2 <memcmp>
 8005362:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 8005364:	2b00      	cmp	r3, #0
 8005366:	d042      	beq.n	80053ee <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <getpeer+0x74>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <getpeer+0x74>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	8b1a      	ldrh	r2, [r3, #24]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	885b      	ldrh	r3, [r3, #2]
 800538a:	b29b      	uxth	r3, r3
 800538c:	429a      	cmp	r2, r3
 800538e:	d030      	beq.n	80053f2 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11f      	bne.n	80053e0 <getpeer+0xc4>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01b      	beq.n	80053e0 <getpeer+0xc4>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	8b1a      	ldrh	r2, [r3, #24]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	885b      	ldrh	r3, [r3, #2]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d113      	bne.n	80053e0 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80053be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053c2:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 80053c4:	79fa      	ldrb	r2, [r7, #7]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d10a      	bne.n	80053e0 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <getpeer+0xd8>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	429a      	cmp	r2, r3
 80053de:	d009      	beq.n	80053f4 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1a4      	bne.n	8005336 <getpeer+0x1a>
 80053ec:	e002      	b.n	80053f4 <getpeer+0xd8>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80053f2:	bf00      	nop
      break;
  }
  return c;
 80053f4:	697b      	ldr	r3, [r7, #20]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005400:	b5b0      	push	{r4, r5, r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	88db      	ldrh	r3, [r3, #6]
 8005410:	b29c      	uxth	r4, r3
 8005412:	2001      	movs	r0, #1
 8005414:	f003 fcc3 	bl	8008d9e <mg_ntohs>
 8005418:	4603      	mov	r3, r0
 800541a:	429c      	cmp	r4, r3
 800541c:	d176      	bne.n	800550c <rx_arp+0x10c>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d16f      	bne.n	800550c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	330e      	adds	r3, #14
 8005436:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	3306      	adds	r3, #6
 8005440:	2206      	movs	r2, #6
 8005442:	4619      	mov	r1, r3
 8005444:	f015 f8b1 	bl	801a5aa <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3306      	adds	r3, #6
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	2206      	movs	r2, #6
 8005450:	4618      	mov	r0, r3
 8005452:	f015 f8aa 	bl	801a5aa <memcpy>
    eth->type = mg_htons(0x806);
 8005456:	f640 0006 	movw	r0, #2054	; 0x806
 800545a:	f003 fca0 	bl	8008d9e <mg_ntohs>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6814      	ldr	r4, [r2, #0]
 800546e:	6850      	ldr	r0, [r2, #4]
 8005470:	6891      	ldr	r1, [r2, #8]
 8005472:	68d5      	ldr	r5, [r2, #12]
 8005474:	601c      	str	r4, [r3, #0]
 8005476:	6058      	str	r0, [r3, #4]
 8005478:	6099      	str	r1, [r3, #8]
 800547a:	60dd      	str	r5, [r3, #12]
 800547c:	6914      	ldr	r4, [r2, #16]
 800547e:	6950      	ldr	r0, [r2, #20]
 8005480:	6991      	ldr	r1, [r2, #24]
 8005482:	611c      	str	r4, [r3, #16]
 8005484:	6158      	str	r0, [r3, #20]
 8005486:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8005488:	2002      	movs	r0, #2
 800548a:	f003 fc88 	bl	8008d9e <mg_ntohs>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f103 0012 	add.w	r0, r3, #18
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	3308      	adds	r3, #8
 80054a2:	2206      	movs	r2, #6
 80054a4:	4619      	mov	r1, r3
 80054a6:	f015 f880 	bl	801a5aa <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	3308      	adds	r3, #8
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	2206      	movs	r2, #6
 80054b2:	4618      	mov	r0, r3
 80054b4:	f015 f879 	bl	801a5aa <memcpy>
    arp->tpa = pkt->arp->spa;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80054ce:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <rx_arp+0x208>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	dd10      	ble.n	80054f8 <rx_arp+0xf8>
 80054d6:	4b4d      	ldr	r3, [pc, #308]	; (800560c <rx_arp+0x20c>)
 80054d8:	f241 1255 	movw	r2, #4437	; 0x1155
 80054dc:	494c      	ldr	r1, [pc, #304]	; (8005610 <rx_arp+0x210>)
 80054de:	2003      	movs	r0, #3
 80054e0:	f7fe ffc2 	bl	8004468 <mg_log_prefix>
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f103 0218 	add.w	r2, r3, #24
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4b49      	ldr	r3, [pc, #292]	; (8005614 <rx_arp+0x214>)
 80054f0:	4949      	ldr	r1, [pc, #292]	; (8005618 <rx_arp+0x218>)
 80054f2:	484a      	ldr	r0, [pc, #296]	; (800561c <rx_arp+0x21c>)
 80054f4:	f7ff f808 	bl	8004508 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f103 021c 	add.w	r2, r3, #28
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fba7 	bl	8004c58 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800550a:	e079      	b.n	8005600 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	88db      	ldrh	r3, [r3, #6]
 8005512:	b29c      	uxth	r4, r3
 8005514:	2002      	movs	r0, #2
 8005516:	f003 fc42 	bl	8008d9e <mg_ntohs>
 800551a:	4603      	mov	r3, r0
 800551c:	429c      	cmp	r4, r3
 800551e:	d16f      	bne.n	8005600 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	3312      	adds	r3, #18
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	2206      	movs	r2, #6
 800552a:	4618      	mov	r0, r3
 800552c:	f014 ff51 	bl	801a3d2 <memcmp>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d163      	bne.n	80055fe <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d116      	bne.n	8005574 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f103 0046 	add.w	r0, r3, #70	; 0x46
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	3308      	adds	r3, #8
 8005552:	2206      	movs	r2, #6
 8005554:	4619      	mov	r1, r3
 8005556:	f015 f828 	bl	801a5aa <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005560:	2b03      	cmp	r3, #3
 8005562:	d14d      	bne.n	8005600 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        onstatechange(ifp);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fbf7 	bl	8004d60 <onstatechange>
 8005572:	e045      	b.n	8005600 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	2200      	movs	r2, #0
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fecd 	bl	800531c <getpeer>
 8005582:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d03a      	beq.n	8005600 <rx_arp+0x200>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d032      	beq.n	8005600 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	33b0      	adds	r3, #176	; 0xb0
 800559e:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f103 0018 	add.w	r0, r3, #24
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	3308      	adds	r3, #8
 80055ac:	2206      	movs	r2, #6
 80055ae:	4619      	mov	r1, r3
 80055b0:	f014 fffb 	bl	801a5aa <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <rx_arp+0x208>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	dd15      	ble.n	80055e8 <rx_arp+0x1e8>
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <rx_arp+0x20c>)
 80055be:	f241 1266 	movw	r2, #4454	; 0x1166
 80055c2:	4913      	ldr	r1, [pc, #76]	; (8005610 <rx_arp+0x210>)
 80055c4:	2003      	movs	r0, #3
 80055c6:	f7fe ff4f 	bl	8004468 <mg_log_prefix>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f103 021c 	add.w	r2, r3, #28
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3318      	adds	r3, #24
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <rx_arp+0x214>)
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <rx_arp+0x218>)
 80055e2:	480f      	ldr	r0, [pc, #60]	; (8005620 <rx_arp+0x220>)
 80055e4:	f7fe ff90 	bl	8004508 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 80055ee:	f36f 1304 	bfc	r3, #4, #1
 80055f2:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
        mac_resolved(c);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f002 f95f 	bl	80078ba <mac_resolved>
 80055fc:	e000      	b.n	8005600 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80055fe:	bf00      	nop
      }
    }
  }
}
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bdb0      	pop	{r4, r5, r7, pc}
 8005606:	bf00      	nop
 8005608:	20000000 	.word	0x20000000
 800560c:	0801f97c 	.word	0x0801f97c
 8005610:	0801b0f4 	.word	0x0801b0f4
 8005614:	08007fb9 	.word	0x08007fb9
 8005618:	08007ef5 	.word	0x08007ef5
 800561c:	0801c16c 	.word	0x0801c16c
 8005620:	0801c184 	.word	0x0801c184

08005624 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d14d      	bne.n	80056d4 <rx_icmp+0xb0>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d049      	beq.n	80056d4 <rx_icmp+0xb0>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d142      	bne.n	80056d4 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800564e:	2326      	movs	r3, #38	; 0x26
 8005650:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	429a      	cmp	r2, r3
 8005668:	d901      	bls.n	800566e <rx_icmp+0x4a>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	1d99      	adds	r1, r3, #6
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6898      	ldr	r0, [r3, #8]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	3204      	adds	r2, #4
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	4603      	mov	r3, r0
 8005688:	2201      	movs	r2, #1
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fc12 	bl	8004eb4 <tx_ip>
 8005690:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3314      	adds	r3, #20
 8005696:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8005698:	2204      	movs	r2, #4
 800569a:	2100      	movs	r1, #0
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f014 fec2 	bl	801a426 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1d18      	adds	r0, r3, #4
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	4619      	mov	r1, r3
 80056ae:	f014 ff7c 	bl	801a5aa <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fa5d 	bl	8004b78 <ipcsum>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fac2 	bl	8004c58 <ether_output>
  }
}
 80056d4:	bf00      	nop
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80056dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e0:	b090      	sub	sp, #64	; 0x40
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	2300      	movs	r3, #0
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8005700:	2300      	movs	r3, #0
 8005702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800570c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	33f0      	adds	r3, #240	; 0xf0
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4413      	add	r3, r2
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800572c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	f0c0 81ac 	bcc.w	8005a8c <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	1d18      	adds	r0, r3, #4
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3302      	adds	r3, #2
 800573e:	2204      	movs	r2, #4
 8005740:	4619      	mov	r1, r3
 8005742:	f014 fe46 	bl	801a3d2 <memcmp>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 81a1 	bne.w	8005a90 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800574e:	e08a      	b.n	8005866 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10e      	bne.n	8005776 <rx_dhcp_client+0x9a>
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	3301      	adds	r3, #1
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d109      	bne.n	8005776 <rx_dhcp_client+0x9a>
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	3306      	adds	r3, #6
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d904      	bls.n	8005776 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	3302      	adds	r3, #2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
 8005774:	e070      	b.n	8005858 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d112      	bne.n	80057a4 <rx_dhcp_client+0xc8>
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	3301      	adds	r3, #1
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d10d      	bne.n	80057a4 <rx_dhcp_client+0xc8>
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	3306      	adds	r3, #6
 800578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578e:	429a      	cmp	r2, r3
 8005790:	d908      	bls.n	80057a4 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	3302      	adds	r3, #2
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
      ip = pkt->dhcp->yiaddr;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a2:	e059      	b.n	8005858 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	7fdb      	ldrb	r3, [r3, #31]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d012      	beq.n	80057d2 <rx_dhcp_client+0xf6>
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d10e      	bne.n	80057d2 <rx_dhcp_client+0xf6>
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	3301      	adds	r3, #1
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d109      	bne.n	80057d2 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80057c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d904      	bls.n	80057d2 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	3302      	adds	r3, #2
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	e042      	b.n	8005858 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <rx_dhcp_client+0x126>
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b2a      	cmp	r3, #42	; 0x2a
 80057e2:	d10e      	bne.n	8005802 <rx_dhcp_client+0x126>
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	3301      	adds	r3, #1
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d109      	bne.n	8005802 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80057f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d904      	bls.n	8005802 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	3302      	adds	r3, #2
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e02a      	b.n	8005858 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b33      	cmp	r3, #51	; 0x33
 8005808:	d114      	bne.n	8005834 <rx_dhcp_client+0x158>
 800580a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580c:	3301      	adds	r3, #1
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d10f      	bne.n	8005834 <rx_dhcp_client+0x158>
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	3306      	adds	r3, #6
 8005818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581a:	429a      	cmp	r2, r3
 800581c:	d90a      	bls.n	8005834 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	3302      	adds	r3, #2
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	4618      	mov	r0, r3
 800582a:	f003 fa9f 	bl	8008d6c <mg_ntohl>
 800582e:	4603      	mov	r3, r0
 8005830:	623b      	str	r3, [r7, #32]
 8005832:	e011      	b.n	8005858 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b35      	cmp	r3, #53	; 0x35
 800583a:	d10d      	bne.n	8005858 <rx_dhcp_client+0x17c>
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	3301      	adds	r3, #1
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d108      	bne.n	8005858 <rx_dhcp_client+0x17c>
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	3306      	adds	r3, #6
 800584a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584c:	429a      	cmp	r2, r3
 800584e:	d903      	bls.n	8005858 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	789b      	ldrb	r3, [r3, #2]
 8005854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
    p += p[1] + 2;
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	3301      	adds	r3, #1
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	3302      	adds	r3, #2
 8005860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005862:	4413      	add	r3, r2
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	3301      	adds	r3, #1
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d904      	bls.n	800587a <rx_dhcp_client+0x19e>
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2bff      	cmp	r3, #255	; 0xff
 8005876:	f47f af6b 	bne.w	8005750 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800587a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800587e:	2b06      	cmp	r3, #6
 8005880:	d10c      	bne.n	800589c <rx_dhcp_client+0x1c0>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005888:	429a      	cmp	r2, r3
 800588a:	d107      	bne.n	800589c <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	e0ec      	b.n	8005a76 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800589c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d123      	bne.n	80058ec <rx_dhcp_client+0x210>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d11e      	bne.n	80058ec <rx_dhcp_client+0x210>
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <rx_dhcp_client+0x210>
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <rx_dhcp_client+0x210>
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tx_dhcp_request_sel(ifp, ip,
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	e002      	b.n	80058d8 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	461a      	mov	r2, r3
 80058da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fc39 	bl	8005154 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80058ea:	e0c4      	b.n	8005a76 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 80058ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058f0:	2b05      	cmp	r3, #5
 80058f2:	f040 80c0 	bne.w	8005a76 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f040 8081 	bne.w	8005a04 <rx_dhcp_client+0x328>
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d07d      	beq.n	8005a04 <rx_dhcp_client+0x328>
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d07a      	beq.n	8005a04 <rx_dhcp_client+0x328>
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d077      	beq.n	8005a04 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800591a:	6a39      	ldr	r1, [r7, #32]
 800591c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005920:	fb00 f101 	mul.w	r1, r0, r1
 8005924:	2000      	movs	r0, #0
 8005926:	4688      	mov	r8, r1
 8005928:	4681      	mov	r9, r0
 800592a:	eb12 0108 	adds.w	r1, r2, r8
 800592e:	6039      	str	r1, [r7, #0]
 8005930:	eb43 0309 	adc.w	r3, r3, r9
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e9d7 1200 	ldrd	r1, r2, [r7]
 800593c:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8005940:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <rx_dhcp_client+0x3c0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	dd16      	ble.n	8005976 <rx_dhcp_client+0x29a>
 8005948:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <rx_dhcp_client+0x3c4>)
 800594a:	f241 12a7 	movw	r2, #4519	; 0x11a7
 800594e:	4955      	ldr	r1, [pc, #340]	; (8005aa4 <rx_dhcp_client+0x3c8>)
 8005950:	2002      	movs	r0, #2
 8005952:	f7fe fd89 	bl	8004468 <mg_log_prefix>
 8005956:	6a3c      	ldr	r4, [r7, #32]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800595e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	f7fb f929 	bl	8000bbc <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4621      	mov	r1, r4
 8005970:	484d      	ldr	r0, [pc, #308]	; (8005aa8 <rx_dhcp_client+0x3cc>)
 8005972:	f7fe fdc9 	bl	8004508 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f103 0046 	add.w	r0, r3, #70	; 0x46
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	3306      	adds	r3, #6
 8005982:	2206      	movs	r2, #6
 8005984:	4619      	mov	r1, r3
 8005986:	f014 fe10 	bl	801a5aa <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800598e:	609a      	str	r2, [r3, #8]
 8005990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2203      	movs	r2, #3
 80059a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	2108      	movs	r1, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 f9a6 	bl	8008cfc <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 80059b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059b4:	4614      	mov	r4, r2
 80059b6:	f7fb fab9 	bl	8000f2c <mg_millis>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4613      	mov	r3, r2
 80059c0:	4423      	add	r3, r4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f014 fadc 	bl	8019f80 <srand>
      if (ifp->enable_req_dns && dns != 0)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	7fdb      	ldrb	r3, [r3, #31]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <rx_dhcp_client+0x308>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80059d6:	f107 031c 	add.w	r3, r7, #28
 80059da:	461a      	mov	r2, r3
 80059dc:	2101      	movs	r1, #1
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff f852 	bl	8004a88 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d042      	beq.n	8005a74 <rx_dhcp_client+0x398>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03f      	beq.n	8005a74 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 80059f4:	f107 0318 	add.w	r3, r7, #24
 80059f8:	461a      	mov	r2, r3
 80059fa:	2102      	movs	r1, #2
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff f843 	bl	8004a88 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8005a02:	e037      	b.n	8005a74 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d133      	bne.n	8005a76 <rx_dhcp_client+0x39a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d12e      	bne.n	8005a76 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a1e:	6a39      	ldr	r1, [r7, #32]
 8005a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a24:	fb00 f101 	mul.w	r1, r0, r1
 8005a28:	2000      	movs	r0, #0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	eb12 0a04 	adds.w	sl, r2, r4
 8005a32:	eb43 0b05 	adc.w	fp, r3, r5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	e9c3 ab18 	strd	sl, fp, [r3, #96]	; 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <rx_dhcp_client+0x3c0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	dd18      	ble.n	8005a76 <rx_dhcp_client+0x39a>
 8005a44:	4b16      	ldr	r3, [pc, #88]	; (8005aa0 <rx_dhcp_client+0x3c4>)
 8005a46:	f241 12b5 	movw	r2, #4533	; 0x11b5
 8005a4a:	4916      	ldr	r1, [pc, #88]	; (8005aa4 <rx_dhcp_client+0x3c8>)
 8005a4c:	2002      	movs	r0, #2
 8005a4e:	f7fe fd0b 	bl	8004468 <mg_log_prefix>
 8005a52:	6a3c      	ldr	r4, [r7, #32]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	f7fb f8ab 	bl	8000bbc <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	480e      	ldr	r0, [pc, #56]	; (8005aa8 <rx_dhcp_client+0x3cc>)
 8005a6e:	f7fe fd4b 	bl	8004508 <mg_log>
 8005a72:	e000      	b.n	8005a76 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8005a74:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a7c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d006      	beq.n	8005a92 <rx_dhcp_client+0x3b6>
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff f96b 	bl	8004d60 <onstatechange>
 8005a8a:	e002      	b.n	8005a92 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8005a90:	bf00      	nop
}
 8005a92:	3740      	adds	r7, #64	; 0x40
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	0801f984 	.word	0x0801f984
 8005aa4:	0801b0f4 	.word	0x0801b0f4
 8005aa8:	0801c1a0 	.word	0x0801c1a0

08005aac <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab0:	b0d6      	sub	sp, #344	; 0x158
 8005ab2:	af04      	add	r7, sp, #16
 8005ab4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ab8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005abc:	6018      	str	r0, [r3, #0]
 8005abe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ac2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ac6:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8005ace:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ad2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	33f0      	adds	r3, #240	; 0xf0
 8005adc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8005ae0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ae4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005af0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8005afe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005b0e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f0c0 81b0 	bcc.w	8005e78 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8005b18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b20:	4ad8      	ldr	r2, [pc, #864]	; (8005e84 <rx_dhcp_server+0x3d8>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	4611      	mov	r1, r2
 8005b26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f014 fd3d 	bl	801a5aa <memcpy>
  res.yiaddr = ifp->ip;
 8005b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b34:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b44:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8005b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	3303      	adds	r3, #3
 8005b4e:	781a      	ldrb	r2, [r3, #0]
 8005b50:	3201      	adds	r2, #1
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8005b56:	e020      	b.n	8005b9a <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8005b58:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b35      	cmp	r3, #53	; 0x35
 8005b60:	d111      	bne.n	8005b86 <rx_dhcp_server+0xda>
 8005b62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b66:	3301      	adds	r3, #1
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10b      	bne.n	8005b86 <rx_dhcp_server+0xda>
 8005b6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b72:	3302      	adds	r3, #2
 8005b74:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d904      	bls.n	8005b86 <rx_dhcp_server+0xda>
      op = p[2];
 8005b7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b80:	789b      	ldrb	r3, [r3, #2]
 8005b82:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 8005b86:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	3302      	adds	r3, #2
 8005b90:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005b94:	4413      	add	r3, r2
 8005b96:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8005b9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d904      	bls.n	8005bb2 <rx_dhcp_server+0x106>
 8005ba8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d1d2      	bne.n	8005b58 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8005bb2:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d004      	beq.n	8005bc4 <rx_dhcp_server+0x118>
 8005bba:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	f040 815b 	bne.w	8005e7a <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8005bc4:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <rx_dhcp_server+0x124>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e000      	b.n	8005bd2 <rx_dhcp_server+0x126>
 8005bd0:	2305      	movs	r3, #5
 8005bd2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 8005bd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005bde:	2235      	movs	r2, #53	; 0x35
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005be6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005bea:	2201      	movs	r2, #1
 8005bec:	705a      	strb	r2, [r3, #1]
 8005bee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bf2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005bf6:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8005bfa:	709a      	strb	r2, [r3, #2]
 8005bfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c04:	2201      	movs	r2, #1
 8005c06:	70da      	strb	r2, [r3, #3]
 8005c08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c10:	2204      	movs	r2, #4
 8005c12:	711a      	strb	r2, [r3, #4]
 8005c14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	715a      	strb	r2, [r3, #5]
 8005c20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c28:	2200      	movs	r2, #0
 8005c2a:	719a      	strb	r2, [r3, #6]
 8005c2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c34:	2200      	movs	r2, #0
 8005c36:	71da      	strb	r2, [r3, #7]
 8005c38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c40:	2200      	movs	r2, #0
 8005c42:	721a      	strb	r2, [r3, #8]
 8005c44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c4c:	2236      	movs	r2, #54	; 0x36
 8005c4e:	725a      	strb	r2, [r3, #9]
 8005c50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c58:	2204      	movs	r2, #4
 8005c5a:	729a      	strb	r2, [r3, #10]
 8005c5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c64:	2200      	movs	r2, #0
 8005c66:	72da      	strb	r2, [r3, #11]
 8005c68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c70:	2200      	movs	r2, #0
 8005c72:	731a      	strb	r2, [r3, #12]
 8005c74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	735a      	strb	r2, [r3, #13]
 8005c80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	739a      	strb	r2, [r3, #14]
 8005c8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c94:	220c      	movs	r2, #12
 8005c96:	73da      	strb	r2, [r3, #15]
 8005c98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	741a      	strb	r2, [r3, #16]
 8005ca4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ca8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cac:	226d      	movs	r2, #109	; 0x6d
 8005cae:	745a      	strb	r2, [r3, #17]
 8005cb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cb8:	2269      	movs	r2, #105	; 0x69
 8005cba:	749a      	strb	r2, [r3, #18]
 8005cbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cc4:	2270      	movs	r2, #112	; 0x70
 8005cc6:	74da      	strb	r2, [r3, #19]
 8005cc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cd0:	2233      	movs	r2, #51	; 0x33
 8005cd2:	751a      	strb	r2, [r3, #20]
 8005cd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cd8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cdc:	2204      	movs	r2, #4
 8005cde:	755a      	strb	r2, [r3, #21]
 8005ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ce4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	759a      	strb	r2, [r3, #22]
 8005cec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cf4:	22ff      	movs	r2, #255	; 0xff
 8005cf6:	75da      	strb	r2, [r3, #23]
 8005cf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	761a      	strb	r2, [r3, #24]
 8005d04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	765a      	strb	r2, [r3, #25]
 8005d10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8005d1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f103 011c 	add.w	r1, r3, #28
 8005d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d30:	331c      	adds	r3, #28
 8005d32:	2206      	movs	r2, #6
 8005d34:	4618      	mov	r0, r3
 8005d36:	f014 fc38 	bl	801a5aa <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8005d3a:	f107 030c 	add.w	r3, r7, #12
 8005d3e:	3305      	adds	r3, #5
 8005d40:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d44:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	320c      	adds	r2, #12
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8005d50:	f107 030c 	add.w	r3, r7, #12
 8005d54:	330b      	adds	r3, #11
 8005d56:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d5a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	3208      	adds	r2, #8
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 8005d66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d6e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d72:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005d76:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8005d7a:	4615      	mov	r5, r2
 8005d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d84:	c403      	stmia	r4!, {r0, r1}
 8005d86:	8022      	strh	r2, [r4, #0]
 8005d88:	3402      	adds	r4, #2
 8005d8a:	0c13      	lsrs	r3, r2, #16
 8005d8c:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 8005d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8005d9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005da2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005da6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 8005daa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005dc0:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 8005dc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	7f9b      	ldrb	r3, [r3, #30]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01c      	beq.n	8005e0c <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 8005dd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005de0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8005de8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8005df6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	3306      	adds	r3, #6
 8005e04:	2206      	movs	r2, #6
 8005e06:	4619      	mov	r1, r3
 8005e08:	f014 fbcf 	bl	801a5aa <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8005e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	1d9d      	adds	r5, r3, #6
 8005e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689e      	ldr	r6, [r3, #8]
 8005e26:	2043      	movs	r0, #67	; 0x43
 8005e28:	f002 ffb9 	bl	8008d9e <mg_ntohs>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4698      	mov	r8, r3
 8005e30:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d005      	beq.n	8005e44 <rx_dhcp_server+0x398>
 8005e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e40:	691c      	ldr	r4, [r3, #16]
 8005e42:	e001      	b.n	8005e48 <rx_dhcp_server+0x39c>
 8005e44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e48:	2044      	movs	r0, #68	; 0x44
 8005e4a:	f002 ffa8 	bl	8008d9e <mg_ntohs>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e56:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8005e5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	9400      	str	r4, [sp, #0]
 8005e6a:	4643      	mov	r3, r8
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4629      	mov	r1, r5
 8005e70:	6800      	ldr	r0, [r0, #0]
 8005e72:	f7ff f876 	bl	8004f62 <tx_udp>
 8005e76:	e000      	b.n	8005e7a <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8005e78:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8005e7a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e84:	0801c1b8 	.word	0x0801c1b8

08005e88 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	2201      	movs	r2, #1
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fa3e 	bl	800531c <getpeer>
 8005ea0:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d059      	beq.n	8005f5c <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	331c      	adds	r3, #28
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	69d2      	ldr	r2, [r2, #28]
 8005ebc:	320c      	adds	r2, #12
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	33b0      	adds	r3, #176	; 0xb0
 8005ec6:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f103 0018 	add.w	r0, r3, #24
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	3306      	adds	r3, #6
 8005ed4:	2206      	movs	r2, #6
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f014 fb67 	bl	801a5aa <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee4:	d304      	bcc.n	8005ef0 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8005ee6:	491f      	ldr	r1, [pc, #124]	; (8005f64 <rx_udp+0xdc>)
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7fb fa2b 	bl	8001344 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8005eee:	e035      	b.n	8005f5c <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d212      	bcs.n	8005f28 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	4619      	mov	r1, r3
 8005f14:	f7fe f994 	bl	8004240 <mg_iobuf_resize>
 8005f18:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <rx_udp+0xa0>
      mg_error(c, "oom");
 8005f1e:	4912      	ldr	r1, [pc, #72]	; (8005f68 <rx_udp+0xe0>)
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7fb fa0f 	bl	8001344 <mg_error>
}
 8005f26:	e019      	b.n	8005f5c <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	18d0      	adds	r0, r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6899      	ldr	r1, [r3, #8]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f014 fb35 	bl	801a5aa <memcpy>
      c->recv.len += pkt->pay.len;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	441a      	add	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	461a      	mov	r2, r3
 8005f54:	2107      	movs	r1, #7
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fb f9d4 	bl	8001304 <mg_call>
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	0801c2c8 	.word	0x0801c2c8
 8005f68:	0801c2e4 	.word	0x0801c2e4

08005f6c <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	b091      	sub	sp, #68	; 0x44
 8005f70:	af06      	add	r7, sp, #24
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	3314      	adds	r3, #20
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	2206      	movs	r2, #6
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7fe ff90 	bl	8004eb4 <tx_ip>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	3314      	adds	r3, #20
 8005f9a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8005f9c:	2214      	movs	r2, #20
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6a38      	ldr	r0, [r7, #32]
 8005fa2:	f014 fa40 	bl	801a426 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <tx_tcp+0x54>
 8005fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d006      	beq.n	8005fc0 <tx_tcp+0x54>
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f014 fa19 	bl	801a3f2 <memmove>
  tcp->sport = sport;
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005fc6:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005fce:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fda:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 8005fe2:	f241 7070 	movw	r0, #6000	; 0x1770
 8005fe6:	f002 feda 	bl	8008d9e <mg_ntohs>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2250      	movs	r2, #80	; 0x50
 8005ff6:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3314      	adds	r3, #20
 8006002:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8006004:	2300      	movs	r3, #0
 8006006:	753b      	strb	r3, [r7, #20]
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	7a5b      	ldrb	r3, [r3, #9]
 800600c:	757b      	strb	r3, [r7, #21]
 800600e:	8b7b      	ldrh	r3, [r7, #26]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	b29b      	uxth	r3, r3
 8006014:	b2db      	uxtb	r3, r3
 8006016:	75bb      	strb	r3, [r7, #22]
 8006018:	8b7b      	ldrh	r3, [r7, #26]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800601e:	8b7b      	ldrh	r3, [r7, #26]
 8006020:	461a      	mov	r2, r3
 8006022:	6a39      	ldr	r1, [r7, #32]
 8006024:	69f8      	ldr	r0, [r7, #28]
 8006026:	f7fe fd61 	bl	8004aec <csumup>
 800602a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	330c      	adds	r3, #12
 8006030:	2204      	movs	r2, #4
 8006032:	4619      	mov	r1, r3
 8006034:	69f8      	ldr	r0, [r7, #28]
 8006036:	f7fe fd59 	bl	8004aec <csumup>
 800603a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	3310      	adds	r3, #16
 8006040:	2204      	movs	r2, #4
 8006042:	4619      	mov	r1, r3
 8006044:	69f8      	ldr	r0, [r7, #28]
 8006046:	f7fe fd51 	bl	8004aec <csumup>
 800604a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800604c:	f107 0314 	add.w	r3, r7, #20
 8006050:	2204      	movs	r2, #4
 8006052:	4619      	mov	r1, r3
 8006054:	69f8      	ldr	r0, [r7, #28]
 8006056:	f7fe fd49 	bl	8004aec <csumup>
 800605a:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800605c:	69f8      	ldr	r0, [r7, #28]
 800605e:	f7fe fd70 	bl	8004b42 <csumfin>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800606a:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <tx_tcp+0x184>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b03      	cmp	r3, #3
 8006070:	dd2c      	ble.n	80060cc <tx_tcp+0x160>
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <tx_tcp+0x188>)
 8006074:	f241 221a 	movw	r2, #4634	; 0x121a
 8006078:	491f      	ldr	r1, [pc, #124]	; (80060f8 <tx_tcp+0x18c>)
 800607a:	2004      	movs	r0, #4
 800607c:	f7fe f9f4 	bl	8004468 <mg_log_prefix>
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f103 050c 	add.w	r5, r3, #12
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	4618      	mov	r0, r3
 800608e:	f002 fe86 	bl	8008d9e <mg_ntohs>
 8006092:	4603      	mov	r3, r0
 8006094:	461e      	mov	r6, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	f103 0410 	add.w	r4, r3, #16
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	885b      	ldrh	r3, [r3, #2]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 fe7b 	bl	8008d9e <mg_ntohs>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	7b5b      	ldrb	r3, [r3, #13]
 80060b0:	4619      	mov	r1, r3
 80060b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	9202      	str	r2, [sp, #8]
 80060ba:	9401      	str	r4, [sp, #4]
 80060bc:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <tx_tcp+0x190>)
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4633      	mov	r3, r6
 80060c2:	462a      	mov	r2, r5
 80060c4:	490d      	ldr	r1, [pc, #52]	; (80060fc <tx_tcp+0x190>)
 80060c6:	480e      	ldr	r0, [pc, #56]	; (8006100 <tx_tcp+0x194>)
 80060c8:	f7fe fa1e 	bl	8004508 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f103 0214 	add.w	r2, r3, #20
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060dc:	4413      	add	r3, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7fe fdb9 	bl	8004c58 <ether_output>
 80060e6:	4603      	mov	r3, r0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	372c      	adds	r7, #44	; 0x2c
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	20000000 	.word	0x20000000
 80060f4:	0801f994 	.word	0x0801f994
 80060f8:	0801b0f4 	.word	0x0801b0f4
 80060fc:	08007ef5 	.word	0x08007ef5
 8006100:	0801c2e8 	.word	0x0801c2e8

08006104 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	b08c      	sub	sp, #48	; 0x30
 800610a:	af06      	add	r7, sp, #24
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	7b5b      	ldrb	r3, [r3, #13]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	1d9e      	adds	r6, r3, #6
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	885b      	ldrh	r3, [r3, #2]
 8006140:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4618      	mov	r0, r3
 8006152:	f002 fe0b 	bl	8008d6c <mg_ntohl>
 8006156:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f002 fe05 	bl	8008d6c <mg_ntohl>
 8006162:	4601      	mov	r1, r0
 8006164:	79fa      	ldrb	r2, [r7, #7]
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	9103      	str	r1, [sp, #12]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	9501      	str	r5, [sp, #4]
 8006176:	9400      	str	r4, [sp, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	4642      	mov	r2, r8
 800617c:	4631      	mov	r1, r6
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fef4 	bl	8005f6c <tx_tcp>
 8006184:	4603      	mov	r3, r0
                buf, len);
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006190 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8006190:	b5b0      	push	{r4, r5, r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fad2 	bl	8004748 <mg_alloc_conn>
 80061a4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 80061ac:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <accept_conn+0x158>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dd09      	ble.n	80061c8 <accept_conn+0x38>
 80061b4:	4b4d      	ldr	r3, [pc, #308]	; (80062ec <accept_conn+0x15c>)
 80061b6:	f241 222e 	movw	r2, #4654	; 0x122e
 80061ba:	494d      	ldr	r1, [pc, #308]	; (80062f0 <accept_conn+0x160>)
 80061bc:	2001      	movs	r0, #1
 80061be:	f7fe f953 	bl	8004468 <mg_log_prefix>
 80061c2:	484c      	ldr	r0, [pc, #304]	; (80062f4 <accept_conn+0x164>)
 80061c4:	f7fe f9a0 	bl	8004508 <mg_log>
    return NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e088      	b.n	80062de <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	33b0      	adds	r3, #176	; 0xb0
 80061d0:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fdc7 	bl	8008d6c <mg_ntohl>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f002 fdbe 	bl	8008d6c <mg_ntohl>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f103 0018 	add.w	r0, r3, #24
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	3306      	adds	r3, #6
 8006202:	2206      	movs	r2, #6
 8006204:	4619      	mov	r1, r3
 8006206:	f014 f9d0 	bl	801a5aa <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800620a:	2100      	movs	r1, #0
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7fe fcc7 	bl	8004ba0 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	331c      	adds	r3, #28
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	69d2      	ldr	r2, [r2, #28]
 800621a:	320c      	adds	r2, #12
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800622c:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <accept_conn+0x158>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b02      	cmp	r3, #2
 8006232:	dd0e      	ble.n	8006252 <accept_conn+0xc2>
 8006234:	4b2d      	ldr	r3, [pc, #180]	; (80062ec <accept_conn+0x15c>)
 8006236:	f241 2237 	movw	r2, #4663	; 0x1237
 800623a:	492d      	ldr	r1, [pc, #180]	; (80062f0 <accept_conn+0x160>)
 800623c:	2003      	movs	r0, #3
 800623e:	f7fe f913 	bl	8004468 <mg_log_prefix>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	331c      	adds	r3, #28
 800624a:	4a2b      	ldr	r2, [pc, #172]	; (80062f8 <accept_conn+0x168>)
 800624c:	482b      	ldr	r0, [pc, #172]	; (80062fc <accept_conn+0x16c>)
 800624e:	f7fe f95b 	bl	8004508 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 800626a:	f043 0304 	orr.w	r3, r3, #4
 800626e:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006278:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800627c:	b2d9      	uxtb	r1, r3
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8006284:	f361 03c3 	bfi	r3, r1, #3, #1
 8006288:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
  c->pfn = lsn->pfn;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  c->loc = lsn->loc;
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f102 0408 	add.w	r4, r2, #8
 80062a0:	f103 0508 	add.w	r5, r3, #8
 80062a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  c->fn = lsn->fn;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	679a      	str	r2, [r3, #120]	; 0x78
  c->fn_data = lsn->fn_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	67da      	str	r2, [r3, #124]	; 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 80062c8:	2200      	movs	r2, #0
 80062ca:	2101      	movs	r1, #1
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7fb f819 	bl	8001304 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 80062d2:	2200      	movs	r2, #0
 80062d4:	2105      	movs	r1, #5
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7fb f814 	bl	8001304 <mg_call>
  return c;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bdb0      	pop	{r4, r5, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000000 	.word	0x20000000
 80062ec:	0801f99c 	.word	0x0801f99c
 80062f0:	0801b0f4 	.word	0x0801b0f4
 80062f4:	0801bf1c 	.word	0x0801bf1c
 80062f8:	08007f6d 	.word	0x08007f6d
 80062fc:	0801c30c 	.word	0x0801c30c

08006300 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 8006312:	230e      	movs	r3, #14
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	2318      	movs	r3, #24
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	233c      	movs	r3, #60	; 0x3c
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	2308      	movs	r3, #8
 8006320:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	441a      	add	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <trim_len+0x3c>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	e000      	b.n	800633e <trim_len+0x3e>
 800633c:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800633e:	4413      	add	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <trim_len+0x5a>
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	e000      	b.n	800635c <trim_len+0x5c>
 800635a:	2344      	movs	r3, #68	; 0x44
 800635c:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	441a      	add	r2, r3
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	429a      	cmp	r2, r3
 800636a:	d904      	bls.n	8006376 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800637c:	461a      	mov	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4293      	cmp	r3, r2
 8006382:	d913      	bls.n	80063ac <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <trim_len+0x108>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	dd0a      	ble.n	80063a2 <trim_len+0xa2>
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <trim_len+0x10c>)
 800638e:	f241 2252 	movw	r2, #4690	; 0x1252
 8006392:	491f      	ldr	r1, [pc, #124]	; (8006410 <trim_len+0x110>)
 8006394:	2001      	movs	r0, #1
 8006396:	f7fe f867 	bl	8004468 <mg_log_prefix>
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	481d      	ldr	r0, [pc, #116]	; (8006414 <trim_len+0x114>)
 800639e:	f7fe f8b3 	bl	8004508 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	441a      	add	r2, r3
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80063bc:	4293      	cmp	r3, r2
 80063be:	d91e      	bls.n	80063fe <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063c6:	461a      	mov	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	6a3a      	ldr	r2, [r7, #32]
 80063ce:	4413      	add	r3, r2
 80063d0:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <trim_len+0x108>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dd09      	ble.n	80063fe <trim_len+0xfe>
 80063ea:	4b08      	ldr	r3, [pc, #32]	; (800640c <trim_len+0x10c>)
 80063ec:	f241 2259 	movw	r2, #4697	; 0x1259
 80063f0:	4907      	ldr	r1, [pc, #28]	; (8006410 <trim_len+0x110>)
 80063f2:	2001      	movs	r0, #1
 80063f4:	f7fe f838 	bl	8004468 <mg_log_prefix>
 80063f8:	4807      	ldr	r0, [pc, #28]	; (8006418 <trim_len+0x118>)
 80063fa:	f7fe f885 	bl	8004508 <mg_log>
    }
  }

  return len;
 80063fe:	683b      	ldr	r3, [r7, #0]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3728      	adds	r7, #40	; 0x28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000000 	.word	0x20000000
 800640c:	0801f9a8 	.word	0x0801f9a8
 8006410:	0801b0f4 	.word	0x0801b0f4
 8006414:	0801c31c 	.word	0x0801c31c
 8006418:	0801c348 	.word	0x0801c348

0800641c <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641e:	b08f      	sub	sp, #60	; 0x3c
 8006420:	af06      	add	r7, sp, #24
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	33b0      	adds	r3, #176	; 0xb0
 8006434:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	331c      	adds	r3, #28
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff5d 	bl	8006300 <trim_len>
 8006446:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d015      	beq.n	8006484 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f103 0118 	add.w	r1, r3, #24
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	6898      	ldr	r0, [r3, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8b1c      	ldrh	r4, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	9203      	str	r2, [sp, #12]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	9202      	str	r2, [sp, #8]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4623      	mov	r3, r4
 800647a:	4602      	mov	r2, r0
 800647c:	69f8      	ldr	r0, [r7, #28]
 800647e:	f7fe fd70 	bl	8004f62 <tx_udp>
 8006482:	e03d      	b.n	8006500 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f103 0618 	add.w	r6, r3, #24
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8b1c      	ldrh	r4, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f002 fc68 	bl	8008d6c <mg_ntohl>
 800649c:	6038      	str	r0, [r7, #0]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 fc62 	bl	8008d6c <mg_ntohl>
 80064a8:	4602      	mov	r2, r0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	9305      	str	r3, [sp, #20]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	9203      	str	r2, [sp, #12]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	9501      	str	r5, [sp, #4]
 80064ba:	9400      	str	r4, [sp, #0]
 80064bc:	2318      	movs	r3, #24
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4631      	mov	r1, r6
 80064c2:	69f8      	ldr	r0, [r7, #28]
 80064c4:	f7ff fd52 	bl	8005f6c <tx_tcp>
 80064c8:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <mg_io_send+0xba>
      return MG_IO_WAIT;
 80064d0:	f06f 0301 	mvn.w	r3, #1
 80064d4:	e015      	b.n	8006502 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064dc:	d102      	bne.n	80064e4 <mg_io_send+0xc8>
      return MG_IO_ERR;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e2:	e00e      	b.n	8006502 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	441a      	add	r2, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	7f9b      	ldrb	r3, [r3, #30]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d103      	bne.n	8006500 <mg_io_send+0xe4>
 80064f8:	2100      	movs	r1, #0
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7fe fb50 	bl	8004ba0 <settmout>
    }
  }
  return (long) len;
 8006500:	687b      	ldr	r3, [r7, #4]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800650c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 fa94 	bl	8008a42 <mg_tls_pending>
 800651a:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006522:	bf28      	it	cs
 8006524:	f44f 1340 	movcs.w	r3, #3145728	; 0x300000
 8006528:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3338      	adds	r3, #56	; 0x38
 800652e:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	429a      	cmp	r2, r3
 800653e:	d90f      	bls.n	8006560 <handle_tls_recv+0x54>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	4619      	mov	r1, r3
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7fd fe78 	bl	8004240 <mg_iobuf_resize>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 8006556:	4919      	ldr	r1, [pc, #100]	; (80065bc <handle_tls_recv+0xb0>)
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fa fef3 	bl	8001344 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    } // else n < 0: outstanding data to be moved to c->recv
  }
}
 800655e:	e028      	b.n	80065b2 <handle_tls_recv+0xa6>
    long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	18d1      	adds	r1, r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	461a      	mov	r2, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f002 fa31 	bl	80089de <mg_tls_recv>
 800657c:	4603      	mov	r3, r0
 800657e:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006586:	d104      	bne.n	8006592 <handle_tls_recv+0x86>
      mg_error(c, "TLS recv error");
 8006588:	490d      	ldr	r1, [pc, #52]	; (80065c0 <handle_tls_recv+0xb4>)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fa feda 	bl	8001344 <mg_error>
}
 8006590:	e00f      	b.n	80065b2 <handle_tls_recv+0xa6>
    } else if (n > 0) {
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	dd0c      	ble.n	80065b2 <handle_tls_recv+0xa6>
      io->len += (size_t) n;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	441a      	add	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 80065a4:	f107 0308 	add.w	r3, r7, #8
 80065a8:	461a      	mov	r2, r3
 80065aa:	2107      	movs	r1, #7
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fa fea9 	bl	8001304 <mg_call>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	0801c2e4 	.word	0x0801c2e4
 80065c0:	0801c374 	.word	0x0801c374

080065c4 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80065c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	b090      	sub	sp, #64	; 0x40
 80065ca:	af06      	add	r7, sp, #24
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	33b0      	adds	r3, #176	; 0xb0
 80065d4:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <read_conn+0x28>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3368      	adds	r3, #104	; 0x68
 80065ea:	e001      	b.n	80065f0 <read_conn+0x2c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3338      	adds	r3, #56	; 0x38
 80065f0:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 fbb7 	bl	8008d6c <mg_ntohl>
 80065fe:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	331c      	adds	r3, #28
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	7b5b      	ldrb	r3, [r3, #13]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d070      	beq.n	80066f8 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 8006616:	2310      	movs	r3, #16
 8006618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	f002 fba2 	bl	8008d6c <mg_ntohl>
 8006628:	4602      	mov	r2, r0
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	4413      	add	r3, r2
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01e      	beq.n	8006684 <read_conn+0xc0>
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	7f9b      	ldrb	r3, [r3, #30]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d11a      	bne.n	8006684 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	681c      	ldr	r4, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	4618      	mov	r0, r3
 800665a:	f002 fb87 	bl	8008d6c <mg_ntohl>
 800665e:	4603      	mov	r3, r0
 8006660:	429c      	cmp	r4, r3
 8006662:	d105      	bne.n	8006670 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800666e:	e01a      	b.n	80066a6 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f002 fb78 	bl	8008d6c <mg_ntohl>
 800667c:	4602      	mov	r2, r0
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8006682:	e010      	b.n	80066a6 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 8006684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      c->is_draining = 1;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8006696:	f043 0310 	orr.w	r3, r3, #16
 800669a:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
      settmout(c, MIP_TTYPE_FIN);
 800669e:	2104      	movs	r1, #4
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7fe fa7d 	bl	8004ba0 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f103 0818 	add.w	r8, r3, #24
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8b1c      	ldrh	r4, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fb52 	bl	8008d6c <mg_ntohl>
 80066c8:	6038      	str	r0, [r7, #0]
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f002 fb4c 	bl	8008d6c <mg_ntohl>
 80066d4:	4602      	mov	r2, r0
 80066d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066da:	2100      	movs	r1, #0
 80066dc:	9105      	str	r1, [sp, #20]
 80066de:	4990      	ldr	r1, [pc, #576]	; (8006920 <read_conn+0x35c>)
 80066e0:	9104      	str	r1, [sp, #16]
 80066e2:	9203      	str	r2, [sp, #12]
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	9102      	str	r1, [sp, #8]
 80066e8:	9501      	str	r5, [sp, #4]
 80066ea:	9400      	str	r4, [sp, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4641      	mov	r1, r8
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff fc3b 	bl	8005f6c <tx_tcp>
    } else {
      // Plain text connection, data is already in c->recv, trigger MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 80066f6:	e155      	b.n	80069a4 <read_conn+0x3e0>
  } else if (pkt->pay.len == 0) {
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8151 	beq.w	80069a4 <read_conn+0x3e0>
  } else if (seq != s->ack) {
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d059      	beq.n	80067c0 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f002 fb2a 	bl	8008d6c <mg_ntohl>
 8006718:	4602      	mov	r2, r0
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4413      	add	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d10f      	bne.n	800674c <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800672c:	4b7d      	ldr	r3, [pc, #500]	; (8006924 <read_conn+0x360>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b03      	cmp	r3, #3
 8006732:	f340 8137 	ble.w	80069a4 <read_conn+0x3e0>
 8006736:	4b7c      	ldr	r3, [pc, #496]	; (8006928 <read_conn+0x364>)
 8006738:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800673c:	497b      	ldr	r1, [pc, #492]	; (800692c <read_conn+0x368>)
 800673e:	2004      	movs	r0, #4
 8006740:	f7fd fe92 	bl	8004468 <mg_log_prefix>
 8006744:	487a      	ldr	r0, [pc, #488]	; (8006930 <read_conn+0x36c>)
 8006746:	f7fd fedf 	bl	8004508 <mg_log>
}
 800674a:	e12b      	b.n	80069a4 <read_conn+0x3e0>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800674c:	4b75      	ldr	r3, [pc, #468]	; (8006924 <read_conn+0x360>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b03      	cmp	r3, #3
 8006752:	dd0d      	ble.n	8006770 <read_conn+0x1ac>
 8006754:	4b74      	ldr	r3, [pc, #464]	; (8006928 <read_conn+0x364>)
 8006756:	f241 22aa 	movw	r2, #4778	; 0x12aa
 800675a:	4974      	ldr	r1, [pc, #464]	; (800692c <read_conn+0x368>)
 800675c:	2004      	movs	r0, #4
 800675e:	f7fd fe83 	bl	8004468 <mg_log_prefix>
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	69b9      	ldr	r1, [r7, #24]
 800676a:	4872      	ldr	r0, [pc, #456]	; (8006934 <read_conn+0x370>)
 800676c:	f7fd fecc 	bl	8004508 <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	f103 0818 	add.w	r8, r3, #24
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8b1c      	ldrh	r4, [r3, #24]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f002 faed 	bl	8008d6c <mg_ntohl>
 8006792:	6038      	str	r0, [r7, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4618      	mov	r0, r3
 800679a:	f002 fae7 	bl	8008d6c <mg_ntohl>
 800679e:	4603      	mov	r3, r0
 80067a0:	2200      	movs	r2, #0
 80067a2:	9205      	str	r2, [sp, #20]
 80067a4:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <read_conn+0x35c>)
 80067a6:	9204      	str	r2, [sp, #16]
 80067a8:	9303      	str	r3, [sp, #12]
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	9102      	str	r1, [sp, #8]
 80067ae:	9501      	str	r5, [sp, #4]
 80067b0:	9400      	str	r4, [sp, #0]
 80067b2:	2310      	movs	r3, #16
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	4641      	mov	r1, r8
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff fbd7 	bl	8005f6c <tx_tcp>
}
 80067be:	e0f1      	b.n	80069a4 <read_conn+0x3e0>
  } else if (io->size - io->len < pkt->pay.len &&
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	1ad2      	subs	r2, r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d210      	bcs.n	80067f4 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	69f8      	ldr	r0, [r7, #28]
 80067e0:	f7fd fd2e 	bl	8004240 <mg_iobuf_resize>
 80067e4:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <read_conn+0x230>
    mg_error(c, "oom");
 80067ea:	4953      	ldr	r1, [pc, #332]	; (8006938 <read_conn+0x374>)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7fa fda9 	bl	8001344 <mg_error>
 80067f2:	e0d7      	b.n	80069a4 <read_conn+0x3e0>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	18d0      	adds	r0, r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6899      	ldr	r1, [r3, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	461a      	mov	r2, r3
 8006808:	f013 fecf 	bl	801a5aa <memcpy>
    io->len += pkt->pay.len;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	441a      	add	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800681a:	4b42      	ldr	r3, [pc, #264]	; (8006924 <read_conn+0x360>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b03      	cmp	r3, #3
 8006820:	dd15      	ble.n	800684e <read_conn+0x28a>
 8006822:	4b41      	ldr	r3, [pc, #260]	; (8006928 <read_conn+0x364>)
 8006824:	f241 22ba 	movw	r2, #4794	; 0x12ba
 8006828:	4940      	ldr	r1, [pc, #256]	; (800692c <read_conn+0x368>)
 800682a:	2004      	movs	r0, #4
 800682c:	f7fd fe1c 	bl	8004468 <mg_log_prefix>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fa96 	bl	8008d6c <mg_ntohl>
 8006840:	4602      	mov	r2, r0
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4621      	mov	r1, r4
 8006848:	483c      	ldr	r0, [pc, #240]	; (800693c <read_conn+0x378>)
 800684a:	f7fd fe5d 	bl	8004508 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4618      	mov	r0, r3
 8006856:	f002 fa89 	bl	8008d6c <mg_ntohl>
 800685a:	4602      	mov	r2, r0
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	441a      	add	r2, r3
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	441a      	add	r2, r3
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800687c:	4293      	cmp	r3, r2
 800687e:	d961      	bls.n	8006944 <read_conn+0x380>
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d05b      	beq.n	8006944 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <read_conn+0x360>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b03      	cmp	r3, #3
 8006892:	dd0e      	ble.n	80068b2 <read_conn+0x2ee>
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <read_conn+0x364>)
 8006896:	f241 22c1 	movw	r2, #4801	; 0x12c1
 800689a:	4924      	ldr	r1, [pc, #144]	; (800692c <read_conn+0x368>)
 800689c:	2004      	movs	r0, #4
 800689e:	f7fd fde3 	bl	8004468 <mg_log_prefix>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	461a      	mov	r2, r3
 80068ac:	4824      	ldr	r0, [pc, #144]	; (8006940 <read_conn+0x37c>)
 80068ae:	f7fd fe2b 	bl	8004508 <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f103 0818 	add.w	r8, r3, #24
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8b1c      	ldrh	r4, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fa4c 	bl	8008d6c <mg_ntohl>
 80068d4:	6038      	str	r0, [r7, #0]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fa46 	bl	8008d6c <mg_ntohl>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2200      	movs	r2, #0
 80068e4:	9205      	str	r2, [sp, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	9204      	str	r2, [sp, #16]
 80068ea:	9303      	str	r3, [sp, #12]
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	9102      	str	r1, [sp, #8]
 80068f0:	9501      	str	r5, [sp, #4]
 80068f2:	9400      	str	r4, [sp, #0]
 80068f4:	2310      	movs	r3, #16
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4641      	mov	r1, r8
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff fb36 	bl	8005f6c <tx_tcp>
      s->unacked = 0;
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2200      	movs	r2, #0
 8006904:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	7f9b      	ldrb	r3, [r3, #30]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01e      	beq.n	8006954 <read_conn+0x390>
 8006916:	2100      	movs	r1, #0
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7fe f941 	bl	8004ba0 <settmout>
 800691e:	e019      	b.n	8006954 <read_conn+0x390>
 8006920:	0801b7bc 	.word	0x0801b7bc
 8006924:	20000000 	.word	0x20000000
 8006928:	0801f9b4 	.word	0x0801f9b4
 800692c:	0801b0f4 	.word	0x0801b0f4
 8006930:	0801c384 	.word	0x0801c384
 8006934:	0801c39c 	.word	0x0801c39c
 8006938:	0801c2e4 	.word	0x0801c2e4
 800693c:	0801c3b4 	.word	0x0801c3b4
 8006940:	0801c3c8 	.word	0x0801c3c8
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	7f9b      	ldrb	r3, [r3, #30]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d003      	beq.n	8006954 <read_conn+0x390>
 800694c:	2101      	movs	r1, #1
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7fe f926 	bl	8004ba0 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <read_conn+0x3b8>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800696a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <read_conn+0x3b8>
      mg_tls_handshake(c);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f002 f81e 	bl	80089b6 <mg_tls_handshake>
 800697a:	e013      	b.n	80069a4 <read_conn+0x3e0>
    } else if (c->is_tls) {
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <read_conn+0x3d0>
      handle_tls_recv(c);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fdbd 	bl	800650c <handle_tls_recv>
}
 8006992:	e007      	b.n	80069a4 <read_conn+0x3e0>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	330c      	adds	r3, #12
 8006998:	461a      	mov	r2, r3
 800699a:	2107      	movs	r1, #7
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7fa fcb1 	bl	8001304 <mg_call>
}
 80069a2:	e7ff      	b.n	80069a4 <read_conn+0x3e0>
 80069a4:	bf00      	nop
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ae:	bf00      	nop

080069b0 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fcaa 	bl	800531c <getpeer>
 80069c8:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <rx_tcp+0x26>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	33b0      	adds	r3, #176	; 0xb0
 80069d4:	e000      	b.n	80069d8 <rx_tcp+0x28>
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d048      	beq.n	8006a72 <rx_tcp+0xc2>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d040      	beq.n	8006a72 <rx_tcp+0xc2>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	2b12      	cmp	r3, #18
 80069f8:	d13b      	bne.n	8006a72 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 f9b3 	bl	8008d6c <mg_ntohl>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f002 f9aa 	bl	8008d6c <mg_ntohl>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	9200      	str	r2, [sp, #0]
 8006a2e:	2210      	movs	r2, #16
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fb66 	bl	8006104 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8006a3e:	f36f 1345 	bfc	r3, #5, #1
 8006a42:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8006a46:	2100      	movs	r1, #0
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f7fe f8a9 	bl	8004ba0 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2104      	movs	r1, #4
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f7fa fc56 	bl	8001304 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80cd 	beq.w	8006c04 <rx_tcp+0x254>
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	f001 ffa3 	bl	80089b6 <mg_tls_handshake>
 8006a70:	e0c8      	b.n	8006c04 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <rx_tcp+0xfc>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <rx_tcp+0xfc>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d00c      	beq.n	8006aac <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	9201      	str	r2, [sp, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	9200      	str	r2, [sp, #0]
 8006aa0:	2214      	movs	r2, #20
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fb2d 	bl	8006104 <tx_tcp_pkt>
 8006aaa:	e0ab      	b.n	8006c04 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <rx_tcp+0x11a>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	7b5b      	ldrb	r3, [r3, #13]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8006ac0:	4952      	ldr	r1, [pc, #328]	; (8006c0c <rx_tcp+0x25c>)
 8006ac2:	6978      	ldr	r0, [r7, #20]
 8006ac4:	f7fa fc3e 	bl	8001344 <mg_error>
 8006ac8:	e09c      	b.n	8006c04 <rx_tcp+0x254>
  } else if (c != NULL) {
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	7f9b      	ldrb	r3, [r3, #30]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <rx_tcp+0x136>
      settmout(c,
 8006ade:	2100      	movs	r1, #0
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	f7fe f85d 	bl	8004ba0 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6978      	ldr	r0, [r7, #20]
 8006aea:	f7ff fd6b 	bl	80065c4 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 8006aee:	e089      	b.n	8006c04 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	2201      	movs	r2, #1
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fc0f 	bl	800531c <getpeer>
 8006afe:	6178      	str	r0, [r7, #20]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	9201      	str	r2, [sp, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	9200      	str	r2, [sp, #0]
 8006b14:	2214      	movs	r2, #20
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff faf3 	bl	8006104 <tx_tcp_pkt>
}
 8006b1e:	e071      	b.n	8006c04 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d062      	beq.n	8006c04 <rx_tcp+0x254>
 8006b3e:	4933      	ldr	r1, [pc, #204]	; (8006c0c <rx_tcp+0x25c>)
 8006b40:	6978      	ldr	r0, [r7, #20]
 8006b42:	f7fa fbff 	bl	8001344 <mg_error>
}
 8006b46:	e05d      	b.n	8006c04 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	7b5b      	ldrb	r3, [r3, #13]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f002 f91d 	bl	8008d9e <mg_ntohs>
 8006b64:	4603      	mov	r3, r0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 f900 	bl	8008d6c <mg_ntohl>
 8006b6c:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2212      	movs	r2, #18
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fac1 	bl	8006104 <tx_tcp_pkt>
}
 8006b82:	e03f      	b.n	8006c04 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	7b5b      	ldrb	r3, [r3, #13]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	9200      	str	r2, [sp, #0]
 8006ba0:	2211      	movs	r2, #17
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff faad 	bl	8006104 <tx_tcp_pkt>
}
 8006baa:	e02b      	b.n	8006c04 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 f8da 	bl	8008d6c <mg_ntohl>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f002 f8eb 	bl	8008d9e <mg_ntohs>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	3301      	adds	r3, #1
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	d104      	bne.n	8006bda <rx_tcp+0x22a>
    accept_conn(c, pkt);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff fadc 	bl	8006190 <accept_conn>
}
 8006bd8:	e014      	b.n	8006c04 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10c      	bne.n	8006c04 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	9200      	str	r2, [sp, #0]
 8006bf8:	2214      	movs	r2, #20
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fa81 	bl	8006104 <tx_tcp_pkt>
}
 8006c02:	e7ff      	b.n	8006c04 <rx_tcp+0x254>
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd90      	pop	{r4, r7, pc}
 8006c0c:	0801c3d8 	.word	0x0801c3d8

08006c10 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	b08b      	sub	sp, #44	; 0x2c
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 f8bb 	bl	8008d9e <mg_ntohs>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8006c2c:	8afb      	ldrh	r3, [r7, #22]
 8006c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <rx_ip+0x30>
 8006c36:	8afb      	ldrh	r3, [r7, #22]
 8006c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d026      	beq.n	8006c8e <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	7a5b      	ldrb	r3, [r3, #9]
 8006c46:	2b11      	cmp	r3, #17
 8006c48:	d105      	bne.n	8006c56 <rx_ip+0x46>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f103 0214 	add.w	r2, r3, #20
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	7a5b      	ldrb	r3, [r3, #9]
 8006c5c:	2b06      	cmp	r3, #6
 8006c5e:	d105      	bne.n	8006c6c <rx_ip+0x5c>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f103 0214 	add.w	r2, r3, #20
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	2200      	movs	r2, #0
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fb51 	bl	800531c <getpeer>
 8006c7a:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 811c 	beq.w	8006ebc <rx_ip+0x2ac>
 8006c84:	4992      	ldr	r1, [pc, #584]	; (8006ed0 <rx_ip+0x2c0>)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7fa fb5c 	bl	8001344 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8006c8c:	e116      	b.n	8006ebc <rx_ip+0x2ac>
  } else if (pkt->ip->proto == 1) {
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	7a5b      	ldrb	r3, [r3, #9]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d116      	bne.n	8006cc6 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f103 0214 	add.w	r2, r3, #20
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	f240 8109 	bls.w	8006ec0 <rx_ip+0x2b0>
    mkpay(pkt, pkt->icmp + 1);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6838      	ldr	r0, [r7, #0]
 8006cb8:	f7fd fefa 	bl	8004ab0 <mkpay>
    rx_icmp(ifp, pkt);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe fcb0 	bl	8005624 <rx_icmp>
 8006cc4:	e101      	b.n	8006eca <rx_ip+0x2ba>
  } else if (pkt->ip->proto == 17) {
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	7a5b      	ldrb	r3, [r3, #9]
 8006ccc:	2b11      	cmp	r3, #17
 8006cce:	f040 808b 	bne.w	8006de8 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f103 0214 	add.w	r2, r3, #20
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	f240 80ee 	bls.w	8006ec4 <rx_ip+0x2b4>
    mkpay(pkt, pkt->udp + 1);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	3308      	adds	r3, #8
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6838      	ldr	r0, [r7, #0]
 8006cf2:	f7fd fedd 	bl	8004ab0 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8006cf6:	4b77      	ldr	r3, [pc, #476]	; (8006ed4 <rx_ip+0x2c4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	dd2d      	ble.n	8006d5a <rx_ip+0x14a>
 8006cfe:	4b76      	ldr	r3, [pc, #472]	; (8006ed8 <rx_ip+0x2c8>)
 8006d00:	f241 3219 	movw	r2, #4889	; 0x1319
 8006d04:	4975      	ldr	r1, [pc, #468]	; (8006edc <rx_ip+0x2cc>)
 8006d06:	2004      	movs	r0, #4
 8006d08:	f7fd fbae 	bl	8004468 <mg_log_prefix>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f103 050c 	add.w	r5, r3, #12
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f002 f83e 	bl	8008d9e <mg_ntohs>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461e      	mov	r6, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f103 0410 	add.w	r4, r3, #16
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	885b      	ldrh	r3, [r3, #2]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 f831 	bl	8008d9e <mg_ntohs>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9202      	str	r2, [sp, #8]
 8006d48:	9401      	str	r4, [sp, #4]
 8006d4a:	4b65      	ldr	r3, [pc, #404]	; (8006ee0 <rx_ip+0x2d0>)
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4633      	mov	r3, r6
 8006d50:	462a      	mov	r2, r5
 8006d52:	4963      	ldr	r1, [pc, #396]	; (8006ee0 <rx_ip+0x2d0>)
 8006d54:	4863      	ldr	r0, [pc, #396]	; (8006ee4 <rx_ip+0x2d4>)
 8006d56:	f7fd fbd7 	bl	8004508 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7f1b      	ldrb	r3, [r3, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01c      	beq.n	8006d9c <rx_ip+0x18c>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	885b      	ldrh	r3, [r3, #2]
 8006d68:	b29c      	uxth	r4, r3
 8006d6a:	2044      	movs	r0, #68	; 0x44
 8006d6c:	f002 f817 	bl	8008d9e <mg_ntohs>
 8006d70:	4603      	mov	r3, r0
 8006d72:	429c      	cmp	r4, r3
 8006d74:	d112      	bne.n	8006d9c <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	f103 0208 	add.w	r2, r3, #8
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6838      	ldr	r0, [r7, #0]
 8006d8e:	f7fd fe8f 	bl	8004ab0 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fe fca1 	bl	80056dc <rx_dhcp_client>
 8006d9a:	e096      	b.n	8006eca <rx_ip+0x2ba>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7f5b      	ldrb	r3, [r3, #29]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01c      	beq.n	8006dde <rx_ip+0x1ce>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	b29c      	uxth	r4, r3
 8006dac:	2043      	movs	r0, #67	; 0x43
 8006dae:	f001 fff6 	bl	8008d9e <mg_ntohs>
 8006db2:	4603      	mov	r3, r0
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d112      	bne.n	8006dde <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	f103 0208 	add.w	r2, r3, #8
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6838      	ldr	r0, [r7, #0]
 8006dd0:	f7fd fe6e 	bl	8004ab0 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fe fe68 	bl	8005aac <rx_dhcp_server>
 8006ddc:	e075      	b.n	8006eca <rx_ip+0x2ba>
    } else {
      rx_udp(ifp, pkt);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff f851 	bl	8005e88 <rx_udp>
 8006de6:	e070      	b.n	8006eca <rx_ip+0x2ba>
    }
  } else if (pkt->ip->proto == 6) {
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	7a5b      	ldrb	r3, [r3, #9]
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d16b      	bne.n	8006eca <rx_ip+0x2ba>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f103 0214 	add.w	r2, r3, #20
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b13      	cmp	r3, #19
 8006e04:	d960      	bls.n	8006ec8 <rx_ip+0x2b8>
    mkpay(pkt, pkt->tcp + 1);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f7fd fe4e 	bl	8004ab0 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 ffbe 	bl	8008d9e <mg_ntohs>
 8006e22:	4603      	mov	r3, r0
 8006e24:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	7b1b      	ldrb	r3, [r3, #12]
 8006e2c:	091b      	lsrs	r3, r3, #4
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3305      	adds	r3, #5
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8006e3a:	8aba      	ldrh	r2, [r7, #20]
 8006e3c:	8a7b      	ldrh	r3, [r7, #18]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d305      	bcc.n	8006e4e <rx_ip+0x23e>
 8006e42:	8aba      	ldrh	r2, [r7, #20]
 8006e44:	8a7b      	ldrh	r3, [r7, #18]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8006e4e:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <rx_ip+0x2c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	dd2d      	ble.n	8006eb2 <rx_ip+0x2a2>
 8006e56:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <rx_ip+0x2c8>)
 8006e58:	f241 322e 	movw	r2, #4910	; 0x132e
 8006e5c:	491f      	ldr	r1, [pc, #124]	; (8006edc <rx_ip+0x2cc>)
 8006e5e:	2004      	movs	r0, #4
 8006e60:	f7fd fb02 	bl	8004468 <mg_log_prefix>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f103 050c 	add.w	r5, r3, #12
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 ff92 	bl	8008d9e <mg_ntohs>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461e      	mov	r6, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f103 0410 	add.w	r4, r3, #16
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 ff85 	bl	8008d9e <mg_ntohs>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	9202      	str	r2, [sp, #8]
 8006ea0:	9401      	str	r4, [sp, #4]
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <rx_ip+0x2d0>)
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4633      	mov	r3, r6
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	490d      	ldr	r1, [pc, #52]	; (8006ee0 <rx_ip+0x2d0>)
 8006eac:	480e      	ldr	r0, [pc, #56]	; (8006ee8 <rx_ip+0x2d8>)
 8006eae:	f7fd fb2b 	bl	8004508 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fd7b 	bl	80069b0 <rx_tcp>
 8006eba:	e006      	b.n	8006eca <rx_ip+0x2ba>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8006ebc:	bf00      	nop
 8006ebe:	e004      	b.n	8006eca <rx_ip+0x2ba>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <rx_ip+0x2ba>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <rx_ip+0x2ba>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8006ec8:	bf00      	nop
  }
}
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed0:	0801c3e4 	.word	0x0801c3e4
 8006ed4:	20000000 	.word	0x20000000
 8006ed8:	0801f9c0 	.word	0x0801f9c0
 8006edc:	0801b0f4 	.word	0x0801b0f4
 8006ee0:	08007ef5 	.word	0x08007ef5
 8006ee4:	0801c400 	.word	0x0801c400
 8006ee8:	0801c41c 	.word	0x0801c41c

08006eec <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	799b      	ldrb	r3, [r3, #6]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d004      	beq.n	8006f0a <rx_ip6+0x1e>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	799b      	ldrb	r3, [r3, #6]
 8006f06:	2b3a      	cmp	r3, #58	; 0x3a
 8006f08:	d115      	bne.n	8006f36 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d922      	bls.n	8006f64 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f7fd fdc2 	bl	8004ab0 <mkpay>
    rx_icmp(ifp, pkt);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe fb78 	bl	8005624 <rx_icmp>
 8006f34:	e019      	b.n	8006f6a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	2b11      	cmp	r3, #17
 8006f3e:	d114      	bne.n	8006f6a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2b07      	cmp	r3, #7
 8006f52:	d909      	bls.n	8006f68 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	3308      	adds	r3, #8
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f7fd fda7 	bl	8004ab0 <mkpay>
 8006f62:	e002      	b.n	8006f6a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006f64:	bf00      	nop
 8006f66:	e000      	b.n	8006f6a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006f68:	bf00      	nop
  }
}
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b093      	sub	sp, #76	; 0x4c
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8006f7c:	f107 0314 	add.w	r3, r7, #20
 8006f80:	2234      	movs	r2, #52	; 0x34
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f013 fa4e 	bl	801a426 <memset>
  pkt.raw.buf = (char *) buf;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b0d      	cmp	r3, #13
 8006f9a:	f240 80df 	bls.w	800715c <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d013      	beq.n	8006fd0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	4618      	mov	r0, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2206      	movs	r2, #6
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f013 fa0e 	bl	801a3d2 <memcmp>
 8006fb6:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	4970      	ldr	r1, [pc, #448]	; (8007184 <mg_tcpip_rx+0x214>)
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f013 fa05 	bl	801a3d2 <memcmp>
 8006fc8:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 80c8 	bne.w	8007160 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01a      	beq.n	8007010 <mg_tcpip_rx+0xa0>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d917      	bls.n	8007010 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3b04      	subs	r3, #4
 8006fe4:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	2000      	movs	r0, #0
 8006fec:	f001 feee 	bl	8008dcc <mg_crc32>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	2204      	movs	r2, #4
 8007002:	4619      	mov	r1, r3
 8007004:	f013 f9e5 	bl	801a3d2 <memcmp>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 80aa 	bne.w	8007164 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	899b      	ldrh	r3, [r3, #12]
 8007014:	b29c      	uxth	r4, r3
 8007016:	f640 0006 	movw	r0, #2054	; 0x806
 800701a:	f001 fec0 	bl	8008d9e <mg_ntohs>
 800701e:	4603      	mov	r3, r0
 8007020:	429c      	cmp	r4, r3
 8007022:	d114      	bne.n	800704e <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	330e      	adds	r3, #14
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b29      	cmp	r3, #41	; 0x29
 800702e:	f240 809b 	bls.w	8007168 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8007032:	f107 0314 	add.w	r3, r7, #20
 8007036:	461a      	mov	r2, r3
 8007038:	2103      	movs	r1, #3
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7fd fd24 	bl	8004a88 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	4619      	mov	r1, r3
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7fe f9da 	bl	8005400 <rx_arp>
 800704c:	e097      	b.n	800717e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	899b      	ldrh	r3, [r3, #12]
 8007052:	b29c      	uxth	r4, r3
 8007054:	f248 60dd 	movw	r0, #34525	; 0x86dd
 8007058:	f001 fea1 	bl	8008d9e <mg_ntohs>
 800705c:	4603      	mov	r3, r0
 800705e:	429c      	cmp	r4, r3
 8007060:	d11b      	bne.n	800709a <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	330e      	adds	r3, #14
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b35      	cmp	r3, #53	; 0x35
 800706c:	d97e      	bls.n	800716c <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	091b      	lsrs	r3, r3, #4
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b06      	cmp	r3, #6
 8007078:	d17a      	bne.n	8007170 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007080:	f107 0314 	add.w	r3, r7, #20
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd fd12 	bl	8004ab0 <mkpay>
    rx_ip6(ifp, &pkt);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4619      	mov	r1, r3
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff ff2a 	bl	8006eec <rx_ip6>
 8007098:	e071      	b.n	800717e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	899b      	ldrh	r3, [r3, #12]
 800709e:	b29c      	uxth	r4, r3
 80070a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070a4:	f001 fe7b 	bl	8008d9e <mg_ntohs>
 80070a8:	4603      	mov	r3, r0
 80070aa:	429c      	cmp	r4, r3
 80070ac:	d133      	bne.n	8007116 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	330e      	adds	r3, #14
 80070b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b21      	cmp	r3, #33	; 0x21
 80070b8:	d95c      	bls.n	8007174 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	885b      	ldrh	r3, [r3, #2]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 fe6c 	bl	8008d9e <mg_ntohs>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f103 020e 	add.w	r2, r3, #14
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d208      	bcs.n	80070e4 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fe60 	bl	8008d9e <mg_ntohs>
 80070de:	4603      	mov	r3, r0
 80070e0:	330e      	adds	r3, #14
 80070e2:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b21      	cmp	r3, #33	; 0x21
 80070e8:	d946      	bls.n	8007178 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d142      	bne.n	800717c <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f103 0214 	add.w	r2, r3, #20
 80070fc:	f107 0314 	add.w	r3, r7, #20
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7fd fcd4 	bl	8004ab0 <mkpay>
    rx_ip(ifp, &pkt);
 8007108:	f107 0314 	add.w	r3, r7, #20
 800710c:	4619      	mov	r1, r3
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fd7e 	bl	8006c10 <rx_ip>
 8007114:	e033      	b.n	800717e <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8007116:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <mg_tcpip_rx+0x218>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b02      	cmp	r3, #2
 800711c:	dd11      	ble.n	8007142 <mg_tcpip_rx+0x1d2>
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <mg_tcpip_rx+0x21c>)
 8007120:	f241 326d 	movw	r2, #4973	; 0x136d
 8007124:	491a      	ldr	r1, [pc, #104]	; (8007190 <mg_tcpip_rx+0x220>)
 8007126:	2003      	movs	r0, #3
 8007128:	f7fd f99e 	bl	8004468 <mg_log_prefix>
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	899b      	ldrh	r3, [r3, #12]
 8007130:	b29b      	uxth	r3, r3
 8007132:	4618      	mov	r0, r3
 8007134:	f001 fe33 	bl	8008d9e <mg_ntohs>
 8007138:	4603      	mov	r3, r0
 800713a:	4619      	mov	r1, r3
 800713c:	4815      	ldr	r0, [pc, #84]	; (8007194 <mg_tcpip_rx+0x224>)
 800713e:	f7fd f9e3 	bl	8004508 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8007142:	4b11      	ldr	r3, [pc, #68]	; (8007188 <mg_tcpip_rx+0x218>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b03      	cmp	r3, #3
 8007148:	dd19      	ble.n	800717e <mg_tcpip_rx+0x20e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b20      	cmp	r3, #32
 800714e:	bf28      	it	cs
 8007150:	2320      	movcs	r3, #32
 8007152:	4619      	mov	r1, r3
 8007154:	68b8      	ldr	r0, [r7, #8]
 8007156:	f7fd fa0d 	bl	8004574 <mg_hexdump>
 800715a:	e010      	b.n	800717e <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800715c:	bf00      	nop
 800715e:	e00e      	b.n	800717e <mg_tcpip_rx+0x20e>
    return;
 8007160:	bf00      	nop
 8007162:	e00c      	b.n	800717e <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8007164:	bf00      	nop
 8007166:	e00a      	b.n	800717e <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8007168:	bf00      	nop
 800716a:	e008      	b.n	800717e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800716c:	bf00      	nop
 800716e:	e006      	b.n	800717e <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800717c:	bf00      	nop
  }
}
 800717e:	374c      	adds	r7, #76	; 0x4c
 8007180:	46bd      	mov	sp, r7
 8007182:	bd90      	pop	{r4, r7, pc}
 8007184:	0801f8d0 	.word	0x0801f8d0
 8007188:	20000000 	.word	0x20000000
 800718c:	0801f9c8 	.word	0x0801f9c8
 8007190:	0801b0f4 	.word	0x0801b0f4
 8007194:	0801c438 	.word	0x0801c438

08007198 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8007198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800719a:	b095      	sub	sp, #84	; 0x54
 800719c:	af06      	add	r7, sp, #24
 800719e:	6178      	str	r0, [r7, #20]
 80071a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80071aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071ae:	e9cd 2300 	strd	r2, r3, [sp]
 80071b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	4608      	mov	r0, r1
 80071bc:	f001 fb30 	bl	8008820 <mg_timer_expired>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = now;
 80071c6:	6979      	ldr	r1, [r7, #20]
 80071c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 80071d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <mg_tcpip_poll+0x58>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d106      	bne.n	80071f0 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2204      	movs	r2, #4
 80071e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    onstatechange(ifp);
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f7fd fdb8 	bl	8004d60 <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 80071f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d073      	beq.n	80072e0 <mg_tcpip_poll+0x148>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d06e      	beq.n	80072e0 <mg_tcpip_poll+0x148>
    bool up = ifp->driver->up(ifp);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	6978      	ldr	r0, [r7, #20]
 800720a:	4798      	blx	r3
 800720c:	4603      	mov	r3, r0
 800720e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8007224:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007228:	f083 0301 	eor.w	r3, r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d006      	beq.n	8007240 <mg_tcpip_poll+0xa8>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	7f1b      	ldrb	r3, [r3, #28]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <mg_tcpip_poll+0xa8>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 8007240:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007244:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007248:	429a      	cmp	r2, r3
 800724a:	d01a      	beq.n	8007282 <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800724c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007250:	f083 0301 	eor.w	r3, r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <mg_tcpip_poll+0xc6>
 800725a:	2300      	movs	r3, #0
 800725c:	e00a      	b.n	8007274 <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <mg_tcpip_poll+0xdc>
 8007272:	2303      	movs	r3, #3
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f7fd fd70 	bl	8004d60 <onstatechange>
 8007280:	e016      	b.n	80072b0 <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	7f1b      	ldrb	r3, [r3, #28]
 8007286:	f083 0301 	eor.w	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00f      	beq.n	80072b0 <mg_tcpip_poll+0x118>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10a      	bne.n	80072b0 <mg_tcpip_poll+0x118>
               ifp->ip) {
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2203      	movs	r2, #3
 80072a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      onstatechange(ifp);
 80072aa:	6978      	ldr	r0, [r7, #20]
 80072ac:	f7fd fd58 	bl	8004d60 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <mg_tcpip_poll+0x13e>
 80072ba:	4ba2      	ldr	r3, [pc, #648]	; (8007544 <mg_tcpip_poll+0x3ac>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dd09      	ble.n	80072d6 <mg_tcpip_poll+0x13e>
 80072c2:	4ba1      	ldr	r3, [pc, #644]	; (8007548 <mg_tcpip_poll+0x3b0>)
 80072c4:	f241 3294 	movw	r2, #5012	; 0x1394
 80072c8:	49a0      	ldr	r1, [pc, #640]	; (800754c <mg_tcpip_poll+0x3b4>)
 80072ca:	2001      	movs	r0, #1
 80072cc:	f7fd f8cc 	bl	8004468 <mg_log_prefix>
 80072d0:	489f      	ldr	r0, [pc, #636]	; (8007550 <mg_tcpip_poll+0x3b8>)
 80072d2:	f7fd f919 	bl	8004508 <mg_log>
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 80072d6:	2200      	movs	r2, #0
 80072d8:	2104      	movs	r1, #4
 80072da:	6978      	ldr	r0, [r7, #20]
 80072dc:	f7fd fbd4 	bl	8004a88 <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 819d 	beq.w	8007626 <mg_tcpip_poll+0x48e>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	7f1b      	ldrb	r3, [r3, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d055      	beq.n	80073a0 <mg_tcpip_poll+0x208>
 80072f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d051      	beq.n	80073a0 <mg_tcpip_poll+0x208>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007302:	2b01      	cmp	r3, #1
 8007304:	d103      	bne.n	800730e <mg_tcpip_poll+0x176>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7fd ffcc 	bl	80052a4 <tx_dhcp_discover>
 800730c:	e048      	b.n	80073a0 <mg_tcpip_poll+0x208>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007314:	2b04      	cmp	r3, #4
 8007316:	d143      	bne.n	80073a0 <mg_tcpip_poll+0x208>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800731e:	4313      	orrs	r3, r2
 8007320:	d03e      	beq.n	80073a0 <mg_tcpip_poll+0x208>
      if (ifp->now >= ifp->lease_expire) {
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800732e:	4290      	cmp	r0, r2
 8007330:	eb71 0303 	sbcs.w	r3, r1, r3
 8007334:	d30a      	bcc.n	800734c <mg_tcpip_poll+0x1b4>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2200      	movs	r2, #0
 8007342:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 8007344:	6978      	ldr	r0, [r7, #20]
 8007346:	f7fd fd0b 	bl	8004d60 <onstatechange>
 800734a:	e029      	b.n	80073a0 <mg_tcpip_poll+0x208>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007352:	4980      	ldr	r1, [pc, #512]	; (8007554 <mg_tcpip_poll+0x3bc>)
 8007354:	1854      	adds	r4, r2, r1
 8007356:	f143 0500 	adc.w	r5, r3, #0
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007360:	42a2      	cmp	r2, r4
 8007362:	41ab      	sbcs	r3, r5
 8007364:	d21c      	bcs.n	80073a0 <mg_tcpip_poll+0x208>
                 ((ifp->now / 1000) % 60) == 0) {
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800736c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	f7f9 fc22 	bl	8000bbc <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4610      	mov	r0, r2
 800737e:	4619      	mov	r1, r3
 8007380:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	f7f9 fc18 	bl	8000bbc <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800738c:	4313      	orrs	r3, r2
 800738e:	d107      	bne.n	80073a0 <mg_tcpip_poll+0x208>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007398:	496f      	ldr	r1, [pc, #444]	; (8007558 <mg_tcpip_poll+0x3c0>)
 800739a:	6978      	ldr	r0, [r7, #20]
 800739c:	f7fd ff50 	bl	8005240 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d019      	beq.n	80073de <mg_tcpip_poll+0x246>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4798      	blx	r3
 80073bc:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) {
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d024      	beq.n	800740e <mg_tcpip_poll+0x276>
      ifp->nrecv++;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	671a      	str	r2, [r3, #112]	; 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d4:	4619      	mov	r1, r3
 80073d6:	6978      	ldr	r0, [r7, #20]
 80073d8:	f7ff fdca 	bl	8006f70 <mg_tcpip_rx>
 80073dc:	e017      	b.n	800740e <mg_tcpip_poll+0x276>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	3334      	adds	r3, #52	; 0x34
 80073e2:	f107 0220 	add.w	r2, r7, #32
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 feb3 	bl	8008154 <mg_queue_next>
 80073ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <mg_tcpip_poll+0x276>
      mg_tcpip_rx(ifp, buf, len);
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073fa:	4619      	mov	r1, r3
 80073fc:	6978      	ldr	r0, [r7, #20]
 80073fe:	f7ff fdb7 	bl	8006f70 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	3334      	adds	r3, #52	; 0x34
 8007406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007408:	4618      	mov	r0, r3
 800740a:	f000 ff21 	bl	8008250 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
 8007416:	e101      	b.n	800761c <mg_tcpip_poll+0x484>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <mg_tcpip_poll+0x2a2>
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80eb 	beq.w	8007610 <mg_tcpip_poll+0x478>
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 80e2 	bne.w	8007610 <mg_tcpip_poll+0x478>
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	f040 80d9 	bne.w	8007610 <mg_tcpip_poll+0x478>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	33b0      	adds	r3, #176	; 0xb0
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8007464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007466:	331c      	adds	r3, #28
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007476:	4290      	cmp	r0, r2
 8007478:	eb71 0303 	sbcs.w	r3, r1, r3
 800747c:	f080 80cb 	bcs.w	8007616 <mg_tcpip_poll+0x47e>
      if (s->ttype == MIP_TTYPE_ARP) {
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	7f9b      	ldrb	r3, [r3, #30]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d104      	bne.n	8007492 <mg_tcpip_poll+0x2fa>
        mg_error(c, "ARP timeout");
 8007488:	4934      	ldr	r1, [pc, #208]	; (800755c <mg_tcpip_poll+0x3c4>)
 800748a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800748c:	f7f9 ff5a 	bl	8001344 <mg_error>
 8007490:	e0b9      	b.n	8007606 <mg_tcpip_poll+0x46e>
      } else if (c->is_udp) {
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 80b8 	bne.w	8007614 <mg_tcpip_poll+0x47c>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	7f9b      	ldrb	r3, [r3, #30]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d142      	bne.n	8007532 <mg_tcpip_poll+0x39a>
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d03c      	beq.n	8007532 <mg_tcpip_poll+0x39a>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80074b8:	4b22      	ldr	r3, [pc, #136]	; (8007544 <mg_tcpip_poll+0x3ac>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	dd0f      	ble.n	80074e0 <mg_tcpip_poll+0x348>
 80074c0:	4b21      	ldr	r3, [pc, #132]	; (8007548 <mg_tcpip_poll+0x3b0>)
 80074c2:	f241 32c8 	movw	r2, #5064	; 0x13c8
 80074c6:	4921      	ldr	r1, [pc, #132]	; (800754c <mg_tcpip_poll+0x3b4>)
 80074c8:	2004      	movs	r0, #4
 80074ca:	f7fc ffcd 	bl	8004468 <mg_log_prefix>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4821      	ldr	r0, [pc, #132]	; (8007560 <mg_tcpip_poll+0x3c8>)
 80074dc:	f7fd f814 	bl	8004508 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	f103 0618 	add.w	r6, r3, #24
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	8b1c      	ldrh	r4, [r3, #24]
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fc38 	bl	8008d6c <mg_ntohl>
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fc32 	bl	8008d6c <mg_ntohl>
 8007508:	4603      	mov	r3, r0
 800750a:	2200      	movs	r2, #0
 800750c:	9205      	str	r2, [sp, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	9204      	str	r2, [sp, #16]
 8007512:	9303      	str	r3, [sp, #12]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	9102      	str	r1, [sp, #8]
 8007518:	9501      	str	r5, [sp, #4]
 800751a:	9400      	str	r4, [sp, #0]
 800751c:	2310      	movs	r3, #16
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4631      	mov	r1, r6
 8007522:	6978      	ldr	r0, [r7, #20]
 8007524:	f7fe fd22 	bl	8005f6c <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	611a      	str	r2, [r3, #16]
 8007530:	e069      	b.n	8007606 <mg_tcpip_poll+0x46e>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	7f9b      	ldrb	r3, [r3, #30]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d116      	bne.n	8007568 <mg_tcpip_poll+0x3d0>
        mg_error(c, "Connection timeout");
 800753a:	490a      	ldr	r1, [pc, #40]	; (8007564 <mg_tcpip_poll+0x3cc>)
 800753c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800753e:	f7f9 ff01 	bl	8001344 <mg_error>
 8007542:	e060      	b.n	8007606 <mg_tcpip_poll+0x46e>
 8007544:	20000000 	.word	0x20000000
 8007548:	0801f9d4 	.word	0x0801f9d4
 800754c:	0801b0f4 	.word	0x0801b0f4
 8007550:	0801c44c 	.word	0x0801c44c
 8007554:	001b7740 	.word	0x001b7740
 8007558:	0801f8d0 	.word	0x0801f8d0
 800755c:	0801c45c 	.word	0x0801c45c
 8007560:	0801c468 	.word	0x0801c468
 8007564:	0801c478 	.word	0x0801c478
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	7f9b      	ldrb	r3, [r3, #30]
 800756c:	2b04      	cmp	r3, #4
 800756e:	d107      	bne.n	8007580 <mg_tcpip_poll+0x3e8>
        c->is_closing = 1;
 8007570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007572:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8007576:	f043 0320 	orr.w	r3, r3, #32
 800757a:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
        continue;
 800757e:	e04a      	b.n	8007616 <mg_tcpip_poll+0x47e>
      } else {
        if (s->tmiss++ > 2) {
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	7fdb      	ldrb	r3, [r3, #31]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	b2d1      	uxtb	r1, r2
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	77d1      	strb	r1, [r2, #31]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d904      	bls.n	800759a <mg_tcpip_poll+0x402>
          mg_error(c, "keepalive");
 8007590:	4927      	ldr	r1, [pc, #156]	; (8007630 <mg_tcpip_poll+0x498>)
 8007592:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007594:	f7f9 fed6 	bl	8001344 <mg_error>
 8007598:	e035      	b.n	8007606 <mg_tcpip_poll+0x46e>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800759a:	4b26      	ldr	r3, [pc, #152]	; (8007634 <mg_tcpip_poll+0x49c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	dd0c      	ble.n	80075bc <mg_tcpip_poll+0x424>
 80075a2:	4b25      	ldr	r3, [pc, #148]	; (8007638 <mg_tcpip_poll+0x4a0>)
 80075a4:	f241 32d5 	movw	r2, #5077	; 0x13d5
 80075a8:	4924      	ldr	r1, [pc, #144]	; (800763c <mg_tcpip_poll+0x4a4>)
 80075aa:	2004      	movs	r0, #4
 80075ac:	f7fc ff5c 	bl	8004468 <mg_log_prefix>
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	4619      	mov	r1, r3
 80075b6:	4822      	ldr	r0, [pc, #136]	; (8007640 <mg_tcpip_poll+0x4a8>)
 80075b8:	f7fc ffa6 	bl	8004508 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	f103 0618 	add.w	r6, r3, #24
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	8b1c      	ldrh	r4, [r3, #24]
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fbc9 	bl	8008d6c <mg_ntohl>
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fbc3 	bl	8008d6c <mg_ntohl>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2200      	movs	r2, #0
 80075ea:	9205      	str	r2, [sp, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	9204      	str	r2, [sp, #16]
 80075f0:	9303      	str	r3, [sp, #12]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	9102      	str	r1, [sp, #8]
 80075f6:	9501      	str	r5, [sp, #4]
 80075f8:	9400      	str	r4, [sp, #0]
 80075fa:	2310      	movs	r3, #16
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4631      	mov	r1, r6
 8007600:	6978      	ldr	r0, [r7, #20]
 8007602:	f7fe fcb3 	bl	8005f6c <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8007606:	2100      	movs	r1, #0
 8007608:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800760a:	f7fd fac9 	bl	8004ba0 <settmout>
 800760e:	e002      	b.n	8007616 <mg_tcpip_poll+0x47e>
      continue;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <mg_tcpip_poll+0x47e>
        continue;
 8007614:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761e:	2b00      	cmp	r3, #0
 8007620:	f47f aefa 	bne.w	8007418 <mg_tcpip_poll+0x280>
 8007624:	e000      	b.n	8007628 <mg_tcpip_poll+0x490>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8007626:	bf00      	nop
    }
  }
}
 8007628:	373c      	adds	r7, #60	; 0x3c
 800762a:	46bd      	mov	sp, r7
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762e:	bf00      	nop
 8007630:	0801c48c 	.word	0x0801c48c
 8007634:	20000000 	.word	0x20000000
 8007638:	0801f9d4 	.word	0x0801f9d4
 800763c:	0801b0f4 	.word	0x0801b0f4
 8007640:	0801c498 	.word	0x0801c498

08007644 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3334      	adds	r3, #52	; 0x34
 8007654:	f107 0114 	add.w	r1, r7, #20
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd22 	bl	80080a4 <mg_queue_book>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4293      	cmp	r3, r2
 8007666:	d811      	bhi.n	800768c <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	68f9      	ldr	r1, [r7, #12]
 800766e:	4618      	mov	r0, r3
 8007670:	f012 ff9b 	bl	801a5aa <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3334      	adds	r3, #52	; 0x34
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fdb0 	bl	80081e0 <mg_queue_add>
    ifp->nrecv++;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	671a      	str	r2, [r3, #112]	; 0x70
  } else {
    ifp->ndrop++;
  }
}
 800768a:	e004      	b.n	8007696 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d12d      	bne.n	800770e <mg_tcpip_init+0x6e>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d129      	bne.n	800770e <mg_tcpip_init+0x6e>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	789b      	ldrb	r3, [r3, #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d125      	bne.n	800770e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d121      	bne.n	800770e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d11d      	bne.n	800770e <mg_tcpip_init+0x6e>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	795b      	ldrb	r3, [r3, #5]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d119      	bne.n	800770e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2202      	movs	r2, #2
 80076de:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	2105      	movs	r1, #5
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fb08 	bl	8008cfc <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80076ec:	4b51      	ldr	r3, [pc, #324]	; (8007834 <mg_tcpip_init+0x194>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	dd0c      	ble.n	800770e <mg_tcpip_init+0x6e>
 80076f4:	4b50      	ldr	r3, [pc, #320]	; (8007838 <mg_tcpip_init+0x198>)
 80076f6:	f241 32f4 	movw	r2, #5108	; 0x13f4
 80076fa:	4950      	ldr	r1, [pc, #320]	; (800783c <mg_tcpip_init+0x19c>)
 80076fc:	2002      	movs	r0, #2
 80076fe:	f7fc feb3 	bl	8004468 <mg_log_prefix>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	494e      	ldr	r1, [pc, #312]	; (8007840 <mg_tcpip_init+0x1a0>)
 8007708:	484e      	ldr	r0, [pc, #312]	; (8007844 <mg_tcpip_init+0x1a4>)
 800770a:	f7fc fefd 	bl	8004508 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d019      	beq.n	800774c <mg_tcpip_init+0xac>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6838      	ldr	r0, [r7, #0]
 8007720:	4798      	blx	r3
 8007722:	4603      	mov	r3, r0
 8007724:	f083 0301 	eor.w	r3, r3, #1
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00e      	beq.n	800774c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <mg_tcpip_init+0x194>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dd7a      	ble.n	800782c <mg_tcpip_init+0x18c>
 8007736:	4b40      	ldr	r3, [pc, #256]	; (8007838 <mg_tcpip_init+0x198>)
 8007738:	f241 32f8 	movw	r2, #5112	; 0x13f8
 800773c:	493f      	ldr	r1, [pc, #252]	; (800783c <mg_tcpip_init+0x19c>)
 800773e:	2001      	movs	r0, #1
 8007740:	f7fc fe92 	bl	8004468 <mg_log_prefix>
 8007744:	4840      	ldr	r0, [pc, #256]	; (8007848 <mg_tcpip_init+0x1a8>)
 8007746:	f7fc fedf 	bl	8004508 <mg_log>
 800774a:	e06f      	b.n	800782c <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 800774c:	f240 6304 	movw	r3, #1540	; 0x604
 8007750:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	2001      	movs	r0, #1
 8007756:	f012 fb39 	bl	8019dcc <calloc>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	615a      	str	r2, [r3, #20]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <mg_tcpip_init+0xde>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	e001      	b.n	8007782 <mg_tcpip_init+0xe2>
 800777e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	6393      	str	r3, [r2, #56]	; 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	4619      	mov	r1, r3
 800778c:	2001      	movs	r0, #1
 800778e:	f012 fb1d 	bl	8019dcc <calloc>
 8007792:	4603      	mov	r3, r0
 8007794:	461a      	mov	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	635a      	str	r2, [r3, #52]	; 0x34
    ifp->timer_1000ms = mg_millis();
 800779a:	f7f9 fbc7 	bl	8000f2c <mg_millis>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    mgr->ifp = ifp;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80077ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2230      	movs	r2, #48	; 0x30
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <mg_tcpip_init+0x132>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2201      	movs	r2, #1
 80077d0:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	3346      	adds	r3, #70	; 0x46
 80077d6:	2206      	movs	r2, #6
 80077d8:	21ff      	movs	r1, #255	; 0xff
 80077da:	4618      	mov	r0, r3
 80077dc:	f012 fe23 	bl	801a426 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3368      	adds	r3, #104	; 0x68
 80077e4:	2102      	movs	r1, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fa88 	bl	8008cfc <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <mg_tcpip_init+0x1ac>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <mg_tcpip_init+0x16e>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10e      	bne.n	800782c <mg_tcpip_init+0x18c>
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <mg_tcpip_init+0x194>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd0a      	ble.n	800782c <mg_tcpip_init+0x18c>
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <mg_tcpip_init+0x198>)
 8007818:	f241 4209 	movw	r2, #5129	; 0x1409
 800781c:	4907      	ldr	r1, [pc, #28]	; (800783c <mg_tcpip_init+0x19c>)
 800781e:	2001      	movs	r0, #1
 8007820:	f7fc fe22 	bl	8004468 <mg_log_prefix>
 8007824:	480a      	ldr	r0, [pc, #40]	; (8007850 <mg_tcpip_init+0x1b0>)
 8007826:	f7fc fe6f 	bl	8004508 <mg_log>
  }
}
 800782a:	e7ff      	b.n	800782c <mg_tcpip_init+0x18c>
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000000 	.word	0x20000000
 8007838:	0801f9e4 	.word	0x0801f9e4
 800783c:	0801b0f4 	.word	0x0801b0f4
 8007840:	08007fb9 	.word	0x08007fb9
 8007844:	0801c4a8 	.word	0x0801c4a8
 8007848:	0801c4cc 	.word	0x0801c4cc
 800784c:	ffff8000 	.word	0xffff8000
 8007850:	0801bf1c 	.word	0x0801bf1c

08007854 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8007854:	b5b0      	push	{r4, r5, r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af06      	add	r7, sp, #24
 800785a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	33b0      	adds	r3, #176	; 0xb0
 8007860:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8b1b      	ldrh	r3, [r3, #24]
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fa99 	bl	8008d9e <mg_ntohs>
 800786c:	4603      	mov	r3, r0
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fa7c 	bl	8008d6c <mg_ntohl>
 8007874:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	331c      	adds	r3, #28
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f103 0418 	add.w	r4, r3, #24
 800788a:	68fd      	ldr	r5, [r7, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8b1b      	ldrh	r3, [r3, #24]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007894:	2100      	movs	r1, #0
 8007896:	9105      	str	r1, [sp, #20]
 8007898:	2100      	movs	r1, #0
 800789a:	9104      	str	r1, [sp, #16]
 800789c:	2100      	movs	r1, #0
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	6939      	ldr	r1, [r7, #16]
 80078a2:	9102      	str	r1, [sp, #8]
 80078a4:	9201      	str	r2, [sp, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2302      	movs	r3, #2
 80078aa:	462a      	mov	r2, r5
 80078ac:	4621      	mov	r1, r4
 80078ae:	f7fe fb5d 	bl	8005f6c <tx_tcp>
         NULL, 0);
}
 80078b2:	bf00      	nop
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bdb0      	pop	{r4, r5, r7, pc}

080078ba <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <mac_resolved+0x32>
    c->is_connecting = 0;
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 80078d8:	f36f 1345 	bfc	r3, #5, #1
 80078dc:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2104      	movs	r1, #4
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7f9 fd0d 	bl	8001304 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 80078ea:	e006      	b.n	80078fa <mac_resolved+0x40>
    send_syn(c);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ffb1 	bl	8007854 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 80078f2:	2103      	movs	r1, #3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fd f953 	bl	8004ba0 <settmout>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <mg_open_listener>:
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800790c:	6838      	ldr	r0, [r7, #0]
 800790e:	f001 f977 	bl	8008c00 <mg_url_port>
 8007912:	4603      	mov	r3, r0
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fa42 	bl	8008d9e <mg_ntohs>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	831a      	strh	r2, [r3, #24]
  return true;
 8007922:	2301      	movs	r3, #1
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <write_conn>:

static void write_conn(struct mg_connection *c) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794c:	461a      	mov	r2, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f85e 	bl	8008a10 <mg_tls_send>
 8007954:	4603      	mov	r3, r0
 8007956:	e008      	b.n	800796a <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	461a      	mov	r2, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fe fd5a 	bl	800641c <mg_io_send>
 8007968:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800796a:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007972:	d104      	bne.n	800797e <write_conn+0x52>
    mg_error(c, "tx err");
 8007974:	490c      	ldr	r1, [pc, #48]	; (80079a8 <write_conn+0x7c>)
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7f9 fce4 	bl	8001344 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800797c:	e010      	b.n	80079a0 <write_conn+0x74>
  } else if (len > 0) {
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dd0d      	ble.n	80079a0 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3348      	adds	r3, #72	; 0x48
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f7fc fce3 	bl	8004358 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8007992:	f107 030c 	add.w	r3, r7, #12
 8007996:	461a      	mov	r2, r3
 8007998:	2108      	movs	r1, #8
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7f9 fcb2 	bl	8001304 <mg_call>
}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	0801c508 	.word	0x0801c508

080079ac <init_closure>:

static void init_closure(struct mg_connection *c) {
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	b08c      	sub	sp, #48	; 0x30
 80079b2:	af06      	add	r7, sp, #24
 80079b4:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	33b0      	adds	r3, #176	; 0xb0
 80079ba:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d13e      	bne.n	8007a4a <init_closure+0x9e>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d136      	bne.n	8007a4a <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d12e      	bne.n	8007a4a <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	331c      	adds	r3, #28
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f103 0818 	add.w	r8, r3, #24
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8b1c      	ldrh	r4, [r3, #24]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 f9ab 	bl	8008d6c <mg_ntohl>
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f9a5 	bl	8008d6c <mg_ntohl>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2200      	movs	r2, #0
 8007a26:	9205      	str	r2, [sp, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	9204      	str	r2, [sp, #16]
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	9102      	str	r1, [sp, #8]
 8007a32:	9501      	str	r5, [sp, #4]
 8007a34:	9400      	str	r4, [sp, #0]
 8007a36:	2311      	movs	r3, #17
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7fe fa95 	bl	8005f6c <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8007a42:	2104      	movs	r1, #4
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7fd f8ab 	bl	8004ba0 <settmout>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a54 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	33b0      	adds	r3, #176	; 0xb0
 8007a60:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3320      	adds	r3, #32
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fc fcc1 	bl	80043ee <mg_iobuf_free>
  mg_close_conn(c);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fc fe99 	bl	80047a4 <mg_close_conn>
}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <can_write>:

static bool can_write(struct mg_connection *c) {
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11d      	bne.n	8007ace <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d115      	bne.n	8007ace <can_write+0x54>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d011      	beq.n	8007ace <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007ab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab4:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <can_write+0x54>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <can_write+0x56>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	b2db      	uxtb	r3, r3
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8007ae4:	b5b0      	push	{r4, r5, r7, lr}
 8007ae6:	b08c      	sub	sp, #48	; 0x30
 8007ae8:	af04      	add	r7, sp, #16
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8007aee:	f7f9 fa1d 	bl	8000f2c <mg_millis>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b04:	4608      	mov	r0, r1
 8007b06:	f000 feef 	bl	80088e8 <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 80aa 	beq.w	8007c68 <mg_mgr_poll+0x184>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80a4 	beq.w	8007c68 <mg_mgr_poll+0x184>
  mg_tcpip_poll(mgr->ifp, now);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b28:	4608      	mov	r0, r1
 8007b2a:	f7ff fb35 	bl	8007198 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	e093      	b.n	8007c5e <mg_mgr_poll+0x17a>
    tmp = c->next;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	61bb      	str	r3, [r7, #24]
    struct connstate *s = (struct connstate *) (c + 1);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	33b0      	adds	r3, #176	; 0xb0
 8007b40:	617b      	str	r3, [r7, #20]
    mg_call(c, MG_EV_POLL, &now);
 8007b42:	f107 0308 	add.w	r3, r7, #8
 8007b46:	461a      	mov	r2, r3
 8007b48:	2102      	movs	r1, #2
 8007b4a:	69f8      	ldr	r0, [r7, #28]
 8007b4c:	f7f9 fbda 	bl	8001304 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8007b50:	4b47      	ldr	r3, [pc, #284]	; (8007c70 <mg_mgr_poll+0x18c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	dd48      	ble.n	8007bea <mg_mgr_poll+0x106>
 8007b58:	4b46      	ldr	r3, [pc, #280]	; (8007c74 <mg_mgr_poll+0x190>)
 8007b5a:	f241 427b 	movw	r2, #5243	; 0x147b
 8007b5e:	4946      	ldr	r1, [pc, #280]	; (8007c78 <mg_mgr_poll+0x194>)
 8007b60:	2004      	movs	r0, #4
 8007b62:	f7fc fc81 	bl	8004468 <mg_log_prefix>
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <mg_mgr_poll+0x9a>
 8007b7a:	2454      	movs	r4, #84	; 0x54
 8007b7c:	e000      	b.n	8007b80 <mg_mgr_poll+0x9c>
 8007b7e:	2474      	movs	r4, #116	; 0x74
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <mg_mgr_poll+0xb0>
 8007b90:	2543      	movs	r5, #67	; 0x43
 8007b92:	e000      	b.n	8007b96 <mg_mgr_poll+0xb2>
 8007b94:	2563      	movs	r5, #99	; 0x63
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <mg_mgr_poll+0xc6>
 8007ba6:	2348      	movs	r3, #72	; 0x48
 8007ba8:	e000      	b.n	8007bac <mg_mgr_poll+0xc8>
 8007baa:	2368      	movs	r3, #104	; 0x68
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 8007bb2:	f002 0208 	and.w	r2, r2, #8
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d001      	beq.n	8007bc0 <mg_mgr_poll+0xdc>
 8007bbc:	2252      	movs	r2, #82	; 0x52
 8007bbe:	e000      	b.n	8007bc2 <mg_mgr_poll+0xde>
 8007bc0:	2272      	movs	r2, #114	; 0x72
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 8007bc8:	f001 0120 	and.w	r1, r1, #32
 8007bcc:	b2c9      	uxtb	r1, r1
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	d001      	beq.n	8007bd6 <mg_mgr_poll+0xf2>
 8007bd2:	2143      	movs	r1, #67	; 0x43
 8007bd4:	e000      	b.n	8007bd8 <mg_mgr_poll+0xf4>
 8007bd6:	2163      	movs	r1, #99	; 0x63
 8007bd8:	9102      	str	r1, [sp, #8]
 8007bda:	9201      	str	r2, [sp, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	462b      	mov	r3, r5
 8007be0:	4622      	mov	r2, r4
 8007be2:	4601      	mov	r1, r0
 8007be4:	4825      	ldr	r0, [pc, #148]	; (8007c7c <mg_mgr_poll+0x198>)
 8007be6:	f7fc fc8f 	bl	8004508 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0) handle_tls_recv(c);
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <mg_mgr_poll+0x128>
 8007bfa:	69f8      	ldr	r0, [r7, #28]
 8007bfc:	f000 ff21 	bl	8008a42 <mg_tls_pending>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <mg_mgr_poll+0x128>
 8007c06:	69f8      	ldr	r0, [r7, #28]
 8007c08:	f7fe fc80 	bl	800650c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8007c0c:	69f8      	ldr	r0, [r7, #28]
 8007c0e:	f7ff ff34 	bl	8007a7a <can_write>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <mg_mgr_poll+0x13a>
 8007c18:	69f8      	ldr	r0, [r7, #28]
 8007c1a:	f7ff fe87 	bl	800792c <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <mg_mgr_poll+0x160>
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <mg_mgr_poll+0x160>
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	7f9b      	ldrb	r3, [r3, #30]
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d002      	beq.n	8007c44 <mg_mgr_poll+0x160>
      init_closure(c);
 8007c3e:	69f8      	ldr	r0, [r7, #28]
 8007c40:	f7ff feb4 	bl	80079ac <init_closure>
    if (c->is_closing) close_conn(c);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <mg_mgr_poll+0x176>
 8007c54:	69f8      	ldr	r0, [r7, #28]
 8007c56:	f7ff fefd 	bl	8007a54 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f af68 	bne.w	8007b36 <mg_mgr_poll+0x52>
 8007c66:	e000      	b.n	8007c6a <mg_mgr_poll+0x186>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8007c68:	bf00      	nop
  }
  (void) ms;
}
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c70:	20000000 	.word	0x20000000
 8007c74:	0801f9f4 	.word	0x0801f9f4
 8007c78:	0801b0f4 	.word	0x0801b0f4
 8007c7c:	0801c510 	.word	0x0801c510

08007c80 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8007c94:	79bb      	ldrb	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <mg_pfn_iobuf_private+0x36>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d906      	bls.n	8007cb6 <mg_pfn_iobuf_private+0x36>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	3302      	adds	r3, #2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7fc fac5 	bl	8004240 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d811      	bhi.n	8007ce8 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	1c58      	adds	r0, r3, #1
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6088      	str	r0, [r1, #8]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8007ce6:	e00f      	b.n	8007d08 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d209      	bcs.n	8007d08 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	1c58      	adds	r0, r3, #1
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6088      	str	r0, [r1, #8]
 8007d02:	4413      	add	r3, r2
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ffac 	bl	8007c80 <mg_pfn_iobuf_private>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff ff9c 	bl	8007c80 <mg_pfn_iobuf_private>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8007d6e:	f107 0114 	add.w	r1, r7, #20
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4809      	ldr	r0, [pc, #36]	; (8007d9c <mg_vsnprintf+0x4c>)
 8007d78:	f7fa f818 	bl	8001dac <mg_vxprintf>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d204      	bcs.n	8007d90 <mg_vsnprintf+0x40>
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	4413      	add	r3, r2
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  return n;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3728      	adds	r7, #40	; 0x28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	08007d11 	.word	0x08007d11

08007da0 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8007da0:	b40c      	push	{r2, r3}
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8007dac:	f107 031c 	add.w	r3, r7, #28
 8007db0:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff ffc8 	bl	8007d50 <mg_vsnprintf>
 8007dc0:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dce:	b002      	add	sp, #8
 8007dd0:	4770      	bx	lr

08007dd2 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	4603      	mov	r3, r0
 8007dda:	6039      	str	r1, [r7, #0]
 8007ddc:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f012 faab 	bl	801a33c <putchar>
  (void) param;
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3301      	adds	r3, #1
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3303      	adds	r3, #3
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	9302      	str	r3, [sp, #8]
 8007e1a:	9101      	str	r1, [sp, #4]
 8007e1c:	9200      	str	r2, [sp, #0]
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <print_ip4+0x44>)
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7f9 ffa6 	bl	8001d76 <mg_xprintf>
 8007e2a:	4603      	mov	r3, r0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	0801c544 	.word	0x0801c544

08007e38 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	b08e      	sub	sp, #56	; 0x38
 8007e3e:	af08      	add	r7, sp, #32
 8007e40:	6178      	str	r0, [r7, #20]
 8007e42:	6139      	str	r1, [r7, #16]
 8007e44:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 ffa7 	bl	8008d9e <mg_ntohs>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3302      	adds	r3, #2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 ff9f 	bl	8008d9e <mg_ntohs>
 8007e60:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e62:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3304      	adds	r3, #4
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 ff97 	bl	8008d9e <mg_ntohs>
 8007e70:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e72:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3306      	adds	r3, #6
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ff8f 	bl	8008d9e <mg_ntohs>
 8007e80:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e82:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3308      	adds	r3, #8
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 ff87 	bl	8008d9e <mg_ntohs>
 8007e90:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e92:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	330a      	adds	r3, #10
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 ff7f 	bl	8008d9e <mg_ntohs>
 8007ea0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007ea2:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ff77 	bl	8008d9e <mg_ntohs>
 8007eb0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007eb2:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	330e      	adds	r3, #14
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 ff6f 	bl	8008d9e <mg_ntohs>
 8007ec0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	9205      	str	r2, [sp, #20]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	9204      	str	r2, [sp, #16]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	9602      	str	r6, [sp, #8]
 8007ed2:	9501      	str	r5, [sp, #4]
 8007ed4:	9400      	str	r4, [sp, #0]
 8007ed6:	4643      	mov	r3, r8
 8007ed8:	4a05      	ldr	r2, [pc, #20]	; (8007ef0 <print_ip6+0xb8>)
 8007eda:	6939      	ldr	r1, [r7, #16]
 8007edc:	6978      	ldr	r0, [r7, #20]
 8007ede:	f7f9 ff4a 	bl	8001d76 <mg_xprintf>
 8007ee2:	4603      	mov	r3, r0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eee:	bf00      	nop
 8007ef0:	0801c550 	.word	0x0801c550

08007ef4 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff6c 	bl	8007df0 <print_ip4>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	1d19      	adds	r1, r3, #4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6011      	str	r1, [r2, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	7cdb      	ldrb	r3, [r3, #19]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <mg_print_ip+0x32>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff ff74 	bl	8007e38 <print_ip6>
 8007f50:	4603      	mov	r3, r0
 8007f52:	e006      	b.n	8007f62 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	461a      	mov	r2, r3
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff48 	bl	8007df0 <print_ip4>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	1d19      	adds	r1, r3, #4
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6011      	str	r1, [r2, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	8a1b      	ldrh	r3, [r3, #16]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 ff07 	bl	8008d9e <mg_ntohs>
 8007f90:	4603      	mov	r3, r0
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <mg_print_ip_port+0x44>)
 8007f9a:	4a06      	ldr	r2, [pc, #24]	; (8007fb4 <mg_print_ip_port+0x48>)
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7f9 fee9 	bl	8001d76 <mg_xprintf>
 8007fa4:	4603      	mov	r3, r0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	08007f23 	.word	0x08007f23
 8007fb4:	0801c56c 	.word	0x0801c56c

08007fb8 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b08c      	sub	sp, #48	; 0x30
 8007fbc:	af06      	add	r7, sp, #24
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	1d19      	adds	r1, r3, #4
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3303      	adds	r3, #3
 8007fec:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007fee:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007ff6:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	3305      	adds	r3, #5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	9403      	str	r4, [sp, #12]
 8008002:	9002      	str	r0, [sp, #8]
 8008004:	9101      	str	r1, [sp, #4]
 8008006:	9200      	str	r2, [sp, #0]
 8008008:	462b      	mov	r3, r5
 800800a:	4a05      	ldr	r2, [pc, #20]	; (8008020 <mg_print_mac+0x68>)
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7f9 feb1 	bl	8001d76 <mg_xprintf>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bdb0      	pop	{r4, r5, r7, pc}
 800801e:	bf00      	nop
 8008020:	0801c574 	.word	0x0801c574

08008024 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8008030:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	4413      	add	r3, r2
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	1d1a      	adds	r2, r3, #4
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d906      	bls.n	8008062 <mg_queue_read_len+0x3e>
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <mg_queue_read_len+0x48>)
 8008056:	4a06      	ldr	r2, [pc, #24]	; (8008070 <mg_queue_read_len+0x4c>)
 8008058:	f641 31cc 	movw	r1, #7116	; 0x1bcc
 800805c:	4805      	ldr	r0, [pc, #20]	; (8008074 <mg_queue_read_len+0x50>)
 800805e:	f011 fe93 	bl	8019d88 <__assert_func>
  return n;
 8008062:	68fb      	ldr	r3, [r7, #12]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	0801c5d8 	.word	0x0801c5d8
 8008070:	0801fa00 	.word	0x0801fa00
 8008074:	0801b0f4 	.word	0x0801b0f4

08008078 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	4413      	add	r3, r2
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8008094:	f3bf 8f5b 	dmb	ish
}
 8008098:	bf00      	nop
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	2308      	movs	r3, #8
 80080b6:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d312      	bcc.n	80080ea <mg_queue_book+0x46>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	441a      	add	r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	441a      	add	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d808      	bhi.n	80080ea <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	1ad2      	subs	r2, r2, r3
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e011      	b.n	800810e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d30b      	bcc.n	800810e <mg_queue_book+0x6a>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d206      	bcs.n	800810e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff ffb8 	bl	8008078 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d207      	bcs.n	8008132 <mg_queue_book+0x8e>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <mg_queue_book+0xa4>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	3304      	adds	r3, #4
 8008142:	441a      	add	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	601a      	str	r2, [r3, #0]
  return space;
 8008148:	697b      	ldr	r3, [r7, #20]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	429a      	cmp	r2, r3
 800816c:	d013      	beq.n	8008196 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff ff58 	bl	8008024 <mg_queue_read_len>
 8008174:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10c      	bne.n	8008196 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <mg_queue_next+0x42>
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff ff48 	bl	8008024 <mg_queue_read_len>
 8008194:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <mg_queue_next+0x58>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	3304      	adds	r3, #4
 80081a6:	441a      	add	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	441a      	add	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d906      	bls.n	80081ca <mg_queue_next+0x76>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <mg_queue_next+0x80>)
 80081be:	4a06      	ldr	r2, [pc, #24]	; (80081d8 <mg_queue_next+0x84>)
 80081c0:	f641 31ed 	movw	r1, #7149	; 0x1bed
 80081c4:	4805      	ldr	r0, [pc, #20]	; (80081dc <mg_queue_next+0x88>)
 80081c6:	f011 fddf 	bl	8019d88 <__assert_func>
  return len;
 80081ca:	68fb      	ldr	r3, [r7, #12]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	0801c5fc 	.word	0x0801c5fc
 80081d8:	0801fa14 	.word	0x0801fa14
 80081dc:	0801b0f4 	.word	0x0801b0f4

080081e0 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <mg_queue_add+0x1e>
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <mg_queue_add+0x60>)
 80081f2:	4a14      	ldr	r2, [pc, #80]	; (8008244 <mg_queue_add+0x64>)
 80081f4:	f641 31f2 	movw	r1, #7154	; 0x1bf2
 80081f8:	4813      	ldr	r0, [pc, #76]	; (8008248 <mg_queue_add+0x68>)
 80081fa:	f011 fdc5 	bl	8019d88 <__assert_func>
  mg_queue_write_len(q, len);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff39 	bl	8008078 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	4413      	add	r3, r2
 800820e:	f103 0208 	add.w	r2, r3, #8
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d906      	bls.n	8008228 <mg_queue_add+0x48>
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <mg_queue_add+0x6c>)
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <mg_queue_add+0x64>)
 800821e:	f641 31f4 	movw	r1, #7156	; 0x1bf4
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <mg_queue_add+0x68>)
 8008224:	f011 fdb0 	bl	8019d88 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4413      	add	r3, r2
 8008230:	1d1a      	adds	r2, r3, #4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	0801c618 	.word	0x0801c618
 8008244:	0801fa24 	.word	0x0801fa24
 8008248:	0801b0f4 	.word	0x0801b0f4
 800824c:	0801c620 	.word	0x0801c620

08008250 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	4413      	add	r3, r2
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	1d1a      	adds	r2, r3, #4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d906      	bls.n	8008284 <mg_queue_del+0x34>
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <mg_queue_del+0x3c>)
 8008278:	4a05      	ldr	r2, [pc, #20]	; (8008290 <mg_queue_del+0x40>)
 800827a:	f641 31fa 	movw	r1, #7162	; 0x1bfa
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <mg_queue_del+0x44>)
 8008280:	f011 fd82 	bl	8019d88 <__assert_func>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	0801c650 	.word	0x0801c650
 8008290:	0801fa34 	.word	0x0801fa34
 8008294:	0801b0f4 	.word	0x0801b0f4

08008298 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <mg_str_s+0x1e>
 80082ac:	6838      	ldr	r0, [r7, #0]
 80082ae:	f7f7 ffff 	bl	80002b0 <strlen>
 80082b2:	4603      	mov	r3, r0
 80082b4:	e000      	b.n	80082b8 <mg_str_s+0x20>
 80082b6:	2300      	movs	r3, #0
 80082b8:	60fb      	str	r3, [r7, #12]
  return str;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	461a      	mov	r2, r3
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	617b      	str	r3, [r7, #20]
  return str;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	461a      	mov	r2, r3
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082f2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <mg_tolc>:

static int mg_tolc(char c) {
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	4603      	mov	r3, r0
 800830a:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b40      	cmp	r3, #64	; 0x40
 8008310:	d905      	bls.n	800831e <mg_tolc+0x1c>
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b5a      	cmp	r3, #90	; 0x5a
 8008316:	d802      	bhi.n	800831e <mg_tolc+0x1c>
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	3320      	adds	r3, #32
 800831c:	e000      	b.n	8008320 <mg_tolc+0x1e>
 800831e:	79fb      	ldrb	r3, [r7, #7]
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <mg_strcasecmp>:
  if (i < str1.len) return 1;
  if (i < str2.len) return -1;
  return 0;
}

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b089      	sub	sp, #36	; 0x24
 8008330:	af00      	add	r7, sp, #0
 8008332:	f107 0408 	add.w	r4, r7, #8
 8008336:	e884 0003 	stmia.w	r4, {r0, r1}
 800833a:	4639      	mov	r1, r7
 800833c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8008344:	e01f      	b.n	8008386 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff ffd7 	bl	8008302 <mg_tolc>
 8008354:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff ffcf 	bl	8008302 <mg_tolc>
 8008364:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	429a      	cmp	r2, r3
 800836c:	da02      	bge.n	8008374 <mg_strcasecmp+0x48>
 800836e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008372:	e01e      	b.n	80083b2 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	429a      	cmp	r2, r3
 800837a:	dd01      	ble.n	8008380 <mg_strcasecmp+0x54>
 800837c:	2301      	movs	r3, #1
 800837e:	e018      	b.n	80083b2 <mg_strcasecmp+0x86>
    i++;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	3301      	adds	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	429a      	cmp	r2, r3
 800838c:	d203      	bcs.n	8008396 <mg_strcasecmp+0x6a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	429a      	cmp	r2, r3
 8008394:	d3d7      	bcc.n	8008346 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	429a      	cmp	r2, r3
 800839c:	d201      	bcs.n	80083a2 <mg_strcasecmp+0x76>
 800839e:	2301      	movs	r3, #1
 80083a0:	e007      	b.n	80083b2 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d202      	bcs.n	80083b0 <mg_strcasecmp+0x84>
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ae:	e000      	b.n	80083b2 <mg_strcasecmp+0x86>
  return 0;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3724      	adds	r7, #36	; 0x24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd90      	pop	{r4, r7, pc}

080083ba <mg_str_to_num>:
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
    return true;
  }
}

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80083ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083be:	b0a5      	sub	sp, #148	; 0x94
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80083c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80083ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083cc:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t i = 0, ndigits = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80083da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d016      	beq.n	8008410 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80083e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d00d      	beq.n	8008406 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 80083ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d104      	bne.n	80083fc <mg_str_to_num+0x42>
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	e00d      	b.n	8008418 <mg_str_to_num+0x5e>
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008404:	e008      	b.n	8008418 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8008406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	e003      	b.n	8008418 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8008410:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8008414:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8008418:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  uint64_t result = 0;
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8008428:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008430:	bf08      	it	eq
 8008432:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008436:	d105      	bne.n	8008444 <mg_str_to_num+0x8a>
 8008438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800843c:	2b08      	cmp	r3, #8
 800843e:	d001      	beq.n	8008444 <mg_str_to_num+0x8a>
 8008440:	2300      	movs	r3, #0
 8008442:	e1e8      	b.n	8008816 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8008444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d12d      	bne.n	80084a6 <mg_str_to_num+0xec>
 800844a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800844c:	2b01      	cmp	r3, #1
 800844e:	d92a      	bls.n	80084a6 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8008450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	4413      	add	r3, r2
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b30      	cmp	r3, #48	; 0x30
 800845c:	d121      	bne.n	80084a2 <mg_str_to_num+0xe8>
      i++;
 800845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008462:	3301      	adds	r3, #1
 8008464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8008468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800846a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800846e:	4413      	add	r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b62      	cmp	r3, #98	; 0x62
 8008474:	d00a      	beq.n	800848c <mg_str_to_num+0xd2>
 8008476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800847c:	4413      	add	r3, r2
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b78      	cmp	r3, #120	; 0x78
 8008482:	d101      	bne.n	8008488 <mg_str_to_num+0xce>
 8008484:	2310      	movs	r3, #16
 8008486:	e002      	b.n	800848e <mg_str_to_num+0xd4>
 8008488:	230a      	movs	r3, #10
 800848a:	e000      	b.n	800848e <mg_str_to_num+0xd4>
 800848c:	2302      	movs	r3, #2
 800848e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (base != 10) ++i;
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	2b0a      	cmp	r3, #10
 8008494:	d007      	beq.n	80084a6 <mg_str_to_num+0xec>
 8008496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800849a:	3301      	adds	r3, #1
 800849c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084a0:	e001      	b.n	80084a6 <mg_str_to_num+0xec>
    } else {
      base = 10;
 80084a2:	230a      	movs	r3, #10
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  switch (base) {
 80084a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	f000 8178 	beq.w	800879e <mg_str_to_num+0x3e4>
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	f300 817d 	bgt.w	80087b0 <mg_str_to_num+0x3f6>
 80084b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d052      	beq.n	8008562 <mg_str_to_num+0x1a8>
 80084bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084be:	2b0a      	cmp	r3, #10
 80084c0:	f000 80cd 	beq.w	800865e <mg_str_to_num+0x2a4>
 80084c4:	e174      	b.n	80087b0 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80084c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084cc:	4413      	add	r3, r2
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	3b30      	subs	r3, #48	; 0x30
 80084d2:	17da      	asrs	r2, r3, #31
 80084d4:	633b      	str	r3, [r7, #48]	; 0x30
 80084d6:	637a      	str	r2, [r7, #52]	; 0x34
 80084d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80084dc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        if (result > max / 2) return false;  // Overflow
 80084e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	0842      	lsrs	r2, r0, #1
 80084ee:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80084f2:	084b      	lsrs	r3, r1, #1
 80084f4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084f8:	4282      	cmp	r2, r0
 80084fa:	418b      	sbcs	r3, r1
 80084fc:	d201      	bcs.n	8008502 <mg_str_to_num+0x148>
 80084fe:	2300      	movs	r3, #0
 8008500:	e189      	b.n	8008816 <mg_str_to_num+0x45c>
        result *= 2;
 8008502:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008506:	1891      	adds	r1, r2, r2
 8008508:	62b9      	str	r1, [r7, #40]	; 0x28
 800850a:	415b      	adcs	r3, r3
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008512:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        if (result > max - digit) return false;  // Overflow
 8008516:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800851a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800851e:	1a85      	subs	r5, r0, r2
 8008520:	eb61 0603 	sbc.w	r6, r1, r3
 8008524:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008528:	4295      	cmp	r5, r2
 800852a:	eb76 0303 	sbcs.w	r3, r6, r3
 800852e:	d201      	bcs.n	8008534 <mg_str_to_num+0x17a>
 8008530:	2300      	movs	r3, #0
 8008532:	e170      	b.n	8008816 <mg_str_to_num+0x45c>
        result += digit;
 8008534:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800853c:	1884      	adds	r4, r0, r2
 800853e:	623c      	str	r4, [r7, #32]
 8008540:	eb41 0303 	adc.w	r3, r1, r3
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
 8008546:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800854a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        i++, ndigits++;
 800854e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008552:	3301      	adds	r3, #1
 8008554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800855c:	3301      	adds	r3, #1
 800855e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8008562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008564:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008568:	429a      	cmp	r2, r3
 800856a:	f080 8123 	bcs.w	80087b4 <mg_str_to_num+0x3fa>
 800856e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008574:	4413      	add	r3, r2
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b30      	cmp	r3, #48	; 0x30
 800857a:	d0a4      	beq.n	80084c6 <mg_str_to_num+0x10c>
 800857c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800857e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008582:	4413      	add	r3, r2
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b31      	cmp	r3, #49	; 0x31
 8008588:	d09d      	beq.n	80084c6 <mg_str_to_num+0x10c>
      }
      break;
 800858a:	e113      	b.n	80087b4 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800858c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800858e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	3b30      	subs	r3, #48	; 0x30
 8008598:	17da      	asrs	r2, r3, #31
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	61fa      	str	r2, [r7, #28]
 800859e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80085a2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
        if (result > max / 10) return false;  // Overflow
 80085a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80085aa:	f04f 020a 	mov.w	r2, #10
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	f7f8 fb03 	bl	8000bbc <__aeabi_uldivmod>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4610      	mov	r0, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80085c2:	4290      	cmp	r0, r2
 80085c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80085c8:	d201      	bcs.n	80085ce <mg_str_to_num+0x214>
 80085ca:	2300      	movs	r3, #0
 80085cc:	e123      	b.n	8008816 <mg_str_to_num+0x45c>
        result *= 10;
 80085ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80085d2:	4622      	mov	r2, r4
 80085d4:	462b      	mov	r3, r5
 80085d6:	f04f 0000 	mov.w	r0, #0
 80085da:	f04f 0100 	mov.w	r1, #0
 80085de:	0099      	lsls	r1, r3, #2
 80085e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80085e4:	0090      	lsls	r0, r2, #2
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	eb12 0804 	adds.w	r8, r2, r4
 80085ee:	eb43 0905 	adc.w	r9, r3, r5
 80085f2:	eb18 0308 	adds.w	r3, r8, r8
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	eb49 0309 	adc.w	r3, r9, r9
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008602:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
        if (result > max - digit) return false;  // Overflow
 8008606:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800860a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800860e:	1a84      	subs	r4, r0, r2
 8008610:	63bc      	str	r4, [r7, #56]	; 0x38
 8008612:	eb61 0303 	sbc.w	r3, r1, r3
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008618:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800861c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008620:	4621      	mov	r1, r4
 8008622:	4291      	cmp	r1, r2
 8008624:	4629      	mov	r1, r5
 8008626:	eb71 0303 	sbcs.w	r3, r1, r3
 800862a:	d201      	bcs.n	8008630 <mg_str_to_num+0x276>
 800862c:	2300      	movs	r3, #0
 800862e:	e0f2      	b.n	8008816 <mg_str_to_num+0x45c>
        result += digit;
 8008630:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008634:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008638:	1884      	adds	r4, r0, r2
 800863a:	60bc      	str	r4, [r7, #8]
 800863c:	eb41 0303 	adc.w	r3, r1, r3
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008646:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        i++, ndigits++;
 800864a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800864e:	3301      	adds	r3, #1
 8008650:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008658:	3301      	adds	r3, #1
 800865a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800865e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008660:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008664:	429a      	cmp	r2, r3
 8008666:	f080 80a7 	bcs.w	80087b8 <mg_str_to_num+0x3fe>
 800866a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800866c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008670:	4413      	add	r3, r2
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b2f      	cmp	r3, #47	; 0x2f
 8008676:	f240 809f 	bls.w	80087b8 <mg_str_to_num+0x3fe>
 800867a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800867c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008680:	4413      	add	r3, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b39      	cmp	r3, #57	; 0x39
 8008686:	d981      	bls.n	800858c <mg_str_to_num+0x1d2>
      }
      break;
 8008688:	e096      	b.n	80087b8 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 800868a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800868c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008690:	4413      	add	r3, r2
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8008698:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800869c:	2b2f      	cmp	r3, #47	; 0x2f
 800869e:	d90a      	bls.n	80086b6 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80086a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086a4:	2b39      	cmp	r3, #57	; 0x39
 80086a6:	d806      	bhi.n	80086b6 <mg_str_to_num+0x2fc>
 80086a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086ac:	3b30      	subs	r3, #48	; 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80086ae:	17da      	asrs	r2, r3, #31
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
 80086b2:	647a      	str	r2, [r7, #68]	; 0x44
 80086b4:	e023      	b.n	80086fe <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80086b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d90a      	bls.n	80086d4 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80086be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086c2:	2b46      	cmp	r3, #70	; 0x46
 80086c4:	d806      	bhi.n	80086d4 <mg_str_to_num+0x31a>
 80086c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086ca:	3b37      	subs	r3, #55	; 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80086cc:	17da      	asrs	r2, r3, #31
 80086ce:	643b      	str	r3, [r7, #64]	; 0x40
 80086d0:	647a      	str	r2, [r7, #68]	; 0x44
 80086d2:	e014      	b.n	80086fe <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 80086d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086d8:	2b60      	cmp	r3, #96	; 0x60
 80086da:	d90a      	bls.n	80086f2 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80086dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086e0:	2b66      	cmp	r3, #102	; 0x66
 80086e2:	d806      	bhi.n	80086f2 <mg_str_to_num+0x338>
 80086e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80086e8:	3b57      	subs	r3, #87	; 0x57
                                                  : (uint64_t) ~0;
 80086ea:	17da      	asrs	r2, r3, #31
 80086ec:	643b      	str	r3, [r7, #64]	; 0x40
 80086ee:	647a      	str	r2, [r7, #68]	; 0x44
 80086f0:	e005      	b.n	80086fe <mg_str_to_num+0x344>
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80086fe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008702:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
        if (digit == (uint64_t) ~0) break;
 8008706:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800870e:	bf08      	it	eq
 8008710:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008714:	d04a      	beq.n	80087ac <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8008716:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	0902      	lsrs	r2, r0, #4
 8008724:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8008728:	090b      	lsrs	r3, r1, #4
 800872a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800872e:	4282      	cmp	r2, r0
 8008730:	418b      	sbcs	r3, r1
 8008732:	d201      	bcs.n	8008738 <mg_str_to_num+0x37e>
 8008734:	2300      	movs	r3, #0
 8008736:	e06e      	b.n	8008816 <mg_str_to_num+0x45c>
        result *= 16;
 8008738:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	010b      	lsls	r3, r1, #4
 8008746:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800874a:	0102      	lsls	r2, r0, #4
 800874c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
        if (result > max - digit) return false;  // Overflow
 8008750:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008754:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008758:	ebb0 0a02 	subs.w	sl, r0, r2
 800875c:	eb61 0b03 	sbc.w	fp, r1, r3
 8008760:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008764:	4592      	cmp	sl, r2
 8008766:	eb7b 0303 	sbcs.w	r3, fp, r3
 800876a:	d201      	bcs.n	8008770 <mg_str_to_num+0x3b6>
 800876c:	2300      	movs	r3, #0
 800876e:	e052      	b.n	8008816 <mg_str_to_num+0x45c>
        result += digit;
 8008770:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008774:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008778:	1884      	adds	r4, r0, r2
 800877a:	603c      	str	r4, [r7, #0]
 800877c:	eb41 0303 	adc.w	r3, r1, r3
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008786:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        i++, ndigits++;
 800878a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800878e:	3301      	adds	r3, #1
 8008790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008798:	3301      	adds	r3, #1
 800879a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      while (i < str.len) {
 800879e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087a4:	429a      	cmp	r2, r3
 80087a6:	f4ff af70 	bcc.w	800868a <mg_str_to_num+0x2d0>
      }
      break;
 80087aa:	e006      	b.n	80087ba <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 80087ac:	bf00      	nop
      break;
 80087ae:	e004      	b.n	80087ba <mg_str_to_num+0x400>
    default:
      return false;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e030      	b.n	8008816 <mg_str_to_num+0x45c>
      break;
 80087b4:	bf00      	nop
 80087b6:	e000      	b.n	80087ba <mg_str_to_num+0x400>
      break;
 80087b8:	bf00      	nop
  }
  if (ndigits == 0) return false;
 80087ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <mg_str_to_num+0x40c>
 80087c2:	2300      	movs	r3, #0
 80087c4:	e027      	b.n	8008816 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 80087c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <mg_str_to_num+0x41a>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e020      	b.n	8008816 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 80087d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d104      	bne.n	80087e6 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80087dc:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80087e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e2:	701a      	strb	r2, [r3, #0]
 80087e4:	e016      	b.n	8008814 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80087e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d104      	bne.n	80087f8 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80087ee:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80087f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f4:	801a      	strh	r2, [r3, #0]
 80087f6:	e00d      	b.n	8008814 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80087f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d104      	bne.n	800880a <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8008800:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e004      	b.n	8008814 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800880a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800880c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008810:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8008814:	2301      	movs	r3, #1
}
 8008816:	4618      	mov	r0, r3
 8008818:	3794      	adds	r7, #148	; 0x94
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008820 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8008820:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	6178      	str	r0, [r7, #20]
 800882a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800882e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008836:	eb10 0a02 	adds.w	sl, r0, r2
 800883a:	eb41 0b03 	adc.w	fp, r1, r3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	4592      	cmp	sl, r2
 8008846:	eb7b 0303 	sbcs.w	r3, fp, r3
 800884a:	d206      	bcs.n	800885a <mg_timer_expired+0x3a>
 800884c:	6979      	ldr	r1, [r7, #20]
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	4313      	orrs	r3, r2
 8008862:	d10d      	bne.n	8008880 <mg_timer_expired+0x60>
 8008864:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800886c:	1886      	adds	r6, r0, r2
 800886e:	603e      	str	r6, [r7, #0]
 8008870:	eb41 0303 	adc.w	r3, r1, r3
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	e9d7 1200 	ldrd	r1, r2, [r7]
 800887c:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800888a:	4290      	cmp	r0, r2
 800888c:	eb71 0303 	sbcs.w	r3, r1, r3
 8008890:	d201      	bcs.n	8008896 <mg_timer_expired+0x76>
 8008892:	2300      	movs	r3, #0
 8008894:	e022      	b.n	80088dc <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088a0:	ebb0 0802 	subs.w	r8, r0, r2
 80088a4:	eb61 0903 	sbc.w	r9, r1, r3
 80088a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ac:	4542      	cmp	r2, r8
 80088ae:	eb73 0309 	sbcs.w	r3, r3, r9
 80088b2:	d207      	bcs.n	80088c4 <mg_timer_expired+0xa4>
 80088b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088bc:	1884      	adds	r4, r0, r2
 80088be:	eb41 0503 	adc.w	r5, r1, r3
 80088c2:	e007      	b.n	80088d4 <mg_timer_expired+0xb4>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ce:	1884      	adds	r4, r0, r2
 80088d0:	eb41 0503 	adc.w	r5, r1, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80088da:	2301      	movs	r3, #1
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088e6:	4770      	bx	lr

080088e8 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b08b      	sub	sp, #44	; 0x2c
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	e054      	b.n	80089a6 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	d10d      	bne.n	8008922 <mg_timer_poll+0x3a>
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <mg_timer_poll+0x3a>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <mg_timer_poll+0x3c>
 8008922:	2300      	movs	r3, #0
 8008924:	76fb      	strb	r3, [r7, #27]
 8008926:	7efb      	ldrb	r3, [r7, #27]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f103 0410 	add.w	r4, r3, #16
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800893a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893e:	e9cd 2300 	strd	r2, r3, [sp]
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4620      	mov	r0, r4
 8008948:	f7ff ff6a 	bl	8008820 <mg_timer_expired>
 800894c:	4603      	mov	r3, r0
 800894e:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8008956:	7efb      	ldrb	r3, [r7, #27]
 8008958:	f083 0301 	eor.w	r3, r3, #1
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <mg_timer_poll+0x86>
 8008962:	7ebb      	ldrb	r3, [r7, #26]
 8008964:	f083 0301 	eor.w	r3, r3, #1
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d118      	bne.n	80089a0 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <mg_timer_poll+0x9e>
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	6a12      	ldr	r2, [r2, #32]
 800898e:	4610      	mov	r0, r2
 8008990:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f043 0204 	orr.w	r2, r3, #4
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	619a      	str	r2, [r3, #24]
 800899e:	e000      	b.n	80089a2 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80089a0:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1a7      	bne.n	80088fc <mg_timer_poll+0x14>
  }
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	3724      	adds	r7, #36	; 0x24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd90      	pop	{r4, r7, pc}

080089b6 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <mg_tls_recv+0x1e>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <mg_tls_recv+0x1e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <mg_tls_recv+0x22>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e001      	b.n	8008a04 <mg_tls_recv+0x26>
 8008a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <mg_tls_send+0x1e>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <mg_tls_send+0x1e>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <mg_tls_send+0x22>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e001      	b.n	8008a36 <mg_tls_send+0x26>
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8008a74:	2204      	movs	r2, #4
 8008a76:	491b      	ldr	r1, [pc, #108]	; (8008ae4 <mg_url_is_ssl+0x78>)
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f011 fce9 	bl	801a450 <strncmp>
 8008a7e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d027      	beq.n	8008ad4 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8008a84:	2206      	movs	r2, #6
 8008a86:	4918      	ldr	r1, [pc, #96]	; (8008ae8 <mg_url_is_ssl+0x7c>)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f011 fce1 	bl	801a450 <strncmp>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01f      	beq.n	8008ad4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8008a94:	2206      	movs	r2, #6
 8008a96:	4915      	ldr	r1, [pc, #84]	; (8008aec <mg_url_is_ssl+0x80>)
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f011 fcd9 	bl	801a450 <strncmp>
 8008a9e:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d017      	beq.n	8008ad4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	4912      	ldr	r1, [pc, #72]	; (8008af0 <mg_url_is_ssl+0x84>)
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f011 fcd1 	bl	801a450 <strncmp>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00f      	beq.n	8008ad4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	490f      	ldr	r1, [pc, #60]	; (8008af4 <mg_url_is_ssl+0x88>)
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f011 fcc9 	bl	801a450 <strncmp>
 8008abe:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	490c      	ldr	r1, [pc, #48]	; (8008af8 <mg_url_is_ssl+0x8c>)
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f011 fcc1 	bl	801a450 <strncmp>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <mg_url_is_ssl+0x6c>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <mg_url_is_ssl+0x6e>
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	0801c7fc 	.word	0x0801c7fc
 8008ae8:	0801c804 	.word	0x0801c804
 8008aec:	0801c80c 	.word	0x0801c80c
 8008af0:	0801c814 	.word	0x0801c814
 8008af4:	0801c81c 	.word	0x0801c81c
 8008af8:	0801c824 	.word	0x0801c824

08008afc <urlparse>:

static struct url urlparse(const char *url) {
 8008afc:	b5b0      	push	{r4, r5, r7, lr}
 8008afe:	b08a      	sub	sp, #40	; 0x28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	221c      	movs	r2, #28
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f011 fc89 	bl	801a426 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8008b14:	2300      	movs	r3, #0
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
 8008b18:	e05b      	b.n	8008bd2 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	4413      	add	r3, r2
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b2f      	cmp	r3, #47	; 0x2f
 8008b24:	d112      	bne.n	8008b4c <urlparse+0x50>
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <urlparse+0x50>
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10c      	bne.n	8008b4c <urlparse+0x50>
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	3b01      	subs	r3, #1
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4413      	add	r3, r2
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8008b3e:	d105      	bne.n	8008b4c <urlparse+0x50>
      u.host = i + 1;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	3301      	adds	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	61bb      	str	r3, [r7, #24]
 8008b4a:	e03f      	b.n	8008bcc <urlparse+0xd0>
    } else if (url[i] == ']') {
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	4413      	add	r3, r2
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b5d      	cmp	r3, #93	; 0x5d
 8008b56:	d102      	bne.n	8008b5e <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
 8008b5c:	e036      	b.n	8008bcc <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	4413      	add	r3, r2
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b3a      	cmp	r3, #58	; 0x3a
 8008b68:	d109      	bne.n	8008b7e <urlparse+0x82>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <urlparse+0x82>
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d103      	bne.n	8008b7e <urlparse+0x82>
      u.port = i + 1;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e026      	b.n	8008bcc <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	4413      	add	r3, r2
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b40      	cmp	r3, #64	; 0x40
 8008b88:	d112      	bne.n	8008bb0 <urlparse+0xb4>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10f      	bne.n	8008bb0 <urlparse+0xb4>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10c      	bne.n	8008bb0 <urlparse+0xb4>
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d109      	bne.n	8008bb0 <urlparse+0xb4>
      u.user = u.host;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	e00d      	b.n	8008bcc <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	4413      	add	r3, r2
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8008bba:	d107      	bne.n	8008bcc <urlparse+0xd0>
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <urlparse+0xd0>
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <urlparse+0xd0>
      u.uri = i;
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	3301      	adds	r3, #1
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	4413      	add	r3, r2
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d19d      	bne.n	8008b1a <urlparse+0x1e>
    }
  }
  u.end = i;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	461d      	mov	r5, r3
 8008be6:	f107 0408 	add.w	r4, r7, #8
 8008bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008bf2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	3728      	adds	r7, #40	; 0x28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c00 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	; 0x28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8008c08:	f107 0308 	add.w	r3, r7, #8
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff ff74 	bl	8008afc <urlparse>
  unsigned short port = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8008c18:	2205      	movs	r2, #5
 8008c1a:	4925      	ldr	r1, [pc, #148]	; (8008cb0 <mg_url_port+0xb0>)
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f011 fc17 	bl	801a450 <strncmp>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <mg_url_port+0x38>
 8008c28:	2203      	movs	r2, #3
 8008c2a:	4922      	ldr	r1, [pc, #136]	; (8008cb4 <mg_url_port+0xb4>)
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f011 fc0f 	bl	801a450 <strncmp>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <mg_url_port+0x3c>
 8008c38:	2350      	movs	r3, #80	; 0x50
 8008c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8008c3c:	2204      	movs	r2, #4
 8008c3e:	491e      	ldr	r1, [pc, #120]	; (8008cb8 <mg_url_port+0xb8>)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f011 fc05 	bl	801a450 <strncmp>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <mg_url_port+0x5c>
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	491b      	ldr	r1, [pc, #108]	; (8008cbc <mg_url_port+0xbc>)
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f011 fbfd 	bl	801a450 <strncmp>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <mg_url_port+0x62>
    port = 443;
 8008c5c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8008c60:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8008c62:	2205      	movs	r2, #5
 8008c64:	4916      	ldr	r1, [pc, #88]	; (8008cc0 <mg_url_port+0xc0>)
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f011 fbf2 	bl	801a450 <strncmp>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <mg_url_port+0x78>
 8008c72:	f240 735b 	movw	r3, #1883	; 0x75b
 8008c76:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8008c78:	2206      	movs	r2, #6
 8008c7a:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <mg_url_port+0xc4>)
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f011 fbe7 	bl	801a450 <strncmp>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <mg_url_port+0x8e>
 8008c88:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8008c8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <mg_url_port+0xa4>
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	4413      	add	r3, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f011 f892 	bl	8019dc4 <atoi>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8008ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	0801c82c 	.word	0x0801c82c
 8008cb4:	0801c834 	.word	0x0801c834
 8008cb8:	0801c7fc 	.word	0x0801c7fc
 8008cbc:	0801c804 	.word	0x0801c804
 8008cc0:	0801c838 	.word	0x0801c838
 8008cc4:	0801c80c 	.word	0x0801c80c

08008cc8 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8008cd8:	e004      	b.n	8008ce4 <mg_bzero+0x1c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	1e5a      	subs	r2, r3, #1
 8008ce8:	603a      	str	r2, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f5      	bne.n	8008cda <mg_bzero+0x12>
  }
}
 8008cee:	bf00      	nop
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
bool mg_random(void *buf, size_t len) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  bool success = false;
 8008d06:	2300      	movs	r3, #0
 8008d08:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) success = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  if (success == false) {
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	f083 0301 	eor.w	r3, r3, #1
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01b      	beq.n	8008d52 <mg_random+0x56>
    MG_ERROR(("Weak RNG: using rand()"));
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <mg_random+0x60>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd12      	ble.n	8008d48 <mg_random+0x4c>
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <mg_random+0x64>)
 8008d24:	f244 12ff 	movw	r2, #16895	; 0x41ff
 8008d28:	490e      	ldr	r1, [pc, #56]	; (8008d64 <mg_random+0x68>)
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	f7fb fb9c 	bl	8004468 <mg_log_prefix>
 8008d30:	480d      	ldr	r0, [pc, #52]	; (8008d68 <mg_random+0x6c>)
 8008d32:	f7fb fbe9 	bl	8004508 <mg_log>
    while (len--) *p++ = (unsigned char) (rand() & 255);
 8008d36:	e007      	b.n	8008d48 <mg_random+0x4c>
 8008d38:	f011 f950 	bl	8019fdc <rand>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	60fa      	str	r2, [r7, #12]
 8008d44:	b2ca      	uxtb	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	1e5a      	subs	r2, r3, #1
 8008d4c:	603a      	str	r2, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f2      	bne.n	8008d38 <mg_random+0x3c>
  }
  return success;
 8008d52:	7afb      	ldrb	r3, [r7, #11]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000000 	.word	0x20000000
 8008d60:	0801fa44 	.word	0x0801fa44
 8008d64:	0801b0f4 	.word	0x0801b0f4
 8008d68:	0801c840 	.word	0x0801c840

08008d6c <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 8008d7a:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8008d86:	7b7b      	ldrb	r3, [r7, #13]
 8008d88:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8008d8a:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8008d8c:	7b3b      	ldrb	r3, [r7, #12]
 8008d8e:	061b      	lsls	r3, r3, #24
 8008d90:	4313      	orrs	r3, r2
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	4603      	mov	r3, r0
 8008da6:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8008da8:	2300      	movs	r3, #0
 8008daa:	81bb      	strh	r3, [r7, #12]
 8008dac:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 8008dae:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8008db0:	7b7b      	ldrb	r3, [r7, #13]
 8008db2:	b21a      	sxth	r2, r3
 8008db4:	7b3b      	ldrb	r3, [r7, #12]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	b21b      	sxth	r3, r3
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	b21b      	sxth	r3, r3
 8008dbe:	b29b      	uxth	r3, r3
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	43db      	mvns	r3, r3
 8008ddc:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8008dde:	e01f      	b.n	8008e20 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	60ba      	str	r2, [r7, #8]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8008dea:	7dfa      	ldrb	r2, [r7, #23]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4053      	eors	r3, r2
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	4a11      	ldr	r2, [pc, #68]	; (8008e3c <mg_crc32+0x70>)
 8008df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	091b      	lsrs	r3, r3, #4
 8008dfe:	4053      	eors	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4053      	eors	r3, r2
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <mg_crc32+0x70>)
 8008e14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	091b      	lsrs	r3, r3, #4
 8008e1c:	4053      	eors	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	1e5a      	subs	r2, r3, #1
 8008e24:	607a      	str	r2, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1da      	bne.n	8008de0 <mg_crc32+0x14>
  }
  return ~crc;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	43db      	mvns	r3, r3
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	0801fa50 	.word	0x0801fa50

08008e40 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	460a      	mov	r2, r1
 8008e4a:	80fb      	strh	r3, [r7, #6]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e56:	d00b      	beq.n	8008e70 <mg_phy_id_to_str+0x30>
 8008e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e5c:	dc28      	bgt.n	8008eb0 <mg_phy_id_to_str+0x70>
 8008e5e:	2b22      	cmp	r3, #34	; 0x22
 8008e60:	d020      	beq.n	8008ea4 <mg_phy_id_to_str+0x64>
 8008e62:	2b22      	cmp	r3, #34	; 0x22
 8008e64:	dc24      	bgt.n	8008eb0 <mg_phy_id_to_str+0x70>
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	d01e      	beq.n	8008ea8 <mg_phy_id_to_str+0x68>
 8008e6a:	2b1c      	cmp	r3, #28
 8008e6c:	d01e      	beq.n	8008eac <mg_phy_id_to_str+0x6c>
 8008e6e:	e01f      	b.n	8008eb0 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 8008e70:	88bb      	ldrh	r3, [r7, #4]
 8008e72:	f24a 2231 	movw	r2, #41521	; 0xa231
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00c      	beq.n	8008e94 <mg_phy_id_to_str+0x54>
 8008e7a:	f24a 2231 	movw	r2, #41521	; 0xa231
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	dc0e      	bgt.n	8008ea0 <mg_phy_id_to_str+0x60>
 8008e82:	f645 42a2 	movw	r2, #23714	; 0x5ca2
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d006      	beq.n	8008e98 <mg_phy_id_to_str+0x58>
 8008e8a:	f24a 1240 	movw	r2, #41280	; 0xa140
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <mg_phy_id_to_str+0x5c>
 8008e92:	e005      	b.n	8008ea0 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <mg_phy_id_to_str+0x80>)
 8008e96:	e00c      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <mg_phy_id_to_str+0x84>)
 8008e9a:	e00a      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <mg_phy_id_to_str+0x88>)
 8008e9e:	e008      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <mg_phy_id_to_str+0x8c>)
 8008ea2:	e006      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <mg_phy_id_to_str+0x90>)
 8008ea6:	e004      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <mg_phy_id_to_str+0x94>)
 8008eaa:	e002      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <mg_phy_id_to_str+0x98>)
 8008eae:	e000      	b.n	8008eb2 <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	0801ca50 	.word	0x0801ca50
 8008ec4:	0801ca58 	.word	0x0801ca58
 8008ec8:	0801ca60 	.word	0x0801ca60
 8008ecc:	0801ca68 	.word	0x0801ca68
 8008ed0:	0801ca70 	.word	0x0801ca70
 8008ed4:	0801ca78 	.word	0x0801ca78
 8008ed8:	0801ca80 	.word	0x0801ca80
 8008edc:	0801ca88 	.word	0x0801ca88

08008ee0 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8008ee0:	b5b0      	push	{r4, r5, r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
 8008eec:	4613      	mov	r3, r2
 8008eee:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	78f8      	ldrb	r0, [r7, #3]
 8008ef6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008efa:	2100      	movs	r1, #0
 8008efc:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8008efe:	bf00      	nop
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	78fa      	ldrb	r2, [r7, #3]
 8008f06:	2100      	movs	r1, #0
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dbf5      	blt.n	8008f00 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	4603      	mov	r3, r0
 8008f22:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	78fa      	ldrb	r2, [r7, #3]
 8008f2a:	2103      	movs	r1, #3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	4603      	mov	r3, r0
 8008f32:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8008f34:	4b42      	ldr	r3, [pc, #264]	; (8009040 <mg_phy_init+0x160>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	dd14      	ble.n	8008f66 <mg_phy_init+0x86>
 8008f3c:	4b41      	ldr	r3, [pc, #260]	; (8009044 <mg_phy_init+0x164>)
 8008f3e:	f244 5238 	movw	r2, #17720	; 0x4538
 8008f42:	4941      	ldr	r1, [pc, #260]	; (8009048 <mg_phy_init+0x168>)
 8008f44:	2002      	movs	r0, #2
 8008f46:	f7fb fa8f 	bl	8004468 <mg_log_prefix>
 8008f4a:	89fc      	ldrh	r4, [r7, #14]
 8008f4c:	89bd      	ldrh	r5, [r7, #12]
 8008f4e:	89ba      	ldrh	r2, [r7, #12]
 8008f50:	89fb      	ldrh	r3, [r7, #14]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff ff73 	bl	8008e40 <mg_phy_id_to_str>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4621      	mov	r1, r4
 8008f60:	483a      	ldr	r0, [pc, #232]	; (800904c <mg_phy_init+0x16c>)
 8008f62:	f7fb fad1 	bl	8004508 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8008f66:	89fb      	ldrh	r3, [r7, #14]
 8008f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f6c:	d11f      	bne.n	8008fae <mg_phy_init+0xce>
 8008f6e:	89bb      	ldrh	r3, [r7, #12]
 8008f70:	f24a 2231 	movw	r2, #41521	; 0xa231
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d11a      	bne.n	8008fae <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	78f8      	ldrb	r0, [r7, #3]
 8008f7e:	221f      	movs	r2, #31
 8008f80:	210d      	movs	r1, #13
 8008f82:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	78f8      	ldrb	r0, [r7, #3]
 8008f8a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8008f8e:	210e      	movs	r1, #14
 8008f90:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	78f8      	ldrb	r0, [r7, #3]
 8008f98:	f244 021f 	movw	r2, #16415	; 0x401f
 8008f9c:	210d      	movs	r1, #13
 8008f9e:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	78f8      	ldrb	r0, [r7, #3]
 8008fa6:	f240 120d 	movw	r2, #269	; 0x10d
 8008faa:	210e      	movs	r1, #14
 8008fac:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8008fae:	78bb      	ldrb	r3, [r7, #2]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d12e      	bne.n	8009016 <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fbe:	d110      	bne.n	8008fe2 <mg_phy_init+0x102>
 8008fc0:	89bb      	ldrh	r3, [r7, #12]
 8008fc2:	f24a 2231 	movw	r2, #41521	; 0xa231
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00b      	beq.n	8008fe2 <mg_phy_init+0x102>
 8008fca:	89bb      	ldrh	r3, [r7, #12]
 8008fcc:	f645 42a2 	movw	r2, #23714	; 0x5ca2
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d006      	beq.n	8008fe2 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	78f8      	ldrb	r0, [r7, #3]
 8008fda:	2281      	movs	r2, #129	; 0x81
 8008fdc:	2117      	movs	r1, #23
 8008fde:	4798      	blx	r3
 8008fe0:	e019      	b.n	8009016 <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8008fe2:	89fb      	ldrh	r3, [r7, #14]
 8008fe4:	2b22      	cmp	r3, #34	; 0x22
 8008fe6:	d116      	bne.n	8009016 <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8008ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	78f8      	ldrb	r0, [r7, #3]
 800900e:	f248 1280 	movw	r2, #33152	; 0x8180
 8009012:	211f      	movs	r1, #31
 8009014:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8009016:	78bb      	ldrb	r3, [r7, #2]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <mg_phy_init+0x156>
 8009020:	89fb      	ldrh	r3, [r7, #14]
 8009022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009026:	d106      	bne.n	8009036 <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	78f8      	ldrb	r0, [r7, #3]
 800902e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009032:	2118      	movs	r1, #24
 8009034:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bdb0      	pop	{r4, r5, r7, pc}
 800903e:	bf00      	nop
 8009040:	20000000 	.word	0x20000000
 8009044:	0801fa90 	.word	0x0801fa90
 8009048:	0801b0f4 	.word	0x0801b0f4
 800904c:	0801ca90 	.word	0x0801ca90

08009050 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	460b      	mov	r3, r1
 800905e:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8009060:	2300      	movs	r3, #0
 8009062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	7afa      	ldrb	r2, [r7, #11]
 800906c:	2101      	movs	r1, #1
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	4603      	mov	r3, r0
 8009074:	84fb      	strh	r3, [r7, #38]	; 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8009076:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <mg_phy_up+0x4a>
 8009080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	7afa      	ldrb	r2, [r7, #11]
 8009090:	2101      	movs	r1, #1
 8009092:	4610      	mov	r0, r2
 8009094:	4798      	blx	r3
 8009096:	4603      	mov	r3, r0
 8009098:	84fb      	strh	r3, [r7, #38]	; 0x26
  up = bsr & MG_BIT(2);
 800909a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bf14      	ite	ne
 80090a4:	2301      	movne	r3, #1
 80090a6:	2300      	moveq	r3, #0
 80090a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 80090ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80bc 	beq.w	800922e <mg_phy_up+0x1de>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80b8 	beq.w	800922e <mg_phy_up+0x1de>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80b4 	beq.w	800922e <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	7afa      	ldrb	r2, [r7, #11]
 80090cc:	2102      	movs	r1, #2
 80090ce:	4610      	mov	r0, r2
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	847b      	strh	r3, [r7, #34]	; 0x22
    if (id1 == MG_PHY_DP83x) {
 80090d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090dc:	d14b      	bne.n	8009176 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	7afa      	ldrb	r2, [r7, #11]
 80090e4:	2103      	movs	r1, #3
 80090e6:	4610      	mov	r0, r2
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 80090ee:	8b7b      	ldrh	r3, [r7, #26]
 80090f0:	f24a 2231 	movw	r2, #41521	; 0xa231
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d120      	bne.n	800913a <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	7afa      	ldrb	r2, [r7, #11]
 80090fe:	2111      	movs	r1, #17
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	4603      	mov	r3, r0
 8009106:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8009108:	8afb      	ldrh	r3, [r7, #22]
 800910a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800910e:	2b00      	cmp	r3, #0
 8009110:	bf14      	ite	ne
 8009112:	2301      	movne	r3, #1
 8009114:	2300      	moveq	r3, #0
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 800911c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009120:	2b00      	cmp	r3, #0
 8009122:	db06      	blt.n	8009132 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8009124:	8afb      	ldrh	r3, [r7, #22]
 8009126:	0b9b      	lsrs	r3, r3, #14
 8009128:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	e000      	b.n	8009134 <mg_phy_up+0xe4>
 8009132:	2202      	movs	r2, #2
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	701a      	strb	r2, [r3, #0]
 8009138:	e079      	b.n	800922e <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	7afa      	ldrb	r2, [r7, #11]
 8009140:	2110      	movs	r1, #16
 8009142:	4610      	mov	r0, r2
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 800914a:	8b3b      	ldrh	r3, [r7, #24]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	bf14      	ite	ne
 8009154:	2301      	movne	r3, #1
 8009156:	2300      	moveq	r3, #0
 8009158:	b2da      	uxtb	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 800915e:	8b3b      	ldrh	r3, [r7, #24]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf0c      	ite	eq
 8009168:	2301      	moveq	r3, #1
 800916a:	2300      	movne	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	461a      	mov	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	e05b      	b.n	800922e <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8009176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009178:	2b22      	cmp	r3, #34	; 0x22
 800917a:	d11d      	bne.n	80091b8 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	7afa      	ldrb	r2, [r7, #11]
 8009182:	211e      	movs	r1, #30
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 800918c:	8bbb      	ldrh	r3, [r7, #28]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf14      	ite	ne
 8009196:	2301      	movne	r3, #1
 8009198:	2300      	moveq	r3, #0
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80091a0:	8bbb      	ldrh	r3, [r7, #28]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	bf14      	ite	ne
 80091aa:	2301      	movne	r3, #1
 80091ac:	2300      	moveq	r3, #0
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e03a      	b.n	800922e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 80091b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091ba:	2b07      	cmp	r3, #7
 80091bc:	d11a      	bne.n	80091f4 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	7afa      	ldrb	r2, [r7, #11]
 80091c4:	211f      	movs	r1, #31
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 80091ce:	8bfb      	ldrh	r3, [r7, #30]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bf14      	ite	ne
 80091d8:	2301      	movne	r3, #1
 80091da:	2300      	moveq	r3, #0
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80091e2:	8bfb      	ldrh	r3, [r7, #30]
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	701a      	strb	r2, [r3, #0]
 80091f2:	e01c      	b.n	800922e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 80091f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091f6:	2b1c      	cmp	r3, #28
 80091f8:	d119      	bne.n	800922e <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	7afa      	ldrb	r2, [r7, #11]
 8009200:	2100      	movs	r1, #0
 8009202:	4610      	mov	r0, r2
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 800920a:	8c3b      	ldrh	r3, [r7, #32]
 800920c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009210:	2b00      	cmp	r3, #0
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2da      	uxtb	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 800921e:	8c3b      	ldrh	r3, [r7, #32]
 8009220:	0b5b      	lsrs	r3, r3, #13
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 800922e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8009232:	4618      	mov	r0, r3
 8009234:	3728      	adds	r7, #40	; 0x28
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <eth_read_phy>:
static uint8_t s_txno;                               // Current TX descriptor
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	460a      	mov	r2, r1
 8009246:	71fb      	strb	r3, [r7, #7]
 8009248:	4613      	mov	r3, r2
 800924a:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 800924c:	4b12      	ldr	r3, [pc, #72]	; (8009298 <eth_read_phy+0x5c>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	4a11      	ldr	r2, [pc, #68]	; (8009298 <eth_read_phy+0x5c>)
 8009252:	f003 031c 	and.w	r3, r3, #28
 8009256:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <eth_read_phy+0x5c>)
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	02d9      	lsls	r1, r3, #11
 8009260:	79bb      	ldrb	r3, [r7, #6]
 8009262:	019b      	lsls	r3, r3, #6
 8009264:	430b      	orrs	r3, r1
 8009266:	490c      	ldr	r1, [pc, #48]	; (8009298 <eth_read_phy+0x5c>)
 8009268:	4313      	orrs	r3, r2
 800926a:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <eth_read_phy+0x5c>)
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	4a09      	ldr	r2, [pc, #36]	; (8009298 <eth_read_phy+0x5c>)
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8009278:	bf00      	nop
 800927a:	4b07      	ldr	r3, [pc, #28]	; (8009298 <eth_read_phy+0x5c>)
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1f9      	bne.n	800927a <eth_read_phy+0x3e>
  return ETH->MACMIIDR & 0xffff;
 8009286:	4b04      	ldr	r3, [pc, #16]	; (8009298 <eth_read_phy+0x5c>)
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	b29b      	uxth	r3, r3
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40028000 	.word	0x40028000

0800929c <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
 80092a6:	460b      	mov	r3, r1
 80092a8:	71bb      	strb	r3, [r7, #6]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80bb      	strh	r3, [r7, #4]
  ETH->MACMIIDR = val;
 80092ae:	4a14      	ldr	r2, [pc, #80]	; (8009300 <eth_write_phy+0x64>)
 80092b0:	88bb      	ldrh	r3, [r7, #4]
 80092b2:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 80092b4:	4b12      	ldr	r3, [pc, #72]	; (8009300 <eth_write_phy+0x64>)
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4a11      	ldr	r2, [pc, #68]	; (8009300 <eth_write_phy+0x64>)
 80092ba:	f003 031c 	and.w	r3, r3, #28
 80092be:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | MG_BIT(1);
 80092c0:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <eth_write_phy+0x64>)
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	02d9      	lsls	r1, r3, #11
 80092c8:	79bb      	ldrb	r3, [r7, #6]
 80092ca:	019b      	lsls	r3, r3, #6
 80092cc:	430b      	orrs	r3, r1
 80092ce:	4313      	orrs	r3, r2
 80092d0:	4a0b      	ldr	r2, [pc, #44]	; (8009300 <eth_write_phy+0x64>)
 80092d2:	f043 0302 	orr.w	r3, r3, #2
 80092d6:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <eth_write_phy+0x64>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	4a08      	ldr	r2, [pc, #32]	; (8009300 <eth_write_phy+0x64>)
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 80092e4:	bf00      	nop
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <eth_write_phy+0x64>)
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f9      	bne.n	80092e6 <eth_write_phy+0x4a>
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	40028000 	.word	0x40028000

08009304 <get_hclk>:

static uint32_t get_hclk(void) {
 8009304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009308:	b08d      	sub	sp, #52	; 0x34
 800930a:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 800930c:	4e3c      	ldr	r6, [pc, #240]	; (8009400 <get_hclk+0xfc>)
 800930e:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8009310:	2600      	movs	r6, #0
 8009312:	62fe      	str	r6, [r7, #44]	; 0x2c
 8009314:	4e3b      	ldr	r6, [pc, #236]	; (8009404 <get_hclk+0x100>)
 8009316:	627e      	str	r6, [r7, #36]	; 0x24
 8009318:	4e3b      	ldr	r6, [pc, #236]	; (8009408 <get_hclk+0x104>)
 800931a:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 800931c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800931e:	68b6      	ldr	r6, [r6, #8]
 8009320:	f006 0604 	and.w	r6, r6, #4
 8009324:	2e00      	cmp	r6, #0
 8009326:	d002      	beq.n	800932e <get_hclk+0x2a>
    clk = hse;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932c:	e049      	b.n	80093c2 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 800932e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8009330:	68b6      	ldr	r6, [r6, #8]
 8009332:	f006 0608 	and.w	r6, r6, #8
 8009336:	2e00      	cmp	r6, #0
 8009338:	d041      	beq.n	80093be <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 800933a:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800933c:	6876      	ldr	r6, [r6, #4]
 800933e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8009342:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8009344:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8009346:	6876      	ldr	r6, [r6, #4]
 8009348:	09b6      	lsrs	r6, r6, #6
 800934a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800934e:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8009350:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8009352:	6876      	ldr	r6, [r6, #4]
 8009354:	0c36      	lsrs	r6, r6, #16
 8009356:	f006 0603 	and.w	r6, r6, #3
 800935a:	3601      	adds	r6, #1
 800935c:	0076      	lsls	r6, r6, #1
 800935e:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8009360:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8009362:	6876      	ldr	r6, [r6, #4]
 8009364:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 8009368:	2e00      	cmp	r6, #0
 800936a:	d001      	beq.n	8009370 <get_hclk+0x6c>
 800936c:	6a3e      	ldr	r6, [r7, #32]
 800936e:	e000      	b.n	8009372 <get_hclk+0x6e>
 8009370:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8009372:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8009374:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8009376:	f04f 0c00 	mov.w	ip, #0
 800937a:	4634      	mov	r4, r6
 800937c:	4665      	mov	r5, ip
 800937e:	69be      	ldr	r6, [r7, #24]
 8009380:	f04f 0c00 	mov.w	ip, #0
 8009384:	4632      	mov	r2, r6
 8009386:	4663      	mov	r3, ip
 8009388:	fb02 fc05 	mul.w	ip, r2, r5
 800938c:	fb04 f603 	mul.w	r6, r4, r3
 8009390:	4466      	add	r6, ip
 8009392:	fba4 0102 	umull	r0, r1, r4, r2
 8009396:	1873      	adds	r3, r6, r1
 8009398:	4619      	mov	r1, r3
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	2200      	movs	r2, #0
 800939e:	4698      	mov	r8, r3
 80093a0:	4691      	mov	r9, r2
 80093a2:	4642      	mov	r2, r8
 80093a4:	464b      	mov	r3, r9
 80093a6:	f7f7 fc09 	bl	8000bbc <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4613      	mov	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093bc:	e001      	b.n	80093c2 <get_hclk+0xbe>
  } else {
    clk = hsi;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	091b      	lsrs	r3, r3, #4
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b07      	cmp	r3, #7
 80093d2:	d801      	bhi.n	80093d8 <get_hclk+0xd4>
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	e00e      	b.n	80093f6 <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 80093d8:	4a0c      	ldr	r2, [pc, #48]	; (800940c <get_hclk+0x108>)
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093e0:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3b08      	subs	r3, #8
 80093e8:	3330      	adds	r3, #48	; 0x30
 80093ea:	443b      	add	r3, r7
 80093ec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80093f0:	461a      	mov	r2, r3
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	40d3      	lsrs	r3, r2
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3734      	adds	r7, #52	; 0x34
 80093fa:	46bd      	mov	sp, r7
 80093fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009400:	40023800 	.word	0x40023800
 8009404:	00f42400 	.word	0x00f42400
 8009408:	007a1200 	.word	0x007a1200
 800940c:	0801caac 	.word	0x0801caac

08009410 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8009416:	4a34      	ldr	r2, [pc, #208]	; (80094e8 <guess_mdc_cr+0xd8>)
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009420:	6018      	str	r0, [r3, #0]
 8009422:	3304      	adds	r3, #4
 8009424:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8009426:	4a31      	ldr	r2, [pc, #196]	; (80094ec <guess_mdc_cr+0xdc>)
 8009428:	1d3b      	adds	r3, r7, #4
 800942a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800942e:	6018      	str	r0, [r3, #0]
 8009430:	3304      	adds	r3, #4
 8009432:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8009434:	f7ff ff66 	bl	8009304 <get_hclk>
 8009438:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 800943a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800943e:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	4a2b      	ldr	r2, [pc, #172]	; (80094f0 <guess_mdc_cr+0xe0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d80e      	bhi.n	8009466 <guess_mdc_cr+0x56>
    MG_ERROR(("HCLK too low"));
 8009448:	4b2a      	ldr	r3, [pc, #168]	; (80094f4 <guess_mdc_cr+0xe4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd36      	ble.n	80094be <guess_mdc_cr+0xae>
 8009450:	4b29      	ldr	r3, [pc, #164]	; (80094f8 <guess_mdc_cr+0xe8>)
 8009452:	f644 1249 	movw	r2, #18761	; 0x4949
 8009456:	4929      	ldr	r1, [pc, #164]	; (80094fc <guess_mdc_cr+0xec>)
 8009458:	2001      	movs	r0, #1
 800945a:	f7fb f805 	bl	8004468 <mg_log_prefix>
 800945e:	4828      	ldr	r0, [pc, #160]	; (8009500 <guess_mdc_cr+0xf0>)
 8009460:	f7fb f852 	bl	8004508 <mg_log>
 8009464:	e02b      	b.n	80094be <guess_mdc_cr+0xae>
  } else {
    for (int i = 0; i < 6; i++) {
 8009466:	2300      	movs	r3, #0
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e014      	b.n	8009496 <guess_mdc_cr+0x86>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800946c:	1d3a      	adds	r2, r7, #4
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	4413      	add	r3, r2
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	fbb3 f3f2 	udiv	r3, r3, r2
 800947c:	4a21      	ldr	r2, [pc, #132]	; (8009504 <guess_mdc_cr+0xf4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d806      	bhi.n	8009490 <guess_mdc_cr+0x80>
        result = crs[i];
 8009482:	f107 020c 	add.w	r2, r7, #12
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	4413      	add	r3, r2
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	61fb      	str	r3, [r7, #28]
        break;
 800948e:	e005      	b.n	800949c <guess_mdc_cr+0x8c>
    for (int i = 0; i < 6; i++) {
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	3301      	adds	r3, #1
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b05      	cmp	r3, #5
 800949a:	dde7      	ble.n	800946c <guess_mdc_cr+0x5c>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	da0d      	bge.n	80094be <guess_mdc_cr+0xae>
 80094a2:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <guess_mdc_cr+0xe4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd09      	ble.n	80094be <guess_mdc_cr+0xae>
 80094aa:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <guess_mdc_cr+0xe8>)
 80094ac:	f644 1251 	movw	r2, #18769	; 0x4951
 80094b0:	4912      	ldr	r1, [pc, #72]	; (80094fc <guess_mdc_cr+0xec>)
 80094b2:	2001      	movs	r0, #1
 80094b4:	f7fa ffd8 	bl	8004468 <mg_log_prefix>
 80094b8:	4813      	ldr	r0, [pc, #76]	; (8009508 <guess_mdc_cr+0xf8>)
 80094ba:	f7fb f825 	bl	8004508 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 80094be:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <guess_mdc_cr+0xe4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	dd0b      	ble.n	80094de <guess_mdc_cr+0xce>
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <guess_mdc_cr+0xe8>)
 80094c8:	f644 1253 	movw	r2, #18771	; 0x4953
 80094cc:	490b      	ldr	r1, [pc, #44]	; (80094fc <guess_mdc_cr+0xec>)
 80094ce:	2003      	movs	r0, #3
 80094d0:	f7fa ffca 	bl	8004468 <mg_log_prefix>
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	6979      	ldr	r1, [r7, #20]
 80094d8:	480c      	ldr	r0, [pc, #48]	; (800950c <guess_mdc_cr+0xfc>)
 80094da:	f7fb f815 	bl	8004508 <mg_log>
  return result;
 80094de:	69fb      	ldr	r3, [r7, #28]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3720      	adds	r7, #32
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	0801cae8 	.word	0x0801cae8
 80094ec:	0801caf0 	.word	0x0801caf0
 80094f0:	017d783f 	.word	0x017d783f
 80094f4:	20000000 	.word	0x20000000
 80094f8:	0801fa9c 	.word	0x0801fa9c
 80094fc:	0801b0f4 	.word	0x0801b0f4
 8009500:	0801cab4 	.word	0x0801cab4
 8009504:	00243d58 	.word	0x00243d58
 8009508:	0801cac4 	.word	0x0801cac4
 800950c:	0801cad4 	.word	0x0801cad4

08009510 <mg_tcpip_driver_stm32f_init>:

static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	; 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	61fb      	str	r3, [r7, #28]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <mg_tcpip_driver_stm32f_init+0x1a>
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	791b      	ldrb	r3, [r3, #4]
 8009528:	e000      	b.n	800952c <mg_tcpip_driver_stm32f_init+0x1c>
 800952a:	2300      	movs	r3, #0
 800952c:	76fb      	strb	r3, [r7, #27]
  s_ifp = ifp;
 800952e:	4a6e      	ldr	r2, [pc, #440]	; (80096e8 <mg_tcpip_driver_stm32f_init+0x1d8>)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8009534:	2300      	movs	r3, #0
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
 8009538:	e032      	b.n	80095a0 <mg_tcpip_driver_stm32f_init+0x90>
    s_rxdesc[i][0] = MG_BIT(31);                         // Own
 800953a:	4a6c      	ldr	r2, [pc, #432]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	4413      	add	r3, r2
 8009542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009546:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | MG_BIT(14);    // 2nd address chained
 8009548:	4a68      	ldr	r2, [pc, #416]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	f244 6204 	movw	r2, #17924	; 0x4604
 8009556:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	f240 6204 	movw	r2, #1540	; 0x604
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	4a63      	ldr	r2, [pc, #396]	; (80096f0 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8009564:	4413      	add	r3, r2
 8009566:	4619      	mov	r1, r3
 8009568:	4a60      	ldr	r2, [pc, #384]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	4413      	add	r3, r2
 8009570:	3308      	adds	r3, #8
 8009572:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	3301      	adds	r3, #1
 8009578:	425a      	negs	r2, r3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	f002 0203 	and.w	r2, r2, #3
 8009582:	bf58      	it	pl
 8009584:	4253      	negpl	r3, r2
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	4a58      	ldr	r2, [pc, #352]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 800958a:	4413      	add	r3, r2
 800958c:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 800958e:	4a57      	ldr	r2, [pc, #348]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	4413      	add	r3, r2
 8009596:	330c      	adds	r3, #12
 8009598:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	3301      	adds	r3, #1
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	ddc9      	ble.n	800953a <mg_tcpip_driver_stm32f_init+0x2a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80095a6:	2300      	movs	r3, #0
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	e023      	b.n	80095f4 <mg_tcpip_driver_stm32f_init+0xe4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f240 6204 	movw	r2, #1540	; 0x604
 80095b2:	fb02 f303 	mul.w	r3, r2, r3
 80095b6:	4a4f      	ldr	r2, [pc, #316]	; (80096f4 <mg_tcpip_driver_stm32f_init+0x1e4>)
 80095b8:	4413      	add	r3, r2
 80095ba:	4619      	mov	r1, r3
 80095bc:	4a4e      	ldr	r2, [pc, #312]	; (80096f8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	4413      	add	r3, r2
 80095c4:	3308      	adds	r3, #8
 80095c6:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	3301      	adds	r3, #1
 80095cc:	425a      	negs	r2, r3
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	f002 0203 	and.w	r2, r2, #3
 80095d6:	bf58      	it	pl
 80095d8:	4253      	negpl	r3, r2
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	4a46      	ldr	r2, [pc, #280]	; (80096f8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80095de:	4413      	add	r3, r2
 80095e0:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 80095e2:	4a45      	ldr	r2, [pc, #276]	; (80096f8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	4413      	add	r3, r2
 80095ea:	330c      	adds	r3, #12
 80095ec:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	3301      	adds	r3, #1
 80095f2:	623b      	str	r3, [r7, #32]
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	ddd8      	ble.n	80095ac <mg_tcpip_driver_stm32f_init+0x9c>
  }

  ETH->DMABMR |= MG_BIT(0);                         // Software reset
 80095fa:	4b40      	ldr	r3, [pc, #256]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 80095fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a3e      	ldr	r2, [pc, #248]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009604:	f043 0301 	orr.w	r3, r3, #1
 8009608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800960c:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 800960e:	bf00      	nop
 8009610:	4b3a      	ldr	r3, [pc, #232]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1f7      	bne.n	8009610 <mg_tcpip_driver_stm32f_init+0x100>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <mg_tcpip_driver_stm32f_init+0x11e>
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	da03      	bge.n	8009636 <mg_tcpip_driver_stm32f_init+0x126>
 800962e:	f7ff feef 	bl	8009410 <guess_mdc_cr>
 8009632:	4603      	mov	r3, r0
 8009634:	e001      	b.n	800963a <mg_tcpip_driver_stm32f_init+0x12a>
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	617b      	str	r3, [r7, #20]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4a2e      	ldr	r2, [pc, #184]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009642:	f003 031c 	and.w	r3, r3, #28
 8009646:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = MG_BIT(13) | MG_BIT(16) | MG_BIT(22) | MG_BIT(23) |
  // MG_BIT(25);
  ETH->MACIMR = MG_BIT(3) | MG_BIT(9);  // Mask timestamp & PMT IT
 8009648:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 800964a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800964e:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = MG_BIT(7);              // Disable zero quarta pause
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009652:	2280      	movs	r2, #128	; 0x80
 8009654:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = MG_BIT(31);                            // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8009656:	4a2a      	ldr	r2, [pc, #168]	; (8009700 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009660:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, MG_PHY_CLOCKS_MAC);
 8009664:	7ef9      	ldrb	r1, [r7, #27]
 8009666:	f107 030c 	add.w	r3, r7, #12
 800966a:	2202      	movs	r2, #2
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff fc37 	bl	8008ee0 <mg_phy_init>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 8009672:	4a22      	ldr	r2, [pc, #136]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009674:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <mg_tcpip_driver_stm32f_init+0x1dc>)
 8009676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800967a:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 800967c:	4a1f      	ldr	r2, [pc, #124]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 800967e:	4b1e      	ldr	r3, [pc, #120]	; (80096f8 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8009680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009684:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = MG_BIT(6) | MG_BIT(16);             // RIE, NISE
 8009686:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968c:	461a      	mov	r2, r3
 800968e:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <mg_tcpip_driver_stm32f_init+0x1f4>)
 8009690:	61d3      	str	r3, [r2, #28]
  ETH->MACCR =
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 8009694:	f644 020c 	movw	r2, #18444	; 0x480c
 8009698:	601a      	str	r2, [r3, #0]
      MG_BIT(2) | MG_BIT(3) | MG_BIT(11) | MG_BIT(14);  // RE, TE, Duplex, Fast
  ETH->DMAOMR =
 800969a:	4b18      	ldr	r3, [pc, #96]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 800969c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b19      	ldr	r3, [pc, #100]	; (8009708 <mg_tcpip_driver_stm32f_init+0x1f8>)
 80096a4:	6193      	str	r3, [r2, #24]
      MG_BIT(1) | MG_BIT(13) | MG_BIT(21) | MG_BIT(25);  // SR, ST, TSF, RSF

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	795b      	ldrb	r3, [r3, #5]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7912      	ldrb	r2, [r2, #4]
 80096b0:	4611      	mov	r1, r2
 80096b2:	4a12      	ldr	r2, [pc, #72]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	78db      	ldrb	r3, [r3, #3]
 80096bc:	061b      	lsls	r3, r3, #24
 80096be:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	789b      	ldrb	r3, [r3, #2]
 80096c4:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80096c6:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80096ce:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80096d6:	4a09      	ldr	r2, [pc, #36]	; (80096fc <mg_tcpip_driver_stm32f_init+0x1ec>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80096d8:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80096da:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 80096dc:	2301      	movs	r3, #1
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3728      	adds	r7, #40	; 0x28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20003334 	.word	0x20003334
 80096ec:	20000290 	.word	0x20000290
 80096f0:	20000310 	.word	0x20000310
 80096f4:	20001b20 	.word	0x20001b20
 80096f8:	200002d0 	.word	0x200002d0
 80096fc:	40028000 	.word	0x40028000
 8009700:	0801caf8 	.word	0x0801caf8
 8009704:	00010040 	.word	0x00010040
 8009708:	02202002 	.word	0x02202002

0800970c <mg_tcpip_driver_stm32f_tx>:

static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f240 6204 	movw	r2, #1540	; 0x604
 800971e:	4293      	cmp	r3, r2
 8009720:	d912      	bls.n	8009748 <mg_tcpip_driver_stm32f_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8009722:	4b3e      	ldr	r3, [pc, #248]	; (800981c <mg_tcpip_driver_stm32f_tx+0x110>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	dd0b      	ble.n	8009742 <mg_tcpip_driver_stm32f_tx+0x36>
 800972a:	4b3d      	ldr	r3, [pc, #244]	; (8009820 <mg_tcpip_driver_stm32f_tx+0x114>)
 800972c:	f644 1290 	movw	r2, #18832	; 0x4990
 8009730:	493c      	ldr	r1, [pc, #240]	; (8009824 <mg_tcpip_driver_stm32f_tx+0x118>)
 8009732:	2001      	movs	r0, #1
 8009734:	f7fa fe98 	bl	8004468 <mg_log_prefix>
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	4619      	mov	r1, r3
 800973c:	483a      	ldr	r0, [pc, #232]	; (8009828 <mg_tcpip_driver_stm32f_tx+0x11c>)
 800973e:	f7fa fee3 	bl	8004508 <mg_log>
    len = 0;  // Frame is too big
 8009742:	2300      	movs	r3, #0
 8009744:	60bb      	str	r3, [r7, #8]
 8009746:	e056      	b.n	80097f6 <mg_tcpip_driver_stm32f_tx+0xea>
  } else if ((s_txdesc[s_txno][0] & MG_BIT(31))) {
 8009748:	4b38      	ldr	r3, [pc, #224]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	4a38      	ldr	r2, [pc, #224]	; (8009830 <mg_tcpip_driver_stm32f_tx+0x124>)
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	4413      	add	r3, r2
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	da15      	bge.n	8009784 <mg_tcpip_driver_stm32f_tx+0x78>
    ifp->nerr++;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	679a      	str	r2, [r3, #120]	; 0x78
    MG_ERROR(("No free descriptors"));
 8009762:	4b2e      	ldr	r3, [pc, #184]	; (800981c <mg_tcpip_driver_stm32f_tx+0x110>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd09      	ble.n	800977e <mg_tcpip_driver_stm32f_tx+0x72>
 800976a:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <mg_tcpip_driver_stm32f_tx+0x114>)
 800976c:	f644 1294 	movw	r2, #18836	; 0x4994
 8009770:	492c      	ldr	r1, [pc, #176]	; (8009824 <mg_tcpip_driver_stm32f_tx+0x118>)
 8009772:	2001      	movs	r0, #1
 8009774:	f7fa fe78 	bl	8004468 <mg_log_prefix>
 8009778:	482e      	ldr	r0, [pc, #184]	; (8009834 <mg_tcpip_driver_stm32f_tx+0x128>)
 800977a:	f7fa fec5 	bl	8004508 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 800977e:	2300      	movs	r3, #0
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	e038      	b.n	80097f6 <mg_tcpip_driver_stm32f_tx+0xea>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);                           // Copy data
 8009784:	4b29      	ldr	r3, [pc, #164]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	f240 6304 	movw	r3, #1540	; 0x604
 800978e:	fb02 f303 	mul.w	r3, r2, r3
 8009792:	4a29      	ldr	r2, [pc, #164]	; (8009838 <mg_tcpip_driver_stm32f_tx+0x12c>)
 8009794:	4413      	add	r3, r2
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	4618      	mov	r0, r3
 800979c:	f010 ff05 	bl	801a5aa <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;                        // Set data len
 80097a0:	4b22      	ldr	r3, [pc, #136]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4a22      	ldr	r2, [pc, #136]	; (8009830 <mg_tcpip_driver_stm32f_tx+0x124>)
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	4413      	add	r3, r2
 80097aa:	3304      	adds	r3, #4
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = MG_BIT(20) | MG_BIT(28) | MG_BIT(29);  // Chain,FS,LS
 80097b0:	4b1e      	ldr	r3, [pc, #120]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	4a1e      	ldr	r2, [pc, #120]	; (8009830 <mg_tcpip_driver_stm32f_tx+0x124>)
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	4413      	add	r3, r2
 80097ba:	4a20      	ldr	r2, [pc, #128]	; (800983c <mg_tcpip_driver_stm32f_tx+0x130>)
 80097bc:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 80097be:	4b1b      	ldr	r3, [pc, #108]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	4a1b      	ldr	r2, [pc, #108]	; (8009830 <mg_tcpip_driver_stm32f_tx+0x124>)
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	4413      	add	r3, r2
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a18      	ldr	r2, [pc, #96]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097cc:	7812      	ldrb	r2, [r2, #0]
 80097ce:	4610      	mov	r0, r2
 80097d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80097d4:	4916      	ldr	r1, [pc, #88]	; (8009830 <mg_tcpip_driver_stm32f_tx+0x124>)
 80097d6:	0103      	lsls	r3, r0, #4
 80097d8:	440b      	add	r3, r1
 80097da:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80097dc:	4b13      	ldr	r3, [pc, #76]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	3301      	adds	r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	4b11      	ldr	r3, [pc, #68]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	4b10      	ldr	r3, [pc, #64]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d902      	bls.n	80097f6 <mg_tcpip_driver_stm32f_tx+0xea>
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <mg_tcpip_driver_stm32f_tx+0x120>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
  }
  MG_DSB();                            // ensure descriptors have been written
 80097f6:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = MG_BIT(2) | MG_BIT(5);  // Clear any prior TBUS/TUS
 80097fa:	4b11      	ldr	r3, [pc, #68]	; (8009840 <mg_tcpip_driver_stm32f_tx+0x134>)
 80097fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009800:	461a      	mov	r2, r3
 8009802:	2324      	movs	r3, #36	; 0x24
 8009804:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;                    // and resume
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <mg_tcpip_driver_stm32f_tx+0x134>)
 8009808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980c:	461a      	mov	r2, r3
 800980e:	2300      	movs	r3, #0
 8009810:	6053      	str	r3, [r2, #4]
  return len;
 8009812:	68bb      	ldr	r3, [r7, #8]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20000000 	.word	0x20000000
 8009820:	0801faac 	.word	0x0801faac
 8009824:	0801b0f4 	.word	0x0801b0f4
 8009828:	0801cb00 	.word	0x0801cb00
 800982c:	20003330 	.word	0x20003330
 8009830:	200002d0 	.word	0x200002d0
 8009834:	0801cb14 	.word	0x0801cb14
 8009838:	20001b20 	.word	0x20001b20
 800983c:	30100000 	.word	0x30100000
 8009840:	40028000 	.word	0x40028000

08009844 <mg_tcpip_driver_stm32f_up>:

static bool mg_tcpip_driver_stm32f_up(struct mg_tcpip_if *ifp) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <mg_tcpip_driver_stm32f_up+0x1a>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	791b      	ldrb	r3, [r3, #4]
 800985c:	e000      	b.n	8009860 <mg_tcpip_driver_stm32f_up+0x1c>
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 8009862:	2300      	movs	r3, #0
 8009864:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8009866:	2300      	movs	r3, #0
 8009868:	75bb      	strb	r3, [r7, #22]
 800986a:	2300      	movs	r3, #0
 800986c:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 800986e:	4a2b      	ldr	r2, [pc, #172]	; (800991c <mg_tcpip_driver_stm32f_up+0xd8>)
 8009870:	f107 030c 	add.w	r3, r7, #12
 8009874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009878:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 800987c:	f107 0315 	add.w	r3, r7, #21
 8009880:	f107 0214 	add.w	r2, r7, #20
 8009884:	7df9      	ldrb	r1, [r7, #23]
 8009886:	f107 000c 	add.w	r0, r7, #12
 800988a:	f7ff fbe1 	bl	8009050 <mg_phy_up>
 800988e:	4603      	mov	r3, r0
 8009890:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d13a      	bne.n	8009912 <mg_tcpip_driver_stm32f_up+0xce>
 800989c:	7dbb      	ldrb	r3, [r7, #22]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d037      	beq.n	8009912 <mg_tcpip_driver_stm32f_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(11);  // 100M, Full-duplex
 80098a2:	4b1f      	ldr	r3, [pc, #124]	; (8009920 <mg_tcpip_driver_stm32f_up+0xdc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 80098aa:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80098ac:	7d7b      	ldrb	r3, [r7, #21]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <mg_tcpip_driver_stm32f_up+0x76>
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b8:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(11);         // Half-duplex
 80098ba:	7d3b      	ldrb	r3, [r7, #20]
 80098bc:	f083 0301 	eor.w	r3, r3, #1
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <mg_tcpip_driver_stm32f_up+0x8a>
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098cc:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80098ce:	4a14      	ldr	r2, [pc, #80]	; (8009920 <mg_tcpip_driver_stm32f_up+0xdc>)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80098d4:	4b13      	ldr	r3, [pc, #76]	; (8009924 <mg_tcpip_driver_stm32f_up+0xe0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	dd1a      	ble.n	8009912 <mg_tcpip_driver_stm32f_up+0xce>
 80098dc:	4b12      	ldr	r3, [pc, #72]	; (8009928 <mg_tcpip_driver_stm32f_up+0xe4>)
 80098de:	f644 12b4 	movw	r2, #18868	; 0x49b4
 80098e2:	4912      	ldr	r1, [pc, #72]	; (800992c <mg_tcpip_driver_stm32f_up+0xe8>)
 80098e4:	2003      	movs	r0, #3
 80098e6:	f7fa fdbf 	bl	8004468 <mg_log_prefix>
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <mg_tcpip_driver_stm32f_up+0xb4>
 80098f4:	2164      	movs	r1, #100	; 0x64
 80098f6:	e000      	b.n	80098fa <mg_tcpip_driver_stm32f_up+0xb6>
 80098f8:	210a      	movs	r1, #10
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <mg_tcpip_driver_stm32f_up+0xc4>
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <mg_tcpip_driver_stm32f_up+0xec>)
 8009906:	e000      	b.n	800990a <mg_tcpip_driver_stm32f_up+0xc6>
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <mg_tcpip_driver_stm32f_up+0xf0>)
 800990a:	461a      	mov	r2, r3
 800990c:	480a      	ldr	r0, [pc, #40]	; (8009938 <mg_tcpip_driver_stm32f_up+0xf4>)
 800990e:	f7fa fdfb 	bl	8004508 <mg_log>
              maccr & MG_BIT(11) ? "full" : "half"));
  }
  return up;
 8009912:	7dbb      	ldrb	r3, [r7, #22]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	0801caf8 	.word	0x0801caf8
 8009920:	40028000 	.word	0x40028000
 8009924:	20000000 	.word	0x20000000
 8009928:	0801fac8 	.word	0x0801fac8
 800992c:	0801b0f4 	.word	0x0801b0f4
 8009930:	0801cb28 	.word	0x0801cb28
 8009934:	0801cb30 	.word	0x0801cb30
 8009938:	0801cb38 	.word	0x0801cb38

0800993c <ETH_IRQHandler>:

#ifdef __riscv
__attribute__((interrupt()))  // For RISCV CH32V307, which share the same MAC
#endif
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
  if (ETH->DMASR & MG_BIT(6)) {           // Frame received, loop
 8009942:	4b3d      	ldr	r3, [pc, #244]	; (8009a38 <ETH_IRQHandler+0xfc>)
 8009944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d061      	beq.n	8009a16 <ETH_IRQHandler+0xda>
    ETH->DMASR = MG_BIT(16) | MG_BIT(6);  // Clear flag
 8009952:	4b39      	ldr	r3, [pc, #228]	; (8009a38 <ETH_IRQHandler+0xfc>)
 8009954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009958:	461a      	mov	r2, r3
 800995a:	4b38      	ldr	r3, [pc, #224]	; (8009a3c <ETH_IRQHandler+0x100>)
 800995c:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 800995e:	2300      	movs	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	e053      	b.n	8009a0c <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 8009964:	4b36      	ldr	r3, [pc, #216]	; (8009a40 <ETH_IRQHandler+0x104>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4a36      	ldr	r2, [pc, #216]	; (8009a44 <ETH_IRQHandler+0x108>)
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	4413      	add	r3, r2
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	db4f      	blt.n	8009a14 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (MG_BIT(8) | MG_BIT(9))) ==
 8009974:	4b32      	ldr	r3, [pc, #200]	; (8009a40 <ETH_IRQHandler+0x104>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	4a32      	ldr	r2, [pc, #200]	; (8009a44 <ETH_IRQHandler+0x108>)
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	4413      	add	r3, r2
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009988:	d128      	bne.n	80099dc <ETH_IRQHandler+0xa0>
           (MG_BIT(8) | MG_BIT(9))) &&
          !(s_rxdesc[s_rxno][0] & MG_BIT(15))) {  // skip partial/errored frames
 800998a:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <ETH_IRQHandler+0x104>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <ETH_IRQHandler+0x108>)
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	4413      	add	r3, r2
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
           (MG_BIT(8) | MG_BIT(9))) &&
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11e      	bne.n	80099dc <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (MG_BIT(14) - 1));
 800999e:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <ETH_IRQHandler+0x108>)
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	4413      	add	r3, r2
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	0c1b      	lsrs	r3, r3, #16
 80099ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80099b0:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80099b2:	4b23      	ldr	r3, [pc, #140]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f240 6304 	movw	r3, #1540	; 0x604
 80099bc:	fb02 f303 	mul.w	r3, r2, r3
 80099c0:	4a21      	ldr	r2, [pc, #132]	; (8009a48 <ETH_IRQHandler+0x10c>)
 80099c2:	1898      	adds	r0, r3, r2
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d902      	bls.n	80099d0 <ETH_IRQHandler+0x94>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	e000      	b.n	80099d2 <ETH_IRQHandler+0x96>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <ETH_IRQHandler+0x110>)
 80099d4:	6812      	ldr	r2, [r2, #0]
 80099d6:	4619      	mov	r1, r3
 80099d8:	f7fd fe34 	bl	8007644 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = MG_BIT(31);
 80099dc:	4b18      	ldr	r3, [pc, #96]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <ETH_IRQHandler+0x108>)
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	4413      	add	r3, r2
 80099e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099ea:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80099ec:	4b14      	ldr	r3, [pc, #80]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	3301      	adds	r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <ETH_IRQHandler+0x104>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d902      	bls.n	8009a06 <ETH_IRQHandler+0xca>
 8009a00:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <ETH_IRQHandler+0x104>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	607b      	str	r3, [r7, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	d9a8      	bls.n	8009964 <ETH_IRQHandler+0x28>
 8009a12:	e000      	b.n	8009a16 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 8009a14:	bf00      	nop
    }
  }
  // Cleanup flags
  ETH->DMASR = MG_BIT(16)    // NIS, normal interrupt summary
 8009a16:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <ETH_IRQHandler+0xfc>)
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <ETH_IRQHandler+0x114>)
 8009a20:	6153      	str	r3, [r2, #20]
               | MG_BIT(7);  // Clear possible RBUS while processing
  ETH->DMARPDR = 0;          // and resume RX
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <ETH_IRQHandler+0xfc>)
 8009a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6093      	str	r3, [r2, #8]
}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40028000 	.word	0x40028000
 8009a3c:	00010040 	.word	0x00010040
 8009a40:	20003331 	.word	0x20003331
 8009a44:	20000290 	.word	0x20000290
 8009a48:	20000310 	.word	0x20000310
 8009a4c:	20003334 	.word	0x20003334
 8009a50:	00010080 	.word	0x00010080

08009a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <HAL_MspInit+0x44>)
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	; (8009a98 <HAL_MspInit+0x44>)
 8009a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a64:	6413      	str	r3, [r2, #64]	; 0x40
 8009a66:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <HAL_MspInit+0x44>)
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <HAL_MspInit+0x44>)
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <HAL_MspInit+0x44>)
 8009a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <HAL_MspInit+0x44>)
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40023800 	.word	0x40023800

08009a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b0aa      	sub	sp, #168	; 0xa8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	609a      	str	r2, [r3, #8]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ab4:	f107 0310 	add.w	r3, r7, #16
 8009ab8:	2284      	movs	r2, #132	; 0x84
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f010 fcb2 	bl	801a426 <memset>
  if(huart->Instance==USART3)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a22      	ldr	r2, [pc, #136]	; (8009b50 <HAL_UART_MspInit+0xb4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d13c      	bne.n	8009b46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8009acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ad6:	f107 0310 	add.w	r3, r7, #16
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 fb8a 	bl	800c1f4 <HAL_RCCEx_PeriphCLKConfig>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009ae6:	f7f7 fbcb 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009aea:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	4a19      	ldr	r2, [pc, #100]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009af4:	6413      	str	r3, [r2, #64]	; 0x40
 8009af6:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b02:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009b08:	f043 0308 	orr.w	r3, r3, #8
 8009b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <HAL_UART_MspInit+0xb8>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	60bb      	str	r3, [r7, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b22:	2302      	movs	r3, #2
 8009b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009b34:	2307      	movs	r3, #7
 8009b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4805      	ldr	r0, [pc, #20]	; (8009b58 <HAL_UART_MspInit+0xbc>)
 8009b42:	f001 fc4f 	bl	800b3e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009b46:	bf00      	nop
 8009b48:	37a8      	adds	r7, #168	; 0xa8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40004800 	.word	0x40004800
 8009b54:	40023800 	.word	0x40023800
 8009b58:	40020c00 	.word	0x40020c00

08009b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08e      	sub	sp, #56	; 0x38
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009b6c:	4b33      	ldr	r3, [pc, #204]	; (8009c3c <HAL_InitTick+0xe0>)
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	4a32      	ldr	r2, [pc, #200]	; (8009c3c <HAL_InitTick+0xe0>)
 8009b72:	f043 0310 	orr.w	r3, r3, #16
 8009b76:	6413      	str	r3, [r2, #64]	; 0x40
 8009b78:	4b30      	ldr	r3, [pc, #192]	; (8009c3c <HAL_InitTick+0xe0>)
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009b84:	f107 0210 	add.w	r2, r7, #16
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f002 fafe 	bl	800c190 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d103      	bne.n	8009ba6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009b9e:	f002 facf 	bl	800c140 <HAL_RCC_GetPCLK1Freq>
 8009ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8009ba4:	e004      	b.n	8009bb0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8009ba6:	f002 facb 	bl	800c140 <HAL_RCC_GetPCLK1Freq>
 8009baa:	4603      	mov	r3, r0
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	4a23      	ldr	r2, [pc, #140]	; (8009c40 <HAL_InitTick+0xe4>)
 8009bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb8:	0c9b      	lsrs	r3, r3, #18
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009bbe:	4b21      	ldr	r3, [pc, #132]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bc0:	4a21      	ldr	r2, [pc, #132]	; (8009c48 <HAL_InitTick+0xec>)
 8009bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8009bc4:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009bca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009bcc:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009bd2:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bde:	4b19      	ldr	r3, [pc, #100]	; (8009c44 <HAL_InitTick+0xe8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8009be4:	4817      	ldr	r0, [pc, #92]	; (8009c44 <HAL_InitTick+0xe8>)
 8009be6:	f002 fef5 	bl	800c9d4 <HAL_TIM_Base_Init>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8009bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11b      	bne.n	8009c30 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8009bf8:	4812      	ldr	r0, [pc, #72]	; (8009c44 <HAL_InitTick+0xe8>)
 8009bfa:	f002 ff4d 	bl	800ca98 <HAL_TIM_Base_Start_IT>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8009c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d111      	bne.n	8009c30 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009c0c:	2036      	movs	r0, #54	; 0x36
 8009c0e:	f000 fb69 	bl	800a2e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b0f      	cmp	r3, #15
 8009c16:	d808      	bhi.n	8009c2a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8009c18:	2200      	movs	r2, #0
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	2036      	movs	r0, #54	; 0x36
 8009c1e:	f000 fb45 	bl	800a2ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009c22:	4a0a      	ldr	r2, [pc, #40]	; (8009c4c <HAL_InitTick+0xf0>)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e002      	b.n	8009c30 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8009c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3738      	adds	r7, #56	; 0x38
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	431bde83 	.word	0x431bde83
 8009c44:	200033c0 	.word	0x200033c0
 8009c48:	40001000 	.word	0x40001000
 8009c4c:	2000001c 	.word	0x2000001c

08009c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009c54:	e7fe      	b.n	8009c54 <NMI_Handler+0x4>

08009c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c56:	b480      	push	{r7}
 8009c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c5a:	e7fe      	b.n	8009c5a <HardFault_Handler+0x4>

08009c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c60:	e7fe      	b.n	8009c60 <MemManage_Handler+0x4>

08009c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c62:	b480      	push	{r7}
 8009c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c66:	e7fe      	b.n	8009c66 <BusFault_Handler+0x4>

08009c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c6c:	e7fe      	b.n	8009c6c <UsageFault_Handler+0x4>

08009c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c80:	bf00      	nop
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c8e:	bf00      	nop
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c9c:	bf00      	nop
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009cac:	4802      	ldr	r0, [pc, #8]	; (8009cb8 <TIM6_DAC_IRQHandler+0x10>)
 8009cae:	f002 ff6b 	bl	800cb88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009cb2:	bf00      	nop
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200033c0 	.word	0x200033c0

08009cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  return 1;
 8009cc0:	2301      	movs	r3, #1
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <_kill>:

int _kill(int pid, int sig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <_kill+0x20>)
 8009cd8:	2216      	movs	r2, #22
 8009cda:	601a      	str	r2, [r3, #0]
  return -1;
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	2000b750 	.word	0x2000b750

08009cf0 <_exit>:

void _exit (int status)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ffe5 	bl	8009ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8009d02:	e7fe      	b.n	8009d02 <_exit+0x12>

08009d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e00a      	b.n	8009d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009d16:	f3af 8000 	nop.w
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	60ba      	str	r2, [r7, #8]
 8009d22:	b2ca      	uxtb	r2, r1
 8009d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	dbf0      	blt.n	8009d16 <_read+0x12>
  }

  return len;
 8009d34:	687b      	ldr	r3, [r7, #4]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009d66:	605a      	str	r2, [r3, #4]
  return 0;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <_isatty>:

int _isatty(int file)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009d7e:	2301      	movs	r3, #1
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
	...

08009da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009db0:	4a14      	ldr	r2, [pc, #80]	; (8009e04 <_sbrk+0x5c>)
 8009db2:	4b15      	ldr	r3, [pc, #84]	; (8009e08 <_sbrk+0x60>)
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009dbc:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <_sbrk+0x64>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <_sbrk+0x64>)
 8009dc6:	4a12      	ldr	r2, [pc, #72]	; (8009e10 <_sbrk+0x68>)
 8009dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009dca:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <_sbrk+0x64>)
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d205      	bcs.n	8009de4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <_sbrk+0x6c>)
 8009dda:	220c      	movs	r2, #12
 8009ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009de2:	e009      	b.n	8009df8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <_sbrk+0x64>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009dea:	4b08      	ldr	r3, [pc, #32]	; (8009e0c <_sbrk+0x64>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	4a06      	ldr	r2, [pc, #24]	; (8009e0c <_sbrk+0x64>)
 8009df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	371c      	adds	r7, #28
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	20050000 	.word	0x20050000
 8009e08:	00000400 	.word	0x00000400
 8009e0c:	2000340c 	.word	0x2000340c
 8009e10:	2000b758 	.word	0x2000b758
 8009e14:	2000b750 	.word	0x2000b750

08009e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <SystemInit+0x20>)
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e22:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <SystemInit+0x20>)
 8009e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e2c:	bf00      	nop
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	e000ed00 	.word	0xe000ed00

08009e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009e40:	f7ff ffea 	bl	8009e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009e44:	480c      	ldr	r0, [pc, #48]	; (8009e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009e46:	490d      	ldr	r1, [pc, #52]	; (8009e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009e48:	4a0d      	ldr	r2, [pc, #52]	; (8009e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e4c:	e002      	b.n	8009e54 <LoopCopyDataInit>

08009e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e52:	3304      	adds	r3, #4

08009e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e58:	d3f9      	bcc.n	8009e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e5a:	4a0a      	ldr	r2, [pc, #40]	; (8009e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009e5c:	4c0a      	ldr	r4, [pc, #40]	; (8009e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e60:	e001      	b.n	8009e66 <LoopFillZerobss>

08009e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e64:	3204      	adds	r2, #4

08009e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e68:	d3fb      	bcc.n	8009e62 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8009e6a:	f010 fb77 	bl	801a55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e6e:	f7f7 f8e7 	bl	8001040 <main>
  bx  lr    
 8009e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009e74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8009e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e7c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8009e80:	0801fdf0 	.word	0x0801fdf0
  ldr r2, =_sbss
 8009e84:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8009e88:	2000b758 	.word	0x2000b758

08009e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e8c:	e7fe      	b.n	8009e8c <ADC_IRQHandler>

08009e8e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <LAN8742_RegisterBusIO+0x28>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d007      	beq.n	8009eb6 <LAN8742_RegisterBusIO+0x28>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <LAN8742_RegisterBusIO+0x28>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eba:	e014      	b.n	8009ee6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d139      	bne.n	8009f82 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8009f22:	2300      	movs	r3, #0
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	e01c      	b.n	8009f62 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f107 020c 	add.w	r2, r7, #12
 8009f30:	2112      	movs	r1, #18
 8009f32:	6978      	ldr	r0, [r7, #20]
 8009f34:	4798      	blx	r3
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	da03      	bge.n	8009f44 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8009f3c:	f06f 0304 	mvn.w	r3, #4
 8009f40:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8009f42:	e00b      	b.n	8009f5c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d105      	bne.n	8009f5c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	613b      	str	r3, [r7, #16]
         break;
 8009f5a:	e005      	b.n	8009f68 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b1f      	cmp	r3, #31
 8009f66:	d9df      	bls.n	8009f28 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b1f      	cmp	r3, #31
 8009f6e:	d902      	bls.n	8009f76 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8009f70:	f06f 0302 	mvn.w	r3, #2
 8009f74:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8009f82:	693b      	ldr	r3, [r7, #16]
 }
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	6810      	ldr	r0, [r2, #0]
 8009fa0:	f107 020c 	add.w	r2, r7, #12
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4798      	blx	r3
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da02      	bge.n	8009fb4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8009fae:	f06f 0304 	mvn.w	r3, #4
 8009fb2:	e06e      	b.n	800a092 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6810      	ldr	r0, [r2, #0]
 8009fbc:	f107 020c 	add.w	r2, r7, #12
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	4798      	blx	r3
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da02      	bge.n	8009fd0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8009fca:	f06f 0304 	mvn.w	r3, #4
 8009fce:	e060      	b.n	800a092 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e059      	b.n	800a092 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6810      	ldr	r0, [r2, #0]
 8009fe6:	f107 020c 	add.w	r2, r7, #12
 8009fea:	2100      	movs	r1, #0
 8009fec:	4798      	blx	r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da02      	bge.n	8009ffa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8009ff4:	f06f 0304 	mvn.w	r3, #4
 8009ff8:	e04b      	b.n	800a092 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d11b      	bne.n	800a03c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d006      	beq.n	800a01c <LAN8742_GetLinkState+0x90>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800a018:	2302      	movs	r3, #2
 800a01a:	e03a      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800a026:	2303      	movs	r3, #3
 800a028:	e033      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800a034:	2304      	movs	r3, #4
 800a036:	e02c      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800a038:	2305      	movs	r3, #5
 800a03a:	e02a      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6810      	ldr	r0, [r2, #0]
 800a044:	f107 020c 	add.w	r2, r7, #12
 800a048:	211f      	movs	r1, #31
 800a04a:	4798      	blx	r3
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	da02      	bge.n	800a058 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800a052:	f06f 0304 	mvn.w	r3, #4
 800a056:	e01c      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800a062:	2306      	movs	r3, #6
 800a064:	e015      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f003 031c 	and.w	r3, r3, #28
 800a06c:	2b18      	cmp	r3, #24
 800a06e:	d101      	bne.n	800a074 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800a070:	2302      	movs	r3, #2
 800a072:	e00e      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 031c 	and.w	r3, r3, #28
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	d101      	bne.n	800a082 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800a07e:	2303      	movs	r3, #3
 800a080:	e007      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f003 031c 	and.w	r3, r3, #28
 800a088:	2b14      	cmp	r3, #20
 800a08a:	d101      	bne.n	800a090 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800a08c:	2304      	movs	r3, #4
 800a08e:	e000      	b.n	800a092 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800a090:	2305      	movs	r3, #5
    }
  }
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a09e:	2003      	movs	r0, #3
 800a0a0:	f000 f8f9 	bl	800a296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a0a4:	200f      	movs	r0, #15
 800a0a6:	f7ff fd59 	bl	8009b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a0aa:	f7ff fcd3 	bl	8009a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a0b8:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <HAL_IncTick+0x20>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <HAL_IncTick+0x24>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	4a04      	ldr	r2, [pc, #16]	; (800a0d8 <HAL_IncTick+0x24>)
 800a0c6:	6013      	str	r3, [r2, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000020 	.word	0x20000020
 800a0d8:	20003410 	.word	0x20003410

0800a0dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  return uwTick;
 800a0e0:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <HAL_GetTick+0x14>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20003410 	.word	0x20003410

0800a0f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a0fc:	f7ff ffee 	bl	800a0dc <HAL_GetTick>
 800a100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a10c:	d005      	beq.n	800a11a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a10e:	4b0a      	ldr	r3, [pc, #40]	; (800a138 <HAL_Delay+0x44>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a11a:	bf00      	nop
 800a11c:	f7ff ffde 	bl	800a0dc <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d8f7      	bhi.n	800a11c <HAL_Delay+0x28>
  {
  }
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000020 	.word	0x20000020

0800a13c <__NVIC_SetPriorityGrouping>:
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a14c:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <__NVIC_SetPriorityGrouping+0x40>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a158:	4013      	ands	r3, r2
 800a15a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <__NVIC_SetPriorityGrouping+0x44>)
 800a166:	4313      	orrs	r3, r2
 800a168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a16a:	4a04      	ldr	r2, [pc, #16]	; (800a17c <__NVIC_SetPriorityGrouping+0x40>)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	60d3      	str	r3, [r2, #12]
}
 800a170:	bf00      	nop
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	e000ed00 	.word	0xe000ed00
 800a180:	05fa0000 	.word	0x05fa0000

0800a184 <__NVIC_GetPriorityGrouping>:
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a188:	4b04      	ldr	r3, [pc, #16]	; (800a19c <__NVIC_GetPriorityGrouping+0x18>)
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	0a1b      	lsrs	r3, r3, #8
 800a18e:	f003 0307 	and.w	r3, r3, #7
}
 800a192:	4618      	mov	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	e000ed00 	.word	0xe000ed00

0800a1a0 <__NVIC_EnableIRQ>:
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	db0b      	blt.n	800a1ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	f003 021f 	and.w	r2, r3, #31
 800a1b8:	4907      	ldr	r1, [pc, #28]	; (800a1d8 <__NVIC_EnableIRQ+0x38>)
 800a1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a1ca:	bf00      	nop
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	e000e100 	.word	0xe000e100

0800a1dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	db0a      	blt.n	800a206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	490c      	ldr	r1, [pc, #48]	; (800a228 <__NVIC_SetPriority+0x4c>)
 800a1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1fa:	0112      	lsls	r2, r2, #4
 800a1fc:	b2d2      	uxtb	r2, r2
 800a1fe:	440b      	add	r3, r1
 800a200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a204:	e00a      	b.n	800a21c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4908      	ldr	r1, [pc, #32]	; (800a22c <__NVIC_SetPriority+0x50>)
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	3b04      	subs	r3, #4
 800a214:	0112      	lsls	r2, r2, #4
 800a216:	b2d2      	uxtb	r2, r2
 800a218:	440b      	add	r3, r1
 800a21a:	761a      	strb	r2, [r3, #24]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	e000e100 	.word	0xe000e100
 800a22c:	e000ed00 	.word	0xe000ed00

0800a230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a230:	b480      	push	{r7}
 800a232:	b089      	sub	sp, #36	; 0x24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	f1c3 0307 	rsb	r3, r3, #7
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	bf28      	it	cs
 800a24e:	2304      	movcs	r3, #4
 800a250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	3304      	adds	r3, #4
 800a256:	2b06      	cmp	r3, #6
 800a258:	d902      	bls.n	800a260 <NVIC_EncodePriority+0x30>
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	3b03      	subs	r3, #3
 800a25e:	e000      	b.n	800a262 <NVIC_EncodePriority+0x32>
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43da      	mvns	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	401a      	ands	r2, r3
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	fa01 f303 	lsl.w	r3, r1, r3
 800a282:	43d9      	mvns	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a288:	4313      	orrs	r3, r2
         );
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3724      	adds	r7, #36	; 0x24
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff ff4c 	bl	800a13c <__NVIC_SetPriorityGrouping>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2be:	f7ff ff61 	bl	800a184 <__NVIC_GetPriorityGrouping>
 800a2c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	6978      	ldr	r0, [r7, #20]
 800a2ca:	f7ff ffb1 	bl	800a230 <NVIC_EncodePriority>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff ff80 	bl	800a1dc <__NVIC_SetPriority>
}
 800a2dc:	bf00      	nop
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a2ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff ff54 	bl	800a1a0 <__NVIC_EnableIRQ>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e086      	b.n	800a420 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2223      	movs	r2, #35	; 0x23
 800a320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 fce9 	bl	800dcfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a32a:	4b3f      	ldr	r3, [pc, #252]	; (800a428 <HAL_ETH_Init+0x128>)
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	4a3e      	ldr	r2, [pc, #248]	; (800a428 <HAL_ETH_Init+0x128>)
 800a330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a334:	6453      	str	r3, [r2, #68]	; 0x44
 800a336:	4b3c      	ldr	r3, [pc, #240]	; (800a428 <HAL_ETH_Init+0x128>)
 800a338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a33e:	60bb      	str	r3, [r7, #8]
 800a340:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a342:	4b3a      	ldr	r3, [pc, #232]	; (800a42c <HAL_ETH_Init+0x12c>)
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4a39      	ldr	r2, [pc, #228]	; (800a42c <HAL_ETH_Init+0x12c>)
 800a348:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a34c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <HAL_ETH_Init+0x12c>)
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	4935      	ldr	r1, [pc, #212]	; (800a42c <HAL_ETH_Init+0x12c>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800a35c:	4b33      	ldr	r3, [pc, #204]	; (800a42c <HAL_ETH_Init+0x12c>)
 800a35e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6812      	ldr	r2, [r2, #0]
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a378:	f7ff feb0 	bl	800a0dc <HAL_GetTick>
 800a37c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a37e:	e011      	b.n	800a3a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a380:	f7ff feac 	bl	800a0dc <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a38e:	d909      	bls.n	800a3a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2204      	movs	r2, #4
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	22e0      	movs	r2, #224	; 0xe0
 800a39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e03d      	b.n	800a420 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e4      	bne.n	800a380 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fd58 	bl	800ae6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fe03 	bl	800afc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fe59 	bl	800b07a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fdc1 	bl	800af58 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800a3e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <HAL_ETH_Init+0x130>)
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800a40a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2210      	movs	r2, #16
 800a41a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	40023800 	.word	0x40023800
 800a42c:	40013800 	.word	0x40013800
 800a430:	00020060 	.word	0x00020060

0800a434 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a442:	2b10      	cmp	r3, #16
 800a444:	d150      	bne.n	800a4e8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2223      	movs	r2, #35	; 0x23
 800a44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2204      	movs	r2, #4
 800a452:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f939 	bl	800a6cc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0208 	orr.w	r2, r2, #8
 800a468:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a472:	2001      	movs	r0, #1
 800a474:	f7ff fe3e 	bl	800a0f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0204 	orr.w	r2, r2, #4
 800a48e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a498:	2001      	movs	r0, #1
 800a49a:	f7ff fe2b 	bl	800a0f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fb7c 	bl	800aba4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	6812      	ldr	r2, [r2, #0]
 800a4ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4c2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	f043 0302 	orr.w	r3, r3, #2
 800a4d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4da:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2223      	movs	r2, #35	; 0x23
 800a4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
  }
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a500:	2b23      	cmp	r3, #35	; 0x23
 800a502:	d14a      	bne.n	800a59a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2223      	movs	r2, #35	; 0x23
 800a508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a51e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a522:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	f023 0302 	bic.w	r3, r3, #2
 800a536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a53a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0204 	bic.w	r2, r2, #4
 800a54a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a554:	2001      	movs	r0, #1
 800a556:	f7ff fdcd 	bl	800a0f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb1e 	bl	800aba4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f022 0208 	bic.w	r2, r2, #8
 800a576:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a580:	2001      	movs	r0, #1
 800a582:	f7ff fdb7 	bl	800a0f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2210      	movs	r2, #16
 800a592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d109      	bne.n	800a5ca <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5bc:	f043 0201 	orr.w	r2, r3, #1
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e07c      	b.n	800a6c4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5d0:	2b23      	cmp	r3, #35	; 0x23
 800a5d2:	d176      	bne.n	800a6c2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 fdbd 	bl	800b158 <ETH_Prepare_Tx_Descriptors>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ea:	f043 0202 	orr.w	r2, r3, #2
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e065      	b.n	800a6c4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a5f8:	f3bf 8f4f 	dsb	sy
}
 800a5fc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3206      	adds	r2, #6
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	629a      	str	r2, [r3, #40]	; 0x28
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d904      	bls.n	800a628 <HAL_ETH_Transmit+0x84>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	1f1a      	subs	r2, r3, #4
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3106      	adds	r1, #6
 800a634:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a63c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800a63e:	f7ff fd4d 	bl	800a0dc <HAL_GetTick>
 800a642:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a644:	e037      	b.n	800a6b6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d011      	beq.n	800a67c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65e:	f043 0208 	orr.w	r2, r3, #8
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a670:	695a      	ldr	r2, [r3, #20]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e023      	b.n	800a6c4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a682:	d018      	beq.n	800a6b6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a684:	f7ff fd2a 	bl	800a0dc <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d302      	bcc.n	800a69a <HAL_ETH_Transmit+0xf6>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10d      	bne.n	800a6b6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a0:	f043 0204 	orr.w	r2, r3, #4
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800a6b0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e006      	b.n	800a6c4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dbc3      	blt.n	800a646 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69fa      	ldr	r2, [r7, #28]
 800a6e6:	3212      	adds	r2, #18
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800a6f4:	e042      	b.n	800a77c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d112      	bne.n	800a724 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800a6fe:	f107 0308 	add.w	r3, r7, #8
 800a702:	4618      	mov	r0, r3
 800a704:	f003 fc8c 	bl	800e020 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	74fb      	strb	r3, [r7, #19]
 800a712:	e007      	b.n	800a724 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	461a      	mov	r2, r3
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	461a      	mov	r2, r3
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800a724:	7cfb      	ldrb	r3, [r7, #19]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d028      	beq.n	800a77c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695a      	ldr	r2, [r3, #20]
 800a736:	4b26      	ldr	r3, [pc, #152]	; (800a7d0 <ETH_UpdateDescriptor+0x104>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	6053      	str	r3, [r2, #4]
 800a73e:	e005      	b.n	800a74c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	2b03      	cmp	r3, #3
 800a762:	d902      	bls.n	800a76a <ETH_UpdateDescriptor+0x9e>
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	3b04      	subs	r3, #4
 800a768:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69fa      	ldr	r2, [r7, #28]
 800a76e:	3212      	adds	r2, #18
 800a770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a774:	617b      	str	r3, [r7, #20]
      desccount--;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	3b01      	subs	r3, #1
 800a77a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <ETH_UpdateDescriptor+0xbc>
 800a782:	7cfb      	ldrb	r3, [r7, #19]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1b6      	bne.n	800a6f6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d01a      	beq.n	800a7c8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	3301      	adds	r3, #1
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800a79c:	f3bf 8f5f 	dmb	sy
}
 800a7a0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6919      	ldr	r1, [r3, #16]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	18ca      	adds	r2, r1, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ba:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69fa      	ldr	r2, [r7, #28]
 800a7c0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800a7c8:	bf00      	nop
 800a7ca:	3720      	adds	r7, #32
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	80004000 	.word	0x80004000

0800a7d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f003 031c 	and.w	r3, r3, #28
 800a7f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	02db      	lsls	r3, r3, #11
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	019b      	lsls	r3, r3, #6
 800a802:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f023 0302 	bic.w	r3, r3, #2
 800a812:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800a824:	f7ff fc5a 	bl	800a0dc <HAL_GetTick>
 800a828:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a82a:	e00d      	b.n	800a848 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800a82c:	f7ff fc56 	bl	800a0dc <HAL_GetTick>
 800a830:	4602      	mov	r2, r0
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a83a:	d301      	bcc.n	800a840 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e010      	b.n	800a862 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1ec      	bne.n	800a82c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
 800a876:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f003 031c 	and.w	r3, r3, #28
 800a886:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	02db      	lsls	r3, r3, #11
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4313      	orrs	r3, r2
 800a892:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	019b      	lsls	r3, r3, #6
 800a898:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8c4:	f7ff fc0a 	bl	800a0dc <HAL_GetTick>
 800a8c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a8ca:	e00d      	b.n	800a8e8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800a8cc:	f7ff fc06 	bl	800a0dc <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8da:	d301      	bcc.n	800a8e0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e009      	b.n	800a8f4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1ec      	bne.n	800a8cc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e0e6      	b.n	800aade <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf14      	ite	ne
 800a91e:	2301      	movne	r3, #1
 800a920:	2300      	moveq	r3, #0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	461a      	mov	r2, r3
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a944:	2b00      	cmp	r3, #0
 800a946:	bf0c      	ite	eq
 800a948:	2301      	moveq	r3, #1
 800a94a:	2300      	movne	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800a960:	2b00      	cmp	r3, #0
 800a962:	bf14      	ite	ne
 800a964:	2301      	movne	r3, #1
 800a966:	2300      	moveq	r3, #0
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bf0c      	ite	eq
 800a97e:	2301      	moveq	r3, #1
 800a980:	2300      	movne	r3, #0
 800a982:	b2db      	uxtb	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a994:	2b00      	cmp	r3, #0
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	bf0c      	ite	eq
 800a9ce:	2301      	moveq	r3, #1
 800a9d0:	2300      	movne	r3, #0
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bf0c      	ite	eq
 800a9e8:	2301      	moveq	r3, #1
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bf14      	ite	ne
 800aa02:	2301      	movne	r3, #1
 800aa04:	2300      	moveq	r3, #0
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	461a      	mov	r2, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bf14      	ite	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	2300      	moveq	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	461a      	mov	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bf14      	ite	ne
 800aa44:	2301      	movne	r3, #1
 800aa46:	2300      	moveq	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bf14      	ite	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	2300      	moveq	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf14      	ite	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	2300      	moveq	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf14      	ite	ne
 800aace:	2301      	movne	r3, #1
 800aad0:	2300      	moveq	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e00b      	b.n	800ab16 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab04:	2b10      	cmp	r3, #16
 800ab06:	d105      	bne.n	800ab14 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f870 	bl	800abf0 <ETH_SetMACConfig>

    return HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	e000      	b.n	800ab16 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
  }
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 031c 	bic.w	r3, r3, #28
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800ab38:	f001 faf6 	bl	800c128 <HAL_RCC_GetHCLKFreq>
 800ab3c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4a14      	ldr	r2, [pc, #80]	; (800ab94 <HAL_ETH_SetMDIOClockRange+0x74>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d804      	bhi.n	800ab50 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f043 0308 	orr.w	r3, r3, #8
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e019      	b.n	800ab84 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a11      	ldr	r2, [pc, #68]	; (800ab98 <HAL_ETH_SetMDIOClockRange+0x78>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d204      	bcs.n	800ab62 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f043 030c 	orr.w	r3, r3, #12
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	e010      	b.n	800ab84 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	4a0d      	ldr	r2, [pc, #52]	; (800ab9c <HAL_ETH_SetMDIOClockRange+0x7c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d90c      	bls.n	800ab84 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4a0c      	ldr	r2, [pc, #48]	; (800aba0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d804      	bhi.n	800ab7c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f043 0304 	orr.w	r3, r3, #4
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e003      	b.n	800ab84 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f043 0310 	orr.w	r3, r3, #16
 800ab82:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	611a      	str	r2, [r3, #16]
}
 800ab8c:	bf00      	nop
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	02160ebf 	.word	0x02160ebf
 800ab98:	03938700 	.word	0x03938700
 800ab9c:	05f5e0ff 	.word	0x05f5e0ff
 800aba0:	08f0d17f 	.word	0x08f0d17f

0800aba4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6812      	ldr	r2, [r2, #0]
 800abbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abc6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800abd4:	2001      	movs	r0, #1
 800abd6:	f7ff fa8d 	bl	800a0f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abe4:	6193      	str	r3, [r2, #24]
}
 800abe6:	bf00      	nop
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4b53      	ldr	r3, [pc, #332]	; (800ad54 <ETH_SetMACConfig+0x164>)
 800ac06:	4013      	ands	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	7b9b      	ldrb	r3, [r3, #14]
 800ac0e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	7c12      	ldrb	r2, [r2, #16]
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d102      	bne.n	800ac1e <ETH_SetMACConfig+0x2e>
 800ac18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ac1c:	e000      	b.n	800ac20 <ETH_SetMACConfig+0x30>
 800ac1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800ac20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	7c52      	ldrb	r2, [r2, #17]
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	d102      	bne.n	800ac30 <ETH_SetMACConfig+0x40>
 800ac2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ac2e:	e000      	b.n	800ac32 <ETH_SetMACConfig+0x42>
 800ac30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ac32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800ac38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	7fdb      	ldrb	r3, [r3, #31]
 800ac3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800ac40:	431a      	orrs	r2, r3
                        macconf->Speed |
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ac46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	7f92      	ldrb	r2, [r2, #30]
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	d102      	bne.n	800ac56 <ETH_SetMACConfig+0x66>
 800ac50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ac54:	e000      	b.n	800ac58 <ETH_SetMACConfig+0x68>
 800ac56:	2200      	movs	r2, #0
                        macconf->Speed |
 800ac58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	7f1b      	ldrb	r3, [r3, #28]
 800ac5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800ac60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ac66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	791b      	ldrb	r3, [r3, #4]
 800ac6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800ac6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ac76:	2a00      	cmp	r2, #0
 800ac78:	d102      	bne.n	800ac80 <ETH_SetMACConfig+0x90>
 800ac7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac7e:	e000      	b.n	800ac82 <ETH_SetMACConfig+0x92>
 800ac80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ac82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	7bdb      	ldrb	r3, [r3, #15]
 800ac88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ac8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ac90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800acb2:	2001      	movs	r0, #1
 800acb4:	f7ff fa1e 	bl	800a0f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f64f 7341 	movw	r3, #65345	; 0xff41
 800acce:	4013      	ands	r3, r2
 800acd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800acde:	2a00      	cmp	r2, #0
 800ace0:	d101      	bne.n	800ace6 <ETH_SetMACConfig+0xf6>
 800ace2:	2280      	movs	r2, #128	; 0x80
 800ace4:	e000      	b.n	800ace8 <ETH_SetMACConfig+0xf8>
 800ace6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800ace8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800acee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800acf6:	2a01      	cmp	r2, #1
 800acf8:	d101      	bne.n	800acfe <ETH_SetMACConfig+0x10e>
 800acfa:	2208      	movs	r2, #8
 800acfc:	e000      	b.n	800ad00 <ETH_SetMACConfig+0x110>
 800acfe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800ad00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800ad08:	2a01      	cmp	r2, #1
 800ad0a:	d101      	bne.n	800ad10 <ETH_SetMACConfig+0x120>
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	e000      	b.n	800ad12 <ETH_SetMACConfig+0x122>
 800ad10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800ad12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800ad1a:	2a01      	cmp	r2, #1
 800ad1c:	d101      	bne.n	800ad22 <ETH_SetMACConfig+0x132>
 800ad1e:	2202      	movs	r2, #2
 800ad20:	e000      	b.n	800ad24 <ETH_SetMACConfig+0x134>
 800ad22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800ad24:	4313      	orrs	r3, r2
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	f7ff f9d9 	bl	800a0f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	619a      	str	r2, [r3, #24]
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	fd20810f 	.word	0xfd20810f

0800ad58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	4b3d      	ldr	r3, [pc, #244]	; (800ae68 <ETH_SetDMAConfig+0x110>)
 800ad72:	4013      	ands	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	7b1b      	ldrb	r3, [r3, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <ETH_SetDMAConfig+0x2c>
 800ad7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ad82:	e000      	b.n	800ad86 <ETH_SetDMAConfig+0x2e>
 800ad84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	7b5b      	ldrb	r3, [r3, #13]
 800ad8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800ad8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	7f52      	ldrb	r2, [r2, #29]
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	d102      	bne.n	800ad9c <ETH_SetDMAConfig+0x44>
 800ad96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ad9a:	e000      	b.n	800ad9e <ETH_SetDMAConfig+0x46>
 800ad9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800ad9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	7b9b      	ldrb	r3, [r3, #14]
 800ada4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800ada6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800adac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	7f1b      	ldrb	r3, [r3, #28]
 800adb2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800adb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	7f9b      	ldrb	r3, [r3, #30]
 800adba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800adbc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800adc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800adca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800adcc:	4313      	orrs	r3, r2
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4313      	orrs	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800addc:	461a      	mov	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800adee:	2001      	movs	r0, #1
 800adf0:	f7ff f980 	bl	800a0f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfc:	461a      	mov	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	791b      	ldrb	r3, [r3, #4]
 800ae06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ae0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800ae12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800ae18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ae20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800ae22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800ae2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800ae30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6812      	ldr	r2, [r2, #0]
 800ae36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ae4c:	2001      	movs	r0, #1
 800ae4e:	f7ff f951 	bl	800a0f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6013      	str	r3, [r2, #0]
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	f8de3f23 	.word	0xf8de3f23

0800ae6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b0a6      	sub	sp, #152	; 0x98
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800ae80:	2300      	movs	r3, #0
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800aece:	2300      	movs	r3, #0
 800aed0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800aed4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aed8:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800aeda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aede:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800aee6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fe7f 	bl	800abf0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800aef6:	2301      	movs	r3, #1
 800aef8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800aefa:	2301      	movs	r3, #1
 800aefc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800af00:	2301      	movs	r3, #1
 800af02:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800af04:	2300      	movs	r3, #0
 800af06:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800af14:	2300      	movs	r3, #0
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800af1e:	2301      	movs	r3, #1
 800af20:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800af22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800af28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af2c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800af2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af32:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff ff05 	bl	800ad58 <ETH_SetDMAConfig>
}
 800af4e:	bf00      	nop
 800af50:	3798      	adds	r7, #152	; 0x98
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3305      	adds	r3, #5
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	3204      	adds	r2, #4
 800af70:	7812      	ldrb	r2, [r2, #0]
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <ETH_MACAddressConfig+0x68>)
 800af7a:	4413      	add	r3, r2
 800af7c:	461a      	mov	r2, r3
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3303      	adds	r3, #3
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	061a      	lsls	r2, r3, #24
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3302      	adds	r3, #2
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	041b      	lsls	r3, r3, #16
 800af92:	431a      	orrs	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3301      	adds	r3, #1
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	021b      	lsls	r3, r3, #8
 800af9c:	4313      	orrs	r3, r2
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	7812      	ldrb	r2, [r2, #0]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <ETH_MACAddressConfig+0x6c>)
 800afaa:	4413      	add	r3, r2
 800afac:	461a      	mov	r2, r3
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	6013      	str	r3, [r2, #0]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40028040 	.word	0x40028040
 800afc4:	40028044 	.word	0x40028044

0800afc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e03e      	b.n	800b054 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68d9      	ldr	r1, [r3, #12]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	440b      	add	r3, r1
 800afe6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2200      	movs	r2, #0
 800aff2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2200      	movs	r2, #0
 800affe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	3206      	adds	r2, #6
 800b008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d80c      	bhi.n	800b038 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68d9      	ldr	r1, [r3, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	440b      	add	r3, r1
 800b030:	461a      	mov	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	60da      	str	r2, [r3, #12]
 800b036:	e004      	b.n	800b042 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	461a      	mov	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b03      	cmp	r3, #3
 800b058:	d9bd      	bls.n	800afd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06c:	611a      	str	r2, [r3, #16]
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	e048      	b.n	800b11a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6919      	ldr	r1, [r3, #16]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	440b      	add	r3, r1
 800b098:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800b0de:	68b9      	ldr	r1, [r7, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	3212      	adds	r2, #18
 800b0e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d80c      	bhi.n	800b10a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6919      	ldr	r1, [r3, #16]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	440b      	add	r3, r1
 800b102:	461a      	mov	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	60da      	str	r2, [r3, #12]
 800b108:	e004      	b.n	800b114 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	461a      	mov	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d9b3      	bls.n	800b088 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691a      	ldr	r2, [r3, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b14a:	60da      	str	r2, [r3, #12]
}
 800b14c:	bf00      	nop
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800b158:	b480      	push	{r7}
 800b15a:	b091      	sub	sp, #68	; 0x44
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3318      	adds	r3, #24
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b182:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b19a:	d007      	beq.n	800b1ac <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e111      	b.n	800b3d4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	4b86      	ldr	r3, [pc, #536]	; (800b3e0 <ETH_Prepare_Tx_Descriptors+0x288>)
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ca:	6852      	ldr	r2, [r2, #4]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d008      	beq.n	800b1f0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	431a      	orrs	r2, r3
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800b232:	e082      	b.n	800b33a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d006      	beq.n	800b254 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	e005      	b.n	800b260 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b262:	3301      	adds	r3, #1
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d902      	bls.n	800b272 <ETH_Prepare_Tx_Descriptors+0x11a>
 800b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26e:	3b04      	subs	r3, #4
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b288:	d007      	beq.n	800b29a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28e:	3304      	adds	r3, #4
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d029      	beq.n	800b2ee <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2ac:	e019      	b.n	800b2e2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800b2ae:	f3bf 8f5f 	dmb	sy
}
 800b2b2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d902      	bls.n	800b2d2 <ETH_Prepare_Tx_Descriptors+0x17a>
 800b2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ce:	3b04      	subs	r3, #4
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	3301      	adds	r3, #1
 800b2e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d3e1      	bcc.n	800b2ae <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	e072      	b.n	800b3d4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	461a      	mov	r2, r3
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	4b32      	ldr	r3, [pc, #200]	; (800b3e0 <ETH_Prepare_Tx_Descriptors+0x288>)
 800b316:	4013      	ands	r3, r2
 800b318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31a:	6852      	ldr	r2, [r2, #4]
 800b31c:	431a      	orrs	r2, r3
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	3301      	adds	r3, #1
 800b326:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800b328:	f3bf 8f5f 	dmb	sy
}
 800b32c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f47f af78 	bne.w	800b234 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d006      	beq.n	800b358 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	e005      	b.n	800b364 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	6a3a      	ldr	r2, [r7, #32]
 800b374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b378:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800b37a:	f3bf 8f5f 	dmb	sy
}
 800b37e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b394:	3304      	adds	r3, #4
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3a0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a6:	613b      	str	r3, [r7, #16]
  return(result);
 800b3a8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f383 8810 	msr	PRIMASK, r3
}
 800b3b6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	4413      	add	r3, r2
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	629a      	str	r2, [r3, #40]	; 0x28
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	f383 8810 	msr	PRIMASK, r3
}
 800b3d0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3744      	adds	r7, #68	; 0x44
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	ffffe000 	.word	0xffffe000

0800b3e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b089      	sub	sp, #36	; 0x24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800b3fe:	2300      	movs	r3, #0
 800b400:	61fb      	str	r3, [r7, #28]
 800b402:	e175      	b.n	800b6f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b404:	2201      	movs	r2, #1
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	fa02 f303 	lsl.w	r3, r2, r3
 800b40c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	4013      	ands	r3, r2
 800b416:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	f040 8164 	bne.w	800b6ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d005      	beq.n	800b43a <HAL_GPIO_Init+0x56>
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d130      	bne.n	800b49c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	2203      	movs	r2, #3
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	43db      	mvns	r3, r3
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	4013      	ands	r3, r2
 800b450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	68da      	ldr	r2, [r3, #12]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	fa02 f303 	lsl.w	r3, r2, r3
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	4313      	orrs	r3, r2
 800b462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	69ba      	ldr	r2, [r7, #24]
 800b468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b470:	2201      	movs	r2, #1
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	fa02 f303 	lsl.w	r3, r2, r3
 800b478:	43db      	mvns	r3, r3
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	4013      	ands	r3, r2
 800b47e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	091b      	lsrs	r3, r3, #4
 800b486:	f003 0201 	and.w	r2, r3, #1
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	fa02 f303 	lsl.w	r3, r2, r3
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	4313      	orrs	r3, r2
 800b494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69ba      	ldr	r2, [r7, #24]
 800b49a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d017      	beq.n	800b4d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b8:	43db      	mvns	r3, r3
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	4013      	ands	r3, r2
 800b4be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4cc:	69ba      	ldr	r2, [r7, #24]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f003 0303 	and.w	r3, r3, #3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d123      	bne.n	800b52c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	08da      	lsrs	r2, r3, #3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3208      	adds	r2, #8
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	220f      	movs	r2, #15
 800b4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b500:	43db      	mvns	r3, r3
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	4013      	ands	r3, r2
 800b506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	f003 0307 	and.w	r3, r3, #7
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	fa02 f303 	lsl.w	r3, r2, r3
 800b518:	69ba      	ldr	r2, [r7, #24]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	08da      	lsrs	r2, r3, #3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3208      	adds	r2, #8
 800b526:	69b9      	ldr	r1, [r7, #24]
 800b528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	2203      	movs	r2, #3
 800b538:	fa02 f303 	lsl.w	r3, r2, r3
 800b53c:	43db      	mvns	r3, r3
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	4013      	ands	r3, r2
 800b542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f003 0203 	and.w	r2, r3, #3
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	fa02 f303 	lsl.w	r3, r2, r3
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4313      	orrs	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80be 	beq.w	800b6ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b56e:	4b66      	ldr	r3, [pc, #408]	; (800b708 <HAL_GPIO_Init+0x324>)
 800b570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b572:	4a65      	ldr	r2, [pc, #404]	; (800b708 <HAL_GPIO_Init+0x324>)
 800b574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b578:	6453      	str	r3, [r2, #68]	; 0x44
 800b57a:	4b63      	ldr	r3, [pc, #396]	; (800b708 <HAL_GPIO_Init+0x324>)
 800b57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b586:	4a61      	ldr	r2, [pc, #388]	; (800b70c <HAL_GPIO_Init+0x328>)
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	089b      	lsrs	r3, r3, #2
 800b58c:	3302      	adds	r3, #2
 800b58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b592:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	220f      	movs	r2, #15
 800b59e:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a2:	43db      	mvns	r3, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a58      	ldr	r2, [pc, #352]	; (800b710 <HAL_GPIO_Init+0x32c>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d037      	beq.n	800b622 <HAL_GPIO_Init+0x23e>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a57      	ldr	r2, [pc, #348]	; (800b714 <HAL_GPIO_Init+0x330>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d031      	beq.n	800b61e <HAL_GPIO_Init+0x23a>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a56      	ldr	r2, [pc, #344]	; (800b718 <HAL_GPIO_Init+0x334>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d02b      	beq.n	800b61a <HAL_GPIO_Init+0x236>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a55      	ldr	r2, [pc, #340]	; (800b71c <HAL_GPIO_Init+0x338>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d025      	beq.n	800b616 <HAL_GPIO_Init+0x232>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a54      	ldr	r2, [pc, #336]	; (800b720 <HAL_GPIO_Init+0x33c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d01f      	beq.n	800b612 <HAL_GPIO_Init+0x22e>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a53      	ldr	r2, [pc, #332]	; (800b724 <HAL_GPIO_Init+0x340>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d019      	beq.n	800b60e <HAL_GPIO_Init+0x22a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a52      	ldr	r2, [pc, #328]	; (800b728 <HAL_GPIO_Init+0x344>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d013      	beq.n	800b60a <HAL_GPIO_Init+0x226>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a51      	ldr	r2, [pc, #324]	; (800b72c <HAL_GPIO_Init+0x348>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00d      	beq.n	800b606 <HAL_GPIO_Init+0x222>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a50      	ldr	r2, [pc, #320]	; (800b730 <HAL_GPIO_Init+0x34c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <HAL_GPIO_Init+0x21e>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a4f      	ldr	r2, [pc, #316]	; (800b734 <HAL_GPIO_Init+0x350>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d101      	bne.n	800b5fe <HAL_GPIO_Init+0x21a>
 800b5fa:	2309      	movs	r3, #9
 800b5fc:	e012      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b5fe:	230a      	movs	r3, #10
 800b600:	e010      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b602:	2308      	movs	r3, #8
 800b604:	e00e      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b606:	2307      	movs	r3, #7
 800b608:	e00c      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b60a:	2306      	movs	r3, #6
 800b60c:	e00a      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b60e:	2305      	movs	r3, #5
 800b610:	e008      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b612:	2304      	movs	r3, #4
 800b614:	e006      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b616:	2303      	movs	r3, #3
 800b618:	e004      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e002      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b61e:	2301      	movs	r3, #1
 800b620:	e000      	b.n	800b624 <HAL_GPIO_Init+0x240>
 800b622:	2300      	movs	r3, #0
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	f002 0203 	and.w	r2, r2, #3
 800b62a:	0092      	lsls	r2, r2, #2
 800b62c:	4093      	lsls	r3, r2
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	4313      	orrs	r3, r2
 800b632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b634:	4935      	ldr	r1, [pc, #212]	; (800b70c <HAL_GPIO_Init+0x328>)
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	089b      	lsrs	r3, r3, #2
 800b63a:	3302      	adds	r3, #2
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b642:	4b3d      	ldr	r3, [pc, #244]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	43db      	mvns	r3, r3
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	4013      	ands	r3, r2
 800b650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d003      	beq.n	800b666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b666:	4a34      	ldr	r2, [pc, #208]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b66c:	4b32      	ldr	r3, [pc, #200]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	43db      	mvns	r3, r3
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	4013      	ands	r3, r2
 800b67a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b690:	4a29      	ldr	r2, [pc, #164]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b696:	4b28      	ldr	r3, [pc, #160]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	43db      	mvns	r3, r3
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b6ba:	4a1f      	ldr	r2, [pc, #124]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b6c0:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	43db      	mvns	r3, r3
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b6e4:	4a14      	ldr	r2, [pc, #80]	; (800b738 <HAL_GPIO_Init+0x354>)
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	61fb      	str	r3, [r7, #28]
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	2b0f      	cmp	r3, #15
 800b6f4:	f67f ae86 	bls.w	800b404 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3724      	adds	r7, #36	; 0x24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	40023800 	.word	0x40023800
 800b70c:	40013800 	.word	0x40013800
 800b710:	40020000 	.word	0x40020000
 800b714:	40020400 	.word	0x40020400
 800b718:	40020800 	.word	0x40020800
 800b71c:	40020c00 	.word	0x40020c00
 800b720:	40021000 	.word	0x40021000
 800b724:	40021400 	.word	0x40021400
 800b728:	40021800 	.word	0x40021800
 800b72c:	40021c00 	.word	0x40021c00
 800b730:	40022000 	.word	0x40022000
 800b734:	40022400 	.word	0x40022400
 800b738:	40013c00 	.word	0x40013c00

0800b73c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b740:	4b05      	ldr	r3, [pc, #20]	; (800b758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a04      	ldr	r2, [pc, #16]	; (800b758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b74a:	6013      	str	r3, [r2, #0]
}
 800b74c:	bf00      	nop
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40007000 	.word	0x40007000

0800b75c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b766:	4b23      	ldr	r3, [pc, #140]	; (800b7f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76a:	4a22      	ldr	r2, [pc, #136]	; (800b7f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b76c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b770:	6413      	str	r3, [r2, #64]	; 0x40
 800b772:	4b20      	ldr	r3, [pc, #128]	; (800b7f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b77e:	4b1e      	ldr	r3, [pc, #120]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a1d      	ldr	r2, [pc, #116]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b788:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b78a:	f7fe fca7 	bl	800a0dc <HAL_GetTick>
 800b78e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b790:	e009      	b.n	800b7a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b792:	f7fe fca3 	bl	800a0dc <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7a0:	d901      	bls.n	800b7a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e022      	b.n	800b7ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b2:	d1ee      	bne.n	800b792 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b7b4:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a0f      	ldr	r2, [pc, #60]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b7ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b7c0:	f7fe fc8c 	bl	800a0dc <HAL_GetTick>
 800b7c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b7c6:	e009      	b.n	800b7dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b7c8:	f7fe fc88 	bl	800a0dc <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7d6:	d901      	bls.n	800b7dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e007      	b.n	800b7ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7e8:	d1ee      	bne.n	800b7c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	40007000 	.word	0x40007000

0800b7fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b804:	2300      	movs	r3, #0
 800b806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e291      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 8087 	beq.w	800b92e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b820:	4b96      	ldr	r3, [pc, #600]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f003 030c 	and.w	r3, r3, #12
 800b828:	2b04      	cmp	r3, #4
 800b82a:	d00c      	beq.n	800b846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b82c:	4b93      	ldr	r3, [pc, #588]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f003 030c 	and.w	r3, r3, #12
 800b834:	2b08      	cmp	r3, #8
 800b836:	d112      	bne.n	800b85e <HAL_RCC_OscConfig+0x62>
 800b838:	4b90      	ldr	r3, [pc, #576]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b844:	d10b      	bne.n	800b85e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b846:	4b8d      	ldr	r3, [pc, #564]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d06c      	beq.n	800b92c <HAL_RCC_OscConfig+0x130>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d168      	bne.n	800b92c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e26b      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b866:	d106      	bne.n	800b876 <HAL_RCC_OscConfig+0x7a>
 800b868:	4b84      	ldr	r3, [pc, #528]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a83      	ldr	r2, [pc, #524]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	e02e      	b.n	800b8d4 <HAL_RCC_OscConfig+0xd8>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10c      	bne.n	800b898 <HAL_RCC_OscConfig+0x9c>
 800b87e:	4b7f      	ldr	r3, [pc, #508]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a7e      	ldr	r2, [pc, #504]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	4b7c      	ldr	r3, [pc, #496]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a7b      	ldr	r2, [pc, #492]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	e01d      	b.n	800b8d4 <HAL_RCC_OscConfig+0xd8>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8a0:	d10c      	bne.n	800b8bc <HAL_RCC_OscConfig+0xc0>
 800b8a2:	4b76      	ldr	r3, [pc, #472]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a75      	ldr	r2, [pc, #468]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	4b73      	ldr	r3, [pc, #460]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a72      	ldr	r2, [pc, #456]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	e00b      	b.n	800b8d4 <HAL_RCC_OscConfig+0xd8>
 800b8bc:	4b6f      	ldr	r3, [pc, #444]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a6e      	ldr	r2, [pc, #440]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	4b6c      	ldr	r3, [pc, #432]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a6b      	ldr	r2, [pc, #428]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d013      	beq.n	800b904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8dc:	f7fe fbfe 	bl	800a0dc <HAL_GetTick>
 800b8e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8e2:	e008      	b.n	800b8f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8e4:	f7fe fbfa 	bl	800a0dc <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b64      	cmp	r3, #100	; 0x64
 800b8f0:	d901      	bls.n	800b8f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e21f      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8f6:	4b61      	ldr	r3, [pc, #388]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0f0      	beq.n	800b8e4 <HAL_RCC_OscConfig+0xe8>
 800b902:	e014      	b.n	800b92e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b904:	f7fe fbea 	bl	800a0dc <HAL_GetTick>
 800b908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b90a:	e008      	b.n	800b91e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b90c:	f7fe fbe6 	bl	800a0dc <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b64      	cmp	r3, #100	; 0x64
 800b918:	d901      	bls.n	800b91e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e20b      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b91e:	4b57      	ldr	r3, [pc, #348]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f0      	bne.n	800b90c <HAL_RCC_OscConfig+0x110>
 800b92a:	e000      	b.n	800b92e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b92c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d069      	beq.n	800ba0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b93a:	4b50      	ldr	r3, [pc, #320]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f003 030c 	and.w	r3, r3, #12
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00b      	beq.n	800b95e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b946:	4b4d      	ldr	r3, [pc, #308]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 030c 	and.w	r3, r3, #12
 800b94e:	2b08      	cmp	r3, #8
 800b950:	d11c      	bne.n	800b98c <HAL_RCC_OscConfig+0x190>
 800b952:	4b4a      	ldr	r3, [pc, #296]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d116      	bne.n	800b98c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b95e:	4b47      	ldr	r3, [pc, #284]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0302 	and.w	r3, r3, #2
 800b966:	2b00      	cmp	r3, #0
 800b968:	d005      	beq.n	800b976 <HAL_RCC_OscConfig+0x17a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d001      	beq.n	800b976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e1df      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b976:	4b41      	ldr	r3, [pc, #260]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	493d      	ldr	r1, [pc, #244]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b986:	4313      	orrs	r3, r2
 800b988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b98a:	e040      	b.n	800ba0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d023      	beq.n	800b9dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b994:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a38      	ldr	r2, [pc, #224]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9a0:	f7fe fb9c 	bl	800a0dc <HAL_GetTick>
 800b9a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9a6:	e008      	b.n	800b9ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9a8:	f7fe fb98 	bl	800a0dc <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e1bd      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9ba:	4b30      	ldr	r3, [pc, #192]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f0      	beq.n	800b9a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	4929      	ldr	r1, [pc, #164]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	600b      	str	r3, [r1, #0]
 800b9da:	e018      	b.n	800ba0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9dc:	4b27      	ldr	r3, [pc, #156]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800b9e2:	f023 0301 	bic.w	r3, r3, #1
 800b9e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e8:	f7fe fb78 	bl	800a0dc <HAL_GetTick>
 800b9ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9ee:	e008      	b.n	800ba02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9f0:	f7fe fb74 	bl	800a0dc <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d901      	bls.n	800ba02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e199      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba02:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f0      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d038      	beq.n	800ba8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d019      	beq.n	800ba56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba22:	4b16      	ldr	r3, [pc, #88]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba26:	4a15      	ldr	r2, [pc, #84]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba28:	f043 0301 	orr.w	r3, r3, #1
 800ba2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba2e:	f7fe fb55 	bl	800a0dc <HAL_GetTick>
 800ba32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba34:	e008      	b.n	800ba48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba36:	f7fe fb51 	bl	800a0dc <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d901      	bls.n	800ba48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e176      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d0f0      	beq.n	800ba36 <HAL_RCC_OscConfig+0x23a>
 800ba54:	e01a      	b.n	800ba8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba5a:	4a08      	ldr	r2, [pc, #32]	; (800ba7c <HAL_RCC_OscConfig+0x280>)
 800ba5c:	f023 0301 	bic.w	r3, r3, #1
 800ba60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba62:	f7fe fb3b 	bl	800a0dc <HAL_GetTick>
 800ba66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba68:	e00a      	b.n	800ba80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba6a:	f7fe fb37 	bl	800a0dc <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d903      	bls.n	800ba80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e15c      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
 800ba7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba80:	4b91      	ldr	r3, [pc, #580]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800ba82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1ee      	bne.n	800ba6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 80a4 	beq.w	800bbe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba9a:	4b8b      	ldr	r3, [pc, #556]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10d      	bne.n	800bac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800baa6:	4b88      	ldr	r3, [pc, #544]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	4a87      	ldr	r2, [pc, #540]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800baac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab0:	6413      	str	r3, [r2, #64]	; 0x40
 800bab2:	4b85      	ldr	r3, [pc, #532]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baba:	60bb      	str	r3, [r7, #8]
 800babc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800babe:	2301      	movs	r3, #1
 800bac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bac2:	4b82      	ldr	r3, [pc, #520]	; (800bccc <HAL_RCC_OscConfig+0x4d0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d118      	bne.n	800bb00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bace:	4b7f      	ldr	r3, [pc, #508]	; (800bccc <HAL_RCC_OscConfig+0x4d0>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a7e      	ldr	r2, [pc, #504]	; (800bccc <HAL_RCC_OscConfig+0x4d0>)
 800bad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bada:	f7fe faff 	bl	800a0dc <HAL_GetTick>
 800bade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bae0:	e008      	b.n	800baf4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bae2:	f7fe fafb 	bl	800a0dc <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	2b64      	cmp	r3, #100	; 0x64
 800baee:	d901      	bls.n	800baf4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e120      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800baf4:	4b75      	ldr	r3, [pc, #468]	; (800bccc <HAL_RCC_OscConfig+0x4d0>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0f0      	beq.n	800bae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d106      	bne.n	800bb16 <HAL_RCC_OscConfig+0x31a>
 800bb08:	4b6f      	ldr	r3, [pc, #444]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0c:	4a6e      	ldr	r2, [pc, #440]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb0e:	f043 0301 	orr.w	r3, r3, #1
 800bb12:	6713      	str	r3, [r2, #112]	; 0x70
 800bb14:	e02d      	b.n	800bb72 <HAL_RCC_OscConfig+0x376>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10c      	bne.n	800bb38 <HAL_RCC_OscConfig+0x33c>
 800bb1e:	4b6a      	ldr	r3, [pc, #424]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	4a69      	ldr	r2, [pc, #420]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	6713      	str	r3, [r2, #112]	; 0x70
 800bb2a:	4b67      	ldr	r3, [pc, #412]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2e:	4a66      	ldr	r2, [pc, #408]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb30:	f023 0304 	bic.w	r3, r3, #4
 800bb34:	6713      	str	r3, [r2, #112]	; 0x70
 800bb36:	e01c      	b.n	800bb72 <HAL_RCC_OscConfig+0x376>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	2b05      	cmp	r3, #5
 800bb3e:	d10c      	bne.n	800bb5a <HAL_RCC_OscConfig+0x35e>
 800bb40:	4b61      	ldr	r3, [pc, #388]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb44:	4a60      	ldr	r2, [pc, #384]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb46:	f043 0304 	orr.w	r3, r3, #4
 800bb4a:	6713      	str	r3, [r2, #112]	; 0x70
 800bb4c:	4b5e      	ldr	r3, [pc, #376]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	4a5d      	ldr	r2, [pc, #372]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb52:	f043 0301 	orr.w	r3, r3, #1
 800bb56:	6713      	str	r3, [r2, #112]	; 0x70
 800bb58:	e00b      	b.n	800bb72 <HAL_RCC_OscConfig+0x376>
 800bb5a:	4b5b      	ldr	r3, [pc, #364]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	4a5a      	ldr	r2, [pc, #360]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb60:	f023 0301 	bic.w	r3, r3, #1
 800bb64:	6713      	str	r3, [r2, #112]	; 0x70
 800bb66:	4b58      	ldr	r3, [pc, #352]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6a:	4a57      	ldr	r2, [pc, #348]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb6c:	f023 0304 	bic.w	r3, r3, #4
 800bb70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d015      	beq.n	800bba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb7a:	f7fe faaf 	bl	800a0dc <HAL_GetTick>
 800bb7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb80:	e00a      	b.n	800bb98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb82:	f7fe faab 	bl	800a0dc <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d901      	bls.n	800bb98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e0ce      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb98:	4b4b      	ldr	r3, [pc, #300]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0ee      	beq.n	800bb82 <HAL_RCC_OscConfig+0x386>
 800bba4:	e014      	b.n	800bbd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bba6:	f7fe fa99 	bl	800a0dc <HAL_GetTick>
 800bbaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbac:	e00a      	b.n	800bbc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbae:	f7fe fa95 	bl	800a0dc <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e0b8      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbc4:	4b40      	ldr	r3, [pc, #256]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc8:	f003 0302 	and.w	r3, r3, #2
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1ee      	bne.n	800bbae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d105      	bne.n	800bbe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbd6:	4b3c      	ldr	r3, [pc, #240]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbda:	4a3b      	ldr	r2, [pc, #236]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bbdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80a4 	beq.w	800bd34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbec:	4b36      	ldr	r3, [pc, #216]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	f003 030c 	and.w	r3, r3, #12
 800bbf4:	2b08      	cmp	r3, #8
 800bbf6:	d06b      	beq.n	800bcd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d149      	bne.n	800bc94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc00:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a30      	ldr	r2, [pc, #192]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc0c:	f7fe fa66 	bl	800a0dc <HAL_GetTick>
 800bc10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc12:	e008      	b.n	800bc26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc14:	f7fe fa62 	bl	800a0dc <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d901      	bls.n	800bc26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e087      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc26:	4b28      	ldr	r3, [pc, #160]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1f0      	bne.n	800bc14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	69da      	ldr	r2, [r3, #28]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	019b      	lsls	r3, r3, #6
 800bc42:	431a      	orrs	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc48:	085b      	lsrs	r3, r3, #1
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	041b      	lsls	r3, r3, #16
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	061b      	lsls	r3, r3, #24
 800bc56:	4313      	orrs	r3, r2
 800bc58:	4a1b      	ldr	r2, [pc, #108]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc60:	4b19      	ldr	r3, [pc, #100]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a18      	ldr	r2, [pc, #96]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc6c:	f7fe fa36 	bl	800a0dc <HAL_GetTick>
 800bc70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc72:	e008      	b.n	800bc86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc74:	f7fe fa32 	bl	800a0dc <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d901      	bls.n	800bc86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e057      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc86:	4b10      	ldr	r3, [pc, #64]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0f0      	beq.n	800bc74 <HAL_RCC_OscConfig+0x478>
 800bc92:	e04f      	b.n	800bd34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc94:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a0b      	ldr	r2, [pc, #44]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bc9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca0:	f7fe fa1c 	bl	800a0dc <HAL_GetTick>
 800bca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bca6:	e008      	b.n	800bcba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bca8:	f7fe fa18 	bl	800a0dc <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d901      	bls.n	800bcba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e03d      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcba:	4b03      	ldr	r3, [pc, #12]	; (800bcc8 <HAL_RCC_OscConfig+0x4cc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f0      	bne.n	800bca8 <HAL_RCC_OscConfig+0x4ac>
 800bcc6:	e035      	b.n	800bd34 <HAL_RCC_OscConfig+0x538>
 800bcc8:	40023800 	.word	0x40023800
 800bccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bcd0:	4b1b      	ldr	r3, [pc, #108]	; (800bd40 <HAL_RCC_OscConfig+0x544>)
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d028      	beq.n	800bd30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d121      	bne.n	800bd30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d11a      	bne.n	800bd30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bd00:	4013      	ands	r3, r2
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d111      	bne.n	800bd30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd16:	085b      	lsrs	r3, r3, #1
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d107      	bne.n	800bd30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d001      	beq.n	800bd34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e000      	b.n	800bd36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	40023800 	.word	0x40023800

0800bd44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e0d0      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd5c:	4b6a      	ldr	r3, [pc, #424]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 030f 	and.w	r3, r3, #15
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d910      	bls.n	800bd8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd6a:	4b67      	ldr	r3, [pc, #412]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f023 020f 	bic.w	r2, r3, #15
 800bd72:	4965      	ldr	r1, [pc, #404]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd7a:	4b63      	ldr	r3, [pc, #396]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d001      	beq.n	800bd8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e0b8      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d020      	beq.n	800bdda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bda4:	4b59      	ldr	r3, [pc, #356]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	4a58      	ldr	r2, [pc, #352]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bdae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0308 	and.w	r3, r3, #8
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdbc:	4b53      	ldr	r3, [pc, #332]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	4a52      	ldr	r2, [pc, #328]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bdc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdc8:	4b50      	ldr	r3, [pc, #320]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	494d      	ldr	r1, [pc, #308]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d040      	beq.n	800be68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d107      	bne.n	800bdfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdee:	4b47      	ldr	r3, [pc, #284]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d115      	bne.n	800be26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e07f      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d107      	bne.n	800be16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be06:	4b41      	ldr	r3, [pc, #260]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e073      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be16:	4b3d      	ldr	r3, [pc, #244]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e06b      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be26:	4b39      	ldr	r3, [pc, #228]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f023 0203 	bic.w	r2, r3, #3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	4936      	ldr	r1, [pc, #216]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800be34:	4313      	orrs	r3, r2
 800be36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be38:	f7fe f950 	bl	800a0dc <HAL_GetTick>
 800be3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be3e:	e00a      	b.n	800be56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be40:	f7fe f94c 	bl	800a0dc <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be4e:	4293      	cmp	r3, r2
 800be50:	d901      	bls.n	800be56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e053      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be56:	4b2d      	ldr	r3, [pc, #180]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f003 020c 	and.w	r2, r3, #12
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	429a      	cmp	r2, r3
 800be66:	d1eb      	bne.n	800be40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be68:	4b27      	ldr	r3, [pc, #156]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 030f 	and.w	r3, r3, #15
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d210      	bcs.n	800be98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be76:	4b24      	ldr	r3, [pc, #144]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f023 020f 	bic.w	r2, r3, #15
 800be7e:	4922      	ldr	r1, [pc, #136]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	4313      	orrs	r3, r2
 800be84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be86:	4b20      	ldr	r3, [pc, #128]	; (800bf08 <HAL_RCC_ClockConfig+0x1c4>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d001      	beq.n	800be98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e032      	b.n	800befe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d008      	beq.n	800beb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bea4:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	4916      	ldr	r1, [pc, #88]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d009      	beq.n	800bed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bec2:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	490e      	ldr	r1, [pc, #56]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bed6:	f000 f821 	bl	800bf1c <HAL_RCC_GetSysClockFreq>
 800beda:	4602      	mov	r2, r0
 800bedc:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <HAL_RCC_ClockConfig+0x1c8>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	091b      	lsrs	r3, r3, #4
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	490a      	ldr	r1, [pc, #40]	; (800bf10 <HAL_RCC_ClockConfig+0x1cc>)
 800bee8:	5ccb      	ldrb	r3, [r1, r3]
 800beea:	fa22 f303 	lsr.w	r3, r2, r3
 800beee:	4a09      	ldr	r2, [pc, #36]	; (800bf14 <HAL_RCC_ClockConfig+0x1d0>)
 800bef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <HAL_RCC_ClockConfig+0x1d4>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fe30 	bl	8009b5c <HAL_InitTick>

  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	40023c00 	.word	0x40023c00
 800bf0c:	40023800 	.word	0x40023800
 800bf10:	0801fae4 	.word	0x0801fae4
 800bf14:	20000018 	.word	0x20000018
 800bf18:	2000001c 	.word	0x2000001c

0800bf1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf20:	b094      	sub	sp, #80	; 0x50
 800bf22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	647b      	str	r3, [r7, #68]	; 0x44
 800bf28:	2300      	movs	r3, #0
 800bf2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf34:	4b79      	ldr	r3, [pc, #484]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f003 030c 	and.w	r3, r3, #12
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d00d      	beq.n	800bf5c <HAL_RCC_GetSysClockFreq+0x40>
 800bf40:	2b08      	cmp	r3, #8
 800bf42:	f200 80e1 	bhi.w	800c108 <HAL_RCC_GetSysClockFreq+0x1ec>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <HAL_RCC_GetSysClockFreq+0x34>
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	d003      	beq.n	800bf56 <HAL_RCC_GetSysClockFreq+0x3a>
 800bf4e:	e0db      	b.n	800c108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf50:	4b73      	ldr	r3, [pc, #460]	; (800c120 <HAL_RCC_GetSysClockFreq+0x204>)
 800bf52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf54:	e0db      	b.n	800c10e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf56:	4b73      	ldr	r3, [pc, #460]	; (800c124 <HAL_RCC_GetSysClockFreq+0x208>)
 800bf58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf5a:	e0d8      	b.n	800c10e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf5c:	4b6f      	ldr	r3, [pc, #444]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bf66:	4b6d      	ldr	r3, [pc, #436]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d063      	beq.n	800c03a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf72:	4b6a      	ldr	r3, [pc, #424]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	099b      	lsrs	r3, r3, #6
 800bf78:	2200      	movs	r2, #0
 800bf7a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf84:	633b      	str	r3, [r7, #48]	; 0x30
 800bf86:	2300      	movs	r3, #0
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bf8e:	4622      	mov	r2, r4
 800bf90:	462b      	mov	r3, r5
 800bf92:	f04f 0000 	mov.w	r0, #0
 800bf96:	f04f 0100 	mov.w	r1, #0
 800bf9a:	0159      	lsls	r1, r3, #5
 800bf9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfa0:	0150      	lsls	r0, r2, #5
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	1a51      	subs	r1, r2, r1
 800bfaa:	6139      	str	r1, [r7, #16]
 800bfac:	4629      	mov	r1, r5
 800bfae:	eb63 0301 	sbc.w	r3, r3, r1
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	f04f 0200 	mov.w	r2, #0
 800bfb8:	f04f 0300 	mov.w	r3, #0
 800bfbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bfc0:	4659      	mov	r1, fp
 800bfc2:	018b      	lsls	r3, r1, #6
 800bfc4:	4651      	mov	r1, sl
 800bfc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfca:	4651      	mov	r1, sl
 800bfcc:	018a      	lsls	r2, r1, #6
 800bfce:	4651      	mov	r1, sl
 800bfd0:	ebb2 0801 	subs.w	r8, r2, r1
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	eb63 0901 	sbc.w	r9, r3, r1
 800bfda:	f04f 0200 	mov.w	r2, #0
 800bfde:	f04f 0300 	mov.w	r3, #0
 800bfe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bfea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bfee:	4690      	mov	r8, r2
 800bff0:	4699      	mov	r9, r3
 800bff2:	4623      	mov	r3, r4
 800bff4:	eb18 0303 	adds.w	r3, r8, r3
 800bff8:	60bb      	str	r3, [r7, #8]
 800bffa:	462b      	mov	r3, r5
 800bffc:	eb49 0303 	adc.w	r3, r9, r3
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	f04f 0200 	mov.w	r2, #0
 800c006:	f04f 0300 	mov.w	r3, #0
 800c00a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c00e:	4629      	mov	r1, r5
 800c010:	024b      	lsls	r3, r1, #9
 800c012:	4621      	mov	r1, r4
 800c014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c018:	4621      	mov	r1, r4
 800c01a:	024a      	lsls	r2, r1, #9
 800c01c:	4610      	mov	r0, r2
 800c01e:	4619      	mov	r1, r3
 800c020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c022:	2200      	movs	r2, #0
 800c024:	62bb      	str	r3, [r7, #40]	; 0x28
 800c026:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c02c:	f7f4 fdc6 	bl	8000bbc <__aeabi_uldivmod>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4613      	mov	r3, r2
 800c036:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c038:	e058      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c03a:	4b38      	ldr	r3, [pc, #224]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	099b      	lsrs	r3, r3, #6
 800c040:	2200      	movs	r2, #0
 800c042:	4618      	mov	r0, r3
 800c044:	4611      	mov	r1, r2
 800c046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c04a:	623b      	str	r3, [r7, #32]
 800c04c:	2300      	movs	r3, #0
 800c04e:	627b      	str	r3, [r7, #36]	; 0x24
 800c050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c054:	4642      	mov	r2, r8
 800c056:	464b      	mov	r3, r9
 800c058:	f04f 0000 	mov.w	r0, #0
 800c05c:	f04f 0100 	mov.w	r1, #0
 800c060:	0159      	lsls	r1, r3, #5
 800c062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c066:	0150      	lsls	r0, r2, #5
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4641      	mov	r1, r8
 800c06e:	ebb2 0a01 	subs.w	sl, r2, r1
 800c072:	4649      	mov	r1, r9
 800c074:	eb63 0b01 	sbc.w	fp, r3, r1
 800c078:	f04f 0200 	mov.w	r2, #0
 800c07c:	f04f 0300 	mov.w	r3, #0
 800c080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c08c:	ebb2 040a 	subs.w	r4, r2, sl
 800c090:	eb63 050b 	sbc.w	r5, r3, fp
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	00eb      	lsls	r3, r5, #3
 800c09e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0a2:	00e2      	lsls	r2, r4, #3
 800c0a4:	4614      	mov	r4, r2
 800c0a6:	461d      	mov	r5, r3
 800c0a8:	4643      	mov	r3, r8
 800c0aa:	18e3      	adds	r3, r4, r3
 800c0ac:	603b      	str	r3, [r7, #0]
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	eb45 0303 	adc.w	r3, r5, r3
 800c0b4:	607b      	str	r3, [r7, #4]
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	f04f 0300 	mov.w	r3, #0
 800c0be:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	028b      	lsls	r3, r1, #10
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	028a      	lsls	r2, r1, #10
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	61bb      	str	r3, [r7, #24]
 800c0da:	61fa      	str	r2, [r7, #28]
 800c0dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0e0:	f7f4 fd6c 	bl	8000bbc <__aeabi_uldivmod>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c0ec:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <HAL_RCC_GetSysClockFreq+0x200>)
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	0c1b      	lsrs	r3, r3, #16
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800c0fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c100:	fbb2 f3f3 	udiv	r3, r2, r3
 800c104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c106:	e002      	b.n	800c10e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <HAL_RCC_GetSysClockFreq+0x204>)
 800c10a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c10c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c110:	4618      	mov	r0, r3
 800c112:	3750      	adds	r7, #80	; 0x50
 800c114:	46bd      	mov	sp, r7
 800c116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c11a:	bf00      	nop
 800c11c:	40023800 	.word	0x40023800
 800c120:	00f42400 	.word	0x00f42400
 800c124:	007a1200 	.word	0x007a1200

0800c128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c128:	b480      	push	{r7}
 800c12a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c12c:	4b03      	ldr	r3, [pc, #12]	; (800c13c <HAL_RCC_GetHCLKFreq+0x14>)
 800c12e:	681b      	ldr	r3, [r3, #0]
}
 800c130:	4618      	mov	r0, r3
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20000018 	.word	0x20000018

0800c140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c144:	f7ff fff0 	bl	800c128 <HAL_RCC_GetHCLKFreq>
 800c148:	4602      	mov	r2, r0
 800c14a:	4b05      	ldr	r3, [pc, #20]	; (800c160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	0a9b      	lsrs	r3, r3, #10
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	4903      	ldr	r1, [pc, #12]	; (800c164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c156:	5ccb      	ldrb	r3, [r1, r3]
 800c158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	40023800 	.word	0x40023800
 800c164:	0801faf4 	.word	0x0801faf4

0800c168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c16c:	f7ff ffdc 	bl	800c128 <HAL_RCC_GetHCLKFreq>
 800c170:	4602      	mov	r2, r0
 800c172:	4b05      	ldr	r3, [pc, #20]	; (800c188 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	0b5b      	lsrs	r3, r3, #13
 800c178:	f003 0307 	and.w	r3, r3, #7
 800c17c:	4903      	ldr	r1, [pc, #12]	; (800c18c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c17e:	5ccb      	ldrb	r3, [r1, r3]
 800c180:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c184:	4618      	mov	r0, r3
 800c186:	bd80      	pop	{r7, pc}
 800c188:	40023800 	.word	0x40023800
 800c18c:	0801faf4 	.word	0x0801faf4

0800c190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	220f      	movs	r2, #15
 800c19e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c1a0:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <HAL_RCC_GetClockConfig+0x5c>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f003 0203 	and.w	r2, r3, #3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <HAL_RCC_GetClockConfig+0x5c>)
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <HAL_RCC_GetClockConfig+0x5c>)
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c1c4:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <HAL_RCC_GetClockConfig+0x5c>)
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	08db      	lsrs	r3, r3, #3
 800c1ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <HAL_RCC_GetClockConfig+0x60>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 020f 	and.w	r2, r3, #15
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	40023800 	.word	0x40023800
 800c1f0:	40023c00 	.word	0x40023c00

0800c1f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0301 	and.w	r3, r3, #1
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d012      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c21c:	4b69      	ldr	r3, [pc, #420]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	4a68      	ldr	r2, [pc, #416]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c226:	6093      	str	r3, [r2, #8]
 800c228:	4b66      	ldr	r3, [pc, #408]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c230:	4964      	ldr	r1, [pc, #400]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c232:	4313      	orrs	r3, r2
 800c234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c23e:	2301      	movs	r3, #1
 800c240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d017      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c24e:	4b5d      	ldr	r3, [pc, #372]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25c:	4959      	ldr	r1, [pc, #356]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c26c:	d101      	bne.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c26e:	2301      	movs	r3, #1
 800c270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d017      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c28a:	4b4e      	ldr	r3, [pc, #312]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	494a      	ldr	r1, [pc, #296]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2a8:	d101      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0320 	and.w	r3, r3, #32
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 808b 	beq.w	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c2d8:	4b3a      	ldr	r3, [pc, #232]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2dc:	4a39      	ldr	r2, [pc, #228]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e2:	6413      	str	r3, [r2, #64]	; 0x40
 800c2e4:	4b37      	ldr	r3, [pc, #220]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ec:	60bb      	str	r3, [r7, #8]
 800c2ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c2f0:	4b35      	ldr	r3, [pc, #212]	; (800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a34      	ldr	r2, [pc, #208]	; (800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2fc:	f7fd feee 	bl	800a0dc <HAL_GetTick>
 800c300:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c302:	e008      	b.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c304:	f7fd feea 	bl	800a0dc <HAL_GetTick>
 800c308:	4602      	mov	r2, r0
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	2b64      	cmp	r3, #100	; 0x64
 800c310:	d901      	bls.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c312:	2303      	movs	r3, #3
 800c314:	e357      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c316:	4b2c      	ldr	r3, [pc, #176]	; (800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0f0      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c322:	4b28      	ldr	r3, [pc, #160]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c32a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d035      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d02e      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c340:	4b20      	ldr	r3, [pc, #128]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c348:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c34a:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c354:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c356:	4b1b      	ldr	r3, [pc, #108]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c35c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c362:	4a18      	ldr	r2, [pc, #96]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c368:	4b16      	ldr	r3, [pc, #88]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b01      	cmp	r3, #1
 800c372:	d114      	bne.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c374:	f7fd feb2 	bl	800a0dc <HAL_GetTick>
 800c378:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c37a:	e00a      	b.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c37c:	f7fd feae 	bl	800a0dc <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d901      	bls.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	e319      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c392:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0ee      	beq.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3aa:	d111      	bne.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c3b8:	4b04      	ldr	r3, [pc, #16]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c3ba:	400b      	ands	r3, r1
 800c3bc:	4901      	ldr	r1, [pc, #4]	; (800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	608b      	str	r3, [r1, #8]
 800c3c2:	e00b      	b.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c3c4:	40023800 	.word	0x40023800
 800c3c8:	40007000 	.word	0x40007000
 800c3cc:	0ffffcff 	.word	0x0ffffcff
 800c3d0:	4baa      	ldr	r3, [pc, #680]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	4aa9      	ldr	r2, [pc, #676]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c3da:	6093      	str	r3, [r2, #8]
 800c3dc:	4ba7      	ldr	r3, [pc, #668]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3e8:	49a4      	ldr	r1, [pc, #656]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0310 	and.w	r3, r3, #16
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d010      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3fa:	4ba0      	ldr	r3, [pc, #640]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c400:	4a9e      	ldr	r2, [pc, #632]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c40a:	4b9c      	ldr	r3, [pc, #624]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c40c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	4999      	ldr	r1, [pc, #612]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c416:	4313      	orrs	r3, r2
 800c418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00a      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c428:	4b94      	ldr	r3, [pc, #592]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c42e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c436:	4991      	ldr	r1, [pc, #580]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c438:	4313      	orrs	r3, r2
 800c43a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c44a:	4b8c      	ldr	r3, [pc, #560]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c458:	4988      	ldr	r1, [pc, #544]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c46c:	4b83      	ldr	r3, [pc, #524]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c47a:	4980      	ldr	r1, [pc, #512]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c47c:	4313      	orrs	r3, r2
 800c47e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c48e:	4b7b      	ldr	r3, [pc, #492]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49c:	4977      	ldr	r1, [pc, #476]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00a      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c4b0:	4b72      	ldr	r3, [pc, #456]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4b6:	f023 0203 	bic.w	r2, r3, #3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4be:	496f      	ldr	r1, [pc, #444]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00a      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c4d2:	4b6a      	ldr	r3, [pc, #424]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d8:	f023 020c 	bic.w	r2, r3, #12
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4e0:	4966      	ldr	r1, [pc, #408]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00a      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c4f4:	4b61      	ldr	r3, [pc, #388]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c502:	495e      	ldr	r1, [pc, #376]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c504:	4313      	orrs	r3, r2
 800c506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c516:	4b59      	ldr	r3, [pc, #356]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c524:	4955      	ldr	r1, [pc, #340]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c526:	4313      	orrs	r3, r2
 800c528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c538:	4b50      	ldr	r3, [pc, #320]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c546:	494d      	ldr	r1, [pc, #308]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00a      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c55a:	4b48      	ldr	r3, [pc, #288]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c568:	4944      	ldr	r1, [pc, #272]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c57c:	4b3f      	ldr	r3, [pc, #252]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c58a:	493c      	ldr	r1, [pc, #240]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c58c:	4313      	orrs	r3, r2
 800c58e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c59e:	4b37      	ldr	r3, [pc, #220]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ac:	4933      	ldr	r1, [pc, #204]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00a      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c5c0:	4b2e      	ldr	r3, [pc, #184]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ce:	492b      	ldr	r1, [pc, #172]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d011      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c5e2:	4b26      	ldr	r3, [pc, #152]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5f0:	4922      	ldr	r1, [pc, #136]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c600:	d101      	bne.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0308 	and.w	r3, r3, #8
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c612:	2301      	movs	r3, #1
 800c614:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c630:	4912      	ldr	r1, [pc, #72]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c632:	4313      	orrs	r3, r2
 800c634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c644:	4b0d      	ldr	r3, [pc, #52]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c64a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c654:	4909      	ldr	r1, [pc, #36]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c656:	4313      	orrs	r3, r2
 800c658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d006      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 80d9 	beq.w	800c822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c670:	4b02      	ldr	r3, [pc, #8]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a01      	ldr	r2, [pc, #4]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c67a:	e001      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c67c:	40023800 	.word	0x40023800
 800c680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c682:	f7fd fd2b 	bl	800a0dc <HAL_GetTick>
 800c686:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c688:	e008      	b.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c68a:	f7fd fd27 	bl	800a0dc <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	2b64      	cmp	r3, #100	; 0x64
 800c696:	d901      	bls.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e194      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c69c:	4b6c      	ldr	r3, [pc, #432]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1f0      	bne.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d021      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d11d      	bne.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c6bc:	4b64      	ldr	r3, [pc, #400]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c2:	0c1b      	lsrs	r3, r3, #16
 800c6c4:	f003 0303 	and.w	r3, r3, #3
 800c6c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c6ca:	4b61      	ldr	r3, [pc, #388]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	019a      	lsls	r2, r3, #6
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	041b      	lsls	r3, r3, #16
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	061b      	lsls	r3, r3, #24
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	071b      	lsls	r3, r3, #28
 800c6f0:	4957      	ldr	r1, [pc, #348]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d004      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c70c:	d00a      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c716:	2b00      	cmp	r3, #0
 800c718:	d02e      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c722:	d129      	bne.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c724:	4b4a      	ldr	r3, [pc, #296]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72a:	0c1b      	lsrs	r3, r3, #16
 800c72c:	f003 0303 	and.w	r3, r3, #3
 800c730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c732:	4b47      	ldr	r3, [pc, #284]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c738:	0f1b      	lsrs	r3, r3, #28
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	019a      	lsls	r2, r3, #6
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	041b      	lsls	r3, r3, #16
 800c74a:	431a      	orrs	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	061b      	lsls	r3, r3, #24
 800c752:	431a      	orrs	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	071b      	lsls	r3, r3, #28
 800c758:	493d      	ldr	r1, [pc, #244]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c75a:	4313      	orrs	r3, r2
 800c75c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c760:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c766:	f023 021f 	bic.w	r2, r3, #31
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76e:	3b01      	subs	r3, #1
 800c770:	4937      	ldr	r1, [pc, #220]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c772:	4313      	orrs	r3, r2
 800c774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d01d      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c784:	4b32      	ldr	r3, [pc, #200]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c78a:	0e1b      	lsrs	r3, r3, #24
 800c78c:	f003 030f 	and.w	r3, r3, #15
 800c790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c792:	4b2f      	ldr	r3, [pc, #188]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c798:	0f1b      	lsrs	r3, r3, #28
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	019a      	lsls	r2, r3, #6
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	041b      	lsls	r3, r3, #16
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	061b      	lsls	r3, r3, #24
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	071b      	lsls	r3, r3, #28
 800c7b8:	4925      	ldr	r1, [pc, #148]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d011      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	019a      	lsls	r2, r3, #6
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	041b      	lsls	r3, r3, #16
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	061b      	lsls	r3, r3, #24
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	071b      	lsls	r3, r3, #28
 800c7e8:	4919      	ldr	r1, [pc, #100]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7f0:	4b17      	ldr	r3, [pc, #92]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a16      	ldr	r2, [pc, #88]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7fc:	f7fd fc6e 	bl	800a0dc <HAL_GetTick>
 800c800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c802:	e008      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c804:	f7fd fc6a 	bl	800a0dc <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b64      	cmp	r3, #100	; 0x64
 800c810:	d901      	bls.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e0d7      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c816:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f0      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b01      	cmp	r3, #1
 800c826:	f040 80cd 	bne.w	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a08      	ldr	r2, [pc, #32]	; (800c850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c836:	f7fd fc51 	bl	800a0dc <HAL_GetTick>
 800c83a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c83c:	e00a      	b.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c83e:	f7fd fc4d 	bl	800a0dc <HAL_GetTick>
 800c842:	4602      	mov	r2, r0
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	2b64      	cmp	r3, #100	; 0x64
 800c84a:	d903      	bls.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e0ba      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c850:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c854:	4b5e      	ldr	r3, [pc, #376]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c85c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c860:	d0ed      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d009      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d02e      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d12a      	bne.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c88a:	4b51      	ldr	r3, [pc, #324]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c898:	4b4d      	ldr	r3, [pc, #308]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c89e:	0f1b      	lsrs	r3, r3, #28
 800c8a0:	f003 0307 	and.w	r3, r3, #7
 800c8a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	019a      	lsls	r2, r3, #6
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	041b      	lsls	r3, r3, #16
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	061b      	lsls	r3, r3, #24
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	071b      	lsls	r3, r3, #28
 800c8be:	4944      	ldr	r1, [pc, #272]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c8c6:	4b42      	ldr	r3, [pc, #264]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	021b      	lsls	r3, r3, #8
 800c8d8:	493d      	ldr	r1, [pc, #244]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d022      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8f4:	d11d      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8f6:	4b36      	ldr	r3, [pc, #216]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fc:	0e1b      	lsrs	r3, r3, #24
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c904:	4b32      	ldr	r3, [pc, #200]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c90a:	0f1b      	lsrs	r3, r3, #28
 800c90c:	f003 0307 	and.w	r3, r3, #7
 800c910:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	019a      	lsls	r2, r3, #6
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	041b      	lsls	r3, r3, #16
 800c91e:	431a      	orrs	r2, r3
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	061b      	lsls	r3, r3, #24
 800c924:	431a      	orrs	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	071b      	lsls	r3, r3, #28
 800c92a:	4929      	ldr	r1, [pc, #164]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0308 	and.w	r3, r3, #8
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d028      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c93e:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c944:	0e1b      	lsrs	r3, r3, #24
 800c946:	f003 030f 	and.w	r3, r3, #15
 800c94a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c94c:	4b20      	ldr	r3, [pc, #128]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c952:	0c1b      	lsrs	r3, r3, #16
 800c954:	f003 0303 	and.w	r3, r3, #3
 800c958:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	019a      	lsls	r2, r3, #6
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	041b      	lsls	r3, r3, #16
 800c964:	431a      	orrs	r2, r3
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	061b      	lsls	r3, r3, #24
 800c96a:	431a      	orrs	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	69db      	ldr	r3, [r3, #28]
 800c970:	071b      	lsls	r3, r3, #28
 800c972:	4917      	ldr	r1, [pc, #92]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c974:	4313      	orrs	r3, r2
 800c976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c97a:	4b15      	ldr	r3, [pc, #84]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c988:	4911      	ldr	r1, [pc, #68]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c98a:	4313      	orrs	r3, r2
 800c98c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c990:	4b0f      	ldr	r3, [pc, #60]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a0e      	ldr	r2, [pc, #56]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c99a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c99c:	f7fd fb9e 	bl	800a0dc <HAL_GetTick>
 800c9a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c9a4:	f7fd fb9a 	bl	800a0dc <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b64      	cmp	r3, #100	; 0x64
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e007      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c9b6:	4b06      	ldr	r3, [pc, #24]	; (800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9c2:	d1ef      	bne.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3720      	adds	r7, #32
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	40023800 	.word	0x40023800

0800c9d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e049      	b.n	800ca7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f841 	bl	800ca82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2202      	movs	r2, #2
 800ca04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	4619      	mov	r1, r3
 800ca12:	4610      	mov	r0, r2
 800ca14:	f000 f9e8 	bl	800cde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ca8a:	bf00      	nop
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
	...

0800ca98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d001      	beq.n	800cab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	e054      	b.n	800cb5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f042 0201 	orr.w	r2, r2, #1
 800cac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a26      	ldr	r2, [pc, #152]	; (800cb68 <HAL_TIM_Base_Start_IT+0xd0>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d022      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cada:	d01d      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a22      	ldr	r2, [pc, #136]	; (800cb6c <HAL_TIM_Base_Start_IT+0xd4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d018      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a21      	ldr	r2, [pc, #132]	; (800cb70 <HAL_TIM_Base_Start_IT+0xd8>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d013      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a1f      	ldr	r2, [pc, #124]	; (800cb74 <HAL_TIM_Base_Start_IT+0xdc>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d00e      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <HAL_TIM_Base_Start_IT+0xe0>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d009      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a1c      	ldr	r2, [pc, #112]	; (800cb7c <HAL_TIM_Base_Start_IT+0xe4>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d004      	beq.n	800cb18 <HAL_TIM_Base_Start_IT+0x80>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a1b      	ldr	r2, [pc, #108]	; (800cb80 <HAL_TIM_Base_Start_IT+0xe8>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d115      	bne.n	800cb44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689a      	ldr	r2, [r3, #8]
 800cb1e:	4b19      	ldr	r3, [pc, #100]	; (800cb84 <HAL_TIM_Base_Start_IT+0xec>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b06      	cmp	r3, #6
 800cb28:	d015      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0xbe>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb30:	d011      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f042 0201 	orr.w	r2, r2, #1
 800cb40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb42:	e008      	b.n	800cb56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f042 0201 	orr.w	r2, r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e000      	b.n	800cb58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	40010000 	.word	0x40010000
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40000c00 	.word	0x40000c00
 800cb78:	40010400 	.word	0x40010400
 800cb7c:	40014000 	.word	0x40014000
 800cb80:	40001800 	.word	0x40001800
 800cb84:	00010007 	.word	0x00010007

0800cb88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f003 0302 	and.w	r3, r3, #2
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d020      	beq.n	800cbec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d01b      	beq.n	800cbec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f06f 0202 	mvn.w	r2, #2
 800cbbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f8e9 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cbd8:	e005      	b.n	800cbe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f8db 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f8ec 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	f003 0304 	and.w	r3, r3, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d020      	beq.n	800cc38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d01b      	beq.n	800cc38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f06f 0204 	mvn.w	r2, #4
 800cc08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f8c3 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cc24:	e005      	b.n	800cc32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f8b5 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f8c6 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	f003 0308 	and.w	r3, r3, #8
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d020      	beq.n	800cc84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f003 0308 	and.w	r3, r3, #8
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01b      	beq.n	800cc84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f06f 0208 	mvn.w	r2, #8
 800cc54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2204      	movs	r2, #4
 800cc5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f89d 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cc70:	e005      	b.n	800cc7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f88f 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8a0 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f003 0310 	and.w	r3, r3, #16
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d020      	beq.n	800ccd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f003 0310 	and.w	r3, r3, #16
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d01b      	beq.n	800ccd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f06f 0210 	mvn.w	r2, #16
 800cca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2208      	movs	r2, #8
 800cca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f877 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800ccbc:	e005      	b.n	800ccca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f869 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f87a 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00c      	beq.n	800ccf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d007      	beq.n	800ccf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f06f 0201 	mvn.w	r2, #1
 800ccec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7f4 fab4 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d104      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00c      	beq.n	800cd22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d007      	beq.n	800cd22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800cd1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f919 	bl	800cf54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00c      	beq.n	800cd46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d007      	beq.n	800cd46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f911 	bl	800cf68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00c      	beq.n	800cd6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d007      	beq.n	800cd6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f834 	bl	800cdd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f003 0320 	and.w	r3, r3, #32
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00c      	beq.n	800cd8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f003 0320 	and.w	r3, r3, #32
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d007      	beq.n	800cd8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f06f 0220 	mvn.w	r2, #32
 800cd86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f8d9 	bl	800cf40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd9e:	bf00      	nop
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdb2:	bf00      	nop
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
	...

0800cde8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a46      	ldr	r2, [pc, #280]	; (800cf14 <TIM_Base_SetConfig+0x12c>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d013      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce06:	d00f      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a43      	ldr	r2, [pc, #268]	; (800cf18 <TIM_Base_SetConfig+0x130>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00b      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a42      	ldr	r2, [pc, #264]	; (800cf1c <TIM_Base_SetConfig+0x134>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d007      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a41      	ldr	r2, [pc, #260]	; (800cf20 <TIM_Base_SetConfig+0x138>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d003      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a40      	ldr	r2, [pc, #256]	; (800cf24 <TIM_Base_SetConfig+0x13c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d108      	bne.n	800ce3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a35      	ldr	r2, [pc, #212]	; (800cf14 <TIM_Base_SetConfig+0x12c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d02b      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce48:	d027      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4a32      	ldr	r2, [pc, #200]	; (800cf18 <TIM_Base_SetConfig+0x130>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d023      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4a31      	ldr	r2, [pc, #196]	; (800cf1c <TIM_Base_SetConfig+0x134>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d01f      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a30      	ldr	r2, [pc, #192]	; (800cf20 <TIM_Base_SetConfig+0x138>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d01b      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a2f      	ldr	r2, [pc, #188]	; (800cf24 <TIM_Base_SetConfig+0x13c>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d017      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a2e      	ldr	r2, [pc, #184]	; (800cf28 <TIM_Base_SetConfig+0x140>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d013      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a2d      	ldr	r2, [pc, #180]	; (800cf2c <TIM_Base_SetConfig+0x144>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d00f      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a2c      	ldr	r2, [pc, #176]	; (800cf30 <TIM_Base_SetConfig+0x148>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d00b      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a2b      	ldr	r2, [pc, #172]	; (800cf34 <TIM_Base_SetConfig+0x14c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d007      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a2a      	ldr	r2, [pc, #168]	; (800cf38 <TIM_Base_SetConfig+0x150>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d003      	beq.n	800ce9a <TIM_Base_SetConfig+0xb2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a29      	ldr	r2, [pc, #164]	; (800cf3c <TIM_Base_SetConfig+0x154>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d108      	bne.n	800ceac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a10      	ldr	r2, [pc, #64]	; (800cf14 <TIM_Base_SetConfig+0x12c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <TIM_Base_SetConfig+0xf8>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a12      	ldr	r2, [pc, #72]	; (800cf24 <TIM_Base_SetConfig+0x13c>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d103      	bne.n	800cee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d105      	bne.n	800cf06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f023 0201 	bic.w	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	611a      	str	r2, [r3, #16]
  }
}
 800cf06:	bf00      	nop
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	40010000 	.word	0x40010000
 800cf18:	40000400 	.word	0x40000400
 800cf1c:	40000800 	.word	0x40000800
 800cf20:	40000c00 	.word	0x40000c00
 800cf24:	40010400 	.word	0x40010400
 800cf28:	40014000 	.word	0x40014000
 800cf2c:	40014400 	.word	0x40014400
 800cf30:	40014800 	.word	0x40014800
 800cf34:	40001800 	.word	0x40001800
 800cf38:	40001c00 	.word	0x40001c00
 800cf3c:	40002000 	.word	0x40002000

0800cf40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e040      	b.n	800d010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7fc fd7c 	bl	8009a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2224      	movs	r2, #36	; 0x24
 800cfa8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f022 0201 	bic.w	r2, r2, #1
 800cfb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d002      	beq.n	800cfc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fb16 	bl	800d5f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f8af 	bl	800d12c <UART_SetConfig>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d101      	bne.n	800cfd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e01b      	b.n	800d010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cfe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689a      	ldr	r2, [r3, #8]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fb95 	bl	800d738 <UART_CheckIdleState>
 800d00e:	4603      	mov	r3, r0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af02      	add	r7, sp, #8
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	603b      	str	r3, [r7, #0]
 800d024:	4613      	mov	r3, r2
 800d026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02c:	2b20      	cmp	r3, #32
 800d02e:	d177      	bne.n	800d120 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <HAL_UART_Transmit+0x24>
 800d036:	88fb      	ldrh	r3, [r7, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e070      	b.n	800d122 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2221      	movs	r2, #33	; 0x21
 800d04c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d04e:	f7fd f845 	bl	800a0dc <HAL_GetTick>
 800d052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	88fa      	ldrh	r2, [r7, #6]
 800d058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	88fa      	ldrh	r2, [r7, #6]
 800d060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d06c:	d108      	bne.n	800d080 <HAL_UART_Transmit+0x68>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d104      	bne.n	800d080 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	e003      	b.n	800d088 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d088:	e02f      	b.n	800d0ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2200      	movs	r2, #0
 800d092:	2180      	movs	r1, #128	; 0x80
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fba6 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e03b      	b.n	800d122 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10b      	bne.n	800d0c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	61bb      	str	r3, [r7, #24]
 800d0c6:	e007      	b.n	800d0d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	781a      	ldrb	r2, [r3, #0]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1c9      	bne.n	800d08a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2140      	movs	r1, #64	; 0x40
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 fb70 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2220      	movs	r2, #32
 800d110:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800d112:	2303      	movs	r3, #3
 800d114:	e005      	b.n	800d122 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2220      	movs	r2, #32
 800d11a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	e000      	b.n	800d122 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d120:	2302      	movs	r3, #2
  }
}
 800d122:	4618      	mov	r0, r3
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689a      	ldr	r2, [r3, #8]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	431a      	orrs	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	4ba6      	ldr	r3, [pc, #664]	; (800d3f0 <UART_SetConfig+0x2c4>)
 800d158:	4013      	ands	r3, r2
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	6812      	ldr	r2, [r2, #0]
 800d15e:	6979      	ldr	r1, [r7, #20]
 800d160:	430b      	orrs	r3, r1
 800d162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68da      	ldr	r2, [r3, #12]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	430a      	orrs	r2, r1
 800d178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	4313      	orrs	r3, r2
 800d188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	430a      	orrs	r2, r1
 800d19c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a94      	ldr	r2, [pc, #592]	; (800d3f4 <UART_SetConfig+0x2c8>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d120      	bne.n	800d1ea <UART_SetConfig+0xbe>
 800d1a8:	4b93      	ldr	r3, [pc, #588]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f003 0303 	and.w	r3, r3, #3
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d816      	bhi.n	800d1e4 <UART_SetConfig+0xb8>
 800d1b6:	a201      	add	r2, pc, #4	; (adr r2, 800d1bc <UART_SetConfig+0x90>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d1cd 	.word	0x0800d1cd
 800d1c0:	0800d1d9 	.word	0x0800d1d9
 800d1c4:	0800d1d3 	.word	0x0800d1d3
 800d1c8:	0800d1df 	.word	0x0800d1df
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	77fb      	strb	r3, [r7, #31]
 800d1d0:	e150      	b.n	800d474 <UART_SetConfig+0x348>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	77fb      	strb	r3, [r7, #31]
 800d1d6:	e14d      	b.n	800d474 <UART_SetConfig+0x348>
 800d1d8:	2304      	movs	r3, #4
 800d1da:	77fb      	strb	r3, [r7, #31]
 800d1dc:	e14a      	b.n	800d474 <UART_SetConfig+0x348>
 800d1de:	2308      	movs	r3, #8
 800d1e0:	77fb      	strb	r3, [r7, #31]
 800d1e2:	e147      	b.n	800d474 <UART_SetConfig+0x348>
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	77fb      	strb	r3, [r7, #31]
 800d1e8:	e144      	b.n	800d474 <UART_SetConfig+0x348>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a83      	ldr	r2, [pc, #524]	; (800d3fc <UART_SetConfig+0x2d0>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d132      	bne.n	800d25a <UART_SetConfig+0x12e>
 800d1f4:	4b80      	ldr	r3, [pc, #512]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fa:	f003 030c 	and.w	r3, r3, #12
 800d1fe:	2b0c      	cmp	r3, #12
 800d200:	d828      	bhi.n	800d254 <UART_SetConfig+0x128>
 800d202:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <UART_SetConfig+0xdc>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d23d 	.word	0x0800d23d
 800d20c:	0800d255 	.word	0x0800d255
 800d210:	0800d255 	.word	0x0800d255
 800d214:	0800d255 	.word	0x0800d255
 800d218:	0800d249 	.word	0x0800d249
 800d21c:	0800d255 	.word	0x0800d255
 800d220:	0800d255 	.word	0x0800d255
 800d224:	0800d255 	.word	0x0800d255
 800d228:	0800d243 	.word	0x0800d243
 800d22c:	0800d255 	.word	0x0800d255
 800d230:	0800d255 	.word	0x0800d255
 800d234:	0800d255 	.word	0x0800d255
 800d238:	0800d24f 	.word	0x0800d24f
 800d23c:	2300      	movs	r3, #0
 800d23e:	77fb      	strb	r3, [r7, #31]
 800d240:	e118      	b.n	800d474 <UART_SetConfig+0x348>
 800d242:	2302      	movs	r3, #2
 800d244:	77fb      	strb	r3, [r7, #31]
 800d246:	e115      	b.n	800d474 <UART_SetConfig+0x348>
 800d248:	2304      	movs	r3, #4
 800d24a:	77fb      	strb	r3, [r7, #31]
 800d24c:	e112      	b.n	800d474 <UART_SetConfig+0x348>
 800d24e:	2308      	movs	r3, #8
 800d250:	77fb      	strb	r3, [r7, #31]
 800d252:	e10f      	b.n	800d474 <UART_SetConfig+0x348>
 800d254:	2310      	movs	r3, #16
 800d256:	77fb      	strb	r3, [r7, #31]
 800d258:	e10c      	b.n	800d474 <UART_SetConfig+0x348>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a68      	ldr	r2, [pc, #416]	; (800d400 <UART_SetConfig+0x2d4>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d120      	bne.n	800d2a6 <UART_SetConfig+0x17a>
 800d264:	4b64      	ldr	r3, [pc, #400]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d26a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d26e:	2b30      	cmp	r3, #48	; 0x30
 800d270:	d013      	beq.n	800d29a <UART_SetConfig+0x16e>
 800d272:	2b30      	cmp	r3, #48	; 0x30
 800d274:	d814      	bhi.n	800d2a0 <UART_SetConfig+0x174>
 800d276:	2b20      	cmp	r3, #32
 800d278:	d009      	beq.n	800d28e <UART_SetConfig+0x162>
 800d27a:	2b20      	cmp	r3, #32
 800d27c:	d810      	bhi.n	800d2a0 <UART_SetConfig+0x174>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <UART_SetConfig+0x15c>
 800d282:	2b10      	cmp	r3, #16
 800d284:	d006      	beq.n	800d294 <UART_SetConfig+0x168>
 800d286:	e00b      	b.n	800d2a0 <UART_SetConfig+0x174>
 800d288:	2300      	movs	r3, #0
 800d28a:	77fb      	strb	r3, [r7, #31]
 800d28c:	e0f2      	b.n	800d474 <UART_SetConfig+0x348>
 800d28e:	2302      	movs	r3, #2
 800d290:	77fb      	strb	r3, [r7, #31]
 800d292:	e0ef      	b.n	800d474 <UART_SetConfig+0x348>
 800d294:	2304      	movs	r3, #4
 800d296:	77fb      	strb	r3, [r7, #31]
 800d298:	e0ec      	b.n	800d474 <UART_SetConfig+0x348>
 800d29a:	2308      	movs	r3, #8
 800d29c:	77fb      	strb	r3, [r7, #31]
 800d29e:	e0e9      	b.n	800d474 <UART_SetConfig+0x348>
 800d2a0:	2310      	movs	r3, #16
 800d2a2:	77fb      	strb	r3, [r7, #31]
 800d2a4:	e0e6      	b.n	800d474 <UART_SetConfig+0x348>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a56      	ldr	r2, [pc, #344]	; (800d404 <UART_SetConfig+0x2d8>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d120      	bne.n	800d2f2 <UART_SetConfig+0x1c6>
 800d2b0:	4b51      	ldr	r3, [pc, #324]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d2ba:	2bc0      	cmp	r3, #192	; 0xc0
 800d2bc:	d013      	beq.n	800d2e6 <UART_SetConfig+0x1ba>
 800d2be:	2bc0      	cmp	r3, #192	; 0xc0
 800d2c0:	d814      	bhi.n	800d2ec <UART_SetConfig+0x1c0>
 800d2c2:	2b80      	cmp	r3, #128	; 0x80
 800d2c4:	d009      	beq.n	800d2da <UART_SetConfig+0x1ae>
 800d2c6:	2b80      	cmp	r3, #128	; 0x80
 800d2c8:	d810      	bhi.n	800d2ec <UART_SetConfig+0x1c0>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <UART_SetConfig+0x1a8>
 800d2ce:	2b40      	cmp	r3, #64	; 0x40
 800d2d0:	d006      	beq.n	800d2e0 <UART_SetConfig+0x1b4>
 800d2d2:	e00b      	b.n	800d2ec <UART_SetConfig+0x1c0>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	77fb      	strb	r3, [r7, #31]
 800d2d8:	e0cc      	b.n	800d474 <UART_SetConfig+0x348>
 800d2da:	2302      	movs	r3, #2
 800d2dc:	77fb      	strb	r3, [r7, #31]
 800d2de:	e0c9      	b.n	800d474 <UART_SetConfig+0x348>
 800d2e0:	2304      	movs	r3, #4
 800d2e2:	77fb      	strb	r3, [r7, #31]
 800d2e4:	e0c6      	b.n	800d474 <UART_SetConfig+0x348>
 800d2e6:	2308      	movs	r3, #8
 800d2e8:	77fb      	strb	r3, [r7, #31]
 800d2ea:	e0c3      	b.n	800d474 <UART_SetConfig+0x348>
 800d2ec:	2310      	movs	r3, #16
 800d2ee:	77fb      	strb	r3, [r7, #31]
 800d2f0:	e0c0      	b.n	800d474 <UART_SetConfig+0x348>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a44      	ldr	r2, [pc, #272]	; (800d408 <UART_SetConfig+0x2dc>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d125      	bne.n	800d348 <UART_SetConfig+0x21c>
 800d2fc:	4b3e      	ldr	r3, [pc, #248]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d30a:	d017      	beq.n	800d33c <UART_SetConfig+0x210>
 800d30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d310:	d817      	bhi.n	800d342 <UART_SetConfig+0x216>
 800d312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d316:	d00b      	beq.n	800d330 <UART_SetConfig+0x204>
 800d318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d31c:	d811      	bhi.n	800d342 <UART_SetConfig+0x216>
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <UART_SetConfig+0x1fe>
 800d322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d326:	d006      	beq.n	800d336 <UART_SetConfig+0x20a>
 800d328:	e00b      	b.n	800d342 <UART_SetConfig+0x216>
 800d32a:	2300      	movs	r3, #0
 800d32c:	77fb      	strb	r3, [r7, #31]
 800d32e:	e0a1      	b.n	800d474 <UART_SetConfig+0x348>
 800d330:	2302      	movs	r3, #2
 800d332:	77fb      	strb	r3, [r7, #31]
 800d334:	e09e      	b.n	800d474 <UART_SetConfig+0x348>
 800d336:	2304      	movs	r3, #4
 800d338:	77fb      	strb	r3, [r7, #31]
 800d33a:	e09b      	b.n	800d474 <UART_SetConfig+0x348>
 800d33c:	2308      	movs	r3, #8
 800d33e:	77fb      	strb	r3, [r7, #31]
 800d340:	e098      	b.n	800d474 <UART_SetConfig+0x348>
 800d342:	2310      	movs	r3, #16
 800d344:	77fb      	strb	r3, [r7, #31]
 800d346:	e095      	b.n	800d474 <UART_SetConfig+0x348>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a2f      	ldr	r2, [pc, #188]	; (800d40c <UART_SetConfig+0x2e0>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d125      	bne.n	800d39e <UART_SetConfig+0x272>
 800d352:	4b29      	ldr	r3, [pc, #164]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d35c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d360:	d017      	beq.n	800d392 <UART_SetConfig+0x266>
 800d362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d366:	d817      	bhi.n	800d398 <UART_SetConfig+0x26c>
 800d368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d36c:	d00b      	beq.n	800d386 <UART_SetConfig+0x25a>
 800d36e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d372:	d811      	bhi.n	800d398 <UART_SetConfig+0x26c>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <UART_SetConfig+0x254>
 800d378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d37c:	d006      	beq.n	800d38c <UART_SetConfig+0x260>
 800d37e:	e00b      	b.n	800d398 <UART_SetConfig+0x26c>
 800d380:	2301      	movs	r3, #1
 800d382:	77fb      	strb	r3, [r7, #31]
 800d384:	e076      	b.n	800d474 <UART_SetConfig+0x348>
 800d386:	2302      	movs	r3, #2
 800d388:	77fb      	strb	r3, [r7, #31]
 800d38a:	e073      	b.n	800d474 <UART_SetConfig+0x348>
 800d38c:	2304      	movs	r3, #4
 800d38e:	77fb      	strb	r3, [r7, #31]
 800d390:	e070      	b.n	800d474 <UART_SetConfig+0x348>
 800d392:	2308      	movs	r3, #8
 800d394:	77fb      	strb	r3, [r7, #31]
 800d396:	e06d      	b.n	800d474 <UART_SetConfig+0x348>
 800d398:	2310      	movs	r3, #16
 800d39a:	77fb      	strb	r3, [r7, #31]
 800d39c:	e06a      	b.n	800d474 <UART_SetConfig+0x348>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a1b      	ldr	r2, [pc, #108]	; (800d410 <UART_SetConfig+0x2e4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d138      	bne.n	800d41a <UART_SetConfig+0x2ee>
 800d3a8:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <UART_SetConfig+0x2cc>)
 800d3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d3b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d3b6:	d017      	beq.n	800d3e8 <UART_SetConfig+0x2bc>
 800d3b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d3bc:	d82a      	bhi.n	800d414 <UART_SetConfig+0x2e8>
 800d3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3c2:	d00b      	beq.n	800d3dc <UART_SetConfig+0x2b0>
 800d3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3c8:	d824      	bhi.n	800d414 <UART_SetConfig+0x2e8>
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <UART_SetConfig+0x2aa>
 800d3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3d2:	d006      	beq.n	800d3e2 <UART_SetConfig+0x2b6>
 800d3d4:	e01e      	b.n	800d414 <UART_SetConfig+0x2e8>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	77fb      	strb	r3, [r7, #31]
 800d3da:	e04b      	b.n	800d474 <UART_SetConfig+0x348>
 800d3dc:	2302      	movs	r3, #2
 800d3de:	77fb      	strb	r3, [r7, #31]
 800d3e0:	e048      	b.n	800d474 <UART_SetConfig+0x348>
 800d3e2:	2304      	movs	r3, #4
 800d3e4:	77fb      	strb	r3, [r7, #31]
 800d3e6:	e045      	b.n	800d474 <UART_SetConfig+0x348>
 800d3e8:	2308      	movs	r3, #8
 800d3ea:	77fb      	strb	r3, [r7, #31]
 800d3ec:	e042      	b.n	800d474 <UART_SetConfig+0x348>
 800d3ee:	bf00      	nop
 800d3f0:	efff69f3 	.word	0xefff69f3
 800d3f4:	40011000 	.word	0x40011000
 800d3f8:	40023800 	.word	0x40023800
 800d3fc:	40004400 	.word	0x40004400
 800d400:	40004800 	.word	0x40004800
 800d404:	40004c00 	.word	0x40004c00
 800d408:	40005000 	.word	0x40005000
 800d40c:	40011400 	.word	0x40011400
 800d410:	40007800 	.word	0x40007800
 800d414:	2310      	movs	r3, #16
 800d416:	77fb      	strb	r3, [r7, #31]
 800d418:	e02c      	b.n	800d474 <UART_SetConfig+0x348>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a72      	ldr	r2, [pc, #456]	; (800d5e8 <UART_SetConfig+0x4bc>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d125      	bne.n	800d470 <UART_SetConfig+0x344>
 800d424:	4b71      	ldr	r3, [pc, #452]	; (800d5ec <UART_SetConfig+0x4c0>)
 800d426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d42a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d42e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d432:	d017      	beq.n	800d464 <UART_SetConfig+0x338>
 800d434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d438:	d817      	bhi.n	800d46a <UART_SetConfig+0x33e>
 800d43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d43e:	d00b      	beq.n	800d458 <UART_SetConfig+0x32c>
 800d440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d444:	d811      	bhi.n	800d46a <UART_SetConfig+0x33e>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <UART_SetConfig+0x326>
 800d44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d44e:	d006      	beq.n	800d45e <UART_SetConfig+0x332>
 800d450:	e00b      	b.n	800d46a <UART_SetConfig+0x33e>
 800d452:	2300      	movs	r3, #0
 800d454:	77fb      	strb	r3, [r7, #31]
 800d456:	e00d      	b.n	800d474 <UART_SetConfig+0x348>
 800d458:	2302      	movs	r3, #2
 800d45a:	77fb      	strb	r3, [r7, #31]
 800d45c:	e00a      	b.n	800d474 <UART_SetConfig+0x348>
 800d45e:	2304      	movs	r3, #4
 800d460:	77fb      	strb	r3, [r7, #31]
 800d462:	e007      	b.n	800d474 <UART_SetConfig+0x348>
 800d464:	2308      	movs	r3, #8
 800d466:	77fb      	strb	r3, [r7, #31]
 800d468:	e004      	b.n	800d474 <UART_SetConfig+0x348>
 800d46a:	2310      	movs	r3, #16
 800d46c:	77fb      	strb	r3, [r7, #31]
 800d46e:	e001      	b.n	800d474 <UART_SetConfig+0x348>
 800d470:	2310      	movs	r3, #16
 800d472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d47c:	d15b      	bne.n	800d536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d47e:	7ffb      	ldrb	r3, [r7, #31]
 800d480:	2b08      	cmp	r3, #8
 800d482:	d828      	bhi.n	800d4d6 <UART_SetConfig+0x3aa>
 800d484:	a201      	add	r2, pc, #4	; (adr r2, 800d48c <UART_SetConfig+0x360>)
 800d486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48a:	bf00      	nop
 800d48c:	0800d4b1 	.word	0x0800d4b1
 800d490:	0800d4b9 	.word	0x0800d4b9
 800d494:	0800d4c1 	.word	0x0800d4c1
 800d498:	0800d4d7 	.word	0x0800d4d7
 800d49c:	0800d4c7 	.word	0x0800d4c7
 800d4a0:	0800d4d7 	.word	0x0800d4d7
 800d4a4:	0800d4d7 	.word	0x0800d4d7
 800d4a8:	0800d4d7 	.word	0x0800d4d7
 800d4ac:	0800d4cf 	.word	0x0800d4cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4b0:	f7fe fe46 	bl	800c140 <HAL_RCC_GetPCLK1Freq>
 800d4b4:	61b8      	str	r0, [r7, #24]
        break;
 800d4b6:	e013      	b.n	800d4e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4b8:	f7fe fe56 	bl	800c168 <HAL_RCC_GetPCLK2Freq>
 800d4bc:	61b8      	str	r0, [r7, #24]
        break;
 800d4be:	e00f      	b.n	800d4e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4c0:	4b4b      	ldr	r3, [pc, #300]	; (800d5f0 <UART_SetConfig+0x4c4>)
 800d4c2:	61bb      	str	r3, [r7, #24]
        break;
 800d4c4:	e00c      	b.n	800d4e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4c6:	f7fe fd29 	bl	800bf1c <HAL_RCC_GetSysClockFreq>
 800d4ca:	61b8      	str	r0, [r7, #24]
        break;
 800d4cc:	e008      	b.n	800d4e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4d2:	61bb      	str	r3, [r7, #24]
        break;
 800d4d4:	e004      	b.n	800d4e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	77bb      	strb	r3, [r7, #30]
        break;
 800d4de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d074      	beq.n	800d5d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	005a      	lsls	r2, r3, #1
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	441a      	add	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	2b0f      	cmp	r3, #15
 800d500:	d916      	bls.n	800d530 <UART_SetConfig+0x404>
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d508:	d212      	bcs.n	800d530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	f023 030f 	bic.w	r3, r3, #15
 800d512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	085b      	lsrs	r3, r3, #1
 800d518:	b29b      	uxth	r3, r3
 800d51a:	f003 0307 	and.w	r3, r3, #7
 800d51e:	b29a      	uxth	r2, r3
 800d520:	89fb      	ldrh	r3, [r7, #14]
 800d522:	4313      	orrs	r3, r2
 800d524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	89fa      	ldrh	r2, [r7, #14]
 800d52c:	60da      	str	r2, [r3, #12]
 800d52e:	e04f      	b.n	800d5d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	77bb      	strb	r3, [r7, #30]
 800d534:	e04c      	b.n	800d5d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d536:	7ffb      	ldrb	r3, [r7, #31]
 800d538:	2b08      	cmp	r3, #8
 800d53a:	d828      	bhi.n	800d58e <UART_SetConfig+0x462>
 800d53c:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <UART_SetConfig+0x418>)
 800d53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d542:	bf00      	nop
 800d544:	0800d569 	.word	0x0800d569
 800d548:	0800d571 	.word	0x0800d571
 800d54c:	0800d579 	.word	0x0800d579
 800d550:	0800d58f 	.word	0x0800d58f
 800d554:	0800d57f 	.word	0x0800d57f
 800d558:	0800d58f 	.word	0x0800d58f
 800d55c:	0800d58f 	.word	0x0800d58f
 800d560:	0800d58f 	.word	0x0800d58f
 800d564:	0800d587 	.word	0x0800d587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d568:	f7fe fdea 	bl	800c140 <HAL_RCC_GetPCLK1Freq>
 800d56c:	61b8      	str	r0, [r7, #24]
        break;
 800d56e:	e013      	b.n	800d598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d570:	f7fe fdfa 	bl	800c168 <HAL_RCC_GetPCLK2Freq>
 800d574:	61b8      	str	r0, [r7, #24]
        break;
 800d576:	e00f      	b.n	800d598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d578:	4b1d      	ldr	r3, [pc, #116]	; (800d5f0 <UART_SetConfig+0x4c4>)
 800d57a:	61bb      	str	r3, [r7, #24]
        break;
 800d57c:	e00c      	b.n	800d598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d57e:	f7fe fccd 	bl	800bf1c <HAL_RCC_GetSysClockFreq>
 800d582:	61b8      	str	r0, [r7, #24]
        break;
 800d584:	e008      	b.n	800d598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d58a:	61bb      	str	r3, [r7, #24]
        break;
 800d58c:	e004      	b.n	800d598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d58e:	2300      	movs	r3, #0
 800d590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	77bb      	strb	r3, [r7, #30]
        break;
 800d596:	bf00      	nop
    }

    if (pclk != 0U)
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d018      	beq.n	800d5d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	085a      	lsrs	r2, r3, #1
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	441a      	add	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b0f      	cmp	r3, #15
 800d5b6:	d909      	bls.n	800d5cc <UART_SetConfig+0x4a0>
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5be:	d205      	bcs.n	800d5cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60da      	str	r2, [r3, #12]
 800d5ca:	e001      	b.n	800d5d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d5dc:	7fbb      	ldrb	r3, [r7, #30]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3720      	adds	r7, #32
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	40007c00 	.word	0x40007c00
 800d5ec:	40023800 	.word	0x40023800
 800d5f0:	00f42400 	.word	0x00f42400

0800d5f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00a      	beq.n	800d61e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	430a      	orrs	r2, r1
 800d61c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	430a      	orrs	r2, r1
 800d63e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	f003 0302 	and.w	r3, r3, #2
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00a      	beq.n	800d662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d666:	f003 0304 	and.w	r3, r3, #4
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00a      	beq.n	800d684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	430a      	orrs	r2, r1
 800d682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00a      	beq.n	800d6a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	f003 0320 	and.w	r3, r3, #32
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00a      	beq.n	800d6c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d01a      	beq.n	800d70a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6f2:	d10a      	bne.n	800d70a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	430a      	orrs	r2, r1
 800d708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	430a      	orrs	r2, r1
 800d72a:	605a      	str	r2, [r3, #4]
  }
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08c      	sub	sp, #48	; 0x30
 800d73c:	af02      	add	r7, sp, #8
 800d73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d748:	f7fc fcc8 	bl	800a0dc <HAL_GetTick>
 800d74c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 0308 	and.w	r3, r3, #8
 800d758:	2b08      	cmp	r3, #8
 800d75a:	d12e      	bne.n	800d7ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d75c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	2200      	movs	r2, #0
 800d766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f83b 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d021      	beq.n	800d7ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	e853 3f00 	ldrex	r3, [r3]
 800d782:	60fb      	str	r3, [r7, #12]
   return(result);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d78a:	623b      	str	r3, [r7, #32]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	461a      	mov	r2, r3
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	61fb      	str	r3, [r7, #28]
 800d796:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d798:	69b9      	ldr	r1, [r7, #24]
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	e841 2300 	strex	r3, r2, [r1]
 800d7a0:	617b      	str	r3, [r7, #20]
   return(result);
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1e6      	bne.n	800d776 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2220      	movs	r2, #32
 800d7ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	e011      	b.n	800d7de <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2220      	movs	r2, #32
 800d7c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3728      	adds	r7, #40	; 0x28
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b084      	sub	sp, #16
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	60f8      	str	r0, [r7, #12]
 800d7ee:	60b9      	str	r1, [r7, #8]
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f6:	e04f      	b.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7fe:	d04b      	beq.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d800:	f7fc fc6c 	bl	800a0dc <HAL_GetTick>
 800d804:	4602      	mov	r2, r0
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	69ba      	ldr	r2, [r7, #24]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d302      	bcc.n	800d816 <UART_WaitOnFlagUntilTimeout+0x30>
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e04e      	b.n	800d8b8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	2b00      	cmp	r3, #0
 800d826:	d037      	beq.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b80      	cmp	r3, #128	; 0x80
 800d82c:	d034      	beq.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b40      	cmp	r3, #64	; 0x40
 800d832:	d031      	beq.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	f003 0308 	and.w	r3, r3, #8
 800d83e:	2b08      	cmp	r3, #8
 800d840:	d110      	bne.n	800d864 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2208      	movs	r2, #8
 800d848:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 f838 	bl	800d8c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2208      	movs	r2, #8
 800d854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	e029      	b.n	800d8b8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d86e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d872:	d111      	bne.n	800d898 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d87c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 f81e 	bl	800d8c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2220      	movs	r2, #32
 800d888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d894:	2303      	movs	r3, #3
 800d896:	e00f      	b.n	800d8b8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69da      	ldr	r2, [r3, #28]
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	bf0c      	ite	eq
 800d8a8:	2301      	moveq	r3, #1
 800d8aa:	2300      	movne	r3, #0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d0a0      	beq.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b095      	sub	sp, #84	; 0x54
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d8e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8ee:	e841 2300 	strex	r3, r2, [r1]
 800d8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1e6      	bne.n	800d8c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	3308      	adds	r3, #8
 800d900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	e853 3f00 	ldrex	r3, [r3]
 800d908:	61fb      	str	r3, [r7, #28]
   return(result);
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	f023 0301 	bic.w	r3, r3, #1
 800d910:	64bb      	str	r3, [r7, #72]	; 0x48
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d91a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d91c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e5      	bne.n	800d8fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d932:	2b01      	cmp	r3, #1
 800d934:	d118      	bne.n	800d968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	e853 3f00 	ldrex	r3, [r3]
 800d942:	60bb      	str	r3, [r7, #8]
   return(result);
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	f023 0310 	bic.w	r3, r3, #16
 800d94a:	647b      	str	r3, [r7, #68]	; 0x44
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	461a      	mov	r2, r3
 800d952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d954:	61bb      	str	r3, [r7, #24]
 800d956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d958:	6979      	ldr	r1, [r7, #20]
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	e841 2300 	strex	r3, r2, [r1]
 800d960:	613b      	str	r3, [r7, #16]
   return(result);
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1e6      	bne.n	800d936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2220      	movs	r2, #32
 800d96c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d97c:	bf00      	nop
 800d97e:	3754      	adds	r7, #84	; 0x54
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800d98e:	f000 fba5 	bl	800e0dc <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800d992:	4b19      	ldr	r3, [pc, #100]	; (800d9f8 <MX_LWIP_Init+0x70>)
 800d994:	2200      	movs	r2, #0
 800d996:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800d998:	4b18      	ldr	r3, [pc, #96]	; (800d9fc <MX_LWIP_Init+0x74>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800d99e:	4b18      	ldr	r3, [pc, #96]	; (800da00 <MX_LWIP_Init+0x78>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800d9a4:	4b17      	ldr	r3, [pc, #92]	; (800da04 <MX_LWIP_Init+0x7c>)
 800d9a6:	9302      	str	r3, [sp, #8]
 800d9a8:	4b17      	ldr	r3, [pc, #92]	; (800da08 <MX_LWIP_Init+0x80>)
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	4b13      	ldr	r3, [pc, #76]	; (800da00 <MX_LWIP_Init+0x78>)
 800d9b2:	4a12      	ldr	r2, [pc, #72]	; (800d9fc <MX_LWIP_Init+0x74>)
 800d9b4:	4910      	ldr	r1, [pc, #64]	; (800d9f8 <MX_LWIP_Init+0x70>)
 800d9b6:	4815      	ldr	r0, [pc, #84]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9b8:	f001 f87c 	bl	800eab4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d9bc:	4813      	ldr	r0, [pc, #76]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9be:	f001 fa33 	bl	800ee28 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d9c2:	4b12      	ldr	r3, [pc, #72]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d9c8:	089b      	lsrs	r3, r3, #2
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d9d4:	480d      	ldr	r0, [pc, #52]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9d6:	f001 fa37 	bl	800ee48 <netif_set_up>
 800d9da:	e002      	b.n	800d9e2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d9dc:	480b      	ldr	r0, [pc, #44]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9de:	f001 fa9f 	bl	800ef20 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800d9e2:	490b      	ldr	r1, [pc, #44]	; (800da10 <MX_LWIP_Init+0x88>)
 800d9e4:	4809      	ldr	r0, [pc, #36]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9e6:	f001 fb35 	bl	800f054 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800d9ea:	4808      	ldr	r0, [pc, #32]	; (800da0c <MX_LWIP_Init+0x84>)
 800d9ec:	f008 fbce 	bl	801618c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d9f0:	bf00      	nop
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	2000344c 	.word	0x2000344c
 800d9fc:	20003450 	.word	0x20003450
 800da00:	20003454 	.word	0x20003454
 800da04:	08019bdd 	.word	0x08019bdd
 800da08:	0800dc5d 	.word	0x0800dc5d
 800da0c:	20003414 	.word	0x20003414
 800da10:	0800da15 	.word	0x0800da15

0800da14 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800da34:	4b40      	ldr	r3, [pc, #256]	; (800db38 <low_level_init+0x110>)
 800da36:	4a41      	ldr	r2, [pc, #260]	; (800db3c <low_level_init+0x114>)
 800da38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800da3a:	2300      	movs	r3, #0
 800da3c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800da3e:	2380      	movs	r3, #128	; 0x80
 800da40:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800da42:	23e1      	movs	r3, #225	; 0xe1
 800da44:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800da46:	2300      	movs	r3, #0
 800da48:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800da4a:	2300      	movs	r3, #0
 800da4c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800da4e:	2300      	movs	r3, #0
 800da50:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800da52:	4a39      	ldr	r2, [pc, #228]	; (800db38 <low_level_init+0x110>)
 800da54:	f107 0308 	add.w	r3, r7, #8
 800da58:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800da5a:	4b37      	ldr	r3, [pc, #220]	; (800db38 <low_level_init+0x110>)
 800da5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800da60:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800da62:	4b35      	ldr	r3, [pc, #212]	; (800db38 <low_level_init+0x110>)
 800da64:	4a36      	ldr	r2, [pc, #216]	; (800db40 <low_level_init+0x118>)
 800da66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800da68:	4b33      	ldr	r3, [pc, #204]	; (800db38 <low_level_init+0x110>)
 800da6a:	4a36      	ldr	r2, [pc, #216]	; (800db44 <low_level_init+0x11c>)
 800da6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800da6e:	4b32      	ldr	r3, [pc, #200]	; (800db38 <low_level_init+0x110>)
 800da70:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800da74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800da76:	4830      	ldr	r0, [pc, #192]	; (800db38 <low_level_init+0x110>)
 800da78:	f7fc fc42 	bl	800a300 <HAL_ETH_Init>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800da80:	2238      	movs	r2, #56	; 0x38
 800da82:	2100      	movs	r1, #0
 800da84:	4830      	ldr	r0, [pc, #192]	; (800db48 <low_level_init+0x120>)
 800da86:	f00c fcce 	bl	801a426 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800da8a:	4b2f      	ldr	r3, [pc, #188]	; (800db48 <low_level_init+0x120>)
 800da8c:	2221      	movs	r2, #33	; 0x21
 800da8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800da90:	4b2d      	ldr	r3, [pc, #180]	; (800db48 <low_level_init+0x120>)
 800da92:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800da96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800da98:	4b2b      	ldr	r3, [pc, #172]	; (800db48 <low_level_init+0x120>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800da9e:	482b      	ldr	r0, [pc, #172]	; (800db4c <low_level_init+0x124>)
 800daa0:	f000 fed0 	bl	800e844 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2206      	movs	r2, #6
 800daa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800daac:	4b22      	ldr	r3, [pc, #136]	; (800db38 <low_level_init+0x110>)
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	781a      	ldrb	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dab8:	4b1f      	ldr	r3, [pc, #124]	; (800db38 <low_level_init+0x110>)
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	785a      	ldrb	r2, [r3, #1]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dac4:	4b1c      	ldr	r3, [pc, #112]	; (800db38 <low_level_init+0x110>)
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	789a      	ldrb	r2, [r3, #2]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dad0:	4b19      	ldr	r3, [pc, #100]	; (800db38 <low_level_init+0x110>)
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	78da      	ldrb	r2, [r3, #3]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800dadc:	4b16      	ldr	r3, [pc, #88]	; (800db38 <low_level_init+0x110>)
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	791a      	ldrb	r2, [r3, #4]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800dae8:	4b13      	ldr	r3, [pc, #76]	; (800db38 <low_level_init+0x110>)
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	795a      	ldrb	r2, [r3, #5]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dafa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db02:	f043 030a 	orr.w	r3, r3, #10
 800db06:	b2da      	uxtb	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800db0e:	4910      	ldr	r1, [pc, #64]	; (800db50 <low_level_init+0x128>)
 800db10:	4810      	ldr	r0, [pc, #64]	; (800db54 <low_level_init+0x12c>)
 800db12:	f7fc f9bc 	bl	8009e8e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800db16:	480f      	ldr	r0, [pc, #60]	; (800db54 <low_level_init+0x12c>)
 800db18:	f7fc f9eb 	bl	8009ef2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d103      	bne.n	800db2a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f9f0 	bl	800df08 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800db28:	e001      	b.n	800db2e <low_level_init+0x106>
    Error_Handler();
 800db2a:	f7f3 fba9 	bl	8001280 <Error_Handler>
}
 800db2e:	bf00      	nop
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20007de4 	.word	0x20007de4
 800db3c:	40028000 	.word	0x40028000
 800db40:	20000144 	.word	0x20000144
 800db44:	200000a4 	.word	0x200000a4
 800db48:	20007e94 	.word	0x20007e94
 800db4c:	0801fafc 	.word	0x0801fafc
 800db50:	20000024 	.word	0x20000024
 800db54:	20007ecc 	.word	0x20007ecc

0800db58 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b092      	sub	sp, #72	; 0x48
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800db62:	2300      	movs	r3, #0
 800db64:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800db66:	2300      	movs	r3, #0
 800db68:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800db70:	f107 030c 	add.w	r3, r7, #12
 800db74:	2230      	movs	r2, #48	; 0x30
 800db76:	2100      	movs	r1, #0
 800db78:	4618      	mov	r0, r3
 800db7a:	f00c fc54 	bl	801a426 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800db7e:	f107 030c 	add.w	r3, r7, #12
 800db82:	2230      	movs	r2, #48	; 0x30
 800db84:	2100      	movs	r1, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f00c fc4d 	bl	801a426 <memset>

  for(q = p; q != NULL; q = q->next)
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	643b      	str	r3, [r7, #64]	; 0x40
 800db90:	e045      	b.n	800dc1e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800db92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db94:	2b03      	cmp	r3, #3
 800db96:	d902      	bls.n	800db9e <low_level_output+0x46>
      return ERR_IF;
 800db98:	f06f 030b 	mvn.w	r3, #11
 800db9c:	e055      	b.n	800dc4a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800db9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba0:	6859      	ldr	r1, [r3, #4]
 800dba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dba4:	4613      	mov	r3, r2
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	4413      	add	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	3348      	adds	r3, #72	; 0x48
 800dbae:	443b      	add	r3, r7
 800dbb0:	3b3c      	subs	r3, #60	; 0x3c
 800dbb2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800dbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbb6:	895b      	ldrh	r3, [r3, #10]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	4413      	add	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	3348      	adds	r3, #72	; 0x48
 800dbc6:	443b      	add	r3, r7
 800dbc8:	3b38      	subs	r3, #56	; 0x38
 800dbca:	6019      	str	r1, [r3, #0]

    if(i>0)
 800dbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d011      	beq.n	800dbf6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800dbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	f107 000c 	add.w	r0, r7, #12
 800dbda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbdc:	460b      	mov	r3, r1
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	440b      	add	r3, r1
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	18c1      	adds	r1, r0, r3
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	4413      	add	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	3348      	adds	r3, #72	; 0x48
 800dbf0:	443b      	add	r3, r7
 800dbf2:	3b34      	subs	r3, #52	; 0x34
 800dbf4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800dbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800dbfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	3348      	adds	r3, #72	; 0x48
 800dc0a:	443b      	add	r3, r7
 800dc0c:	3b34      	subs	r3, #52	; 0x34
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]
    }

    i++;
 800dc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc14:	3301      	adds	r3, #1
 800dc16:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800dc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1b6      	bne.n	800db92 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	891b      	ldrh	r3, [r3, #8]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <low_level_output+0xfc>)
 800dc2c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800dc2e:	4a09      	ldr	r2, [pc, #36]	; (800dc54 <low_level_output+0xfc>)
 800dc30:	f107 030c 	add.w	r3, r7, #12
 800dc34:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800dc36:	4a07      	ldr	r2, [pc, #28]	; (800dc54 <low_level_output+0xfc>)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800dc3c:	2214      	movs	r2, #20
 800dc3e:	4905      	ldr	r1, [pc, #20]	; (800dc54 <low_level_output+0xfc>)
 800dc40:	4805      	ldr	r0, [pc, #20]	; (800dc58 <low_level_output+0x100>)
 800dc42:	f7fc fcaf 	bl	800a5a4 <HAL_ETH_Transmit>

  return errval;
 800dc46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3748      	adds	r7, #72	; 0x48
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20007e94 	.word	0x20007e94
 800dc58:	20007de4 	.word	0x20007de4

0800dc5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <ethernetif_init+0x1c>
 800dc6a:	4b0e      	ldr	r3, [pc, #56]	; (800dca4 <ethernetif_init+0x48>)
 800dc6c:	f240 127b 	movw	r2, #379	; 0x17b
 800dc70:	490d      	ldr	r1, [pc, #52]	; (800dca8 <ethernetif_init+0x4c>)
 800dc72:	480e      	ldr	r0, [pc, #56]	; (800dcac <ethernetif_init+0x50>)
 800dc74:	f00c fb50 	bl	801a318 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2273      	movs	r2, #115	; 0x73
 800dc7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2274      	movs	r2, #116	; 0x74
 800dc84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a09      	ldr	r2, [pc, #36]	; (800dcb0 <ethernetif_init+0x54>)
 800dc8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a08      	ldr	r2, [pc, #32]	; (800dcb4 <ethernetif_init+0x58>)
 800dc92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7ff fec7 	bl	800da28 <low_level_init>

  return ERR_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	0801cb50 	.word	0x0801cb50
 800dca8:	0801cb6c 	.word	0x0801cb6c
 800dcac:	0801cb7c 	.word	0x0801cb7c
 800dcb0:	08018059 	.word	0x08018059
 800dcb4:	0800db59 	.word	0x0800db59

0800dcb8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800dcc4:	68f9      	ldr	r1, [r7, #12]
 800dcc6:	4807      	ldr	r0, [pc, #28]	; (800dce4 <pbuf_free_custom+0x2c>)
 800dcc8:	f000 fe9e 	bl	800ea08 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800dccc:	4b06      	ldr	r3, [pc, #24]	; (800dce8 <pbuf_free_custom+0x30>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d102      	bne.n	800dcda <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <pbuf_free_custom+0x30>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	701a      	strb	r2, [r3, #0]
  }
}
 800dcda:	bf00      	nop
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	0801fafc 	.word	0x0801fafc
 800dce8:	20007de0 	.word	0x20007de0

0800dcec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dcf0:	f7fc f9f4 	bl	800a0dc <HAL_GetTick>
 800dcf4:	4603      	mov	r3, r0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	bd80      	pop	{r7, pc}
	...

0800dcfc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08e      	sub	sp, #56	; 0x38
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	605a      	str	r2, [r3, #4]
 800dd0e:	609a      	str	r2, [r3, #8]
 800dd10:	60da      	str	r2, [r3, #12]
 800dd12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a4e      	ldr	r2, [pc, #312]	; (800de54 <HAL_ETH_MspInit+0x158>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	f040 8096 	bne.w	800de4c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800dd20:	4b4d      	ldr	r3, [pc, #308]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd24:	4a4c      	ldr	r2, [pc, #304]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd2a:	6313      	str	r3, [r2, #48]	; 0x30
 800dd2c:	4b4a      	ldr	r3, [pc, #296]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd34:	623b      	str	r3, [r7, #32]
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	4b47      	ldr	r3, [pc, #284]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3c:	4a46      	ldr	r2, [pc, #280]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd42:	6313      	str	r3, [r2, #48]	; 0x30
 800dd44:	4b44      	ldr	r3, [pc, #272]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd4c:	61fb      	str	r3, [r7, #28]
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	4b41      	ldr	r3, [pc, #260]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd54:	4a40      	ldr	r2, [pc, #256]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd5a:	6313      	str	r3, [r2, #48]	; 0x30
 800dd5c:	4b3e      	ldr	r3, [pc, #248]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd64:	61bb      	str	r3, [r7, #24]
 800dd66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dd68:	4b3b      	ldr	r3, [pc, #236]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	4a3a      	ldr	r2, [pc, #232]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd6e:	f043 0304 	orr.w	r3, r3, #4
 800dd72:	6313      	str	r3, [r2, #48]	; 0x30
 800dd74:	4b38      	ldr	r3, [pc, #224]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd78:	f003 0304 	and.w	r3, r3, #4
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd80:	4b35      	ldr	r3, [pc, #212]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd84:	4a34      	ldr	r2, [pc, #208]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd86:	f043 0301 	orr.w	r3, r3, #1
 800dd8a:	6313      	str	r3, [r2, #48]	; 0x30
 800dd8c:	4b32      	ldr	r3, [pc, #200]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	613b      	str	r3, [r7, #16]
 800dd96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd98:	4b2f      	ldr	r3, [pc, #188]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9c:	4a2e      	ldr	r2, [pc, #184]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dd9e:	f043 0302 	orr.w	r3, r3, #2
 800dda2:	6313      	str	r3, [r2, #48]	; 0x30
 800dda4:	4b2c      	ldr	r3, [pc, #176]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800dda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda8:	f003 0302 	and.w	r3, r3, #2
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ddb0:	4b29      	ldr	r3, [pc, #164]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800ddb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb4:	4a28      	ldr	r2, [pc, #160]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800ddb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddba:	6313      	str	r3, [r2, #48]	; 0x30
 800ddbc:	4b26      	ldr	r3, [pc, #152]	; (800de58 <HAL_ETH_MspInit+0x15c>)
 800ddbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc4:	60bb      	str	r3, [r7, #8]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ddc8:	2332      	movs	r3, #50	; 0x32
 800ddca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddcc:	2302      	movs	r3, #2
 800ddce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ddd8:	230b      	movs	r3, #11
 800ddda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dde0:	4619      	mov	r1, r3
 800dde2:	481e      	ldr	r0, [pc, #120]	; (800de5c <HAL_ETH_MspInit+0x160>)
 800dde4:	f7fd fafe 	bl	800b3e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800dde8:	2386      	movs	r3, #134	; 0x86
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddec:	2302      	movs	r3, #2
 800ddee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ddf8:	230b      	movs	r3, #11
 800ddfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de00:	4619      	mov	r1, r3
 800de02:	4817      	ldr	r0, [pc, #92]	; (800de60 <HAL_ETH_MspInit+0x164>)
 800de04:	f7fd faee 	bl	800b3e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800de08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de0e:	2302      	movs	r3, #2
 800de10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de12:	2300      	movs	r3, #0
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de16:	2303      	movs	r3, #3
 800de18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800de1a:	230b      	movs	r3, #11
 800de1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de22:	4619      	mov	r1, r3
 800de24:	480f      	ldr	r0, [pc, #60]	; (800de64 <HAL_ETH_MspInit+0x168>)
 800de26:	f7fd fadd 	bl	800b3e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800de2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de30:	2302      	movs	r3, #2
 800de32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de34:	2300      	movs	r3, #0
 800de36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de38:	2303      	movs	r3, #3
 800de3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800de3c:	230b      	movs	r3, #11
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800de40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de44:	4619      	mov	r1, r3
 800de46:	4808      	ldr	r0, [pc, #32]	; (800de68 <HAL_ETH_MspInit+0x16c>)
 800de48:	f7fd facc 	bl	800b3e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800de4c:	bf00      	nop
 800de4e:	3738      	adds	r7, #56	; 0x38
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	40028000 	.word	0x40028000
 800de58:	40023800 	.word	0x40023800
 800de5c:	40020800 	.word	0x40020800
 800de60:	40020000 	.word	0x40020000
 800de64:	40020400 	.word	0x40020400
 800de68:	40021800 	.word	0x40021800

0800de6c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800de70:	4802      	ldr	r0, [pc, #8]	; (800de7c <ETH_PHY_IO_Init+0x10>)
 800de72:	f7fc fe55 	bl	800ab20 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20007de4 	.word	0x20007de4

0800de80 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800de80:	b480      	push	{r7}
 800de82:	af00      	add	r7, sp, #0
  return 0;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	68f9      	ldr	r1, [r7, #12]
 800dea2:	4807      	ldr	r0, [pc, #28]	; (800dec0 <ETH_PHY_IO_ReadReg+0x30>)
 800dea4:	f7fc fc96 	bl	800a7d4 <HAL_ETH_ReadPHYRegister>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800deae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800deb2:	e000      	b.n	800deb6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20007de4 	.word	0x20007de4

0800dec4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	68f9      	ldr	r1, [r7, #12]
 800ded6:	4807      	ldr	r0, [pc, #28]	; (800def4 <ETH_PHY_IO_WriteReg+0x30>)
 800ded8:	f7fc fcc7 	bl	800a86a <HAL_ETH_WritePHYRegister>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d002      	beq.n	800dee8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800dee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dee6:	e000      	b.n	800deea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	20007de4 	.word	0x20007de4

0800def8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800defc:	f7fc f8ee 	bl	800a0dc <HAL_GetTick>
 800df00:	4603      	mov	r3, r0
}
 800df02:	4618      	mov	r0, r3
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b0a0      	sub	sp, #128	; 0x80
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800df10:	f107 030c 	add.w	r3, r7, #12
 800df14:	2264      	movs	r2, #100	; 0x64
 800df16:	2100      	movs	r1, #0
 800df18:	4618      	mov	r0, r3
 800df1a:	f00c fa84 	bl	801a426 <memset>
  int32_t PHYLinkState = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800df22:	2300      	movs	r3, #0
 800df24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df26:	2300      	movs	r3, #0
 800df28:	67bb      	str	r3, [r7, #120]	; 0x78
 800df2a:	2300      	movs	r3, #0
 800df2c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800df2e:	483a      	ldr	r0, [pc, #232]	; (800e018 <ethernet_link_check_state+0x110>)
 800df30:	f7fc f82c 	bl	8009f8c <LAN8742_GetLinkState>
 800df34:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df3c:	089b      	lsrs	r3, r3, #2
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00c      	beq.n	800df62 <ethernet_link_check_state+0x5a>
 800df48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	dc09      	bgt.n	800df62 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800df4e:	4833      	ldr	r0, [pc, #204]	; (800e01c <ethernet_link_check_state+0x114>)
 800df50:	f7fc facf 	bl	800a4f2 <HAL_ETH_Stop>
    netif_set_down(netif);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 ffe3 	bl	800ef20 <netif_set_down>
    netif_set_link_down(netif);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f001 f84a 	bl	800eff4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800df60:	e055      	b.n	800e00e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d14e      	bne.n	800e00e <ethernet_link_check_state+0x106>
 800df70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df72:	2b01      	cmp	r3, #1
 800df74:	dd4b      	ble.n	800e00e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800df76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df78:	3b02      	subs	r3, #2
 800df7a:	2b03      	cmp	r3, #3
 800df7c:	d82a      	bhi.n	800dfd4 <ethernet_link_check_state+0xcc>
 800df7e:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <ethernet_link_check_state+0x7c>)
 800df80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df84:	0800df95 	.word	0x0800df95
 800df88:	0800dfa7 	.word	0x0800dfa7
 800df8c:	0800dfb7 	.word	0x0800dfb7
 800df90:	0800dfc7 	.word	0x0800dfc7
      duplex = ETH_FULLDUPLEX_MODE;
 800df94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800df9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800dfa4:	e017      	b.n	800dfd6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800dfaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dfae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800dfb4:	e00f      	b.n	800dfd6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800dfb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfba:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800dfc4:	e007      	b.n	800dfd6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800dfd2:	e000      	b.n	800dfd6 <ethernet_link_check_state+0xce>
      break;
 800dfd4:	bf00      	nop
    if(linkchanged)
 800dfd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d018      	beq.n	800e00e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800dfdc:	f107 030c 	add.w	r3, r7, #12
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	480e      	ldr	r0, [pc, #56]	; (800e01c <ethernet_link_check_state+0x114>)
 800dfe4:	f7fc fc8a 	bl	800a8fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800dfe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfea:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800dfec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfee:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800dff0:	f107 030c 	add.w	r3, r7, #12
 800dff4:	4619      	mov	r1, r3
 800dff6:	4809      	ldr	r0, [pc, #36]	; (800e01c <ethernet_link_check_state+0x114>)
 800dff8:	f7fc fd77 	bl	800aaea <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800dffc:	4807      	ldr	r0, [pc, #28]	; (800e01c <ethernet_link_check_state+0x114>)
 800dffe:	f7fc fa19 	bl	800a434 <HAL_ETH_Start>
      netif_set_up(netif);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 ff20 	bl	800ee48 <netif_set_up>
      netif_set_link_up(netif);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 ffbb 	bl	800ef84 <netif_set_link_up>
}
 800e00e:	bf00      	nop
 800e010:	3780      	adds	r7, #128	; 0x80
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20007ecc 	.word	0x20007ecc
 800e01c:	20007de4 	.word	0x20007de4

0800e020 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af02      	add	r7, sp, #8
 800e026:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e028:	4812      	ldr	r0, [pc, #72]	; (800e074 <HAL_ETH_RxAllocateCallback+0x54>)
 800e02a:	f000 fc7f 	bl	800e92c <memp_malloc_pool>
 800e02e:	60f8      	str	r0, [r7, #12]
  if (p)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d014      	beq.n	800e060 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f103 0220 	add.w	r2, r3, #32
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4a0d      	ldr	r2, [pc, #52]	; (800e078 <HAL_ETH_RxAllocateCallback+0x58>)
 800e044:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e04e:	9201      	str	r2, [sp, #4]
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2241      	movs	r2, #65	; 0x41
 800e056:	2100      	movs	r1, #0
 800e058:	2000      	movs	r0, #0
 800e05a:	f001 f9a1 	bl	800f3a0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e05e:	e005      	b.n	800e06c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e060:	4b06      	ldr	r3, [pc, #24]	; (800e07c <HAL_ETH_RxAllocateCallback+0x5c>)
 800e062:	2201      	movs	r2, #1
 800e064:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]
}
 800e06c:	bf00      	nop
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	0801fafc 	.word	0x0801fafc
 800e078:	0800dcb9 	.word	0x0800dcb9
 800e07c:	20007de0 	.word	0x20007de0

0800e080 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e08a:	88fb      	ldrh	r3, [r7, #6]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	b21a      	sxth	r2, r3
 800e090:	88fb      	ldrh	r3, [r7, #6]
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	b29b      	uxth	r3, r3
 800e096:	b21b      	sxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	b29b      	uxth	r3, r3
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	370c      	adds	r7, #12
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr

0800e0aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e0aa:	b480      	push	{r7}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	061a      	lsls	r2, r3, #24
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	021b      	lsls	r3, r3, #8
 800e0ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	0a1b      	lsrs	r3, r3, #8
 800e0c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e0c8:	431a      	orrs	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	0e1b      	lsrs	r3, r3, #24
 800e0ce:	4313      	orrs	r3, r2
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e0e6:	f000 f8d5 	bl	800e294 <mem_init>
  memp_init();
 800e0ea:	f000 fbdb 	bl	800e8a4 <memp_init>
  pbuf_init();
  netif_init();
 800e0ee:	f000 fcd9 	bl	800eaa4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e0f2:	f007 f811 	bl	8015118 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e0f6:	f001 fdab 	bl	800fc50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e0fa:	f006 ffc5 	bl	8015088 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	4603      	mov	r3, r0
 800e110:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <ptr_to_mem+0x20>)
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	88fb      	ldrh	r3, [r7, #6]
 800e118:	4413      	add	r3, r2
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	20008558 	.word	0x20008558

0800e12c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e134:	4b05      	ldr	r3, [pc, #20]	; (800e14c <mem_to_ptr+0x20>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	b29b      	uxth	r3, r3
}
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	20008558 	.word	0x20008558

0800e150 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e150:	b590      	push	{r4, r7, lr}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e158:	4b45      	ldr	r3, [pc, #276]	; (800e270 <plug_holes+0x120>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d206      	bcs.n	800e170 <plug_holes+0x20>
 800e162:	4b44      	ldr	r3, [pc, #272]	; (800e274 <plug_holes+0x124>)
 800e164:	f240 12df 	movw	r2, #479	; 0x1df
 800e168:	4943      	ldr	r1, [pc, #268]	; (800e278 <plug_holes+0x128>)
 800e16a:	4844      	ldr	r0, [pc, #272]	; (800e27c <plug_holes+0x12c>)
 800e16c:	f00c f8d4 	bl	801a318 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e170:	4b43      	ldr	r3, [pc, #268]	; (800e280 <plug_holes+0x130>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	429a      	cmp	r2, r3
 800e178:	d306      	bcc.n	800e188 <plug_holes+0x38>
 800e17a:	4b3e      	ldr	r3, [pc, #248]	; (800e274 <plug_holes+0x124>)
 800e17c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e180:	4940      	ldr	r1, [pc, #256]	; (800e284 <plug_holes+0x134>)
 800e182:	483e      	ldr	r0, [pc, #248]	; (800e27c <plug_holes+0x12c>)
 800e184:	f00c f8c8 	bl	801a318 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	791b      	ldrb	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <plug_holes+0x4e>
 800e190:	4b38      	ldr	r3, [pc, #224]	; (800e274 <plug_holes+0x124>)
 800e192:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e196:	493c      	ldr	r1, [pc, #240]	; (800e288 <plug_holes+0x138>)
 800e198:	4838      	ldr	r0, [pc, #224]	; (800e27c <plug_holes+0x12c>)
 800e19a:	f00c f8bd 	bl	801a318 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1a6:	d906      	bls.n	800e1b6 <plug_holes+0x66>
 800e1a8:	4b32      	ldr	r3, [pc, #200]	; (800e274 <plug_holes+0x124>)
 800e1aa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e1ae:	4937      	ldr	r1, [pc, #220]	; (800e28c <plug_holes+0x13c>)
 800e1b0:	4832      	ldr	r0, [pc, #200]	; (800e27c <plug_holes+0x12c>)
 800e1b2:	f00c f8b1 	bl	801a318 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff ffa4 	bl	800e108 <ptr_to_mem>
 800e1c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d024      	beq.n	800e214 <plug_holes+0xc4>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	791b      	ldrb	r3, [r3, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d120      	bne.n	800e214 <plug_holes+0xc4>
 800e1d2:	4b2b      	ldr	r3, [pc, #172]	; (800e280 <plug_holes+0x130>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d01b      	beq.n	800e214 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e1dc:	4b2c      	ldr	r3, [pc, #176]	; (800e290 <plug_holes+0x140>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d102      	bne.n	800e1ec <plug_holes+0x9c>
      lfree = mem;
 800e1e6:	4a2a      	ldr	r2, [pc, #168]	; (800e290 <plug_holes+0x140>)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	881a      	ldrh	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1fc:	d00a      	beq.n	800e214 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff ff80 	bl	800e108 <ptr_to_mem>
 800e208:	4604      	mov	r4, r0
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ff8e 	bl	800e12c <mem_to_ptr>
 800e210:	4603      	mov	r3, r0
 800e212:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	885b      	ldrh	r3, [r3, #2]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff ff75 	bl	800e108 <ptr_to_mem>
 800e21e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	429a      	cmp	r2, r3
 800e226:	d01f      	beq.n	800e268 <plug_holes+0x118>
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	791b      	ldrb	r3, [r3, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d11b      	bne.n	800e268 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e230:	4b17      	ldr	r3, [pc, #92]	; (800e290 <plug_holes+0x140>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d102      	bne.n	800e240 <plug_holes+0xf0>
      lfree = pmem;
 800e23a:	4a15      	ldr	r2, [pc, #84]	; (800e290 <plug_holes+0x140>)
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	881a      	ldrh	r2, [r3, #0]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e250:	d00a      	beq.n	800e268 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	881b      	ldrh	r3, [r3, #0]
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff ff56 	bl	800e108 <ptr_to_mem>
 800e25c:	4604      	mov	r4, r0
 800e25e:	68b8      	ldr	r0, [r7, #8]
 800e260:	f7ff ff64 	bl	800e12c <mem_to_ptr>
 800e264:	4603      	mov	r3, r0
 800e266:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e268:	bf00      	nop
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd90      	pop	{r4, r7, pc}
 800e270:	20008558 	.word	0x20008558
 800e274:	0801cba4 	.word	0x0801cba4
 800e278:	0801cbd4 	.word	0x0801cbd4
 800e27c:	0801cbec 	.word	0x0801cbec
 800e280:	2000855c 	.word	0x2000855c
 800e284:	0801cc14 	.word	0x0801cc14
 800e288:	0801cc30 	.word	0x0801cc30
 800e28c:	0801cc4c 	.word	0x0801cc4c
 800e290:	20008560 	.word	0x20008560

0800e294 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e29a:	4b18      	ldr	r3, [pc, #96]	; (800e2fc <mem_init+0x68>)
 800e29c:	3303      	adds	r3, #3
 800e29e:	f023 0303 	bic.w	r3, r3, #3
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	4b16      	ldr	r3, [pc, #88]	; (800e300 <mem_init+0x6c>)
 800e2a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e2a8:	4b15      	ldr	r3, [pc, #84]	; (800e300 <mem_init+0x6c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e2b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e2c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800e2c6:	f7ff ff1f 	bl	800e108 <ptr_to_mem>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	4a0d      	ldr	r2, [pc, #52]	; (800e304 <mem_init+0x70>)
 800e2ce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e2d0:	4b0c      	ldr	r3, [pc, #48]	; (800e304 <mem_init+0x70>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <mem_init+0x70>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e2e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e2e2:	4b08      	ldr	r3, [pc, #32]	; (800e304 <mem_init+0x70>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e2ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e2ec:	4b04      	ldr	r3, [pc, #16]	; (800e300 <mem_init+0x6c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a05      	ldr	r2, [pc, #20]	; (800e308 <mem_init+0x74>)
 800e2f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20007f04 	.word	0x20007f04
 800e300:	20008558 	.word	0x20008558
 800e304:	2000855c 	.word	0x2000855c
 800e308:	20008560 	.word	0x20008560

0800e30c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff ff09 	bl	800e12c <mem_to_ptr>
 800e31a:	4603      	mov	r3, r0
 800e31c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	4618      	mov	r0, r3
 800e324:	f7ff fef0 	bl	800e108 <ptr_to_mem>
 800e328:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	885b      	ldrh	r3, [r3, #2]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff feea 	bl	800e108 <ptr_to_mem>
 800e334:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e33e:	d818      	bhi.n	800e372 <mem_link_valid+0x66>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	885b      	ldrh	r3, [r3, #2]
 800e344:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e348:	d813      	bhi.n	800e372 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e34e:	8afa      	ldrh	r2, [r7, #22]
 800e350:	429a      	cmp	r2, r3
 800e352:	d004      	beq.n	800e35e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	8afa      	ldrh	r2, [r7, #22]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d109      	bne.n	800e372 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e35e:	4b08      	ldr	r3, [pc, #32]	; (800e380 <mem_link_valid+0x74>)
 800e360:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	429a      	cmp	r2, r3
 800e366:	d006      	beq.n	800e376 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	885b      	ldrh	r3, [r3, #2]
 800e36c:	8afa      	ldrh	r2, [r7, #22]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d001      	beq.n	800e376 <mem_link_valid+0x6a>
    return 0;
 800e372:	2300      	movs	r3, #0
 800e374:	e000      	b.n	800e378 <mem_link_valid+0x6c>
  }
  return 1;
 800e376:	2301      	movs	r3, #1
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3718      	adds	r7, #24
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	2000855c 	.word	0x2000855c

0800e384 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d04c      	beq.n	800e42c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f003 0303 	and.w	r3, r3, #3
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d007      	beq.n	800e3ac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e39c:	4b25      	ldr	r3, [pc, #148]	; (800e434 <mem_free+0xb0>)
 800e39e:	f240 2273 	movw	r2, #627	; 0x273
 800e3a2:	4925      	ldr	r1, [pc, #148]	; (800e438 <mem_free+0xb4>)
 800e3a4:	4825      	ldr	r0, [pc, #148]	; (800e43c <mem_free+0xb8>)
 800e3a6:	f00b ffb7 	bl	801a318 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e3aa:	e040      	b.n	800e42e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3b08      	subs	r3, #8
 800e3b0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e3b2:	4b23      	ldr	r3, [pc, #140]	; (800e440 <mem_free+0xbc>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d306      	bcc.n	800e3ca <mem_free+0x46>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f103 020c 	add.w	r2, r3, #12
 800e3c2:	4b20      	ldr	r3, [pc, #128]	; (800e444 <mem_free+0xc0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d907      	bls.n	800e3da <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e3ca:	4b1a      	ldr	r3, [pc, #104]	; (800e434 <mem_free+0xb0>)
 800e3cc:	f240 227f 	movw	r2, #639	; 0x27f
 800e3d0:	491d      	ldr	r1, [pc, #116]	; (800e448 <mem_free+0xc4>)
 800e3d2:	481a      	ldr	r0, [pc, #104]	; (800e43c <mem_free+0xb8>)
 800e3d4:	f00b ffa0 	bl	801a318 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e3d8:	e029      	b.n	800e42e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	791b      	ldrb	r3, [r3, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d107      	bne.n	800e3f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e3e2:	4b14      	ldr	r3, [pc, #80]	; (800e434 <mem_free+0xb0>)
 800e3e4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e3e8:	4918      	ldr	r1, [pc, #96]	; (800e44c <mem_free+0xc8>)
 800e3ea:	4814      	ldr	r0, [pc, #80]	; (800e43c <mem_free+0xb8>)
 800e3ec:	f00b ff94 	bl	801a318 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e3f0:	e01d      	b.n	800e42e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f7ff ff8a 	bl	800e30c <mem_link_valid>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d107      	bne.n	800e40e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e3fe:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <mem_free+0xb0>)
 800e400:	f240 2295 	movw	r2, #661	; 0x295
 800e404:	4912      	ldr	r1, [pc, #72]	; (800e450 <mem_free+0xcc>)
 800e406:	480d      	ldr	r0, [pc, #52]	; (800e43c <mem_free+0xb8>)
 800e408:	f00b ff86 	bl	801a318 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e40c:	e00f      	b.n	800e42e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e414:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <mem_free+0xd0>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d202      	bcs.n	800e424 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e41e:	4a0d      	ldr	r2, [pc, #52]	; (800e454 <mem_free+0xd0>)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7ff fe93 	bl	800e150 <plug_holes>
 800e42a:	e000      	b.n	800e42e <mem_free+0xaa>
    return;
 800e42c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	0801cba4 	.word	0x0801cba4
 800e438:	0801cc78 	.word	0x0801cc78
 800e43c:	0801cbec 	.word	0x0801cbec
 800e440:	20008558 	.word	0x20008558
 800e444:	2000855c 	.word	0x2000855c
 800e448:	0801cc9c 	.word	0x0801cc9c
 800e44c:	0801ccb8 	.word	0x0801ccb8
 800e450:	0801cce0 	.word	0x0801cce0
 800e454:	20008560 	.word	0x20008560

0800e458 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	460b      	mov	r3, r1
 800e462:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e464:	887b      	ldrh	r3, [r7, #2]
 800e466:	3303      	adds	r3, #3
 800e468:	b29b      	uxth	r3, r3
 800e46a:	f023 0303 	bic.w	r3, r3, #3
 800e46e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e470:	8bfb      	ldrh	r3, [r7, #30]
 800e472:	2b0b      	cmp	r3, #11
 800e474:	d801      	bhi.n	800e47a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e476:	230c      	movs	r3, #12
 800e478:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e47a:	8bfb      	ldrh	r3, [r7, #30]
 800e47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e480:	d803      	bhi.n	800e48a <mem_trim+0x32>
 800e482:	8bfa      	ldrh	r2, [r7, #30]
 800e484:	887b      	ldrh	r3, [r7, #2]
 800e486:	429a      	cmp	r2, r3
 800e488:	d201      	bcs.n	800e48e <mem_trim+0x36>
    return NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	e0cc      	b.n	800e628 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e48e:	4b68      	ldr	r3, [pc, #416]	; (800e630 <mem_trim+0x1d8>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d304      	bcc.n	800e4a2 <mem_trim+0x4a>
 800e498:	4b66      	ldr	r3, [pc, #408]	; (800e634 <mem_trim+0x1dc>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d306      	bcc.n	800e4b0 <mem_trim+0x58>
 800e4a2:	4b65      	ldr	r3, [pc, #404]	; (800e638 <mem_trim+0x1e0>)
 800e4a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e4a8:	4964      	ldr	r1, [pc, #400]	; (800e63c <mem_trim+0x1e4>)
 800e4aa:	4865      	ldr	r0, [pc, #404]	; (800e640 <mem_trim+0x1e8>)
 800e4ac:	f00b ff34 	bl	801a318 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e4b0:	4b5f      	ldr	r3, [pc, #380]	; (800e630 <mem_trim+0x1d8>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d304      	bcc.n	800e4c4 <mem_trim+0x6c>
 800e4ba:	4b5e      	ldr	r3, [pc, #376]	; (800e634 <mem_trim+0x1dc>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d301      	bcc.n	800e4c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	e0af      	b.n	800e628 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3b08      	subs	r3, #8
 800e4cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e4ce:	69b8      	ldr	r0, [r7, #24]
 800e4d0:	f7ff fe2c 	bl	800e12c <mem_to_ptr>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	881a      	ldrh	r2, [r3, #0]
 800e4dc:	8afb      	ldrh	r3, [r7, #22]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	3b08      	subs	r3, #8
 800e4e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e4e6:	8bfa      	ldrh	r2, [r7, #30]
 800e4e8:	8abb      	ldrh	r3, [r7, #20]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d906      	bls.n	800e4fc <mem_trim+0xa4>
 800e4ee:	4b52      	ldr	r3, [pc, #328]	; (800e638 <mem_trim+0x1e0>)
 800e4f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e4f4:	4953      	ldr	r1, [pc, #332]	; (800e644 <mem_trim+0x1ec>)
 800e4f6:	4852      	ldr	r0, [pc, #328]	; (800e640 <mem_trim+0x1e8>)
 800e4f8:	f00b ff0e 	bl	801a318 <iprintf>
  if (newsize > size) {
 800e4fc:	8bfa      	ldrh	r2, [r7, #30]
 800e4fe:	8abb      	ldrh	r3, [r7, #20]
 800e500:	429a      	cmp	r2, r3
 800e502:	d901      	bls.n	800e508 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800e504:	2300      	movs	r3, #0
 800e506:	e08f      	b.n	800e628 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800e508:	8bfa      	ldrh	r2, [r7, #30]
 800e50a:	8abb      	ldrh	r3, [r7, #20]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d101      	bne.n	800e514 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	e089      	b.n	800e628 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7ff fdf5 	bl	800e108 <ptr_to_mem>
 800e51e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	791b      	ldrb	r3, [r3, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d13f      	bne.n	800e5a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e530:	d106      	bne.n	800e540 <mem_trim+0xe8>
 800e532:	4b41      	ldr	r3, [pc, #260]	; (800e638 <mem_trim+0x1e0>)
 800e534:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e538:	4943      	ldr	r1, [pc, #268]	; (800e648 <mem_trim+0x1f0>)
 800e53a:	4841      	ldr	r0, [pc, #260]	; (800e640 <mem_trim+0x1e8>)
 800e53c:	f00b feec 	bl	801a318 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e546:	8afa      	ldrh	r2, [r7, #22]
 800e548:	8bfb      	ldrh	r3, [r7, #30]
 800e54a:	4413      	add	r3, r2
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	3308      	adds	r3, #8
 800e550:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e552:	4b3e      	ldr	r3, [pc, #248]	; (800e64c <mem_trim+0x1f4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d106      	bne.n	800e56a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800e55c:	89fb      	ldrh	r3, [r7, #14]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7ff fdd2 	bl	800e108 <ptr_to_mem>
 800e564:	4603      	mov	r3, r0
 800e566:	4a39      	ldr	r2, [pc, #228]	; (800e64c <mem_trim+0x1f4>)
 800e568:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e56a:	89fb      	ldrh	r3, [r7, #14]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fdcb 	bl	800e108 <ptr_to_mem>
 800e572:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2200      	movs	r2, #0
 800e578:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	89ba      	ldrh	r2, [r7, #12]
 800e57e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	8afa      	ldrh	r2, [r7, #22]
 800e584:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	89fa      	ldrh	r2, [r7, #14]
 800e58a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e594:	d047      	beq.n	800e626 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fdb4 	bl	800e108 <ptr_to_mem>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	89fb      	ldrh	r3, [r7, #14]
 800e5a4:	8053      	strh	r3, [r2, #2]
 800e5a6:	e03e      	b.n	800e626 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e5a8:	8bfb      	ldrh	r3, [r7, #30]
 800e5aa:	f103 0214 	add.w	r2, r3, #20
 800e5ae:	8abb      	ldrh	r3, [r7, #20]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d838      	bhi.n	800e626 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e5b4:	8afa      	ldrh	r2, [r7, #22]
 800e5b6:	8bfb      	ldrh	r3, [r7, #30]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	3308      	adds	r3, #8
 800e5be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e5c8:	d106      	bne.n	800e5d8 <mem_trim+0x180>
 800e5ca:	4b1b      	ldr	r3, [pc, #108]	; (800e638 <mem_trim+0x1e0>)
 800e5cc:	f240 3216 	movw	r2, #790	; 0x316
 800e5d0:	491d      	ldr	r1, [pc, #116]	; (800e648 <mem_trim+0x1f0>)
 800e5d2:	481b      	ldr	r0, [pc, #108]	; (800e640 <mem_trim+0x1e8>)
 800e5d4:	f00b fea0 	bl	801a318 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e5d8:	89fb      	ldrh	r3, [r7, #14]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fd94 	bl	800e108 <ptr_to_mem>
 800e5e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e5e2:	4b1a      	ldr	r3, [pc, #104]	; (800e64c <mem_trim+0x1f4>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d202      	bcs.n	800e5f2 <mem_trim+0x19a>
      lfree = mem2;
 800e5ec:	4a17      	ldr	r2, [pc, #92]	; (800e64c <mem_trim+0x1f4>)
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	881a      	ldrh	r2, [r3, #0]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	8afa      	ldrh	r2, [r7, #22]
 800e604:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	89fa      	ldrh	r2, [r7, #14]
 800e60a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e614:	d007      	beq.n	800e626 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fd74 	bl	800e108 <ptr_to_mem>
 800e620:	4602      	mov	r2, r0
 800e622:	89fb      	ldrh	r3, [r7, #14]
 800e624:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800e626:	687b      	ldr	r3, [r7, #4]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3720      	adds	r7, #32
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	20008558 	.word	0x20008558
 800e634:	2000855c 	.word	0x2000855c
 800e638:	0801cba4 	.word	0x0801cba4
 800e63c:	0801cd14 	.word	0x0801cd14
 800e640:	0801cbec 	.word	0x0801cbec
 800e644:	0801cd2c 	.word	0x0801cd2c
 800e648:	0801cd4c 	.word	0x0801cd4c
 800e64c:	20008560 	.word	0x20008560

0800e650 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b088      	sub	sp, #32
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <mem_malloc+0x14>
    return NULL;
 800e660:	2300      	movs	r3, #0
 800e662:	e0d9      	b.n	800e818 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e664:	88fb      	ldrh	r3, [r7, #6]
 800e666:	3303      	adds	r3, #3
 800e668:	b29b      	uxth	r3, r3
 800e66a:	f023 0303 	bic.w	r3, r3, #3
 800e66e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e670:	8bbb      	ldrh	r3, [r7, #28]
 800e672:	2b0b      	cmp	r3, #11
 800e674:	d801      	bhi.n	800e67a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e676:	230c      	movs	r3, #12
 800e678:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e67a:	8bbb      	ldrh	r3, [r7, #28]
 800e67c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e680:	d803      	bhi.n	800e68a <mem_malloc+0x3a>
 800e682:	8bba      	ldrh	r2, [r7, #28]
 800e684:	88fb      	ldrh	r3, [r7, #6]
 800e686:	429a      	cmp	r2, r3
 800e688:	d201      	bcs.n	800e68e <mem_malloc+0x3e>
    return NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e0c4      	b.n	800e818 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e68e:	4b64      	ldr	r3, [pc, #400]	; (800e820 <mem_malloc+0x1d0>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fd4a 	bl	800e12c <mem_to_ptr>
 800e698:	4603      	mov	r3, r0
 800e69a:	83fb      	strh	r3, [r7, #30]
 800e69c:	e0b4      	b.n	800e808 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e69e:	8bfb      	ldrh	r3, [r7, #30]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fd31 	bl	800e108 <ptr_to_mem>
 800e6a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	791b      	ldrb	r3, [r3, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f040 80a4 	bne.w	800e7fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	881b      	ldrh	r3, [r3, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	8bfb      	ldrh	r3, [r7, #30]
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	f1a3 0208 	sub.w	r2, r3, #8
 800e6c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	f0c0 8099 	bcc.w	800e7fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	8bfb      	ldrh	r3, [r7, #30]
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	f1a3 0208 	sub.w	r2, r3, #8
 800e6d6:	8bbb      	ldrh	r3, [r7, #28]
 800e6d8:	3314      	adds	r3, #20
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d333      	bcc.n	800e746 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e6de:	8bfa      	ldrh	r2, [r7, #30]
 800e6e0:	8bbb      	ldrh	r3, [r7, #28]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e6ea:	8a7b      	ldrh	r3, [r7, #18]
 800e6ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e6f0:	d106      	bne.n	800e700 <mem_malloc+0xb0>
 800e6f2:	4b4c      	ldr	r3, [pc, #304]	; (800e824 <mem_malloc+0x1d4>)
 800e6f4:	f240 3287 	movw	r2, #903	; 0x387
 800e6f8:	494b      	ldr	r1, [pc, #300]	; (800e828 <mem_malloc+0x1d8>)
 800e6fa:	484c      	ldr	r0, [pc, #304]	; (800e82c <mem_malloc+0x1dc>)
 800e6fc:	f00b fe0c 	bl	801a318 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e700:	8a7b      	ldrh	r3, [r7, #18]
 800e702:	4618      	mov	r0, r3
 800e704:	f7ff fd00 	bl	800e108 <ptr_to_mem>
 800e708:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	881a      	ldrh	r2, [r3, #0]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	8bfa      	ldrh	r2, [r7, #30]
 800e71c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	8a7a      	ldrh	r2, [r7, #18]
 800e722:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2201      	movs	r2, #1
 800e728:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e732:	d00b      	beq.n	800e74c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff fce5 	bl	800e108 <ptr_to_mem>
 800e73e:	4602      	mov	r2, r0
 800e740:	8a7b      	ldrh	r3, [r7, #18]
 800e742:	8053      	strh	r3, [r2, #2]
 800e744:	e002      	b.n	800e74c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2201      	movs	r2, #1
 800e74a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e74c:	4b34      	ldr	r3, [pc, #208]	; (800e820 <mem_malloc+0x1d0>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	429a      	cmp	r2, r3
 800e754:	d127      	bne.n	800e7a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800e756:	4b32      	ldr	r3, [pc, #200]	; (800e820 <mem_malloc+0x1d0>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e75c:	e005      	b.n	800e76a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	4618      	mov	r0, r3
 800e764:	f7ff fcd0 	bl	800e108 <ptr_to_mem>
 800e768:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	791b      	ldrb	r3, [r3, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d004      	beq.n	800e77c <mem_malloc+0x12c>
 800e772:	4b2f      	ldr	r3, [pc, #188]	; (800e830 <mem_malloc+0x1e0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	69ba      	ldr	r2, [r7, #24]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d1f0      	bne.n	800e75e <mem_malloc+0x10e>
          }
          lfree = cur;
 800e77c:	4a28      	ldr	r2, [pc, #160]	; (800e820 <mem_malloc+0x1d0>)
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e782:	4b27      	ldr	r3, [pc, #156]	; (800e820 <mem_malloc+0x1d0>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	4b2a      	ldr	r3, [pc, #168]	; (800e830 <mem_malloc+0x1e0>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d00b      	beq.n	800e7a6 <mem_malloc+0x156>
 800e78e:	4b24      	ldr	r3, [pc, #144]	; (800e820 <mem_malloc+0x1d0>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	791b      	ldrb	r3, [r3, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d006      	beq.n	800e7a6 <mem_malloc+0x156>
 800e798:	4b22      	ldr	r3, [pc, #136]	; (800e824 <mem_malloc+0x1d4>)
 800e79a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e79e:	4925      	ldr	r1, [pc, #148]	; (800e834 <mem_malloc+0x1e4>)
 800e7a0:	4822      	ldr	r0, [pc, #136]	; (800e82c <mem_malloc+0x1dc>)
 800e7a2:	f00b fdb9 	bl	801a318 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e7a6:	8bba      	ldrh	r2, [r7, #28]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	3308      	adds	r3, #8
 800e7ae:	4a20      	ldr	r2, [pc, #128]	; (800e830 <mem_malloc+0x1e0>)
 800e7b0:	6812      	ldr	r2, [r2, #0]
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d906      	bls.n	800e7c4 <mem_malloc+0x174>
 800e7b6:	4b1b      	ldr	r3, [pc, #108]	; (800e824 <mem_malloc+0x1d4>)
 800e7b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e7bc:	491e      	ldr	r1, [pc, #120]	; (800e838 <mem_malloc+0x1e8>)
 800e7be:	481b      	ldr	r0, [pc, #108]	; (800e82c <mem_malloc+0x1dc>)
 800e7c0:	f00b fdaa 	bl	801a318 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f003 0303 	and.w	r3, r3, #3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d006      	beq.n	800e7dc <mem_malloc+0x18c>
 800e7ce:	4b15      	ldr	r3, [pc, #84]	; (800e824 <mem_malloc+0x1d4>)
 800e7d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e7d4:	4919      	ldr	r1, [pc, #100]	; (800e83c <mem_malloc+0x1ec>)
 800e7d6:	4815      	ldr	r0, [pc, #84]	; (800e82c <mem_malloc+0x1dc>)
 800e7d8:	f00b fd9e 	bl	801a318 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	f003 0303 	and.w	r3, r3, #3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d006      	beq.n	800e7f4 <mem_malloc+0x1a4>
 800e7e6:	4b0f      	ldr	r3, [pc, #60]	; (800e824 <mem_malloc+0x1d4>)
 800e7e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e7ec:	4914      	ldr	r1, [pc, #80]	; (800e840 <mem_malloc+0x1f0>)
 800e7ee:	480f      	ldr	r0, [pc, #60]	; (800e82c <mem_malloc+0x1dc>)
 800e7f0:	f00b fd92 	bl	801a318 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	e00e      	b.n	800e818 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800e7fa:	8bfb      	ldrh	r3, [r7, #30]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff fc83 	bl	800e108 <ptr_to_mem>
 800e802:	4603      	mov	r3, r0
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e808:	8bfa      	ldrh	r2, [r7, #30]
 800e80a:	8bbb      	ldrh	r3, [r7, #28]
 800e80c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e810:	429a      	cmp	r2, r3
 800e812:	f4ff af44 	bcc.w	800e69e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20008560 	.word	0x20008560
 800e824:	0801cba4 	.word	0x0801cba4
 800e828:	0801cd4c 	.word	0x0801cd4c
 800e82c:	0801cbec 	.word	0x0801cbec
 800e830:	2000855c 	.word	0x2000855c
 800e834:	0801cd60 	.word	0x0801cd60
 800e838:	0801cd7c 	.word	0x0801cd7c
 800e83c:	0801cdac 	.word	0x0801cdac
 800e840:	0801cddc 	.word	0x0801cddc

0800e844 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	3303      	adds	r3, #3
 800e85a:	f023 0303 	bic.w	r3, r3, #3
 800e85e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e860:	2300      	movs	r3, #0
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	e011      	b.n	800e88a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	881b      	ldrh	r3, [r3, #0]
 800e87c:	461a      	mov	r2, r3
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	4413      	add	r3, r2
 800e882:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	3301      	adds	r3, #1
 800e888:	60fb      	str	r3, [r7, #12]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	885b      	ldrh	r3, [r3, #2]
 800e88e:	461a      	mov	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4293      	cmp	r3, r2
 800e894:	dbe7      	blt.n	800e866 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e896:	bf00      	nop
 800e898:	bf00      	nop
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	80fb      	strh	r3, [r7, #6]
 800e8ae:	e009      	b.n	800e8c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e8b0:	88fb      	ldrh	r3, [r7, #6]
 800e8b2:	4a08      	ldr	r2, [pc, #32]	; (800e8d4 <memp_init+0x30>)
 800e8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff ffc3 	bl	800e844 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	80fb      	strh	r3, [r7, #6]
 800e8c4:	88fb      	ldrh	r3, [r7, #6]
 800e8c6:	2b08      	cmp	r3, #8
 800e8c8:	d9f2      	bls.n	800e8b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e8ca:	bf00      	nop
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	0801fb74 	.word	0x0801fb74

0800e8d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d012      	beq.n	800e914 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	6812      	ldr	r2, [r2, #0]
 800e8f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f003 0303 	and.w	r3, r3, #3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d006      	beq.n	800e910 <do_memp_malloc_pool+0x38>
 800e902:	4b07      	ldr	r3, [pc, #28]	; (800e920 <do_memp_malloc_pool+0x48>)
 800e904:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e908:	4906      	ldr	r1, [pc, #24]	; (800e924 <do_memp_malloc_pool+0x4c>)
 800e90a:	4807      	ldr	r0, [pc, #28]	; (800e928 <do_memp_malloc_pool+0x50>)
 800e90c:	f00b fd04 	bl	801a318 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	e000      	b.n	800e916 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	0801ce00 	.word	0x0801ce00
 800e924:	0801ce30 	.word	0x0801ce30
 800e928:	0801ce54 	.word	0x0801ce54

0800e92c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <memp_malloc_pool+0x1c>
 800e93a:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <memp_malloc_pool+0x38>)
 800e93c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e940:	4909      	ldr	r1, [pc, #36]	; (800e968 <memp_malloc_pool+0x3c>)
 800e942:	480a      	ldr	r0, [pc, #40]	; (800e96c <memp_malloc_pool+0x40>)
 800e944:	f00b fce8 	bl	801a318 <iprintf>
  if (desc == NULL) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <memp_malloc_pool+0x26>
    return NULL;
 800e94e:	2300      	movs	r3, #0
 800e950:	e003      	b.n	800e95a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff ffc0 	bl	800e8d8 <do_memp_malloc_pool>
 800e958:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	0801ce00 	.word	0x0801ce00
 800e968:	0801ce7c 	.word	0x0801ce7c
 800e96c:	0801ce54 	.word	0x0801ce54

0800e970 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	2b08      	cmp	r3, #8
 800e97e:	d908      	bls.n	800e992 <memp_malloc+0x22>
 800e980:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <memp_malloc+0x3c>)
 800e982:	f240 1257 	movw	r2, #343	; 0x157
 800e986:	490a      	ldr	r1, [pc, #40]	; (800e9b0 <memp_malloc+0x40>)
 800e988:	480a      	ldr	r0, [pc, #40]	; (800e9b4 <memp_malloc+0x44>)
 800e98a:	f00b fcc5 	bl	801a318 <iprintf>
 800e98e:	2300      	movs	r3, #0
 800e990:	e008      	b.n	800e9a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	4a08      	ldr	r2, [pc, #32]	; (800e9b8 <memp_malloc+0x48>)
 800e996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7ff ff9c 	bl	800e8d8 <do_memp_malloc_pool>
 800e9a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	0801ce00 	.word	0x0801ce00
 800e9b0:	0801ce90 	.word	0x0801ce90
 800e9b4:	0801ce54 	.word	0x0801ce54
 800e9b8:	0801fb74 	.word	0x0801fb74

0800e9bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f003 0303 	and.w	r3, r3, #3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d006      	beq.n	800e9de <do_memp_free_pool+0x22>
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <do_memp_free_pool+0x40>)
 800e9d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e9d6:	490a      	ldr	r1, [pc, #40]	; (800ea00 <do_memp_free_pool+0x44>)
 800e9d8:	480a      	ldr	r0, [pc, #40]	; (800ea04 <do_memp_free_pool+0x48>)
 800e9da:	f00b fc9d 	bl	801a318 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800e9f4:	bf00      	nop
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	0801ce00 	.word	0x0801ce00
 800ea00:	0801ceb0 	.word	0x0801ceb0
 800ea04:	0801ce54 	.word	0x0801ce54

0800ea08 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d106      	bne.n	800ea26 <memp_free_pool+0x1e>
 800ea18:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <memp_free_pool+0x3c>)
 800ea1a:	f240 1295 	movw	r2, #405	; 0x195
 800ea1e:	490a      	ldr	r1, [pc, #40]	; (800ea48 <memp_free_pool+0x40>)
 800ea20:	480a      	ldr	r0, [pc, #40]	; (800ea4c <memp_free_pool+0x44>)
 800ea22:	f00b fc79 	bl	801a318 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <memp_free_pool+0x34>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d004      	beq.n	800ea3c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff ffc1 	bl	800e9bc <do_memp_free_pool>
 800ea3a:	e000      	b.n	800ea3e <memp_free_pool+0x36>
    return;
 800ea3c:	bf00      	nop
}
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	0801ce00 	.word	0x0801ce00
 800ea48:	0801ce7c 	.word	0x0801ce7c
 800ea4c:	0801ce54 	.word	0x0801ce54

0800ea50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	2b08      	cmp	r3, #8
 800ea60:	d907      	bls.n	800ea72 <memp_free+0x22>
 800ea62:	4b0c      	ldr	r3, [pc, #48]	; (800ea94 <memp_free+0x44>)
 800ea64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ea68:	490b      	ldr	r1, [pc, #44]	; (800ea98 <memp_free+0x48>)
 800ea6a:	480c      	ldr	r0, [pc, #48]	; (800ea9c <memp_free+0x4c>)
 800ea6c:	f00b fc54 	bl	801a318 <iprintf>
 800ea70:	e00c      	b.n	800ea8c <memp_free+0x3c>

  if (mem == NULL) {
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d008      	beq.n	800ea8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ea78:	79fb      	ldrb	r3, [r7, #7]
 800ea7a:	4a09      	ldr	r2, [pc, #36]	; (800eaa0 <memp_free+0x50>)
 800ea7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff ff9a 	bl	800e9bc <do_memp_free_pool>
 800ea88:	e000      	b.n	800ea8c <memp_free+0x3c>
    return;
 800ea8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	0801ce00 	.word	0x0801ce00
 800ea98:	0801ced0 	.word	0x0801ced0
 800ea9c:	0801ce54 	.word	0x0801ce54
 800eaa0:	0801fb74 	.word	0x0801fb74

0800eaa4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800eaa8:	bf00      	nop
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
	...

0800eab4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d108      	bne.n	800eada <netif_add+0x26>
 800eac8:	4b5b      	ldr	r3, [pc, #364]	; (800ec38 <netif_add+0x184>)
 800eaca:	f240 1227 	movw	r2, #295	; 0x127
 800eace:	495b      	ldr	r1, [pc, #364]	; (800ec3c <netif_add+0x188>)
 800ead0:	485b      	ldr	r0, [pc, #364]	; (800ec40 <netif_add+0x18c>)
 800ead2:	f00b fc21 	bl	801a318 <iprintf>
 800ead6:	2300      	movs	r3, #0
 800ead8:	e0a9      	b.n	800ec2e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d108      	bne.n	800eaf2 <netif_add+0x3e>
 800eae0:	4b55      	ldr	r3, [pc, #340]	; (800ec38 <netif_add+0x184>)
 800eae2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800eae6:	4957      	ldr	r1, [pc, #348]	; (800ec44 <netif_add+0x190>)
 800eae8:	4855      	ldr	r0, [pc, #340]	; (800ec40 <netif_add+0x18c>)
 800eaea:	f00b fc15 	bl	801a318 <iprintf>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e09d      	b.n	800ec2e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d101      	bne.n	800eafc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800eaf8:	4b53      	ldr	r3, [pc, #332]	; (800ec48 <netif_add+0x194>)
 800eafa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800eb02:	4b51      	ldr	r3, [pc, #324]	; (800ec48 <netif_add+0x194>)
 800eb04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d101      	bne.n	800eb10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800eb0c:	4b4e      	ldr	r3, [pc, #312]	; (800ec48 <netif_add+0x194>)
 800eb0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	4a49      	ldr	r2, [pc, #292]	; (800ec4c <netif_add+0x198>)
 800eb26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3324      	adds	r3, #36	; 0x24
 800eb3a:	2204      	movs	r2, #4
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f00b fc71 	bl	801a426 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6a3a      	ldr	r2, [r7, #32]
 800eb4e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800eb50:	4b3f      	ldr	r3, [pc, #252]	; (800ec50 <netif_add+0x19c>)
 800eb52:	781a      	ldrb	r2, [r3, #0]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb5e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	68b9      	ldr	r1, [r7, #8]
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f000 f914 	bl	800ed94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	4798      	blx	r3
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d001      	beq.n	800eb7c <netif_add+0xc8>
    return NULL;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e058      	b.n	800ec2e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb82:	2bff      	cmp	r3, #255	; 0xff
 800eb84:	d103      	bne.n	800eb8e <netif_add+0xda>
        netif->num = 0;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eb92:	4b30      	ldr	r3, [pc, #192]	; (800ec54 <netif_add+0x1a0>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	e02b      	b.n	800ebf2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d106      	bne.n	800ebb0 <netif_add+0xfc>
 800eba2:	4b25      	ldr	r3, [pc, #148]	; (800ec38 <netif_add+0x184>)
 800eba4:	f240 128b 	movw	r2, #395	; 0x18b
 800eba8:	492b      	ldr	r1, [pc, #172]	; (800ec58 <netif_add+0x1a4>)
 800ebaa:	4825      	ldr	r0, [pc, #148]	; (800ec40 <netif_add+0x18c>)
 800ebac:	f00b fbb4 	bl	801a318 <iprintf>
        num_netifs++;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	2bff      	cmp	r3, #255	; 0xff
 800ebba:	dd06      	ble.n	800ebca <netif_add+0x116>
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <netif_add+0x184>)
 800ebbe:	f240 128d 	movw	r2, #397	; 0x18d
 800ebc2:	4926      	ldr	r1, [pc, #152]	; (800ec5c <netif_add+0x1a8>)
 800ebc4:	481e      	ldr	r0, [pc, #120]	; (800ec40 <netif_add+0x18c>)
 800ebc6:	f00b fba7 	bl	801a318 <iprintf>
        if (netif2->num == netif->num) {
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d108      	bne.n	800ebec <netif_add+0x138>
          netif->num++;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800ebea:	e005      	b.n	800ebf8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	617b      	str	r3, [r7, #20]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1d0      	bne.n	800eb9a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1be      	bne.n	800eb7c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec04:	2bfe      	cmp	r3, #254	; 0xfe
 800ec06:	d103      	bne.n	800ec10 <netif_add+0x15c>
    netif_num = 0;
 800ec08:	4b11      	ldr	r3, [pc, #68]	; (800ec50 <netif_add+0x19c>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	701a      	strb	r2, [r3, #0]
 800ec0e:	e006      	b.n	800ec1e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec16:	3301      	adds	r3, #1
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	; (800ec50 <netif_add+0x19c>)
 800ec1c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	; (800ec54 <netif_add+0x1a0>)
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ec26:	4a0b      	ldr	r2, [pc, #44]	; (800ec54 <netif_add+0x1a0>)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3718      	adds	r7, #24
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	0801ceec 	.word	0x0801ceec
 800ec3c:	0801cf80 	.word	0x0801cf80
 800ec40:	0801cf3c 	.word	0x0801cf3c
 800ec44:	0801cf9c 	.word	0x0801cf9c
 800ec48:	0801fbe8 	.word	0x0801fbe8
 800ec4c:	0800f077 	.word	0x0800f077
 800ec50:	2000b478 	.word	0x2000b478
 800ec54:	2000b470 	.word	0x2000b470
 800ec58:	0801cfc0 	.word	0x0801cfc0
 800ec5c:	0801cfd4 	.word	0x0801cfd4

0800ec60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f002 fb37 	bl	80112e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f006 fedb 	bl	8015a30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d106      	bne.n	800eca4 <netif_do_set_ipaddr+0x20>
 800ec96:	4b1d      	ldr	r3, [pc, #116]	; (800ed0c <netif_do_set_ipaddr+0x88>)
 800ec98:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ec9c:	491c      	ldr	r1, [pc, #112]	; (800ed10 <netif_do_set_ipaddr+0x8c>)
 800ec9e:	481d      	ldr	r0, [pc, #116]	; (800ed14 <netif_do_set_ipaddr+0x90>)
 800eca0:	f00b fb3a 	bl	801a318 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <netif_do_set_ipaddr+0x34>
 800ecaa:	4b18      	ldr	r3, [pc, #96]	; (800ed0c <netif_do_set_ipaddr+0x88>)
 800ecac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ecb0:	4917      	ldr	r1, [pc, #92]	; (800ed10 <netif_do_set_ipaddr+0x8c>)
 800ecb2:	4818      	ldr	r0, [pc, #96]	; (800ed14 <netif_do_set_ipaddr+0x90>)
 800ecb4:	f00b fb30 	bl	801a318 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d01c      	beq.n	800ed00 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ecd6:	f107 0314 	add.w	r3, r7, #20
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ffbf 	bl	800ec60 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <netif_do_set_ipaddr+0x6a>
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	e000      	b.n	800ecf0 <netif_do_set_ipaddr+0x6c>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ecf4:	2101      	movs	r1, #1
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f000 f8d2 	bl	800eea0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e000      	b.n	800ed02 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ed00:	2300      	movs	r3, #0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	0801ceec 	.word	0x0801ceec
 800ed10:	0801d004 	.word	0x0801d004
 800ed14:	0801cf3c 	.word	0x0801cf3c

0800ed18 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3308      	adds	r3, #8
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d00a      	beq.n	800ed48 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <netif_do_set_netmask+0x26>
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	e000      	b.n	800ed40 <netif_do_set_netmask+0x28>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ed44:	2301      	movs	r3, #1
 800ed46:	e000      	b.n	800ed4a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	60b9      	str	r1, [r7, #8]
 800ed60:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	330c      	adds	r3, #12
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d00a      	beq.n	800ed86 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <netif_do_set_gw+0x26>
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	e000      	b.n	800ed7e <netif_do_set_gw+0x28>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b088      	sub	sp, #32
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800edb0:	4b1c      	ldr	r3, [pc, #112]	; (800ee24 <netif_set_addr+0x90>)
 800edb2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d101      	bne.n	800edbe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800edba:	4b1a      	ldr	r3, [pc, #104]	; (800ee24 <netif_set_addr+0x90>)
 800edbc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d101      	bne.n	800edc8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800edc4:	4b17      	ldr	r3, [pc, #92]	; (800ee24 <netif_set_addr+0x90>)
 800edc6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <netif_set_addr+0x42>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d101      	bne.n	800edda <netif_set_addr+0x46>
 800edd6:	2301      	movs	r3, #1
 800edd8:	e000      	b.n	800eddc <netif_set_addr+0x48>
 800edda:	2300      	movs	r3, #0
 800eddc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d006      	beq.n	800edf2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ede4:	f107 0310 	add.w	r3, r7, #16
 800ede8:	461a      	mov	r2, r3
 800edea:	68b9      	ldr	r1, [r7, #8]
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7ff ff49 	bl	800ec84 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800edf2:	69fa      	ldr	r2, [r7, #28]
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff ff8e 	bl	800ed18 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f7ff ffa8 	bl	800ed56 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d106      	bne.n	800ee1a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ee0c:	f107 0310 	add.w	r3, r7, #16
 800ee10:	461a      	mov	r2, r3
 800ee12:	68b9      	ldr	r1, [r7, #8]
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f7ff ff35 	bl	800ec84 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ee1a:	bf00      	nop
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	0801fbe8 	.word	0x0801fbe8

0800ee28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ee30:	4a04      	ldr	r2, [pc, #16]	; (800ee44 <netif_set_default+0x1c>)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ee36:	bf00      	nop
 800ee38:	370c      	adds	r7, #12
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	2000b474 	.word	0x2000b474

0800ee48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d107      	bne.n	800ee66 <netif_set_up+0x1e>
 800ee56:	4b0f      	ldr	r3, [pc, #60]	; (800ee94 <netif_set_up+0x4c>)
 800ee58:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ee5c:	490e      	ldr	r1, [pc, #56]	; (800ee98 <netif_set_up+0x50>)
 800ee5e:	480f      	ldr	r0, [pc, #60]	; (800ee9c <netif_set_up+0x54>)
 800ee60:	f00b fa5a 	bl	801a318 <iprintf>
 800ee64:	e013      	b.n	800ee8e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10c      	bne.n	800ee8e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee7a:	f043 0301 	orr.w	r3, r3, #1
 800ee7e:	b2da      	uxtb	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ee86:	2103      	movs	r1, #3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f809 	bl	800eea0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	0801ceec 	.word	0x0801ceec
 800ee98:	0801d074 	.word	0x0801d074
 800ee9c:	0801cf3c 	.word	0x0801cf3c

0800eea0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <netif_issue_reports+0x20>
 800eeb2:	4b18      	ldr	r3, [pc, #96]	; (800ef14 <netif_issue_reports+0x74>)
 800eeb4:	f240 326d 	movw	r2, #877	; 0x36d
 800eeb8:	4917      	ldr	r1, [pc, #92]	; (800ef18 <netif_issue_reports+0x78>)
 800eeba:	4818      	ldr	r0, [pc, #96]	; (800ef1c <netif_issue_reports+0x7c>)
 800eebc:	f00b fa2c 	bl	801a318 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d01e      	beq.n	800ef0c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eed4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d017      	beq.n	800ef0c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eedc:	78fb      	ldrb	r3, [r7, #3]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d013      	beq.n	800ef0e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	3304      	adds	r3, #4
 800eeea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00e      	beq.n	800ef0e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eef6:	f003 0308 	and.w	r3, r3, #8
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f009 fb95 	bl	8018634 <etharp_request>
 800ef0a:	e000      	b.n	800ef0e <netif_issue_reports+0x6e>
    return;
 800ef0c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	0801ceec 	.word	0x0801ceec
 800ef18:	0801d090 	.word	0x0801d090
 800ef1c:	0801cf3c 	.word	0x0801cf3c

0800ef20 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d107      	bne.n	800ef3e <netif_set_down+0x1e>
 800ef2e:	4b12      	ldr	r3, [pc, #72]	; (800ef78 <netif_set_down+0x58>)
 800ef30:	f240 329b 	movw	r2, #923	; 0x39b
 800ef34:	4911      	ldr	r1, [pc, #68]	; (800ef7c <netif_set_down+0x5c>)
 800ef36:	4812      	ldr	r0, [pc, #72]	; (800ef80 <netif_set_down+0x60>)
 800ef38:	f00b f9ee 	bl	801a318 <iprintf>
 800ef3c:	e019      	b.n	800ef72 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ef44:	f003 0301 	and.w	r3, r3, #1
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d012      	beq.n	800ef72 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ef52:	f023 0301 	bic.w	r3, r3, #1
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ef64:	f003 0308 	and.w	r3, r3, #8
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d002      	beq.n	800ef72 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f008 ff1b 	bl	8017da8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	0801ceec 	.word	0x0801ceec
 800ef7c:	0801d0b4 	.word	0x0801d0b4
 800ef80:	0801cf3c 	.word	0x0801cf3c

0800ef84 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d107      	bne.n	800efa2 <netif_set_link_up+0x1e>
 800ef92:	4b15      	ldr	r3, [pc, #84]	; (800efe8 <netif_set_link_up+0x64>)
 800ef94:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ef98:	4914      	ldr	r1, [pc, #80]	; (800efec <netif_set_link_up+0x68>)
 800ef9a:	4815      	ldr	r0, [pc, #84]	; (800eff0 <netif_set_link_up+0x6c>)
 800ef9c:	f00b f9bc 	bl	801a318 <iprintf>
 800efa0:	e01e      	b.n	800efe0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efa8:	f003 0304 	and.w	r3, r3, #4
 800efac:	2b00      	cmp	r3, #0
 800efae:	d117      	bne.n	800efe0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efb6:	f043 0304 	orr.w	r3, r3, #4
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f007 f960 	bl	8016288 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800efc8:	2103      	movs	r1, #3
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7ff ff68 	bl	800eea0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <netif_set_link_up+0x5c>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	69db      	ldr	r3, [r3, #28]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	0801ceec 	.word	0x0801ceec
 800efec:	0801d0d4 	.word	0x0801d0d4
 800eff0:	0801cf3c 	.word	0x0801cf3c

0800eff4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d107      	bne.n	800f012 <netif_set_link_down+0x1e>
 800f002:	4b11      	ldr	r3, [pc, #68]	; (800f048 <netif_set_link_down+0x54>)
 800f004:	f240 4206 	movw	r2, #1030	; 0x406
 800f008:	4910      	ldr	r1, [pc, #64]	; (800f04c <netif_set_link_down+0x58>)
 800f00a:	4811      	ldr	r0, [pc, #68]	; (800f050 <netif_set_link_down+0x5c>)
 800f00c:	f00b f984 	bl	801a318 <iprintf>
 800f010:	e017      	b.n	800f042 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f018:	f003 0304 	and.w	r3, r3, #4
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f026:	f023 0304 	bic.w	r3, r3, #4
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	69db      	ldr	r3, [r3, #28]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <netif_set_link_down+0x4e>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	69db      	ldr	r3, [r3, #28]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	0801ceec 	.word	0x0801ceec
 800f04c:	0801d0f8 	.word	0x0801d0f8
 800f050:	0801cf3c 	.word	0x0801cf3c

0800f054 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	61da      	str	r2, [r3, #28]
  }
}
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f076:	b480      	push	{r7}
 800f078:	b085      	sub	sp, #20
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	60f8      	str	r0, [r7, #12]
 800f07e:	60b9      	str	r1, [r7, #8]
 800f080:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f082:	f06f 030b 	mvn.w	r3, #11
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
	...

0800f094 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d013      	beq.n	800f0cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f0a4:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <netif_get_by_index+0x48>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	e00c      	b.n	800f0c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	79fa      	ldrb	r2, [r7, #7]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d101      	bne.n	800f0c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	e006      	b.n	800f0ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	60fb      	str	r3, [r7, #12]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1ef      	bne.n	800f0ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	2000b470 	.word	0x2000b470

0800f0e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f0e4:	4b03      	ldr	r3, [pc, #12]	; (800f0f4 <pbuf_pool_is_empty+0x14>)
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f0ea:	bf00      	nop
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr
 800f0f4:	2000b479 	.word	0x2000b479

0800f0f8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	4611      	mov	r1, r2
 800f104:	461a      	mov	r2, r3
 800f106:	460b      	mov	r3, r1
 800f108:	80fb      	strh	r3, [r7, #6]
 800f10a:	4613      	mov	r3, r2
 800f10c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	88fa      	ldrh	r2, [r7, #6]
 800f11e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	88ba      	ldrh	r2, [r7, #4]
 800f124:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f126:	8b3b      	ldrh	r3, [r7, #24]
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	7f3a      	ldrb	r2, [r7, #28]
 800f132:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2201      	movs	r2, #1
 800f138:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	73da      	strb	r2, [r3, #15]
}
 800f140:	bf00      	nop
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	; 0x30
 800f150:	af02      	add	r7, sp, #8
 800f152:	4603      	mov	r3, r0
 800f154:	71fb      	strb	r3, [r7, #7]
 800f156:	460b      	mov	r3, r1
 800f158:	80bb      	strh	r3, [r7, #4]
 800f15a:	4613      	mov	r3, r2
 800f15c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f162:	887b      	ldrh	r3, [r7, #2]
 800f164:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f168:	d07f      	beq.n	800f26a <pbuf_alloc+0x11e>
 800f16a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f16e:	f300 80c8 	bgt.w	800f302 <pbuf_alloc+0x1b6>
 800f172:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f176:	d010      	beq.n	800f19a <pbuf_alloc+0x4e>
 800f178:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f17c:	f300 80c1 	bgt.w	800f302 <pbuf_alloc+0x1b6>
 800f180:	2b01      	cmp	r3, #1
 800f182:	d002      	beq.n	800f18a <pbuf_alloc+0x3e>
 800f184:	2b41      	cmp	r3, #65	; 0x41
 800f186:	f040 80bc 	bne.w	800f302 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f18a:	887a      	ldrh	r2, [r7, #2]
 800f18c:	88bb      	ldrh	r3, [r7, #4]
 800f18e:	4619      	mov	r1, r3
 800f190:	2000      	movs	r0, #0
 800f192:	f000 f8d1 	bl	800f338 <pbuf_alloc_reference>
 800f196:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f198:	e0bd      	b.n	800f316 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f1a2:	88bb      	ldrh	r3, [r7, #4]
 800f1a4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f1a6:	2008      	movs	r0, #8
 800f1a8:	f7ff fbe2 	bl	800e970 <memp_malloc>
 800f1ac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f1b4:	f7ff ff94 	bl	800f0e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f1be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1c0:	f000 faa8 	bl	800f714 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e0a7      	b.n	800f318 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f1c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1ca:	3303      	adds	r3, #3
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	f023 0303 	bic.w	r3, r3, #3
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	8b7a      	ldrh	r2, [r7, #26]
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	bf28      	it	cs
 800f1e0:	4613      	movcs	r3, r2
 800f1e2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f1e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1e6:	3310      	adds	r3, #16
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	3303      	adds	r3, #3
 800f1ee:	f023 0303 	bic.w	r3, r3, #3
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	89f9      	ldrh	r1, [r7, #14]
 800f1f6:	8b7a      	ldrh	r2, [r7, #26]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9301      	str	r3, [sp, #4]
 800f1fc:	887b      	ldrh	r3, [r7, #2]
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	460b      	mov	r3, r1
 800f202:	4601      	mov	r1, r0
 800f204:	6938      	ldr	r0, [r7, #16]
 800f206:	f7ff ff77 	bl	800f0f8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	f003 0303 	and.w	r3, r3, #3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d006      	beq.n	800f224 <pbuf_alloc+0xd8>
 800f216:	4b42      	ldr	r3, [pc, #264]	; (800f320 <pbuf_alloc+0x1d4>)
 800f218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f21c:	4941      	ldr	r1, [pc, #260]	; (800f324 <pbuf_alloc+0x1d8>)
 800f21e:	4842      	ldr	r0, [pc, #264]	; (800f328 <pbuf_alloc+0x1dc>)
 800f220:	f00b f87a 	bl	801a318 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f226:	3303      	adds	r3, #3
 800f228:	f023 0303 	bic.w	r3, r3, #3
 800f22c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f230:	d106      	bne.n	800f240 <pbuf_alloc+0xf4>
 800f232:	4b3b      	ldr	r3, [pc, #236]	; (800f320 <pbuf_alloc+0x1d4>)
 800f234:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f238:	493c      	ldr	r1, [pc, #240]	; (800f32c <pbuf_alloc+0x1e0>)
 800f23a:	483b      	ldr	r0, [pc, #236]	; (800f328 <pbuf_alloc+0x1dc>)
 800f23c:	f00b f86c 	bl	801a318 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	2b00      	cmp	r3, #0
 800f244:	d102      	bne.n	800f24c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	627b      	str	r3, [r7, #36]	; 0x24
 800f24a:	e002      	b.n	800f252 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f256:	8b7a      	ldrh	r2, [r7, #26]
 800f258:	89fb      	ldrh	r3, [r7, #14]
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f262:	8b7b      	ldrh	r3, [r7, #26]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d19e      	bne.n	800f1a6 <pbuf_alloc+0x5a>
      break;
 800f268:	e055      	b.n	800f316 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f26a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f26c:	3303      	adds	r3, #3
 800f26e:	b29b      	uxth	r3, r3
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	b29a      	uxth	r2, r3
 800f276:	88bb      	ldrh	r3, [r7, #4]
 800f278:	3303      	adds	r3, #3
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	f023 0303 	bic.w	r3, r3, #3
 800f280:	b29b      	uxth	r3, r3
 800f282:	4413      	add	r3, r2
 800f284:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f286:	8b3b      	ldrh	r3, [r7, #24]
 800f288:	3310      	adds	r3, #16
 800f28a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f28c:	8b3a      	ldrh	r2, [r7, #24]
 800f28e:	88bb      	ldrh	r3, [r7, #4]
 800f290:	3303      	adds	r3, #3
 800f292:	f023 0303 	bic.w	r3, r3, #3
 800f296:	429a      	cmp	r2, r3
 800f298:	d306      	bcc.n	800f2a8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f29a:	8afa      	ldrh	r2, [r7, #22]
 800f29c:	88bb      	ldrh	r3, [r7, #4]
 800f29e:	3303      	adds	r3, #3
 800f2a0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d201      	bcs.n	800f2ac <pbuf_alloc+0x160>
        return NULL;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e035      	b.n	800f318 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f2ac:	8afb      	ldrh	r3, [r7, #22]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7ff f9ce 	bl	800e650 <mem_malloc>
 800f2b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d101      	bne.n	800f2c0 <pbuf_alloc+0x174>
        return NULL;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e02b      	b.n	800f318 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f2c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2c2:	3310      	adds	r3, #16
 800f2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c6:	4413      	add	r3, r2
 800f2c8:	3303      	adds	r3, #3
 800f2ca:	f023 0303 	bic.w	r3, r3, #3
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	88b9      	ldrh	r1, [r7, #4]
 800f2d2:	88ba      	ldrh	r2, [r7, #4]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	887b      	ldrh	r3, [r7, #2]
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4601      	mov	r1, r0
 800f2e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e2:	f7ff ff09 	bl	800f0f8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f003 0303 	and.w	r3, r3, #3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d010      	beq.n	800f314 <pbuf_alloc+0x1c8>
 800f2f2:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <pbuf_alloc+0x1d4>)
 800f2f4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f2f8:	490d      	ldr	r1, [pc, #52]	; (800f330 <pbuf_alloc+0x1e4>)
 800f2fa:	480b      	ldr	r0, [pc, #44]	; (800f328 <pbuf_alloc+0x1dc>)
 800f2fc:	f00b f80c 	bl	801a318 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f300:	e008      	b.n	800f314 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f302:	4b07      	ldr	r3, [pc, #28]	; (800f320 <pbuf_alloc+0x1d4>)
 800f304:	f240 1227 	movw	r2, #295	; 0x127
 800f308:	490a      	ldr	r1, [pc, #40]	; (800f334 <pbuf_alloc+0x1e8>)
 800f30a:	4807      	ldr	r0, [pc, #28]	; (800f328 <pbuf_alloc+0x1dc>)
 800f30c:	f00b f804 	bl	801a318 <iprintf>
      return NULL;
 800f310:	2300      	movs	r3, #0
 800f312:	e001      	b.n	800f318 <pbuf_alloc+0x1cc>
      break;
 800f314:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3728      	adds	r7, #40	; 0x28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	0801d11c 	.word	0x0801d11c
 800f324:	0801d14c 	.word	0x0801d14c
 800f328:	0801d17c 	.word	0x0801d17c
 800f32c:	0801d1a4 	.word	0x0801d1a4
 800f330:	0801d1d8 	.word	0x0801d1d8
 800f334:	0801d204 	.word	0x0801d204

0800f338 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af02      	add	r7, sp, #8
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	460b      	mov	r3, r1
 800f342:	807b      	strh	r3, [r7, #2]
 800f344:	4613      	mov	r3, r2
 800f346:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f348:	883b      	ldrh	r3, [r7, #0]
 800f34a:	2b41      	cmp	r3, #65	; 0x41
 800f34c:	d009      	beq.n	800f362 <pbuf_alloc_reference+0x2a>
 800f34e:	883b      	ldrh	r3, [r7, #0]
 800f350:	2b01      	cmp	r3, #1
 800f352:	d006      	beq.n	800f362 <pbuf_alloc_reference+0x2a>
 800f354:	4b0f      	ldr	r3, [pc, #60]	; (800f394 <pbuf_alloc_reference+0x5c>)
 800f356:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f35a:	490f      	ldr	r1, [pc, #60]	; (800f398 <pbuf_alloc_reference+0x60>)
 800f35c:	480f      	ldr	r0, [pc, #60]	; (800f39c <pbuf_alloc_reference+0x64>)
 800f35e:	f00a ffdb 	bl	801a318 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f362:	2007      	movs	r0, #7
 800f364:	f7ff fb04 	bl	800e970 <memp_malloc>
 800f368:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d101      	bne.n	800f374 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f370:	2300      	movs	r3, #0
 800f372:	e00b      	b.n	800f38c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f374:	8879      	ldrh	r1, [r7, #2]
 800f376:	887a      	ldrh	r2, [r7, #2]
 800f378:	2300      	movs	r3, #0
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	883b      	ldrh	r3, [r7, #0]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	460b      	mov	r3, r1
 800f382:	6879      	ldr	r1, [r7, #4]
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff feb7 	bl	800f0f8 <pbuf_init_alloced_pbuf>
  return p;
 800f38a:	68fb      	ldr	r3, [r7, #12]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	0801d11c 	.word	0x0801d11c
 800f398:	0801d220 	.word	0x0801d220
 800f39c:	0801d17c 	.word	0x0801d17c

0800f3a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b088      	sub	sp, #32
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	607b      	str	r3, [r7, #4]
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	81bb      	strh	r3, [r7, #12]
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
 800f3b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f3b8:	8a7b      	ldrh	r3, [r7, #18]
 800f3ba:	3303      	adds	r3, #3
 800f3bc:	f023 0203 	bic.w	r2, r3, #3
 800f3c0:	89bb      	ldrh	r3, [r7, #12]
 800f3c2:	441a      	add	r2, r3
 800f3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d901      	bls.n	800f3ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e018      	b.n	800f400 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d007      	beq.n	800f3e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f3d4:	8a7b      	ldrh	r3, [r7, #18]
 800f3d6:	3303      	adds	r3, #3
 800f3d8:	f023 0303 	bic.w	r3, r3, #3
 800f3dc:	6a3a      	ldr	r2, [r7, #32]
 800f3de:	4413      	add	r3, r2
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e001      	b.n	800f3e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	89b9      	ldrh	r1, [r7, #12]
 800f3ec:	89ba      	ldrh	r2, [r7, #12]
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	897b      	ldrh	r3, [r7, #10]
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	6979      	ldr	r1, [r7, #20]
 800f3fa:	f7ff fe7d 	bl	800f0f8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f3fe:	687b      	ldr	r3, [r7, #4]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d106      	bne.n	800f428 <pbuf_realloc+0x20>
 800f41a:	4b3a      	ldr	r3, [pc, #232]	; (800f504 <pbuf_realloc+0xfc>)
 800f41c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f420:	4939      	ldr	r1, [pc, #228]	; (800f508 <pbuf_realloc+0x100>)
 800f422:	483a      	ldr	r0, [pc, #232]	; (800f50c <pbuf_realloc+0x104>)
 800f424:	f00a ff78 	bl	801a318 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	891b      	ldrh	r3, [r3, #8]
 800f42c:	887a      	ldrh	r2, [r7, #2]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d263      	bcs.n	800f4fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	891a      	ldrh	r2, [r3, #8]
 800f436:	887b      	ldrh	r3, [r7, #2]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f43c:	887b      	ldrh	r3, [r7, #2]
 800f43e:	817b      	strh	r3, [r7, #10]
  q = p;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f444:	e018      	b.n	800f478 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	895b      	ldrh	r3, [r3, #10]
 800f44a:	897a      	ldrh	r2, [r7, #10]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	891a      	ldrh	r2, [r3, #8]
 800f454:	893b      	ldrh	r3, [r7, #8]
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	b29a      	uxth	r2, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d106      	bne.n	800f478 <pbuf_realloc+0x70>
 800f46a:	4b26      	ldr	r3, [pc, #152]	; (800f504 <pbuf_realloc+0xfc>)
 800f46c:	f240 12af 	movw	r2, #431	; 0x1af
 800f470:	4927      	ldr	r1, [pc, #156]	; (800f510 <pbuf_realloc+0x108>)
 800f472:	4826      	ldr	r0, [pc, #152]	; (800f50c <pbuf_realloc+0x104>)
 800f474:	f00a ff50 	bl	801a318 <iprintf>
  while (rem_len > q->len) {
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	895b      	ldrh	r3, [r3, #10]
 800f47c:	897a      	ldrh	r2, [r7, #10]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d8e1      	bhi.n	800f446 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	7b1b      	ldrb	r3, [r3, #12]
 800f486:	f003 030f 	and.w	r3, r3, #15
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d121      	bne.n	800f4d2 <pbuf_realloc+0xca>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	895b      	ldrh	r3, [r3, #10]
 800f492:	897a      	ldrh	r2, [r7, #10]
 800f494:	429a      	cmp	r2, r3
 800f496:	d01c      	beq.n	800f4d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	7b5b      	ldrb	r3, [r3, #13]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d116      	bne.n	800f4d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	897b      	ldrh	r3, [r7, #10]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f7fe ffce 	bl	800e458 <mem_trim>
 800f4bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d106      	bne.n	800f4d2 <pbuf_realloc+0xca>
 800f4c4:	4b0f      	ldr	r3, [pc, #60]	; (800f504 <pbuf_realloc+0xfc>)
 800f4c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f4ca:	4912      	ldr	r1, [pc, #72]	; (800f514 <pbuf_realloc+0x10c>)
 800f4cc:	480f      	ldr	r0, [pc, #60]	; (800f50c <pbuf_realloc+0x104>)
 800f4ce:	f00a ff23 	bl	801a318 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	897a      	ldrh	r2, [r7, #10]
 800f4d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	895a      	ldrh	r2, [r3, #10]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d004      	beq.n	800f4f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f911 	bl	800f714 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	e000      	b.n	800f4fc <pbuf_realloc+0xf4>
    return;
 800f4fa:	bf00      	nop

}
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	0801d11c 	.word	0x0801d11c
 800f508:	0801d234 	.word	0x0801d234
 800f50c:	0801d17c 	.word	0x0801d17c
 800f510:	0801d24c 	.word	0x0801d24c
 800f514:	0801d264 	.word	0x0801d264

0800f518 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d106      	bne.n	800f53a <pbuf_add_header_impl+0x22>
 800f52c:	4b2b      	ldr	r3, [pc, #172]	; (800f5dc <pbuf_add_header_impl+0xc4>)
 800f52e:	f240 12df 	movw	r2, #479	; 0x1df
 800f532:	492b      	ldr	r1, [pc, #172]	; (800f5e0 <pbuf_add_header_impl+0xc8>)
 800f534:	482b      	ldr	r0, [pc, #172]	; (800f5e4 <pbuf_add_header_impl+0xcc>)
 800f536:	f00a feef 	bl	801a318 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <pbuf_add_header_impl+0x30>
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f546:	d301      	bcc.n	800f54c <pbuf_add_header_impl+0x34>
    return 1;
 800f548:	2301      	movs	r3, #1
 800f54a:	e043      	b.n	800f5d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <pbuf_add_header_impl+0x3e>
    return 0;
 800f552:	2300      	movs	r3, #0
 800f554:	e03e      	b.n	800f5d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	891a      	ldrh	r2, [r3, #8]
 800f55e:	8a7b      	ldrh	r3, [r7, #18]
 800f560:	4413      	add	r3, r2
 800f562:	b29b      	uxth	r3, r3
 800f564:	8a7a      	ldrh	r2, [r7, #18]
 800f566:	429a      	cmp	r2, r3
 800f568:	d901      	bls.n	800f56e <pbuf_add_header_impl+0x56>
    return 1;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e032      	b.n	800f5d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	7b1b      	ldrb	r3, [r3, #12]
 800f572:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f574:	8a3b      	ldrh	r3, [r7, #16]
 800f576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00c      	beq.n	800f598 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	685a      	ldr	r2, [r3, #4]
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	425b      	negs	r3, r3
 800f586:	4413      	add	r3, r2
 800f588:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3310      	adds	r3, #16
 800f58e:	697a      	ldr	r2, [r7, #20]
 800f590:	429a      	cmp	r2, r3
 800f592:	d20d      	bcs.n	800f5b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f594:	2301      	movs	r3, #1
 800f596:	e01d      	b.n	800f5d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d006      	beq.n	800f5ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	425b      	negs	r3, r3
 800f5a6:	4413      	add	r3, r2
 800f5a8:	617b      	str	r3, [r7, #20]
 800f5aa:	e001      	b.n	800f5b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e011      	b.n	800f5d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	895a      	ldrh	r2, [r3, #10]
 800f5ba:	8a7b      	ldrh	r3, [r7, #18]
 800f5bc:	4413      	add	r3, r2
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	891a      	ldrh	r2, [r3, #8]
 800f5c8:	8a7b      	ldrh	r3, [r7, #18]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	811a      	strh	r2, [r3, #8]


  return 0;
 800f5d2:	2300      	movs	r3, #0
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	0801d11c 	.word	0x0801d11c
 800f5e0:	0801d280 	.word	0x0801d280
 800f5e4:	0801d17c 	.word	0x0801d17c

0800f5e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff ff8e 	bl	800f518 <pbuf_add_header_impl>
 800f5fc:	4603      	mov	r3, r0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
	...

0800f608 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d106      	bne.n	800f626 <pbuf_remove_header+0x1e>
 800f618:	4b20      	ldr	r3, [pc, #128]	; (800f69c <pbuf_remove_header+0x94>)
 800f61a:	f240 224b 	movw	r2, #587	; 0x24b
 800f61e:	4920      	ldr	r1, [pc, #128]	; (800f6a0 <pbuf_remove_header+0x98>)
 800f620:	4820      	ldr	r0, [pc, #128]	; (800f6a4 <pbuf_remove_header+0x9c>)
 800f622:	f00a fe79 	bl	801a318 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d003      	beq.n	800f634 <pbuf_remove_header+0x2c>
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f632:	d301      	bcc.n	800f638 <pbuf_remove_header+0x30>
    return 1;
 800f634:	2301      	movs	r3, #1
 800f636:	e02c      	b.n	800f692 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <pbuf_remove_header+0x3a>
    return 0;
 800f63e:	2300      	movs	r3, #0
 800f640:	e027      	b.n	800f692 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	895b      	ldrh	r3, [r3, #10]
 800f64a:	89fa      	ldrh	r2, [r7, #14]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d908      	bls.n	800f662 <pbuf_remove_header+0x5a>
 800f650:	4b12      	ldr	r3, [pc, #72]	; (800f69c <pbuf_remove_header+0x94>)
 800f652:	f240 2255 	movw	r2, #597	; 0x255
 800f656:	4914      	ldr	r1, [pc, #80]	; (800f6a8 <pbuf_remove_header+0xa0>)
 800f658:	4812      	ldr	r0, [pc, #72]	; (800f6a4 <pbuf_remove_header+0x9c>)
 800f65a:	f00a fe5d 	bl	801a318 <iprintf>
 800f65e:	2301      	movs	r3, #1
 800f660:	e017      	b.n	800f692 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685a      	ldr	r2, [r3, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	441a      	add	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	895a      	ldrh	r2, [r3, #10]
 800f678:	89fb      	ldrh	r3, [r7, #14]
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	891a      	ldrh	r2, [r3, #8]
 800f686:	89fb      	ldrh	r3, [r7, #14]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	0801d11c 	.word	0x0801d11c
 800f6a0:	0801d280 	.word	0x0801d280
 800f6a4:	0801d17c 	.word	0x0801d17c
 800f6a8:	0801d28c 	.word	0x0801d28c

0800f6ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	807b      	strh	r3, [r7, #2]
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f6bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	da08      	bge.n	800f6d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f6c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6c8:	425b      	negs	r3, r3
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff ff9b 	bl	800f608 <pbuf_remove_header>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	e007      	b.n	800f6e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f6d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6da:	787a      	ldrb	r2, [r7, #1]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f7ff ff1a 	bl	800f518 <pbuf_add_header_impl>
 800f6e4:	4603      	mov	r3, r0
  }
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f6fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6fe:	2201      	movs	r2, #1
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7ff ffd2 	bl	800f6ac <pbuf_header_impl>
 800f708:	4603      	mov	r3, r0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
	...

0800f714 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10b      	bne.n	800f73a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <pbuf_free+0x22>
 800f728:	4b38      	ldr	r3, [pc, #224]	; (800f80c <pbuf_free+0xf8>)
 800f72a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f72e:	4938      	ldr	r1, [pc, #224]	; (800f810 <pbuf_free+0xfc>)
 800f730:	4838      	ldr	r0, [pc, #224]	; (800f814 <pbuf_free+0x100>)
 800f732:	f00a fdf1 	bl	801a318 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f736:	2300      	movs	r3, #0
 800f738:	e063      	b.n	800f802 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f73e:	e05c      	b.n	800f7fa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	7b9b      	ldrb	r3, [r3, #14]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d106      	bne.n	800f756 <pbuf_free+0x42>
 800f748:	4b30      	ldr	r3, [pc, #192]	; (800f80c <pbuf_free+0xf8>)
 800f74a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f74e:	4932      	ldr	r1, [pc, #200]	; (800f818 <pbuf_free+0x104>)
 800f750:	4830      	ldr	r0, [pc, #192]	; (800f814 <pbuf_free+0x100>)
 800f752:	f00a fde1 	bl	801a318 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	7b9b      	ldrb	r3, [r3, #14]
 800f75a:	3b01      	subs	r3, #1
 800f75c:	b2da      	uxtb	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	739a      	strb	r2, [r3, #14]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	7b9b      	ldrb	r3, [r3, #14]
 800f766:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f768:	7dbb      	ldrb	r3, [r7, #22]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d143      	bne.n	800f7f6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7b1b      	ldrb	r3, [r3, #12]
 800f778:	f003 030f 	and.w	r3, r3, #15
 800f77c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	7b5b      	ldrb	r3, [r3, #13]
 800f782:	f003 0302 	and.w	r3, r3, #2
 800f786:	2b00      	cmp	r3, #0
 800f788:	d011      	beq.n	800f7ae <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <pbuf_free+0x90>
 800f796:	4b1d      	ldr	r3, [pc, #116]	; (800f80c <pbuf_free+0xf8>)
 800f798:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f79c:	491f      	ldr	r1, [pc, #124]	; (800f81c <pbuf_free+0x108>)
 800f79e:	481d      	ldr	r0, [pc, #116]	; (800f814 <pbuf_free+0x100>)
 800f7a0:	f00a fdba 	bl	801a318 <iprintf>
        pc->custom_free_function(p);
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	4798      	blx	r3
 800f7ac:	e01d      	b.n	800f7ea <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d104      	bne.n	800f7be <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	2008      	movs	r0, #8
 800f7b8:	f7ff f94a 	bl	800ea50 <memp_free>
 800f7bc:	e015      	b.n	800f7ea <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f7be:	7bfb      	ldrb	r3, [r7, #15]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d104      	bne.n	800f7ce <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	2007      	movs	r0, #7
 800f7c8:	f7ff f942 	bl	800ea50 <memp_free>
 800f7cc:	e00d      	b.n	800f7ea <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d103      	bne.n	800f7dc <pbuf_free+0xc8>
          mem_free(p);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7fe fdd5 	bl	800e384 <mem_free>
 800f7da:	e006      	b.n	800f7ea <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f7dc:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <pbuf_free+0xf8>)
 800f7de:	f240 320f 	movw	r2, #783	; 0x30f
 800f7e2:	490f      	ldr	r1, [pc, #60]	; (800f820 <pbuf_free+0x10c>)
 800f7e4:	480b      	ldr	r0, [pc, #44]	; (800f814 <pbuf_free+0x100>)
 800f7e6:	f00a fd97 	bl	801a318 <iprintf>
        }
      }
      count++;
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	607b      	str	r3, [r7, #4]
 800f7f4:	e001      	b.n	800f7fa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d19f      	bne.n	800f740 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f800:	7dfb      	ldrb	r3, [r7, #23]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3718      	adds	r7, #24
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	0801d11c 	.word	0x0801d11c
 800f810:	0801d280 	.word	0x0801d280
 800f814:	0801d17c 	.word	0x0801d17c
 800f818:	0801d2ac 	.word	0x0801d2ac
 800f81c:	0801d2c4 	.word	0x0801d2c4
 800f820:	0801d2e8 	.word	0x0801d2e8

0800f824 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f824:	b480      	push	{r7}
 800f826:	b085      	sub	sp, #20
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f830:	e005      	b.n	800f83e <pbuf_clen+0x1a>
    ++len;
 800f832:	89fb      	ldrh	r3, [r7, #14]
 800f834:	3301      	adds	r3, #1
 800f836:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1f6      	bne.n	800f832 <pbuf_clen+0xe>
  }
  return len;
 800f844:	89fb      	ldrh	r3, [r7, #14]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3714      	adds	r7, #20
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
	...

0800f854 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d010      	beq.n	800f884 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	7b9b      	ldrb	r3, [r3, #14]
 800f866:	3301      	adds	r3, #1
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	7b9b      	ldrb	r3, [r3, #14]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <pbuf_ref+0x30>
 800f876:	4b05      	ldr	r3, [pc, #20]	; (800f88c <pbuf_ref+0x38>)
 800f878:	f240 3242 	movw	r2, #834	; 0x342
 800f87c:	4904      	ldr	r1, [pc, #16]	; (800f890 <pbuf_ref+0x3c>)
 800f87e:	4805      	ldr	r0, [pc, #20]	; (800f894 <pbuf_ref+0x40>)
 800f880:	f00a fd4a 	bl	801a318 <iprintf>
  }
}
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	0801d11c 	.word	0x0801d11c
 800f890:	0801d2fc 	.word	0x0801d2fc
 800f894:	0801d17c 	.word	0x0801d17c

0800f898 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <pbuf_cat+0x16>
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d107      	bne.n	800f8be <pbuf_cat+0x26>
 800f8ae:	4b20      	ldr	r3, [pc, #128]	; (800f930 <pbuf_cat+0x98>)
 800f8b0:	f240 3259 	movw	r2, #857	; 0x359
 800f8b4:	491f      	ldr	r1, [pc, #124]	; (800f934 <pbuf_cat+0x9c>)
 800f8b6:	4820      	ldr	r0, [pc, #128]	; (800f938 <pbuf_cat+0xa0>)
 800f8b8:	f00a fd2e 	bl	801a318 <iprintf>
 800f8bc:	e034      	b.n	800f928 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	e00a      	b.n	800f8da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	891a      	ldrh	r2, [r3, #8]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	891b      	ldrh	r3, [r3, #8]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1f0      	bne.n	800f8c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	891a      	ldrh	r2, [r3, #8]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	895b      	ldrh	r3, [r3, #10]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d006      	beq.n	800f8fc <pbuf_cat+0x64>
 800f8ee:	4b10      	ldr	r3, [pc, #64]	; (800f930 <pbuf_cat+0x98>)
 800f8f0:	f240 3262 	movw	r2, #866	; 0x362
 800f8f4:	4911      	ldr	r1, [pc, #68]	; (800f93c <pbuf_cat+0xa4>)
 800f8f6:	4810      	ldr	r0, [pc, #64]	; (800f938 <pbuf_cat+0xa0>)
 800f8f8:	f00a fd0e 	bl	801a318 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d006      	beq.n	800f912 <pbuf_cat+0x7a>
 800f904:	4b0a      	ldr	r3, [pc, #40]	; (800f930 <pbuf_cat+0x98>)
 800f906:	f240 3263 	movw	r2, #867	; 0x363
 800f90a:	490d      	ldr	r1, [pc, #52]	; (800f940 <pbuf_cat+0xa8>)
 800f90c:	480a      	ldr	r0, [pc, #40]	; (800f938 <pbuf_cat+0xa0>)
 800f90e:	f00a fd03 	bl	801a318 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	891a      	ldrh	r2, [r3, #8]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	891b      	ldrh	r3, [r3, #8]
 800f91a:	4413      	add	r3, r2
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	683a      	ldr	r2, [r7, #0]
 800f926:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	0801d11c 	.word	0x0801d11c
 800f934:	0801d310 	.word	0x0801d310
 800f938:	0801d17c 	.word	0x0801d17c
 800f93c:	0801d348 	.word	0x0801d348
 800f940:	0801d378 	.word	0x0801d378

0800f944 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f94e:	6839      	ldr	r1, [r7, #0]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ffa1 	bl	800f898 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f956:	6838      	ldr	r0, [r7, #0]
 800f958:	f7ff ff7c 	bl	800f854 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f96e:	2300      	movs	r3, #0
 800f970:	617b      	str	r3, [r7, #20]
 800f972:	2300      	movs	r3, #0
 800f974:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d008      	beq.n	800f98e <pbuf_copy+0x2a>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d005      	beq.n	800f98e <pbuf_copy+0x2a>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	891a      	ldrh	r2, [r3, #8]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	891b      	ldrh	r3, [r3, #8]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d209      	bcs.n	800f9a2 <pbuf_copy+0x3e>
 800f98e:	4b57      	ldr	r3, [pc, #348]	; (800faec <pbuf_copy+0x188>)
 800f990:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f994:	4956      	ldr	r1, [pc, #344]	; (800faf0 <pbuf_copy+0x18c>)
 800f996:	4857      	ldr	r0, [pc, #348]	; (800faf4 <pbuf_copy+0x190>)
 800f998:	f00a fcbe 	bl	801a318 <iprintf>
 800f99c:	f06f 030f 	mvn.w	r3, #15
 800f9a0:	e09f      	b.n	800fae2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	895b      	ldrh	r3, [r3, #10]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	1ad2      	subs	r2, r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	895b      	ldrh	r3, [r3, #10]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	1acb      	subs	r3, r1, r3
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d306      	bcc.n	800f9c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	895b      	ldrh	r3, [r3, #10]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	60fb      	str	r3, [r7, #12]
 800f9c6:	e005      	b.n	800f9d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	895b      	ldrh	r3, [r3, #10]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685a      	ldr	r2, [r3, #4]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	18d0      	adds	r0, r2, r3
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	f00a fddf 	bl	801a5aa <memcpy>
    offset_to += len;
 800f9ec:	697a      	ldr	r2, [r7, #20]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	895b      	ldrh	r3, [r3, #10]
 800fa00:	461a      	mov	r2, r3
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d906      	bls.n	800fa16 <pbuf_copy+0xb2>
 800fa08:	4b38      	ldr	r3, [pc, #224]	; (800faec <pbuf_copy+0x188>)
 800fa0a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fa0e:	493a      	ldr	r1, [pc, #232]	; (800faf8 <pbuf_copy+0x194>)
 800fa10:	4838      	ldr	r0, [pc, #224]	; (800faf4 <pbuf_copy+0x190>)
 800fa12:	f00a fc81 	bl	801a318 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	895b      	ldrh	r3, [r3, #10]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d906      	bls.n	800fa30 <pbuf_copy+0xcc>
 800fa22:	4b32      	ldr	r3, [pc, #200]	; (800faec <pbuf_copy+0x188>)
 800fa24:	f240 32da 	movw	r2, #986	; 0x3da
 800fa28:	4934      	ldr	r1, [pc, #208]	; (800fafc <pbuf_copy+0x198>)
 800fa2a:	4832      	ldr	r0, [pc, #200]	; (800faf4 <pbuf_copy+0x190>)
 800fa2c:	f00a fc74 	bl	801a318 <iprintf>
    if (offset_from >= p_from->len) {
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	895b      	ldrh	r3, [r3, #10]
 800fa34:	461a      	mov	r2, r3
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d304      	bcc.n	800fa46 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	895b      	ldrh	r3, [r3, #10]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d114      	bne.n	800fa7c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10c      	bne.n	800fa7c <pbuf_copy+0x118>
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d009      	beq.n	800fa7c <pbuf_copy+0x118>
 800fa68:	4b20      	ldr	r3, [pc, #128]	; (800faec <pbuf_copy+0x188>)
 800fa6a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fa6e:	4924      	ldr	r1, [pc, #144]	; (800fb00 <pbuf_copy+0x19c>)
 800fa70:	4820      	ldr	r0, [pc, #128]	; (800faf4 <pbuf_copy+0x190>)
 800fa72:	f00a fc51 	bl	801a318 <iprintf>
 800fa76:	f06f 030f 	mvn.w	r3, #15
 800fa7a:	e032      	b.n	800fae2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d013      	beq.n	800faaa <pbuf_copy+0x146>
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	895a      	ldrh	r2, [r3, #10]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	891b      	ldrh	r3, [r3, #8]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d10d      	bne.n	800faaa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d009      	beq.n	800faaa <pbuf_copy+0x146>
 800fa96:	4b15      	ldr	r3, [pc, #84]	; (800faec <pbuf_copy+0x188>)
 800fa98:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fa9c:	4919      	ldr	r1, [pc, #100]	; (800fb04 <pbuf_copy+0x1a0>)
 800fa9e:	4815      	ldr	r0, [pc, #84]	; (800faf4 <pbuf_copy+0x190>)
 800faa0:	f00a fc3a 	bl	801a318 <iprintf>
 800faa4:	f06f 0305 	mvn.w	r3, #5
 800faa8:	e01b      	b.n	800fae2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d013      	beq.n	800fad8 <pbuf_copy+0x174>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	895a      	ldrh	r2, [r3, #10]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	891b      	ldrh	r3, [r3, #8]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d10d      	bne.n	800fad8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d009      	beq.n	800fad8 <pbuf_copy+0x174>
 800fac4:	4b09      	ldr	r3, [pc, #36]	; (800faec <pbuf_copy+0x188>)
 800fac6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800faca:	490e      	ldr	r1, [pc, #56]	; (800fb04 <pbuf_copy+0x1a0>)
 800facc:	4809      	ldr	r0, [pc, #36]	; (800faf4 <pbuf_copy+0x190>)
 800face:	f00a fc23 	bl	801a318 <iprintf>
 800fad2:	f06f 0305 	mvn.w	r3, #5
 800fad6:	e004      	b.n	800fae2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f47f af61 	bne.w	800f9a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	0801d11c 	.word	0x0801d11c
 800faf0:	0801d3c4 	.word	0x0801d3c4
 800faf4:	0801d17c 	.word	0x0801d17c
 800faf8:	0801d3f4 	.word	0x0801d3f4
 800fafc:	0801d40c 	.word	0x0801d40c
 800fb00:	0801d428 	.word	0x0801d428
 800fb04:	0801d438 	.word	0x0801d438

0800fb08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b088      	sub	sp, #32
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4611      	mov	r1, r2
 800fb14:	461a      	mov	r2, r3
 800fb16:	460b      	mov	r3, r1
 800fb18:	80fb      	strh	r3, [r7, #6]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d108      	bne.n	800fb3e <pbuf_copy_partial+0x36>
 800fb2c:	4b2b      	ldr	r3, [pc, #172]	; (800fbdc <pbuf_copy_partial+0xd4>)
 800fb2e:	f240 420a 	movw	r2, #1034	; 0x40a
 800fb32:	492b      	ldr	r1, [pc, #172]	; (800fbe0 <pbuf_copy_partial+0xd8>)
 800fb34:	482b      	ldr	r0, [pc, #172]	; (800fbe4 <pbuf_copy_partial+0xdc>)
 800fb36:	f00a fbef 	bl	801a318 <iprintf>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	e04a      	b.n	800fbd4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d108      	bne.n	800fb56 <pbuf_copy_partial+0x4e>
 800fb44:	4b25      	ldr	r3, [pc, #148]	; (800fbdc <pbuf_copy_partial+0xd4>)
 800fb46:	f240 420b 	movw	r2, #1035	; 0x40b
 800fb4a:	4927      	ldr	r1, [pc, #156]	; (800fbe8 <pbuf_copy_partial+0xe0>)
 800fb4c:	4825      	ldr	r0, [pc, #148]	; (800fbe4 <pbuf_copy_partial+0xdc>)
 800fb4e:	f00a fbe3 	bl	801a318 <iprintf>
 800fb52:	2300      	movs	r3, #0
 800fb54:	e03e      	b.n	800fbd4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	e034      	b.n	800fbc6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fb5c:	88bb      	ldrh	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00a      	beq.n	800fb78 <pbuf_copy_partial+0x70>
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	895b      	ldrh	r3, [r3, #10]
 800fb66:	88ba      	ldrh	r2, [r7, #4]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d305      	bcc.n	800fb78 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	895b      	ldrh	r3, [r3, #10]
 800fb70:	88ba      	ldrh	r2, [r7, #4]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	80bb      	strh	r3, [r7, #4]
 800fb76:	e023      	b.n	800fbc0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	895a      	ldrh	r2, [r3, #10]
 800fb7c:	88bb      	ldrh	r3, [r7, #4]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fb82:	8b3a      	ldrh	r2, [r7, #24]
 800fb84:	88fb      	ldrh	r3, [r7, #6]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d901      	bls.n	800fb8e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fb8e:	8b7b      	ldrh	r3, [r7, #26]
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	18d0      	adds	r0, r2, r3
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	685a      	ldr	r2, [r3, #4]
 800fb98:	88bb      	ldrh	r3, [r7, #4]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	8b3a      	ldrh	r2, [r7, #24]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	f00a fd03 	bl	801a5aa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fba4:	8afa      	ldrh	r2, [r7, #22]
 800fba6:	8b3b      	ldrh	r3, [r7, #24]
 800fba8:	4413      	add	r3, r2
 800fbaa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fbac:	8b7a      	ldrh	r2, [r7, #26]
 800fbae:	8b3b      	ldrh	r3, [r7, #24]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fbb4:	88fa      	ldrh	r2, [r7, #6]
 800fbb6:	8b3b      	ldrh	r3, [r7, #24]
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	61fb      	str	r3, [r7, #28]
 800fbc6:	88fb      	ldrh	r3, [r7, #6]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <pbuf_copy_partial+0xca>
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1c4      	bne.n	800fb5c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fbd2:	8afb      	ldrh	r3, [r7, #22]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3720      	adds	r7, #32
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	0801d11c 	.word	0x0801d11c
 800fbe0:	0801d464 	.word	0x0801d464
 800fbe4:	0801d17c 	.word	0x0801d17c
 800fbe8:	0801d484 	.word	0x0801d484

0800fbec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	603a      	str	r2, [r7, #0]
 800fbf6:	71fb      	strb	r3, [r7, #7]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	8919      	ldrh	r1, [r3, #8]
 800fc00:	88ba      	ldrh	r2, [r7, #4]
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff faa1 	bl	800f14c <pbuf_alloc>
 800fc0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d101      	bne.n	800fc16 <pbuf_clone+0x2a>
    return NULL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e011      	b.n	800fc3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f7ff fea3 	bl	800f964 <pbuf_copy>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fc22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d006      	beq.n	800fc38 <pbuf_clone+0x4c>
 800fc2a:	4b06      	ldr	r3, [pc, #24]	; (800fc44 <pbuf_clone+0x58>)
 800fc2c:	f240 5224 	movw	r2, #1316	; 0x524
 800fc30:	4905      	ldr	r1, [pc, #20]	; (800fc48 <pbuf_clone+0x5c>)
 800fc32:	4806      	ldr	r0, [pc, #24]	; (800fc4c <pbuf_clone+0x60>)
 800fc34:	f00a fb70 	bl	801a318 <iprintf>
  return q;
 800fc38:	68fb      	ldr	r3, [r7, #12]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	0801d11c 	.word	0x0801d11c
 800fc48:	0801d590 	.word	0x0801d590
 800fc4c:	0801d17c 	.word	0x0801d17c

0800fc50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fc54:	f00a f9c2 	bl	8019fdc <rand>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	4b01      	ldr	r3, [pc, #4]	; (800fc70 <tcp_init+0x20>)
 800fc6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fc6c:	bf00      	nop
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	20000038 	.word	0x20000038

0800fc74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	7d1b      	ldrb	r3, [r3, #20]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d105      	bne.n	800fc90 <tcp_free+0x1c>
 800fc84:	4b06      	ldr	r3, [pc, #24]	; (800fca0 <tcp_free+0x2c>)
 800fc86:	22d4      	movs	r2, #212	; 0xd4
 800fc88:	4906      	ldr	r1, [pc, #24]	; (800fca4 <tcp_free+0x30>)
 800fc8a:	4807      	ldr	r0, [pc, #28]	; (800fca8 <tcp_free+0x34>)
 800fc8c:	f00a fb44 	bl	801a318 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fc90:	6879      	ldr	r1, [r7, #4]
 800fc92:	2001      	movs	r0, #1
 800fc94:	f7fe fedc 	bl	800ea50 <memp_free>
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	0801d61c 	.word	0x0801d61c
 800fca4:	0801d64c 	.word	0x0801d64c
 800fca8:	0801d660 	.word	0x0801d660

0800fcac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d105      	bne.n	800fcc8 <tcp_free_listen+0x1c>
 800fcbc:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <tcp_free_listen+0x2c>)
 800fcbe:	22df      	movs	r2, #223	; 0xdf
 800fcc0:	4906      	ldr	r1, [pc, #24]	; (800fcdc <tcp_free_listen+0x30>)
 800fcc2:	4807      	ldr	r0, [pc, #28]	; (800fce0 <tcp_free_listen+0x34>)
 800fcc4:	f00a fb28 	bl	801a318 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	2002      	movs	r0, #2
 800fccc:	f7fe fec0 	bl	800ea50 <memp_free>
}
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	0801d61c 	.word	0x0801d61c
 800fcdc:	0801d688 	.word	0x0801d688
 800fce0:	0801d660 	.word	0x0801d660

0800fce4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fce8:	f000 fea2 	bl	8010a30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fcec:	4b07      	ldr	r3, [pc, #28]	; (800fd0c <tcp_tmr+0x28>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <tcp_tmr+0x28>)
 800fcf6:	701a      	strb	r2, [r3, #0]
 800fcf8:	4b04      	ldr	r3, [pc, #16]	; (800fd0c <tcp_tmr+0x28>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	f003 0301 	and.w	r3, r3, #1
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fd04:	f000 fb54 	bl	80103b0 <tcp_slowtmr>
  }
}
 800fd08:	bf00      	nop
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	2000b491 	.word	0x2000b491

0800fd10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d105      	bne.n	800fd2c <tcp_remove_listener+0x1c>
 800fd20:	4b0d      	ldr	r3, [pc, #52]	; (800fd58 <tcp_remove_listener+0x48>)
 800fd22:	22ff      	movs	r2, #255	; 0xff
 800fd24:	490d      	ldr	r1, [pc, #52]	; (800fd5c <tcp_remove_listener+0x4c>)
 800fd26:	480e      	ldr	r0, [pc, #56]	; (800fd60 <tcp_remove_listener+0x50>)
 800fd28:	f00a faf6 	bl	801a318 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	e00a      	b.n	800fd48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd36:	683a      	ldr	r2, [r7, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d102      	bne.n	800fd42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	60fb      	str	r3, [r7, #12]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d1f1      	bne.n	800fd32 <tcp_remove_listener+0x22>
    }
  }
}
 800fd4e:	bf00      	nop
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	0801d61c 	.word	0x0801d61c
 800fd5c:	0801d6a4 	.word	0x0801d6a4
 800fd60:	0801d660 	.word	0x0801d660

0800fd64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d106      	bne.n	800fd80 <tcp_listen_closed+0x1c>
 800fd72:	4b14      	ldr	r3, [pc, #80]	; (800fdc4 <tcp_listen_closed+0x60>)
 800fd74:	f240 1211 	movw	r2, #273	; 0x111
 800fd78:	4913      	ldr	r1, [pc, #76]	; (800fdc8 <tcp_listen_closed+0x64>)
 800fd7a:	4814      	ldr	r0, [pc, #80]	; (800fdcc <tcp_listen_closed+0x68>)
 800fd7c:	f00a facc 	bl	801a318 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7d1b      	ldrb	r3, [r3, #20]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d006      	beq.n	800fd96 <tcp_listen_closed+0x32>
 800fd88:	4b0e      	ldr	r3, [pc, #56]	; (800fdc4 <tcp_listen_closed+0x60>)
 800fd8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fd8e:	4910      	ldr	r1, [pc, #64]	; (800fdd0 <tcp_listen_closed+0x6c>)
 800fd90:	480e      	ldr	r0, [pc, #56]	; (800fdcc <tcp_listen_closed+0x68>)
 800fd92:	f00a fac1 	bl	801a318 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fd96:	2301      	movs	r3, #1
 800fd98:	60fb      	str	r3, [r7, #12]
 800fd9a:	e00b      	b.n	800fdb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fd9c:	4a0d      	ldr	r2, [pc, #52]	; (800fdd4 <tcp_listen_closed+0x70>)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7ff ffb1 	bl	800fd10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2b03      	cmp	r3, #3
 800fdb8:	d9f0      	bls.n	800fd9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fdba:	bf00      	nop
 800fdbc:	bf00      	nop
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	0801d61c 	.word	0x0801d61c
 800fdc8:	0801d6cc 	.word	0x0801d6cc
 800fdcc:	0801d660 	.word	0x0801d660
 800fdd0:	0801d6d8 	.word	0x0801d6d8
 800fdd4:	0801fbb0 	.word	0x0801fbb0

0800fdd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fdd8:	b5b0      	push	{r4, r5, r7, lr}
 800fdda:	b088      	sub	sp, #32
 800fddc:	af04      	add	r7, sp, #16
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d106      	bne.n	800fdf8 <tcp_close_shutdown+0x20>
 800fdea:	4b63      	ldr	r3, [pc, #396]	; (800ff78 <tcp_close_shutdown+0x1a0>)
 800fdec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fdf0:	4962      	ldr	r1, [pc, #392]	; (800ff7c <tcp_close_shutdown+0x1a4>)
 800fdf2:	4863      	ldr	r0, [pc, #396]	; (800ff80 <tcp_close_shutdown+0x1a8>)
 800fdf4:	f00a fa90 	bl	801a318 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fdf8:	78fb      	ldrb	r3, [r7, #3]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d066      	beq.n	800fecc <tcp_close_shutdown+0xf4>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	7d1b      	ldrb	r3, [r3, #20]
 800fe02:	2b04      	cmp	r3, #4
 800fe04:	d003      	beq.n	800fe0e <tcp_close_shutdown+0x36>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	7d1b      	ldrb	r3, [r3, #20]
 800fe0a:	2b07      	cmp	r3, #7
 800fe0c:	d15e      	bne.n	800fecc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d104      	bne.n	800fe20 <tcp_close_shutdown+0x48>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fe1e:	d055      	beq.n	800fecc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8b5b      	ldrh	r3, [r3, #26]
 800fe24:	f003 0310 	and.w	r3, r3, #16
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d106      	bne.n	800fe3a <tcp_close_shutdown+0x62>
 800fe2c:	4b52      	ldr	r3, [pc, #328]	; (800ff78 <tcp_close_shutdown+0x1a0>)
 800fe2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fe32:	4954      	ldr	r1, [pc, #336]	; (800ff84 <tcp_close_shutdown+0x1ac>)
 800fe34:	4852      	ldr	r0, [pc, #328]	; (800ff80 <tcp_close_shutdown+0x1a8>)
 800fe36:	f00a fa6f 	bl	801a318 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe42:	687d      	ldr	r5, [r7, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3304      	adds	r3, #4
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	8ad2      	ldrh	r2, [r2, #22]
 800fe4c:	6879      	ldr	r1, [r7, #4]
 800fe4e:	8b09      	ldrh	r1, [r1, #24]
 800fe50:	9102      	str	r1, [sp, #8]
 800fe52:	9201      	str	r2, [sp, #4]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	462b      	mov	r3, r5
 800fe58:	4622      	mov	r2, r4
 800fe5a:	4601      	mov	r1, r0
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f004 fe91 	bl	8014b84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f001 f8c6 	bl	8010ff4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fe68:	4b47      	ldr	r3, [pc, #284]	; (800ff88 <tcp_close_shutdown+0x1b0>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d105      	bne.n	800fe7e <tcp_close_shutdown+0xa6>
 800fe72:	4b45      	ldr	r3, [pc, #276]	; (800ff88 <tcp_close_shutdown+0x1b0>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	4a43      	ldr	r2, [pc, #268]	; (800ff88 <tcp_close_shutdown+0x1b0>)
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	e013      	b.n	800fea6 <tcp_close_shutdown+0xce>
 800fe7e:	4b42      	ldr	r3, [pc, #264]	; (800ff88 <tcp_close_shutdown+0x1b0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e00c      	b.n	800fea0 <tcp_close_shutdown+0xc8>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d104      	bne.n	800fe9a <tcp_close_shutdown+0xc2>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68da      	ldr	r2, [r3, #12]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	60da      	str	r2, [r3, #12]
 800fe98:	e005      	b.n	800fea6 <tcp_close_shutdown+0xce>
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1ef      	bne.n	800fe86 <tcp_close_shutdown+0xae>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	60da      	str	r2, [r3, #12]
 800feac:	4b37      	ldr	r3, [pc, #220]	; (800ff8c <tcp_close_shutdown+0x1b4>)
 800feae:	2201      	movs	r2, #1
 800feb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800feb2:	4b37      	ldr	r3, [pc, #220]	; (800ff90 <tcp_close_shutdown+0x1b8>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d102      	bne.n	800fec2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800febc:	f003 fd5e 	bl	801397c <tcp_trigger_input_pcb_close>
 800fec0:	e002      	b.n	800fec8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff fed6 	bl	800fc74 <tcp_free>
      }
      return ERR_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	e050      	b.n	800ff6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	7d1b      	ldrb	r3, [r3, #20]
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d03b      	beq.n	800ff4c <tcp_close_shutdown+0x174>
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	dc44      	bgt.n	800ff62 <tcp_close_shutdown+0x18a>
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <tcp_close_shutdown+0x10a>
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d02a      	beq.n	800ff36 <tcp_close_shutdown+0x15e>
 800fee0:	e03f      	b.n	800ff62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8adb      	ldrh	r3, [r3, #22]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d021      	beq.n	800ff2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800feea:	4b2a      	ldr	r3, [pc, #168]	; (800ff94 <tcp_close_shutdown+0x1bc>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d105      	bne.n	800ff00 <tcp_close_shutdown+0x128>
 800fef4:	4b27      	ldr	r3, [pc, #156]	; (800ff94 <tcp_close_shutdown+0x1bc>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	4a26      	ldr	r2, [pc, #152]	; (800ff94 <tcp_close_shutdown+0x1bc>)
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	e013      	b.n	800ff28 <tcp_close_shutdown+0x150>
 800ff00:	4b24      	ldr	r3, [pc, #144]	; (800ff94 <tcp_close_shutdown+0x1bc>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	60bb      	str	r3, [r7, #8]
 800ff06:	e00c      	b.n	800ff22 <tcp_close_shutdown+0x14a>
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d104      	bne.n	800ff1c <tcp_close_shutdown+0x144>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68da      	ldr	r2, [r3, #12]
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	60da      	str	r2, [r3, #12]
 800ff1a:	e005      	b.n	800ff28 <tcp_close_shutdown+0x150>
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	60bb      	str	r3, [r7, #8]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1ef      	bne.n	800ff08 <tcp_close_shutdown+0x130>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7ff fea0 	bl	800fc74 <tcp_free>
      break;
 800ff34:	e01a      	b.n	800ff6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff ff14 	bl	800fd64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ff3c:	6879      	ldr	r1, [r7, #4]
 800ff3e:	4816      	ldr	r0, [pc, #88]	; (800ff98 <tcp_close_shutdown+0x1c0>)
 800ff40:	f001 f8a8 	bl	8011094 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff feb1 	bl	800fcac <tcp_free_listen>
      break;
 800ff4a:	e00f      	b.n	800ff6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ff4c:	6879      	ldr	r1, [r7, #4]
 800ff4e:	480e      	ldr	r0, [pc, #56]	; (800ff88 <tcp_close_shutdown+0x1b0>)
 800ff50:	f001 f8a0 	bl	8011094 <tcp_pcb_remove>
 800ff54:	4b0d      	ldr	r3, [pc, #52]	; (800ff8c <tcp_close_shutdown+0x1b4>)
 800ff56:	2201      	movs	r2, #1
 800ff58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff fe8a 	bl	800fc74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ff60:	e004      	b.n	800ff6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f81a 	bl	800ff9c <tcp_close_shutdown_fin>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	e000      	b.n	800ff6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bdb0      	pop	{r4, r5, r7, pc}
 800ff76:	bf00      	nop
 800ff78:	0801d61c 	.word	0x0801d61c
 800ff7c:	0801d6f0 	.word	0x0801d6f0
 800ff80:	0801d660 	.word	0x0801d660
 800ff84:	0801d710 	.word	0x0801d710
 800ff88:	2000b488 	.word	0x2000b488
 800ff8c:	2000b490 	.word	0x2000b490
 800ff90:	2000b4c8 	.word	0x2000b4c8
 800ff94:	2000b480 	.word	0x2000b480
 800ff98:	2000b484 	.word	0x2000b484

0800ff9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <tcp_close_shutdown_fin+0x1c>
 800ffaa:	4b2e      	ldr	r3, [pc, #184]	; (8010064 <tcp_close_shutdown_fin+0xc8>)
 800ffac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ffb0:	492d      	ldr	r1, [pc, #180]	; (8010068 <tcp_close_shutdown_fin+0xcc>)
 800ffb2:	482e      	ldr	r0, [pc, #184]	; (801006c <tcp_close_shutdown_fin+0xd0>)
 800ffb4:	f00a f9b0 	bl	801a318 <iprintf>

  switch (pcb->state) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	7d1b      	ldrb	r3, [r3, #20]
 800ffbc:	2b07      	cmp	r3, #7
 800ffbe:	d020      	beq.n	8010002 <tcp_close_shutdown_fin+0x66>
 800ffc0:	2b07      	cmp	r3, #7
 800ffc2:	dc2b      	bgt.n	801001c <tcp_close_shutdown_fin+0x80>
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d002      	beq.n	800ffce <tcp_close_shutdown_fin+0x32>
 800ffc8:	2b04      	cmp	r3, #4
 800ffca:	d00d      	beq.n	800ffe8 <tcp_close_shutdown_fin+0x4c>
 800ffcc:	e026      	b.n	801001c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f003 fee6 	bl	8013da0 <tcp_send_fin>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ffd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d11f      	bne.n	8010020 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2205      	movs	r2, #5
 800ffe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ffe6:	e01b      	b.n	8010020 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f003 fed9 	bl	8013da0 <tcp_send_fin>
 800ffee:	4603      	mov	r3, r0
 800fff0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d114      	bne.n	8010024 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2205      	movs	r2, #5
 800fffe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010000:	e010      	b.n	8010024 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f003 fecc 	bl	8013da0 <tcp_send_fin>
 8010008:	4603      	mov	r3, r0
 801000a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801000c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d109      	bne.n	8010028 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2209      	movs	r2, #9
 8010018:	751a      	strb	r2, [r3, #20]
      }
      break;
 801001a:	e005      	b.n	8010028 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	e01c      	b.n	801005a <tcp_close_shutdown_fin+0xbe>
      break;
 8010020:	bf00      	nop
 8010022:	e002      	b.n	801002a <tcp_close_shutdown_fin+0x8e>
      break;
 8010024:	bf00      	nop
 8010026:	e000      	b.n	801002a <tcp_close_shutdown_fin+0x8e>
      break;
 8010028:	bf00      	nop
  }

  if (err == ERR_OK) {
 801002a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d103      	bne.n	801003a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f003 fff2 	bl	801401c <tcp_output>
 8010038:	e00d      	b.n	8010056 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801003a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010042:	d108      	bne.n	8010056 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	8b5b      	ldrh	r3, [r3, #26]
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	b29a      	uxth	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	e001      	b.n	801005a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	0801d61c 	.word	0x0801d61c
 8010068:	0801d6cc 	.word	0x0801d6cc
 801006c:	0801d660 	.word	0x0801d660

08010070 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d109      	bne.n	8010092 <tcp_close+0x22>
 801007e:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <tcp_close+0x4c>)
 8010080:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010084:	490e      	ldr	r1, [pc, #56]	; (80100c0 <tcp_close+0x50>)
 8010086:	480f      	ldr	r0, [pc, #60]	; (80100c4 <tcp_close+0x54>)
 8010088:	f00a f946 	bl	801a318 <iprintf>
 801008c:	f06f 030f 	mvn.w	r3, #15
 8010090:	e00f      	b.n	80100b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	7d1b      	ldrb	r3, [r3, #20]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d006      	beq.n	80100a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8b5b      	ldrh	r3, [r3, #26]
 801009e:	f043 0310 	orr.w	r3, r3, #16
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80100a8:	2101      	movs	r1, #1
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fe94 	bl	800fdd8 <tcp_close_shutdown>
 80100b0:	4603      	mov	r3, r0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3708      	adds	r7, #8
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	0801d61c 	.word	0x0801d61c
 80100c0:	0801d72c 	.word	0x0801d72c
 80100c4:	0801d660 	.word	0x0801d660

080100c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08e      	sub	sp, #56	; 0x38
 80100cc:	af04      	add	r7, sp, #16
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d107      	bne.n	80100e8 <tcp_abandon+0x20>
 80100d8:	4b52      	ldr	r3, [pc, #328]	; (8010224 <tcp_abandon+0x15c>)
 80100da:	f240 223d 	movw	r2, #573	; 0x23d
 80100de:	4952      	ldr	r1, [pc, #328]	; (8010228 <tcp_abandon+0x160>)
 80100e0:	4852      	ldr	r0, [pc, #328]	; (801022c <tcp_abandon+0x164>)
 80100e2:	f00a f919 	bl	801a318 <iprintf>
 80100e6:	e099      	b.n	801021c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	7d1b      	ldrb	r3, [r3, #20]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d106      	bne.n	80100fe <tcp_abandon+0x36>
 80100f0:	4b4c      	ldr	r3, [pc, #304]	; (8010224 <tcp_abandon+0x15c>)
 80100f2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80100f6:	494e      	ldr	r1, [pc, #312]	; (8010230 <tcp_abandon+0x168>)
 80100f8:	484c      	ldr	r0, [pc, #304]	; (801022c <tcp_abandon+0x164>)
 80100fa:	f00a f90d 	bl	801a318 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	7d1b      	ldrb	r3, [r3, #20]
 8010102:	2b0a      	cmp	r3, #10
 8010104:	d107      	bne.n	8010116 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	484a      	ldr	r0, [pc, #296]	; (8010234 <tcp_abandon+0x16c>)
 801010a:	f000 ffc3 	bl	8011094 <tcp_pcb_remove>
    tcp_free(pcb);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7ff fdb0 	bl	800fc74 <tcp_free>
 8010114:	e082      	b.n	801021c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010122:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010130:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7d1b      	ldrb	r3, [r3, #20]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d126      	bne.n	801018e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	8adb      	ldrh	r3, [r3, #22]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d02e      	beq.n	80101a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010148:	4b3b      	ldr	r3, [pc, #236]	; (8010238 <tcp_abandon+0x170>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	429a      	cmp	r2, r3
 8010150:	d105      	bne.n	801015e <tcp_abandon+0x96>
 8010152:	4b39      	ldr	r3, [pc, #228]	; (8010238 <tcp_abandon+0x170>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	4a37      	ldr	r2, [pc, #220]	; (8010238 <tcp_abandon+0x170>)
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	e013      	b.n	8010186 <tcp_abandon+0xbe>
 801015e:	4b36      	ldr	r3, [pc, #216]	; (8010238 <tcp_abandon+0x170>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	61fb      	str	r3, [r7, #28]
 8010164:	e00c      	b.n	8010180 <tcp_abandon+0xb8>
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	429a      	cmp	r2, r3
 801016e:	d104      	bne.n	801017a <tcp_abandon+0xb2>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68da      	ldr	r2, [r3, #12]
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	60da      	str	r2, [r3, #12]
 8010178:	e005      	b.n	8010186 <tcp_abandon+0xbe>
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	61fb      	str	r3, [r7, #28]
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1ef      	bne.n	8010166 <tcp_abandon+0x9e>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	60da      	str	r2, [r3, #12]
 801018c:	e00b      	b.n	80101a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	8adb      	ldrh	r3, [r3, #22]
 8010196:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	4828      	ldr	r0, [pc, #160]	; (801023c <tcp_abandon+0x174>)
 801019c:	f000 ff7a 	bl	8011094 <tcp_pcb_remove>
 80101a0:	4b27      	ldr	r3, [pc, #156]	; (8010240 <tcp_abandon+0x178>)
 80101a2:	2201      	movs	r2, #1
 80101a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d004      	beq.n	80101b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fd1c 	bl	8010bf0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 fd13 	bl	8010bf0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d004      	beq.n	80101dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101d6:	4618      	mov	r0, r3
 80101d8:	f000 fd0a 	bl	8010bf0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00e      	beq.n	8010200 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3304      	adds	r3, #4
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	8b12      	ldrh	r2, [r2, #24]
 80101ec:	9202      	str	r2, [sp, #8]
 80101ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80101f0:	9201      	str	r2, [sp, #4]
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	460b      	mov	r3, r1
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	69b9      	ldr	r1, [r7, #24]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f004 fcc2 	bl	8014b84 <tcp_rst>
    }
    last_state = pcb->state;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	7d1b      	ldrb	r3, [r3, #20]
 8010204:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff fd34 	bl	800fc74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d004      	beq.n	801021c <tcp_abandon+0x154>
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	f06f 010c 	mvn.w	r1, #12
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	4798      	blx	r3
  }
}
 801021c:	3728      	adds	r7, #40	; 0x28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	0801d61c 	.word	0x0801d61c
 8010228:	0801d760 	.word	0x0801d760
 801022c:	0801d660 	.word	0x0801d660
 8010230:	0801d77c 	.word	0x0801d77c
 8010234:	2000b48c 	.word	0x2000b48c
 8010238:	2000b480 	.word	0x2000b480
 801023c:	2000b488 	.word	0x2000b488
 8010240:	2000b490 	.word	0x2000b490

08010244 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801024c:	2101      	movs	r1, #1
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7ff ff3a 	bl	80100c8 <tcp_abandon>
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d106      	bne.n	8010278 <tcp_update_rcv_ann_wnd+0x1c>
 801026a:	4b25      	ldr	r3, [pc, #148]	; (8010300 <tcp_update_rcv_ann_wnd+0xa4>)
 801026c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010270:	4924      	ldr	r1, [pc, #144]	; (8010304 <tcp_update_rcv_ann_wnd+0xa8>)
 8010272:	4825      	ldr	r0, [pc, #148]	; (8010308 <tcp_update_rcv_ann_wnd+0xac>)
 8010274:	f00a f850 	bl	801a318 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010280:	4413      	add	r3, r2
 8010282:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801028c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010290:	bf28      	it	cs
 8010292:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010296:	b292      	uxth	r2, r2
 8010298:	4413      	add	r3, r2
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	db08      	blt.n	80102b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	e020      	b.n	80102f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	dd03      	ble.n	80102ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80102c8:	e014      	b.n	80102f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102dc:	d306      	bcc.n	80102ec <tcp_update_rcv_ann_wnd+0x90>
 80102de:	4b08      	ldr	r3, [pc, #32]	; (8010300 <tcp_update_rcv_ann_wnd+0xa4>)
 80102e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80102e4:	4909      	ldr	r1, [pc, #36]	; (801030c <tcp_update_rcv_ann_wnd+0xb0>)
 80102e6:	4808      	ldr	r0, [pc, #32]	; (8010308 <tcp_update_rcv_ann_wnd+0xac>)
 80102e8:	f00a f816 	bl	801a318 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80102f4:	2300      	movs	r3, #0
  }
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	0801d61c 	.word	0x0801d61c
 8010304:	0801d878 	.word	0x0801d878
 8010308:	0801d660 	.word	0x0801d660
 801030c:	0801d89c 	.word	0x0801d89c

08010310 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	460b      	mov	r3, r1
 801031a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d107      	bne.n	8010332 <tcp_recved+0x22>
 8010322:	4b1f      	ldr	r3, [pc, #124]	; (80103a0 <tcp_recved+0x90>)
 8010324:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010328:	491e      	ldr	r1, [pc, #120]	; (80103a4 <tcp_recved+0x94>)
 801032a:	481f      	ldr	r0, [pc, #124]	; (80103a8 <tcp_recved+0x98>)
 801032c:	f009 fff4 	bl	801a318 <iprintf>
 8010330:	e032      	b.n	8010398 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	7d1b      	ldrb	r3, [r3, #20]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d106      	bne.n	8010348 <tcp_recved+0x38>
 801033a:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <tcp_recved+0x90>)
 801033c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010340:	491a      	ldr	r1, [pc, #104]	; (80103ac <tcp_recved+0x9c>)
 8010342:	4819      	ldr	r0, [pc, #100]	; (80103a8 <tcp_recved+0x98>)
 8010344:	f009 ffe8 	bl	801a318 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801034c:	887b      	ldrh	r3, [r7, #2]
 801034e:	4413      	add	r3, r2
 8010350:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010352:	89fb      	ldrh	r3, [r7, #14]
 8010354:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010358:	d804      	bhi.n	8010364 <tcp_recved+0x54>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801035e:	89fa      	ldrh	r2, [r7, #14]
 8010360:	429a      	cmp	r2, r3
 8010362:	d204      	bcs.n	801036e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801036a:	851a      	strh	r2, [r3, #40]	; 0x28
 801036c:	e002      	b.n	8010374 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	89fa      	ldrh	r2, [r7, #14]
 8010372:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7ff ff71 	bl	801025c <tcp_update_rcv_ann_wnd>
 801037a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010382:	d309      	bcc.n	8010398 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	8b5b      	ldrh	r3, [r3, #26]
 8010388:	f043 0302 	orr.w	r3, r3, #2
 801038c:	b29a      	uxth	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f003 fe42 	bl	801401c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	0801d61c 	.word	0x0801d61c
 80103a4:	0801d8b8 	.word	0x0801d8b8
 80103a8:	0801d660 	.word	0x0801d660
 80103ac:	0801d8d0 	.word	0x0801d8d0

080103b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80103b0:	b5b0      	push	{r4, r5, r7, lr}
 80103b2:	b090      	sub	sp, #64	; 0x40
 80103b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80103bc:	4b94      	ldr	r3, [pc, #592]	; (8010610 <tcp_slowtmr+0x260>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3301      	adds	r3, #1
 80103c2:	4a93      	ldr	r2, [pc, #588]	; (8010610 <tcp_slowtmr+0x260>)
 80103c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80103c6:	4b93      	ldr	r3, [pc, #588]	; (8010614 <tcp_slowtmr+0x264>)
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	3301      	adds	r3, #1
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	4b91      	ldr	r3, [pc, #580]	; (8010614 <tcp_slowtmr+0x264>)
 80103d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80103d6:	4b90      	ldr	r3, [pc, #576]	; (8010618 <tcp_slowtmr+0x268>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80103dc:	e29d      	b.n	801091a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d106      	bne.n	80103f4 <tcp_slowtmr+0x44>
 80103e6:	4b8d      	ldr	r3, [pc, #564]	; (801061c <tcp_slowtmr+0x26c>)
 80103e8:	f240 42be 	movw	r2, #1214	; 0x4be
 80103ec:	498c      	ldr	r1, [pc, #560]	; (8010620 <tcp_slowtmr+0x270>)
 80103ee:	488d      	ldr	r0, [pc, #564]	; (8010624 <tcp_slowtmr+0x274>)
 80103f0:	f009 ff92 	bl	801a318 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	7d1b      	ldrb	r3, [r3, #20]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d106      	bne.n	801040a <tcp_slowtmr+0x5a>
 80103fc:	4b87      	ldr	r3, [pc, #540]	; (801061c <tcp_slowtmr+0x26c>)
 80103fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010402:	4989      	ldr	r1, [pc, #548]	; (8010628 <tcp_slowtmr+0x278>)
 8010404:	4887      	ldr	r0, [pc, #540]	; (8010624 <tcp_slowtmr+0x274>)
 8010406:	f009 ff87 	bl	801a318 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	7d1b      	ldrb	r3, [r3, #20]
 801040e:	2b0a      	cmp	r3, #10
 8010410:	d106      	bne.n	8010420 <tcp_slowtmr+0x70>
 8010412:	4b82      	ldr	r3, [pc, #520]	; (801061c <tcp_slowtmr+0x26c>)
 8010414:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010418:	4984      	ldr	r1, [pc, #528]	; (801062c <tcp_slowtmr+0x27c>)
 801041a:	4882      	ldr	r0, [pc, #520]	; (8010624 <tcp_slowtmr+0x274>)
 801041c:	f009 ff7c 	bl	801a318 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010422:	7f9a      	ldrb	r2, [r3, #30]
 8010424:	4b7b      	ldr	r3, [pc, #492]	; (8010614 <tcp_slowtmr+0x264>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	429a      	cmp	r2, r3
 801042a:	d105      	bne.n	8010438 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010436:	e270      	b.n	801091a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010438:	4b76      	ldr	r3, [pc, #472]	; (8010614 <tcp_slowtmr+0x264>)
 801043a:	781a      	ldrb	r2, [r3, #0]
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010446:	2300      	movs	r3, #0
 8010448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	7d1b      	ldrb	r3, [r3, #20]
 8010450:	2b02      	cmp	r3, #2
 8010452:	d10a      	bne.n	801046a <tcp_slowtmr+0xba>
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801045a:	2b05      	cmp	r3, #5
 801045c:	d905      	bls.n	801046a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801045e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010462:	3301      	adds	r3, #1
 8010464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010468:	e11e      	b.n	80106a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010470:	2b0b      	cmp	r3, #11
 8010472:	d905      	bls.n	8010480 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010478:	3301      	adds	r3, #1
 801047a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801047e:	e113      	b.n	80106a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010486:	2b00      	cmp	r3, #0
 8010488:	d075      	beq.n	8010576 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801048e:	2b00      	cmp	r3, #0
 8010490:	d006      	beq.n	80104a0 <tcp_slowtmr+0xf0>
 8010492:	4b62      	ldr	r3, [pc, #392]	; (801061c <tcp_slowtmr+0x26c>)
 8010494:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010498:	4965      	ldr	r1, [pc, #404]	; (8010630 <tcp_slowtmr+0x280>)
 801049a:	4862      	ldr	r0, [pc, #392]	; (8010624 <tcp_slowtmr+0x274>)
 801049c:	f009 ff3c 	bl	801a318 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d106      	bne.n	80104b6 <tcp_slowtmr+0x106>
 80104a8:	4b5c      	ldr	r3, [pc, #368]	; (801061c <tcp_slowtmr+0x26c>)
 80104aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80104ae:	4961      	ldr	r1, [pc, #388]	; (8010634 <tcp_slowtmr+0x284>)
 80104b0:	485c      	ldr	r0, [pc, #368]	; (8010624 <tcp_slowtmr+0x274>)
 80104b2:	f009 ff31 	bl	801a318 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80104b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80104bc:	2b0b      	cmp	r3, #11
 80104be:	d905      	bls.n	80104cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80104c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104c4:	3301      	adds	r3, #1
 80104c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104ca:	e0ed      	b.n	80106a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104d2:	3b01      	subs	r3, #1
 80104d4:	4a58      	ldr	r2, [pc, #352]	; (8010638 <tcp_slowtmr+0x288>)
 80104d6:	5cd3      	ldrb	r3, [r2, r3]
 80104d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80104e0:	7c7a      	ldrb	r2, [r7, #17]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d907      	bls.n	80104f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80104e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80104ec:	3301      	adds	r3, #1
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80104fc:	7c7a      	ldrb	r2, [r7, #17]
 80104fe:	429a      	cmp	r2, r3
 8010500:	f200 80d2 	bhi.w	80106a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010504:	2301      	movs	r3, #1
 8010506:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801050e:	2b00      	cmp	r3, #0
 8010510:	d108      	bne.n	8010524 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010514:	f004 fc2a 	bl	8014d6c <tcp_zero_window_probe>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d014      	beq.n	8010548 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801051e:	2300      	movs	r3, #0
 8010520:	623b      	str	r3, [r7, #32]
 8010522:	e011      	b.n	8010548 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801052a:	4619      	mov	r1, r3
 801052c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801052e:	f003 faef 	bl	8013b10 <tcp_split_unsent_seg>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d107      	bne.n	8010548 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801053a:	f003 fd6f 	bl	801401c <tcp_output>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010544:	2300      	movs	r3, #0
 8010546:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010548:	6a3b      	ldr	r3, [r7, #32]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 80ac 	beq.w	80106a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801055e:	2b06      	cmp	r3, #6
 8010560:	f200 80a2 	bhi.w	80106a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010566:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801056a:	3301      	adds	r3, #1
 801056c:	b2da      	uxtb	r2, r3
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010574:	e098      	b.n	80106a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801057c:	2b00      	cmp	r3, #0
 801057e:	db0f      	blt.n	80105a0 <tcp_slowtmr+0x1f0>
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010586:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801058a:	4293      	cmp	r3, r2
 801058c:	d008      	beq.n	80105a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010590:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010594:	b29b      	uxth	r3, r3
 8010596:	3301      	adds	r3, #1
 8010598:	b29b      	uxth	r3, r3
 801059a:	b21a      	sxth	r2, r3
 801059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80105a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80105ac:	429a      	cmp	r2, r3
 80105ae:	db7b      	blt.n	80106a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80105b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b2:	f004 f827 	bl	8014604 <tcp_rexmit_rto_prepare>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d007      	beq.n	80105cc <tcp_slowtmr+0x21c>
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d171      	bne.n	80106a8 <tcp_slowtmr+0x2f8>
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d06d      	beq.n	80106a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80105cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ce:	7d1b      	ldrb	r3, [r3, #20]
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d03a      	beq.n	801064a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105da:	2b0c      	cmp	r3, #12
 80105dc:	bf28      	it	cs
 80105de:	230c      	movcs	r3, #12
 80105e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105e8:	10db      	asrs	r3, r3, #3
 80105ea:	b21b      	sxth	r3, r3
 80105ec:	461a      	mov	r2, r3
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105f4:	4413      	add	r3, r2
 80105f6:	7efa      	ldrb	r2, [r7, #27]
 80105f8:	4910      	ldr	r1, [pc, #64]	; (801063c <tcp_slowtmr+0x28c>)
 80105fa:	5c8a      	ldrb	r2, [r1, r2]
 80105fc:	4093      	lsls	r3, r2
 80105fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010606:	4293      	cmp	r3, r2
 8010608:	dc1a      	bgt.n	8010640 <tcp_slowtmr+0x290>
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	b21a      	sxth	r2, r3
 801060e:	e019      	b.n	8010644 <tcp_slowtmr+0x294>
 8010610:	2000b47c 	.word	0x2000b47c
 8010614:	2000b492 	.word	0x2000b492
 8010618:	2000b488 	.word	0x2000b488
 801061c:	0801d61c 	.word	0x0801d61c
 8010620:	0801d960 	.word	0x0801d960
 8010624:	0801d660 	.word	0x0801d660
 8010628:	0801d98c 	.word	0x0801d98c
 801062c:	0801d9b8 	.word	0x0801d9b8
 8010630:	0801d9e8 	.word	0x0801d9e8
 8010634:	0801da1c 	.word	0x0801da1c
 8010638:	0801fba8 	.word	0x0801fba8
 801063c:	0801fb98 	.word	0x0801fb98
 8010640:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	2200      	movs	r2, #0
 801064e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801065c:	4293      	cmp	r3, r2
 801065e:	bf28      	it	cs
 8010660:	4613      	movcs	r3, r2
 8010662:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010664:	8a7b      	ldrh	r3, [r7, #18]
 8010666:	085b      	lsrs	r3, r3, #1
 8010668:	b29a      	uxth	r2, r3
 801066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801067a:	005b      	lsls	r3, r3, #1
 801067c:	b29b      	uxth	r3, r3
 801067e:	429a      	cmp	r2, r3
 8010680:	d206      	bcs.n	8010690 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010686:	005b      	lsls	r3, r3, #1
 8010688:	b29a      	uxth	r2, r3
 801068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010692:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	2200      	movs	r2, #0
 801069e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80106a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106a4:	f004 f81e 	bl	80146e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	7d1b      	ldrb	r3, [r3, #20]
 80106ac:	2b06      	cmp	r3, #6
 80106ae:	d111      	bne.n	80106d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	8b5b      	ldrh	r3, [r3, #26]
 80106b4:	f003 0310 	and.w	r3, r3, #16
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00b      	beq.n	80106d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106bc:	4b9c      	ldr	r3, [pc, #624]	; (8010930 <tcp_slowtmr+0x580>)
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c2:	6a1b      	ldr	r3, [r3, #32]
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	2b28      	cmp	r3, #40	; 0x28
 80106c8:	d904      	bls.n	80106d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80106ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ce:	3301      	adds	r3, #1
 80106d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80106d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d6:	7a5b      	ldrb	r3, [r3, #9]
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d04a      	beq.n	8010776 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d003      	beq.n	80106f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80106e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80106ec:	2b07      	cmp	r3, #7
 80106ee:	d142      	bne.n	8010776 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106f0:	4b8f      	ldr	r3, [pc, #572]	; (8010930 <tcp_slowtmr+0x580>)
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	6a1b      	ldr	r3, [r3, #32]
 80106f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80106fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010700:	4b8c      	ldr	r3, [pc, #560]	; (8010934 <tcp_slowtmr+0x584>)
 8010702:	440b      	add	r3, r1
 8010704:	498c      	ldr	r1, [pc, #560]	; (8010938 <tcp_slowtmr+0x588>)
 8010706:	fba1 1303 	umull	r1, r3, r1, r3
 801070a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801070c:	429a      	cmp	r2, r3
 801070e:	d90a      	bls.n	8010726 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010714:	3301      	adds	r3, #1
 8010716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801071a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801071e:	3301      	adds	r3, #1
 8010720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010724:	e027      	b.n	8010776 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010726:	4b82      	ldr	r3, [pc, #520]	; (8010930 <tcp_slowtmr+0x580>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801073c:	4618      	mov	r0, r3
 801073e:	4b7f      	ldr	r3, [pc, #508]	; (801093c <tcp_slowtmr+0x58c>)
 8010740:	fb00 f303 	mul.w	r3, r0, r3
 8010744:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010746:	497c      	ldr	r1, [pc, #496]	; (8010938 <tcp_slowtmr+0x588>)
 8010748:	fba1 1303 	umull	r1, r3, r1, r3
 801074c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801074e:	429a      	cmp	r2, r3
 8010750:	d911      	bls.n	8010776 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8010752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010754:	f004 faca 	bl	8014cec <tcp_keepalive>
 8010758:	4603      	mov	r3, r0
 801075a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801075e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010762:	2b00      	cmp	r3, #0
 8010764:	d107      	bne.n	8010776 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010768:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801076c:	3301      	adds	r3, #1
 801076e:	b2da      	uxtb	r2, r3
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801077a:	2b00      	cmp	r3, #0
 801077c:	d011      	beq.n	80107a2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801077e:	4b6c      	ldr	r3, [pc, #432]	; (8010930 <tcp_slowtmr+0x580>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010784:	6a1b      	ldr	r3, [r3, #32]
 8010786:	1ad2      	subs	r2, r2, r3
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801078e:	4619      	mov	r1, r3
 8010790:	460b      	mov	r3, r1
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	440b      	add	r3, r1
 8010796:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010798:	429a      	cmp	r2, r3
 801079a:	d302      	bcc.n	80107a2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801079c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801079e:	f000 fddd 	bl	801135c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	7d1b      	ldrb	r3, [r3, #20]
 80107a6:	2b03      	cmp	r3, #3
 80107a8:	d10b      	bne.n	80107c2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80107aa:	4b61      	ldr	r3, [pc, #388]	; (8010930 <tcp_slowtmr+0x580>)
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	6a1b      	ldr	r3, [r3, #32]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	2b28      	cmp	r3, #40	; 0x28
 80107b6:	d904      	bls.n	80107c2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80107b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107bc:	3301      	adds	r3, #1
 80107be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	7d1b      	ldrb	r3, [r3, #20]
 80107c6:	2b09      	cmp	r3, #9
 80107c8:	d10b      	bne.n	80107e2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80107ca:	4b59      	ldr	r3, [pc, #356]	; (8010930 <tcp_slowtmr+0x580>)
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d0:	6a1b      	ldr	r3, [r3, #32]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	2bf0      	cmp	r3, #240	; 0xf0
 80107d6:	d904      	bls.n	80107e2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80107d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107dc:	3301      	adds	r3, #1
 80107de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80107e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d060      	beq.n	80108ac <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80107ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80107f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107f4:	f000 fbfe 	bl	8010ff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80107f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d010      	beq.n	8010820 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80107fe:	4b50      	ldr	r3, [pc, #320]	; (8010940 <tcp_slowtmr+0x590>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010804:	429a      	cmp	r2, r3
 8010806:	d106      	bne.n	8010816 <tcp_slowtmr+0x466>
 8010808:	4b4e      	ldr	r3, [pc, #312]	; (8010944 <tcp_slowtmr+0x594>)
 801080a:	f240 526d 	movw	r2, #1389	; 0x56d
 801080e:	494e      	ldr	r1, [pc, #312]	; (8010948 <tcp_slowtmr+0x598>)
 8010810:	484e      	ldr	r0, [pc, #312]	; (801094c <tcp_slowtmr+0x59c>)
 8010812:	f009 fd81 	bl	801a318 <iprintf>
        prev->next = pcb->next;
 8010816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	e00f      	b.n	8010840 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010820:	4b47      	ldr	r3, [pc, #284]	; (8010940 <tcp_slowtmr+0x590>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010826:	429a      	cmp	r2, r3
 8010828:	d006      	beq.n	8010838 <tcp_slowtmr+0x488>
 801082a:	4b46      	ldr	r3, [pc, #280]	; (8010944 <tcp_slowtmr+0x594>)
 801082c:	f240 5271 	movw	r2, #1393	; 0x571
 8010830:	4947      	ldr	r1, [pc, #284]	; (8010950 <tcp_slowtmr+0x5a0>)
 8010832:	4846      	ldr	r0, [pc, #280]	; (801094c <tcp_slowtmr+0x59c>)
 8010834:	f009 fd70 	bl	801a318 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	4a40      	ldr	r2, [pc, #256]	; (8010940 <tcp_slowtmr+0x590>)
 801083e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010844:	2b00      	cmp	r3, #0
 8010846:	d013      	beq.n	8010870 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010850:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010854:	3304      	adds	r3, #4
 8010856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010858:	8ad2      	ldrh	r2, [r2, #22]
 801085a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801085c:	8b09      	ldrh	r1, [r1, #24]
 801085e:	9102      	str	r1, [sp, #8]
 8010860:	9201      	str	r2, [sp, #4]
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	462b      	mov	r3, r5
 8010866:	4622      	mov	r2, r4
 8010868:	4601      	mov	r1, r0
 801086a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801086c:	f004 f98a 	bl	8014b84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010878:	7d1b      	ldrb	r3, [r3, #20]
 801087a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010886:	6838      	ldr	r0, [r7, #0]
 8010888:	f7ff f9f4 	bl	800fc74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801088c:	4b31      	ldr	r3, [pc, #196]	; (8010954 <tcp_slowtmr+0x5a4>)
 801088e:	2200      	movs	r2, #0
 8010890:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <tcp_slowtmr+0x4f2>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f06f 010c 	mvn.w	r1, #12
 801089e:	68b8      	ldr	r0, [r7, #8]
 80108a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80108a2:	4b2c      	ldr	r3, [pc, #176]	; (8010954 <tcp_slowtmr+0x5a4>)
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d037      	beq.n	801091a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80108aa:	e592      	b.n	80103d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80108b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	7f1b      	ldrb	r3, [r3, #28]
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80108c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c4:	7f1a      	ldrb	r2, [r3, #28]
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	7f5b      	ldrb	r3, [r3, #29]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d325      	bcc.n	801091a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80108ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d0:	2200      	movs	r2, #0
 80108d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80108d4:	4b1f      	ldr	r3, [pc, #124]	; (8010954 <tcp_slowtmr+0x5a4>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00b      	beq.n	80108fc <tcp_slowtmr+0x54c>
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ec:	6912      	ldr	r2, [r2, #16]
 80108ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108f0:	4610      	mov	r0, r2
 80108f2:	4798      	blx	r3
 80108f4:	4603      	mov	r3, r0
 80108f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80108fa:	e002      	b.n	8010902 <tcp_slowtmr+0x552>
 80108fc:	2300      	movs	r3, #0
 80108fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010902:	4b14      	ldr	r3, [pc, #80]	; (8010954 <tcp_slowtmr+0x5a4>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d000      	beq.n	801090c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801090a:	e562      	b.n	80103d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801090c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010910:	2b00      	cmp	r3, #0
 8010912:	d102      	bne.n	801091a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010916:	f003 fb81 	bl	801401c <tcp_output>
  while (pcb != NULL) {
 801091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091c:	2b00      	cmp	r3, #0
 801091e:	f47f ad5e 	bne.w	80103de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010922:	2300      	movs	r3, #0
 8010924:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010926:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <tcp_slowtmr+0x5a8>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801092c:	e069      	b.n	8010a02 <tcp_slowtmr+0x652>
 801092e:	bf00      	nop
 8010930:	2000b47c 	.word	0x2000b47c
 8010934:	000a4cb8 	.word	0x000a4cb8
 8010938:	10624dd3 	.word	0x10624dd3
 801093c:	000124f8 	.word	0x000124f8
 8010940:	2000b488 	.word	0x2000b488
 8010944:	0801d61c 	.word	0x0801d61c
 8010948:	0801da54 	.word	0x0801da54
 801094c:	0801d660 	.word	0x0801d660
 8010950:	0801da80 	.word	0x0801da80
 8010954:	2000b490 	.word	0x2000b490
 8010958:	2000b48c 	.word	0x2000b48c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801095c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095e:	7d1b      	ldrb	r3, [r3, #20]
 8010960:	2b0a      	cmp	r3, #10
 8010962:	d006      	beq.n	8010972 <tcp_slowtmr+0x5c2>
 8010964:	4b2b      	ldr	r3, [pc, #172]	; (8010a14 <tcp_slowtmr+0x664>)
 8010966:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801096a:	492b      	ldr	r1, [pc, #172]	; (8010a18 <tcp_slowtmr+0x668>)
 801096c:	482b      	ldr	r0, [pc, #172]	; (8010a1c <tcp_slowtmr+0x66c>)
 801096e:	f009 fcd3 	bl	801a318 <iprintf>
    pcb_remove = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010978:	4b29      	ldr	r3, [pc, #164]	; (8010a20 <tcp_slowtmr+0x670>)
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	1ad3      	subs	r3, r2, r3
 8010982:	2bf0      	cmp	r3, #240	; 0xf0
 8010984:	d904      	bls.n	8010990 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801098a:	3301      	adds	r3, #1
 801098c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010994:	2b00      	cmp	r3, #0
 8010996:	d02f      	beq.n	80109f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801099a:	f000 fb2b 	bl	8010ff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d010      	beq.n	80109c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80109a4:	4b1f      	ldr	r3, [pc, #124]	; (8010a24 <tcp_slowtmr+0x674>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d106      	bne.n	80109bc <tcp_slowtmr+0x60c>
 80109ae:	4b19      	ldr	r3, [pc, #100]	; (8010a14 <tcp_slowtmr+0x664>)
 80109b0:	f240 52af 	movw	r2, #1455	; 0x5af
 80109b4:	491c      	ldr	r1, [pc, #112]	; (8010a28 <tcp_slowtmr+0x678>)
 80109b6:	4819      	ldr	r0, [pc, #100]	; (8010a1c <tcp_slowtmr+0x66c>)
 80109b8:	f009 fcae 	bl	801a318 <iprintf>
        prev->next = pcb->next;
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	68da      	ldr	r2, [r3, #12]
 80109c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c2:	60da      	str	r2, [r3, #12]
 80109c4:	e00f      	b.n	80109e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80109c6:	4b17      	ldr	r3, [pc, #92]	; (8010a24 <tcp_slowtmr+0x674>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d006      	beq.n	80109de <tcp_slowtmr+0x62e>
 80109d0:	4b10      	ldr	r3, [pc, #64]	; (8010a14 <tcp_slowtmr+0x664>)
 80109d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80109d6:	4915      	ldr	r1, [pc, #84]	; (8010a2c <tcp_slowtmr+0x67c>)
 80109d8:	4810      	ldr	r0, [pc, #64]	; (8010a1c <tcp_slowtmr+0x66c>)
 80109da:	f009 fc9d 	bl	801a318 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80109de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	4a10      	ldr	r2, [pc, #64]	; (8010a24 <tcp_slowtmr+0x674>)
 80109e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80109e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80109ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80109f0:	69f8      	ldr	r0, [r7, #28]
 80109f2:	f7ff f93f 	bl	800fc74 <tcp_free>
 80109f6:	e004      	b.n	8010a02 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80109f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80109fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1a9      	bne.n	801095c <tcp_slowtmr+0x5ac>
    }
  }
}
 8010a08:	bf00      	nop
 8010a0a:	bf00      	nop
 8010a0c:	3730      	adds	r7, #48	; 0x30
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bdb0      	pop	{r4, r5, r7, pc}
 8010a12:	bf00      	nop
 8010a14:	0801d61c 	.word	0x0801d61c
 8010a18:	0801daac 	.word	0x0801daac
 8010a1c:	0801d660 	.word	0x0801d660
 8010a20:	2000b47c 	.word	0x2000b47c
 8010a24:	2000b48c 	.word	0x2000b48c
 8010a28:	0801dadc 	.word	0x0801dadc
 8010a2c:	0801db04 	.word	0x0801db04

08010a30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010a36:	4b2d      	ldr	r3, [pc, #180]	; (8010aec <tcp_fasttmr+0xbc>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	4b2b      	ldr	r3, [pc, #172]	; (8010aec <tcp_fasttmr+0xbc>)
 8010a40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010a42:	4b2b      	ldr	r3, [pc, #172]	; (8010af0 <tcp_fasttmr+0xc0>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010a48:	e048      	b.n	8010adc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	7f9a      	ldrb	r2, [r3, #30]
 8010a4e:	4b27      	ldr	r3, [pc, #156]	; (8010aec <tcp_fasttmr+0xbc>)
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d03f      	beq.n	8010ad6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010a56:	4b25      	ldr	r3, [pc, #148]	; (8010aec <tcp_fasttmr+0xbc>)
 8010a58:	781a      	ldrb	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	8b5b      	ldrh	r3, [r3, #26]
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d010      	beq.n	8010a8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8b5b      	ldrh	r3, [r3, #26]
 8010a6e:	f043 0302 	orr.w	r3, r3, #2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f003 facf 	bl	801401c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	8b5b      	ldrh	r3, [r3, #26]
 8010a82:	f023 0303 	bic.w	r3, r3, #3
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	8b5b      	ldrh	r3, [r3, #26]
 8010a90:	f003 0308 	and.w	r3, r3, #8
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d009      	beq.n	8010aac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8b5b      	ldrh	r3, [r3, #26]
 8010a9c:	f023 0308 	bic.w	r3, r3, #8
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7ff fa78 	bl	800ff9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010aba:	4b0e      	ldr	r3, [pc, #56]	; (8010af4 <tcp_fasttmr+0xc4>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f819 	bl	8010af8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010ac6:	4b0b      	ldr	r3, [pc, #44]	; (8010af4 <tcp_fasttmr+0xc4>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d000      	beq.n	8010ad0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010ace:	e7b8      	b.n	8010a42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	607b      	str	r3, [r7, #4]
 8010ad4:	e002      	b.n	8010adc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1b3      	bne.n	8010a4a <tcp_fasttmr+0x1a>
    }
  }
}
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	2000b492 	.word	0x2000b492
 8010af0:	2000b488 	.word	0x2000b488
 8010af4:	2000b490 	.word	0x2000b490

08010af8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010af8:	b590      	push	{r4, r7, lr}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d109      	bne.n	8010b1a <tcp_process_refused_data+0x22>
 8010b06:	4b37      	ldr	r3, [pc, #220]	; (8010be4 <tcp_process_refused_data+0xec>)
 8010b08:	f240 6209 	movw	r2, #1545	; 0x609
 8010b0c:	4936      	ldr	r1, [pc, #216]	; (8010be8 <tcp_process_refused_data+0xf0>)
 8010b0e:	4837      	ldr	r0, [pc, #220]	; (8010bec <tcp_process_refused_data+0xf4>)
 8010b10:	f009 fc02 	bl	801a318 <iprintf>
 8010b14:	f06f 030f 	mvn.w	r3, #15
 8010b18:	e060      	b.n	8010bdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b1e:	7b5b      	ldrb	r3, [r3, #13]
 8010b20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00b      	beq.n	8010b50 <tcp_process_refused_data+0x58>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6918      	ldr	r0, [r3, #16]
 8010b42:	2300      	movs	r3, #0
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	47a0      	blx	r4
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	73fb      	strb	r3, [r7, #15]
 8010b4e:	e007      	b.n	8010b60 <tcp_process_refused_data+0x68>
 8010b50:	2300      	movs	r3, #0
 8010b52:	68ba      	ldr	r2, [r7, #8]
 8010b54:	6879      	ldr	r1, [r7, #4]
 8010b56:	2000      	movs	r0, #0
 8010b58:	f000 f8a4 	bl	8010ca4 <tcp_recv_null>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d12a      	bne.n	8010bbe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	f003 0320 	and.w	r3, r3, #32
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d033      	beq.n	8010bda <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010b7a:	d005      	beq.n	8010b88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b80:	3301      	adds	r3, #1
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d00b      	beq.n	8010baa <tcp_process_refused_data+0xb2>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6918      	ldr	r0, [r3, #16]
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	6879      	ldr	r1, [r7, #4]
 8010ba2:	47a0      	blx	r4
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]
 8010ba8:	e001      	b.n	8010bae <tcp_process_refused_data+0xb6>
 8010baa:	2300      	movs	r3, #0
 8010bac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bb2:	f113 0f0d 	cmn.w	r3, #13
 8010bb6:	d110      	bne.n	8010bda <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010bb8:	f06f 030c 	mvn.w	r3, #12
 8010bbc:	e00e      	b.n	8010bdc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc2:	f113 0f0d 	cmn.w	r3, #13
 8010bc6:	d102      	bne.n	8010bce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010bc8:	f06f 030c 	mvn.w	r3, #12
 8010bcc:	e006      	b.n	8010bdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010bd4:	f06f 0304 	mvn.w	r3, #4
 8010bd8:	e000      	b.n	8010bdc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010bda:	2300      	movs	r3, #0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd90      	pop	{r4, r7, pc}
 8010be4:	0801d61c 	.word	0x0801d61c
 8010be8:	0801db2c 	.word	0x0801db2c
 8010bec:	0801d660 	.word	0x0801d660

08010bf0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010bf8:	e007      	b.n	8010c0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 f80a 	bl	8010c1a <tcp_seg_free>
    seg = next;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1f4      	bne.n	8010bfa <tcp_segs_free+0xa>
  }
}
 8010c10:	bf00      	nop
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b082      	sub	sp, #8
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d00c      	beq.n	8010c42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d004      	beq.n	8010c3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fe fd6d 	bl	800f714 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010c3a:	6879      	ldr	r1, [r7, #4]
 8010c3c:	2003      	movs	r0, #3
 8010c3e:	f7fd ff07 	bl	800ea50 <memp_free>
  }
}
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
	...

08010c4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <tcp_seg_copy+0x1c>
 8010c5a:	4b0f      	ldr	r3, [pc, #60]	; (8010c98 <tcp_seg_copy+0x4c>)
 8010c5c:	f240 6282 	movw	r2, #1666	; 0x682
 8010c60:	490e      	ldr	r1, [pc, #56]	; (8010c9c <tcp_seg_copy+0x50>)
 8010c62:	480f      	ldr	r0, [pc, #60]	; (8010ca0 <tcp_seg_copy+0x54>)
 8010c64:	f009 fb58 	bl	801a318 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010c68:	2003      	movs	r0, #3
 8010c6a:	f7fd fe81 	bl	800e970 <memp_malloc>
 8010c6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <tcp_seg_copy+0x2e>
    return NULL;
 8010c76:	2300      	movs	r3, #0
 8010c78:	e00a      	b.n	8010c90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010c7a:	2210      	movs	r2, #16
 8010c7c:	6879      	ldr	r1, [r7, #4]
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f009 fc93 	bl	801a5aa <memcpy>
  pbuf_ref(cseg->p);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe fde3 	bl	800f854 <pbuf_ref>
  return cseg;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	0801d61c 	.word	0x0801d61c
 8010c9c:	0801db70 	.word	0x0801db70
 8010ca0:	0801d660 	.word	0x0801d660

08010ca4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
 8010cb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d109      	bne.n	8010ccc <tcp_recv_null+0x28>
 8010cb8:	4b12      	ldr	r3, [pc, #72]	; (8010d04 <tcp_recv_null+0x60>)
 8010cba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010cbe:	4912      	ldr	r1, [pc, #72]	; (8010d08 <tcp_recv_null+0x64>)
 8010cc0:	4812      	ldr	r0, [pc, #72]	; (8010d0c <tcp_recv_null+0x68>)
 8010cc2:	f009 fb29 	bl	801a318 <iprintf>
 8010cc6:	f06f 030f 	mvn.w	r3, #15
 8010cca:	e016      	b.n	8010cfa <tcp_recv_null+0x56>

  if (p != NULL) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	891b      	ldrh	r3, [r3, #8]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68b8      	ldr	r0, [r7, #8]
 8010cda:	f7ff fb19 	bl	8010310 <tcp_recved>
    pbuf_free(p);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f7fe fd18 	bl	800f714 <pbuf_free>
 8010ce4:	e008      	b.n	8010cf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d104      	bne.n	8010cf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010cee:	68b8      	ldr	r0, [r7, #8]
 8010cf0:	f7ff f9be 	bl	8010070 <tcp_close>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	e000      	b.n	8010cfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801d61c 	.word	0x0801d61c
 8010d08:	0801db8c 	.word	0x0801db8c
 8010d0c:	0801d660 	.word	0x0801d660

08010d10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	4603      	mov	r3, r0
 8010d18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	db01      	blt.n	8010d26 <tcp_kill_prio+0x16>
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	e000      	b.n	8010d28 <tcp_kill_prio+0x18>
 8010d26:	237f      	movs	r3, #127	; 0x7f
 8010d28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010d2a:	7afb      	ldrb	r3, [r7, #11]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d034      	beq.n	8010d9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010d30:	7afb      	ldrb	r3, [r7, #11]
 8010d32:	3b01      	subs	r3, #1
 8010d34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010d36:	2300      	movs	r3, #0
 8010d38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d3e:	4b19      	ldr	r3, [pc, #100]	; (8010da4 <tcp_kill_prio+0x94>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	e01f      	b.n	8010d86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	7d5b      	ldrb	r3, [r3, #21]
 8010d4a:	7afa      	ldrb	r2, [r7, #11]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d80c      	bhi.n	8010d6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010d54:	7afa      	ldrb	r2, [r7, #11]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d112      	bne.n	8010d80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010d5a:	4b13      	ldr	r3, [pc, #76]	; (8010da8 <tcp_kill_prio+0x98>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	1ad3      	subs	r3, r2, r3
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d80a      	bhi.n	8010d80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010d6a:	4b0f      	ldr	r3, [pc, #60]	; (8010da8 <tcp_kill_prio+0x98>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	1ad3      	subs	r3, r2, r3
 8010d74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	7d5b      	ldrb	r3, [r3, #21]
 8010d7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1dc      	bne.n	8010d46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d004      	beq.n	8010d9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d92:	6938      	ldr	r0, [r7, #16]
 8010d94:	f7ff fa56 	bl	8010244 <tcp_abort>
 8010d98:	e000      	b.n	8010d9c <tcp_kill_prio+0x8c>
    return;
 8010d9a:	bf00      	nop
  }
}
 8010d9c:	3718      	adds	r7, #24
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	2000b488 	.word	0x2000b488
 8010da8:	2000b47c 	.word	0x2000b47c

08010dac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	4603      	mov	r3, r0
 8010db4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010db6:	79fb      	ldrb	r3, [r7, #7]
 8010db8:	2b08      	cmp	r3, #8
 8010dba:	d009      	beq.n	8010dd0 <tcp_kill_state+0x24>
 8010dbc:	79fb      	ldrb	r3, [r7, #7]
 8010dbe:	2b09      	cmp	r3, #9
 8010dc0:	d006      	beq.n	8010dd0 <tcp_kill_state+0x24>
 8010dc2:	4b1a      	ldr	r3, [pc, #104]	; (8010e2c <tcp_kill_state+0x80>)
 8010dc4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010dc8:	4919      	ldr	r1, [pc, #100]	; (8010e30 <tcp_kill_state+0x84>)
 8010dca:	481a      	ldr	r0, [pc, #104]	; (8010e34 <tcp_kill_state+0x88>)
 8010dcc:	f009 faa4 	bl	801a318 <iprintf>

  inactivity = 0;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dd8:	4b17      	ldr	r3, [pc, #92]	; (8010e38 <tcp_kill_state+0x8c>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	617b      	str	r3, [r7, #20]
 8010dde:	e017      	b.n	8010e10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	7d1b      	ldrb	r3, [r3, #20]
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d10f      	bne.n	8010e0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010dea:	4b14      	ldr	r3, [pc, #80]	; (8010e3c <tcp_kill_state+0x90>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	68fa      	ldr	r2, [r7, #12]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d807      	bhi.n	8010e0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010dfa:	4b10      	ldr	r3, [pc, #64]	; (8010e3c <tcp_kill_state+0x90>)
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	6a1b      	ldr	r3, [r3, #32]
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	617b      	str	r3, [r7, #20]
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d1e4      	bne.n	8010de0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d003      	beq.n	8010e24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	6938      	ldr	r0, [r7, #16]
 8010e20:	f7ff f952 	bl	80100c8 <tcp_abandon>
  }
}
 8010e24:	bf00      	nop
 8010e26:	3718      	adds	r7, #24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	0801d61c 	.word	0x0801d61c
 8010e30:	0801dba8 	.word	0x0801dba8
 8010e34:	0801d660 	.word	0x0801d660
 8010e38:	2000b488 	.word	0x2000b488
 8010e3c:	2000b47c 	.word	0x2000b47c

08010e40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e4e:	4b12      	ldr	r3, [pc, #72]	; (8010e98 <tcp_kill_timewait+0x58>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	e012      	b.n	8010e7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010e56:	4b11      	ldr	r3, [pc, #68]	; (8010e9c <tcp_kill_timewait+0x5c>)
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6a1b      	ldr	r3, [r3, #32]
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d807      	bhi.n	8010e76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010e66:	4b0d      	ldr	r3, [pc, #52]	; (8010e9c <tcp_kill_timewait+0x5c>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	6a1b      	ldr	r3, [r3, #32]
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	60fb      	str	r3, [r7, #12]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1e9      	bne.n	8010e56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e88:	68b8      	ldr	r0, [r7, #8]
 8010e8a:	f7ff f9db 	bl	8010244 <tcp_abort>
  }
}
 8010e8e:	bf00      	nop
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	2000b48c 	.word	0x2000b48c
 8010e9c:	2000b47c 	.word	0x2000b47c

08010ea0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010ea6:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <tcp_handle_closepend+0x48>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010eac:	e014      	b.n	8010ed8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	8b5b      	ldrh	r3, [r3, #26]
 8010eb8:	f003 0308 	and.w	r3, r3, #8
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d009      	beq.n	8010ed4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	8b5b      	ldrh	r3, [r3, #26]
 8010ec4:	f023 0308 	bic.w	r3, r3, #8
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7ff f864 	bl	800ff9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1e7      	bne.n	8010eae <tcp_handle_closepend+0xe>
  }
}
 8010ede:	bf00      	nop
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	2000b488 	.word	0x2000b488

08010eec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	f7fd fd3a 	bl	800e970 <memp_malloc>
 8010efc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d126      	bne.n	8010f52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010f04:	f7ff ffcc 	bl	8010ea0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010f08:	f7ff ff9a 	bl	8010e40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	f7fd fd2f 	bl	800e970 <memp_malloc>
 8010f12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d11b      	bne.n	8010f52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010f1a:	2009      	movs	r0, #9
 8010f1c:	f7ff ff46 	bl	8010dac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f20:	2001      	movs	r0, #1
 8010f22:	f7fd fd25 	bl	800e970 <memp_malloc>
 8010f26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d111      	bne.n	8010f52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010f2e:	2008      	movs	r0, #8
 8010f30:	f7ff ff3c 	bl	8010dac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f34:	2001      	movs	r0, #1
 8010f36:	f7fd fd1b 	bl	800e970 <memp_malloc>
 8010f3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d107      	bne.n	8010f52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010f42:	79fb      	ldrb	r3, [r7, #7]
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fee3 	bl	8010d10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f4a:	2001      	movs	r0, #1
 8010f4c:	f7fd fd10 	bl	800e970 <memp_malloc>
 8010f50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d03f      	beq.n	8010fd8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010f58:	229c      	movs	r2, #156	; 0x9c
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	f009 fa62 	bl	801a426 <memset>
    pcb->prio = prio;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	79fa      	ldrb	r2, [r7, #7]
 8010f66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010f6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	22ff      	movs	r2, #255	; 0xff
 8010f86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2206      	movs	r2, #6
 8010f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2206      	movs	r2, #6
 8010f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fa4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2201      	movs	r2, #1
 8010faa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010fae:	4b0d      	ldr	r3, [pc, #52]	; (8010fe4 <tcp_alloc+0xf8>)
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010fb6:	4b0c      	ldr	r3, [pc, #48]	; (8010fe8 <tcp_alloc+0xfc>)
 8010fb8:	781a      	ldrb	r2, [r3, #0]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	4a08      	ldr	r2, [pc, #32]	; (8010fec <tcp_alloc+0x100>)
 8010fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	4a07      	ldr	r2, [pc, #28]	; (8010ff0 <tcp_alloc+0x104>)
 8010fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	2000b47c 	.word	0x2000b47c
 8010fe8:	2000b492 	.word	0x2000b492
 8010fec:	08010ca5 	.word	0x08010ca5
 8010ff0:	006ddd00 	.word	0x006ddd00

08010ff4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d107      	bne.n	8011012 <tcp_pcb_purge+0x1e>
 8011002:	4b21      	ldr	r3, [pc, #132]	; (8011088 <tcp_pcb_purge+0x94>)
 8011004:	f640 0251 	movw	r2, #2129	; 0x851
 8011008:	4920      	ldr	r1, [pc, #128]	; (801108c <tcp_pcb_purge+0x98>)
 801100a:	4821      	ldr	r0, [pc, #132]	; (8011090 <tcp_pcb_purge+0x9c>)
 801100c:	f009 f984 	bl	801a318 <iprintf>
 8011010:	e037      	b.n	8011082 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	7d1b      	ldrb	r3, [r3, #20]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d033      	beq.n	8011082 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801101e:	2b0a      	cmp	r3, #10
 8011020:	d02f      	beq.n	8011082 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011026:	2b01      	cmp	r3, #1
 8011028:	d02b      	beq.n	8011082 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801102e:	2b00      	cmp	r3, #0
 8011030:	d007      	beq.n	8011042 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011036:	4618      	mov	r0, r3
 8011038:	f7fe fb6c 	bl	800f714 <pbuf_free>
      pcb->refused_data = NULL;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011046:	2b00      	cmp	r3, #0
 8011048:	d002      	beq.n	8011050 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f986 	bl	801135c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011056:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105c:	4618      	mov	r0, r3
 801105e:	f7ff fdc7 	bl	8010bf0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fdc2 	bl	8010bf0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	66da      	str	r2, [r3, #108]	; 0x6c
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	0801d61c 	.word	0x0801d61c
 801108c:	0801dc68 	.word	0x0801dc68
 8011090:	0801d660 	.word	0x0801d660

08011094 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d106      	bne.n	80110b2 <tcp_pcb_remove+0x1e>
 80110a4:	4b3e      	ldr	r3, [pc, #248]	; (80111a0 <tcp_pcb_remove+0x10c>)
 80110a6:	f640 0283 	movw	r2, #2179	; 0x883
 80110aa:	493e      	ldr	r1, [pc, #248]	; (80111a4 <tcp_pcb_remove+0x110>)
 80110ac:	483e      	ldr	r0, [pc, #248]	; (80111a8 <tcp_pcb_remove+0x114>)
 80110ae:	f009 f933 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d106      	bne.n	80110c6 <tcp_pcb_remove+0x32>
 80110b8:	4b39      	ldr	r3, [pc, #228]	; (80111a0 <tcp_pcb_remove+0x10c>)
 80110ba:	f640 0284 	movw	r2, #2180	; 0x884
 80110be:	493b      	ldr	r1, [pc, #236]	; (80111ac <tcp_pcb_remove+0x118>)
 80110c0:	4839      	ldr	r0, [pc, #228]	; (80111a8 <tcp_pcb_remove+0x114>)
 80110c2:	f009 f929 	bl	801a318 <iprintf>

  TCP_RMV(pcblist, pcb);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d105      	bne.n	80110dc <tcp_pcb_remove+0x48>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	e013      	b.n	8011104 <tcp_pcb_remove+0x70>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	60fb      	str	r3, [r7, #12]
 80110e2:	e00c      	b.n	80110fe <tcp_pcb_remove+0x6a>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	683a      	ldr	r2, [r7, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d104      	bne.n	80110f8 <tcp_pcb_remove+0x64>
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	e005      	b.n	8011104 <tcp_pcb_remove+0x70>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	60fb      	str	r3, [r7, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ef      	bne.n	80110e4 <tcp_pcb_remove+0x50>
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	2200      	movs	r2, #0
 8011108:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801110a:	6838      	ldr	r0, [r7, #0]
 801110c:	f7ff ff72 	bl	8010ff4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	7d1b      	ldrb	r3, [r3, #20]
 8011114:	2b0a      	cmp	r3, #10
 8011116:	d013      	beq.n	8011140 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801111c:	2b01      	cmp	r3, #1
 801111e:	d00f      	beq.n	8011140 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	8b5b      	ldrh	r3, [r3, #26]
 8011124:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011128:	2b00      	cmp	r3, #0
 801112a:	d009      	beq.n	8011140 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	8b5b      	ldrh	r3, [r3, #26]
 8011130:	f043 0302 	orr.w	r3, r3, #2
 8011134:	b29a      	uxth	r2, r3
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801113a:	6838      	ldr	r0, [r7, #0]
 801113c:	f002 ff6e 	bl	801401c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	7d1b      	ldrb	r3, [r3, #20]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d020      	beq.n	801118a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114c:	2b00      	cmp	r3, #0
 801114e:	d006      	beq.n	801115e <tcp_pcb_remove+0xca>
 8011150:	4b13      	ldr	r3, [pc, #76]	; (80111a0 <tcp_pcb_remove+0x10c>)
 8011152:	f640 0293 	movw	r2, #2195	; 0x893
 8011156:	4916      	ldr	r1, [pc, #88]	; (80111b0 <tcp_pcb_remove+0x11c>)
 8011158:	4813      	ldr	r0, [pc, #76]	; (80111a8 <tcp_pcb_remove+0x114>)
 801115a:	f009 f8dd 	bl	801a318 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <tcp_pcb_remove+0xe0>
 8011166:	4b0e      	ldr	r3, [pc, #56]	; (80111a0 <tcp_pcb_remove+0x10c>)
 8011168:	f640 0294 	movw	r2, #2196	; 0x894
 801116c:	4911      	ldr	r1, [pc, #68]	; (80111b4 <tcp_pcb_remove+0x120>)
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <tcp_pcb_remove+0x114>)
 8011170:	f009 f8d2 	bl	801a318 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011178:	2b00      	cmp	r3, #0
 801117a:	d006      	beq.n	801118a <tcp_pcb_remove+0xf6>
 801117c:	4b08      	ldr	r3, [pc, #32]	; (80111a0 <tcp_pcb_remove+0x10c>)
 801117e:	f640 0296 	movw	r2, #2198	; 0x896
 8011182:	490d      	ldr	r1, [pc, #52]	; (80111b8 <tcp_pcb_remove+0x124>)
 8011184:	4808      	ldr	r0, [pc, #32]	; (80111a8 <tcp_pcb_remove+0x114>)
 8011186:	f009 f8c7 	bl	801a318 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	2200      	movs	r2, #0
 801118e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	2200      	movs	r2, #0
 8011194:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011196:	bf00      	nop
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	0801d61c 	.word	0x0801d61c
 80111a4:	0801dc84 	.word	0x0801dc84
 80111a8:	0801d660 	.word	0x0801d660
 80111ac:	0801dca0 	.word	0x0801dca0
 80111b0:	0801dcc0 	.word	0x0801dcc0
 80111b4:	0801dcd8 	.word	0x0801dcd8
 80111b8:	0801dcf4 	.word	0x0801dcf4

080111bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <tcp_next_iss+0x1c>
 80111ca:	4b0a      	ldr	r3, [pc, #40]	; (80111f4 <tcp_next_iss+0x38>)
 80111cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80111d0:	4909      	ldr	r1, [pc, #36]	; (80111f8 <tcp_next_iss+0x3c>)
 80111d2:	480a      	ldr	r0, [pc, #40]	; (80111fc <tcp_next_iss+0x40>)
 80111d4:	f009 f8a0 	bl	801a318 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80111d8:	4b09      	ldr	r3, [pc, #36]	; (8011200 <tcp_next_iss+0x44>)
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	4b09      	ldr	r3, [pc, #36]	; (8011204 <tcp_next_iss+0x48>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4413      	add	r3, r2
 80111e2:	4a07      	ldr	r2, [pc, #28]	; (8011200 <tcp_next_iss+0x44>)
 80111e4:	6013      	str	r3, [r2, #0]
  return iss;
 80111e6:	4b06      	ldr	r3, [pc, #24]	; (8011200 <tcp_next_iss+0x44>)
 80111e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0801d61c 	.word	0x0801d61c
 80111f8:	0801dd0c 	.word	0x0801dd0c
 80111fc:	0801d660 	.word	0x0801d660
 8011200:	2000003c 	.word	0x2000003c
 8011204:	2000b47c 	.word	0x2000b47c

08011208 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d106      	bne.n	801122a <tcp_eff_send_mss_netif+0x22>
 801121c:	4b14      	ldr	r3, [pc, #80]	; (8011270 <tcp_eff_send_mss_netif+0x68>)
 801121e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011222:	4914      	ldr	r1, [pc, #80]	; (8011274 <tcp_eff_send_mss_netif+0x6c>)
 8011224:	4814      	ldr	r0, [pc, #80]	; (8011278 <tcp_eff_send_mss_netif+0x70>)
 8011226:	f009 f877 	bl	801a318 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011230:	89fb      	ldrh	r3, [r7, #14]
 8011232:	e019      	b.n	8011268 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011238:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801123a:	8afb      	ldrh	r3, [r7, #22]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d012      	beq.n	8011266 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011240:	2328      	movs	r3, #40	; 0x28
 8011242:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011244:	8afa      	ldrh	r2, [r7, #22]
 8011246:	8abb      	ldrh	r3, [r7, #20]
 8011248:	429a      	cmp	r2, r3
 801124a:	d904      	bls.n	8011256 <tcp_eff_send_mss_netif+0x4e>
 801124c:	8afa      	ldrh	r2, [r7, #22]
 801124e:	8abb      	ldrh	r3, [r7, #20]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	b29b      	uxth	r3, r3
 8011254:	e000      	b.n	8011258 <tcp_eff_send_mss_netif+0x50>
 8011256:	2300      	movs	r3, #0
 8011258:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801125a:	8a7a      	ldrh	r2, [r7, #18]
 801125c:	89fb      	ldrh	r3, [r7, #14]
 801125e:	4293      	cmp	r3, r2
 8011260:	bf28      	it	cs
 8011262:	4613      	movcs	r3, r2
 8011264:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011266:	89fb      	ldrh	r3, [r7, #14]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	0801d61c 	.word	0x0801d61c
 8011274:	0801dd28 	.word	0x0801dd28
 8011278:	0801d660 	.word	0x0801d660

0801127c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d119      	bne.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011290:	4b10      	ldr	r3, [pc, #64]	; (80112d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011292:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011296:	4910      	ldr	r1, [pc, #64]	; (80112d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011298:	4810      	ldr	r0, [pc, #64]	; (80112dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801129a:	f009 f83d 	bl	801a318 <iprintf>

  while (pcb != NULL) {
 801129e:	e011      	b.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d108      	bne.n	80112be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7fe ffc6 	bl	8010244 <tcp_abort>
      pcb = next;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e002      	b.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1ea      	bne.n	80112a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80112ca:	bf00      	nop
 80112cc:	bf00      	nop
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	0801d61c 	.word	0x0801d61c
 80112d8:	0801dd50 	.word	0x0801dd50
 80112dc:	0801d660 	.word	0x0801d660

080112e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d02a      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d026      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80112f8:	4b15      	ldr	r3, [pc, #84]	; (8011350 <tcp_netif_ip_addr_changed+0x70>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4619      	mov	r1, r3
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff ffbc 	bl	801127c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011304:	4b13      	ldr	r3, [pc, #76]	; (8011354 <tcp_netif_ip_addr_changed+0x74>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4619      	mov	r1, r3
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7ff ffb6 	bl	801127c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d017      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d013      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801131e:	4b0e      	ldr	r3, [pc, #56]	; (8011358 <tcp_netif_ip_addr_changed+0x78>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	e00c      	b.n	8011340 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d103      	bne.n	801133a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	60fb      	str	r3, [r7, #12]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1ef      	bne.n	8011326 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011346:	bf00      	nop
 8011348:	3710      	adds	r7, #16
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	2000b488 	.word	0x2000b488
 8011354:	2000b480 	.word	0x2000b480
 8011358:	2000b484 	.word	0x2000b484

0801135c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011368:	2b00      	cmp	r3, #0
 801136a:	d007      	beq.n	801137c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011370:	4618      	mov	r0, r3
 8011372:	f7ff fc3d 	bl	8010bf0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011384:	b590      	push	{r4, r7, lr}
 8011386:	b08d      	sub	sp, #52	; 0x34
 8011388:	af04      	add	r7, sp, #16
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d105      	bne.n	80113a0 <tcp_input+0x1c>
 8011394:	4b9b      	ldr	r3, [pc, #620]	; (8011604 <tcp_input+0x280>)
 8011396:	2283      	movs	r2, #131	; 0x83
 8011398:	499b      	ldr	r1, [pc, #620]	; (8011608 <tcp_input+0x284>)
 801139a:	489c      	ldr	r0, [pc, #624]	; (801160c <tcp_input+0x288>)
 801139c:	f008 ffbc 	bl	801a318 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	4a9a      	ldr	r2, [pc, #616]	; (8011610 <tcp_input+0x28c>)
 80113a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	895b      	ldrh	r3, [r3, #10]
 80113ac:	2b13      	cmp	r3, #19
 80113ae:	f240 83d1 	bls.w	8011b54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80113b2:	4b98      	ldr	r3, [pc, #608]	; (8011614 <tcp_input+0x290>)
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	4a97      	ldr	r2, [pc, #604]	; (8011614 <tcp_input+0x290>)
 80113b8:	6812      	ldr	r2, [r2, #0]
 80113ba:	4611      	mov	r1, r2
 80113bc:	4618      	mov	r0, r3
 80113be:	f007 fd8d 	bl	8018edc <ip4_addr_isbroadcast_u32>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f040 83c7 	bne.w	8011b58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80113ca:	4b92      	ldr	r3, [pc, #584]	; (8011614 <tcp_input+0x290>)
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80113d2:	2be0      	cmp	r3, #224	; 0xe0
 80113d4:	f000 83c0 	beq.w	8011b58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80113d8:	4b8d      	ldr	r3, [pc, #564]	; (8011610 <tcp_input+0x28c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fc fe4d 	bl	800e080 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	0b1b      	lsrs	r3, r3, #12
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80113f2:	7cbb      	ldrb	r3, [r7, #18]
 80113f4:	2b13      	cmp	r3, #19
 80113f6:	f240 83b1 	bls.w	8011b5c <tcp_input+0x7d8>
 80113fa:	7cbb      	ldrb	r3, [r7, #18]
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	891b      	ldrh	r3, [r3, #8]
 8011402:	429a      	cmp	r2, r3
 8011404:	f200 83aa 	bhi.w	8011b5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011408:	7cbb      	ldrb	r3, [r7, #18]
 801140a:	b29b      	uxth	r3, r3
 801140c:	3b14      	subs	r3, #20
 801140e:	b29a      	uxth	r2, r3
 8011410:	4b81      	ldr	r3, [pc, #516]	; (8011618 <tcp_input+0x294>)
 8011412:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011414:	4b81      	ldr	r3, [pc, #516]	; (801161c <tcp_input+0x298>)
 8011416:	2200      	movs	r2, #0
 8011418:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	895a      	ldrh	r2, [r3, #10]
 801141e:	7cbb      	ldrb	r3, [r7, #18]
 8011420:	b29b      	uxth	r3, r3
 8011422:	429a      	cmp	r2, r3
 8011424:	d309      	bcc.n	801143a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011426:	4b7c      	ldr	r3, [pc, #496]	; (8011618 <tcp_input+0x294>)
 8011428:	881a      	ldrh	r2, [r3, #0]
 801142a:	4b7d      	ldr	r3, [pc, #500]	; (8011620 <tcp_input+0x29c>)
 801142c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801142e:	7cbb      	ldrb	r3, [r7, #18]
 8011430:	4619      	mov	r1, r3
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7fe f8e8 	bl	800f608 <pbuf_remove_header>
 8011438:	e04e      	b.n	80114d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d105      	bne.n	801144e <tcp_input+0xca>
 8011442:	4b70      	ldr	r3, [pc, #448]	; (8011604 <tcp_input+0x280>)
 8011444:	22c2      	movs	r2, #194	; 0xc2
 8011446:	4977      	ldr	r1, [pc, #476]	; (8011624 <tcp_input+0x2a0>)
 8011448:	4870      	ldr	r0, [pc, #448]	; (801160c <tcp_input+0x288>)
 801144a:	f008 ff65 	bl	801a318 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801144e:	2114      	movs	r1, #20
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7fe f8d9 	bl	800f608 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	895a      	ldrh	r2, [r3, #10]
 801145a:	4b71      	ldr	r3, [pc, #452]	; (8011620 <tcp_input+0x29c>)
 801145c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801145e:	4b6e      	ldr	r3, [pc, #440]	; (8011618 <tcp_input+0x294>)
 8011460:	881a      	ldrh	r2, [r3, #0]
 8011462:	4b6f      	ldr	r3, [pc, #444]	; (8011620 <tcp_input+0x29c>)
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801146a:	4b6d      	ldr	r3, [pc, #436]	; (8011620 <tcp_input+0x29c>)
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fe f8c9 	bl	800f608 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	895b      	ldrh	r3, [r3, #10]
 801147c:	8a3a      	ldrh	r2, [r7, #16]
 801147e:	429a      	cmp	r2, r3
 8011480:	f200 836e 	bhi.w	8011b60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	4a64      	ldr	r2, [pc, #400]	; (801161c <tcp_input+0x298>)
 801148c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	8a3a      	ldrh	r2, [r7, #16]
 8011494:	4611      	mov	r1, r2
 8011496:	4618      	mov	r0, r3
 8011498:	f7fe f8b6 	bl	800f608 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	891a      	ldrh	r2, [r3, #8]
 80114a0:	8a3b      	ldrh	r3, [r7, #16]
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	895b      	ldrh	r3, [r3, #10]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d005      	beq.n	80114be <tcp_input+0x13a>
 80114b2:	4b54      	ldr	r3, [pc, #336]	; (8011604 <tcp_input+0x280>)
 80114b4:	22df      	movs	r2, #223	; 0xdf
 80114b6:	495c      	ldr	r1, [pc, #368]	; (8011628 <tcp_input+0x2a4>)
 80114b8:	4854      	ldr	r0, [pc, #336]	; (801160c <tcp_input+0x288>)
 80114ba:	f008 ff2d 	bl	801a318 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	891a      	ldrh	r2, [r3, #8]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	891b      	ldrh	r3, [r3, #8]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d005      	beq.n	80114d8 <tcp_input+0x154>
 80114cc:	4b4d      	ldr	r3, [pc, #308]	; (8011604 <tcp_input+0x280>)
 80114ce:	22e0      	movs	r2, #224	; 0xe0
 80114d0:	4956      	ldr	r1, [pc, #344]	; (801162c <tcp_input+0x2a8>)
 80114d2:	484e      	ldr	r0, [pc, #312]	; (801160c <tcp_input+0x288>)
 80114d4:	f008 ff20 	bl	801a318 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80114d8:	4b4d      	ldr	r3, [pc, #308]	; (8011610 <tcp_input+0x28c>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	881b      	ldrh	r3, [r3, #0]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4a4b      	ldr	r2, [pc, #300]	; (8011610 <tcp_input+0x28c>)
 80114e2:	6814      	ldr	r4, [r2, #0]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fc fdcb 	bl	800e080 <lwip_htons>
 80114ea:	4603      	mov	r3, r0
 80114ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80114ee:	4b48      	ldr	r3, [pc, #288]	; (8011610 <tcp_input+0x28c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	4a46      	ldr	r2, [pc, #280]	; (8011610 <tcp_input+0x28c>)
 80114f8:	6814      	ldr	r4, [r2, #0]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fc fdc0 	bl	800e080 <lwip_htons>
 8011500:	4603      	mov	r3, r0
 8011502:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011504:	4b42      	ldr	r3, [pc, #264]	; (8011610 <tcp_input+0x28c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	4a41      	ldr	r2, [pc, #260]	; (8011610 <tcp_input+0x28c>)
 801150c:	6814      	ldr	r4, [r2, #0]
 801150e:	4618      	mov	r0, r3
 8011510:	f7fc fdcb 	bl	800e0aa <lwip_htonl>
 8011514:	4603      	mov	r3, r0
 8011516:	6063      	str	r3, [r4, #4]
 8011518:	6863      	ldr	r3, [r4, #4]
 801151a:	4a45      	ldr	r2, [pc, #276]	; (8011630 <tcp_input+0x2ac>)
 801151c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801151e:	4b3c      	ldr	r3, [pc, #240]	; (8011610 <tcp_input+0x28c>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	4a3a      	ldr	r2, [pc, #232]	; (8011610 <tcp_input+0x28c>)
 8011526:	6814      	ldr	r4, [r2, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f7fc fdbe 	bl	800e0aa <lwip_htonl>
 801152e:	4603      	mov	r3, r0
 8011530:	60a3      	str	r3, [r4, #8]
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	4a3f      	ldr	r2, [pc, #252]	; (8011634 <tcp_input+0x2b0>)
 8011536:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011538:	4b35      	ldr	r3, [pc, #212]	; (8011610 <tcp_input+0x28c>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	89db      	ldrh	r3, [r3, #14]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4a33      	ldr	r2, [pc, #204]	; (8011610 <tcp_input+0x28c>)
 8011542:	6814      	ldr	r4, [r2, #0]
 8011544:	4618      	mov	r0, r3
 8011546:	f7fc fd9b 	bl	800e080 <lwip_htons>
 801154a:	4603      	mov	r3, r0
 801154c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801154e:	4b30      	ldr	r3, [pc, #192]	; (8011610 <tcp_input+0x28c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	899b      	ldrh	r3, [r3, #12]
 8011554:	b29b      	uxth	r3, r3
 8011556:	4618      	mov	r0, r3
 8011558:	f7fc fd92 	bl	800e080 <lwip_htons>
 801155c:	4603      	mov	r3, r0
 801155e:	b2db      	uxtb	r3, r3
 8011560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011564:	b2da      	uxtb	r2, r3
 8011566:	4b34      	ldr	r3, [pc, #208]	; (8011638 <tcp_input+0x2b4>)
 8011568:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	891a      	ldrh	r2, [r3, #8]
 801156e:	4b33      	ldr	r3, [pc, #204]	; (801163c <tcp_input+0x2b8>)
 8011570:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011572:	4b31      	ldr	r3, [pc, #196]	; (8011638 <tcp_input+0x2b4>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	f003 0303 	and.w	r3, r3, #3
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00c      	beq.n	8011598 <tcp_input+0x214>
    tcplen++;
 801157e:	4b2f      	ldr	r3, [pc, #188]	; (801163c <tcp_input+0x2b8>)
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	3301      	adds	r3, #1
 8011584:	b29a      	uxth	r2, r3
 8011586:	4b2d      	ldr	r3, [pc, #180]	; (801163c <tcp_input+0x2b8>)
 8011588:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	891a      	ldrh	r2, [r3, #8]
 801158e:	4b2b      	ldr	r3, [pc, #172]	; (801163c <tcp_input+0x2b8>)
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	f200 82e6 	bhi.w	8011b64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011598:	2300      	movs	r3, #0
 801159a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801159c:	4b28      	ldr	r3, [pc, #160]	; (8011640 <tcp_input+0x2bc>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	61fb      	str	r3, [r7, #28]
 80115a2:	e09d      	b.n	80116e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	7d1b      	ldrb	r3, [r3, #20]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d105      	bne.n	80115b8 <tcp_input+0x234>
 80115ac:	4b15      	ldr	r3, [pc, #84]	; (8011604 <tcp_input+0x280>)
 80115ae:	22fb      	movs	r2, #251	; 0xfb
 80115b0:	4924      	ldr	r1, [pc, #144]	; (8011644 <tcp_input+0x2c0>)
 80115b2:	4816      	ldr	r0, [pc, #88]	; (801160c <tcp_input+0x288>)
 80115b4:	f008 feb0 	bl	801a318 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	7d1b      	ldrb	r3, [r3, #20]
 80115bc:	2b0a      	cmp	r3, #10
 80115be:	d105      	bne.n	80115cc <tcp_input+0x248>
 80115c0:	4b10      	ldr	r3, [pc, #64]	; (8011604 <tcp_input+0x280>)
 80115c2:	22fc      	movs	r2, #252	; 0xfc
 80115c4:	4920      	ldr	r1, [pc, #128]	; (8011648 <tcp_input+0x2c4>)
 80115c6:	4811      	ldr	r0, [pc, #68]	; (801160c <tcp_input+0x288>)
 80115c8:	f008 fea6 	bl	801a318 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d105      	bne.n	80115e0 <tcp_input+0x25c>
 80115d4:	4b0b      	ldr	r3, [pc, #44]	; (8011604 <tcp_input+0x280>)
 80115d6:	22fd      	movs	r2, #253	; 0xfd
 80115d8:	491c      	ldr	r1, [pc, #112]	; (801164c <tcp_input+0x2c8>)
 80115da:	480c      	ldr	r0, [pc, #48]	; (801160c <tcp_input+0x288>)
 80115dc:	f008 fe9c 	bl	801a318 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	7a1b      	ldrb	r3, [r3, #8]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d033      	beq.n	8011650 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	7a1a      	ldrb	r2, [r3, #8]
 80115ec:	4b09      	ldr	r3, [pc, #36]	; (8011614 <tcp_input+0x290>)
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115f4:	3301      	adds	r3, #1
 80115f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d029      	beq.n	8011650 <tcp_input+0x2cc>
      prev = pcb;
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	61bb      	str	r3, [r7, #24]
      continue;
 8011600:	e06b      	b.n	80116da <tcp_input+0x356>
 8011602:	bf00      	nop
 8011604:	0801dd84 	.word	0x0801dd84
 8011608:	0801ddb8 	.word	0x0801ddb8
 801160c:	0801ddd0 	.word	0x0801ddd0
 8011610:	2000b4a4 	.word	0x2000b4a4
 8011614:	20007eec 	.word	0x20007eec
 8011618:	2000b4a8 	.word	0x2000b4a8
 801161c:	2000b4ac 	.word	0x2000b4ac
 8011620:	2000b4aa 	.word	0x2000b4aa
 8011624:	0801ddf8 	.word	0x0801ddf8
 8011628:	0801de08 	.word	0x0801de08
 801162c:	0801de14 	.word	0x0801de14
 8011630:	2000b4b4 	.word	0x2000b4b4
 8011634:	2000b4b8 	.word	0x2000b4b8
 8011638:	2000b4c0 	.word	0x2000b4c0
 801163c:	2000b4be 	.word	0x2000b4be
 8011640:	2000b488 	.word	0x2000b488
 8011644:	0801de34 	.word	0x0801de34
 8011648:	0801de5c 	.word	0x0801de5c
 801164c:	0801de88 	.word	0x0801de88
    }

    if (pcb->remote_port == tcphdr->src &&
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	8b1a      	ldrh	r2, [r3, #24]
 8011654:	4b72      	ldr	r3, [pc, #456]	; (8011820 <tcp_input+0x49c>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	b29b      	uxth	r3, r3
 801165c:	429a      	cmp	r2, r3
 801165e:	d13a      	bne.n	80116d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	8ada      	ldrh	r2, [r3, #22]
 8011664:	4b6e      	ldr	r3, [pc, #440]	; (8011820 <tcp_input+0x49c>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	885b      	ldrh	r3, [r3, #2]
 801166a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801166c:	429a      	cmp	r2, r3
 801166e:	d132      	bne.n	80116d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	4b6b      	ldr	r3, [pc, #428]	; (8011824 <tcp_input+0x4a0>)
 8011676:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011678:	429a      	cmp	r2, r3
 801167a:	d12c      	bne.n	80116d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	4b68      	ldr	r3, [pc, #416]	; (8011824 <tcp_input+0x4a0>)
 8011682:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011684:	429a      	cmp	r2, r3
 8011686:	d126      	bne.n	80116d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	69fa      	ldr	r2, [r7, #28]
 801168e:	429a      	cmp	r2, r3
 8011690:	d106      	bne.n	80116a0 <tcp_input+0x31c>
 8011692:	4b65      	ldr	r3, [pc, #404]	; (8011828 <tcp_input+0x4a4>)
 8011694:	f240 120d 	movw	r2, #269	; 0x10d
 8011698:	4964      	ldr	r1, [pc, #400]	; (801182c <tcp_input+0x4a8>)
 801169a:	4865      	ldr	r0, [pc, #404]	; (8011830 <tcp_input+0x4ac>)
 801169c:	f008 fe3c 	bl	801a318 <iprintf>
      if (prev != NULL) {
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00a      	beq.n	80116bc <tcp_input+0x338>
        prev->next = pcb->next;
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	68da      	ldr	r2, [r3, #12]
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80116ae:	4b61      	ldr	r3, [pc, #388]	; (8011834 <tcp_input+0x4b0>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80116b6:	4a5f      	ldr	r2, [pc, #380]	; (8011834 <tcp_input+0x4b0>)
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	69fa      	ldr	r2, [r7, #28]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d111      	bne.n	80116ea <tcp_input+0x366>
 80116c6:	4b58      	ldr	r3, [pc, #352]	; (8011828 <tcp_input+0x4a4>)
 80116c8:	f240 1215 	movw	r2, #277	; 0x115
 80116cc:	495a      	ldr	r1, [pc, #360]	; (8011838 <tcp_input+0x4b4>)
 80116ce:	4858      	ldr	r0, [pc, #352]	; (8011830 <tcp_input+0x4ac>)
 80116d0:	f008 fe22 	bl	801a318 <iprintf>
      break;
 80116d4:	e009      	b.n	80116ea <tcp_input+0x366>
    }
    prev = pcb;
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	61fb      	str	r3, [r7, #28]
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f47f af5e 	bne.w	80115a4 <tcp_input+0x220>
 80116e8:	e000      	b.n	80116ec <tcp_input+0x368>
      break;
 80116ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f040 80aa 	bne.w	8011848 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f4:	4b51      	ldr	r3, [pc, #324]	; (801183c <tcp_input+0x4b8>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	61fb      	str	r3, [r7, #28]
 80116fa:	e03f      	b.n	801177c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	7d1b      	ldrb	r3, [r3, #20]
 8011700:	2b0a      	cmp	r3, #10
 8011702:	d006      	beq.n	8011712 <tcp_input+0x38e>
 8011704:	4b48      	ldr	r3, [pc, #288]	; (8011828 <tcp_input+0x4a4>)
 8011706:	f240 121f 	movw	r2, #287	; 0x11f
 801170a:	494d      	ldr	r1, [pc, #308]	; (8011840 <tcp_input+0x4bc>)
 801170c:	4848      	ldr	r0, [pc, #288]	; (8011830 <tcp_input+0x4ac>)
 801170e:	f008 fe03 	bl	801a318 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	7a1b      	ldrb	r3, [r3, #8]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d009      	beq.n	801172e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	7a1a      	ldrb	r2, [r3, #8]
 801171e:	4b41      	ldr	r3, [pc, #260]	; (8011824 <tcp_input+0x4a0>)
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011726:	3301      	adds	r3, #1
 8011728:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801172a:	429a      	cmp	r2, r3
 801172c:	d122      	bne.n	8011774 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	8b1a      	ldrh	r2, [r3, #24]
 8011732:	4b3b      	ldr	r3, [pc, #236]	; (8011820 <tcp_input+0x49c>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	b29b      	uxth	r3, r3
 801173a:	429a      	cmp	r2, r3
 801173c:	d11b      	bne.n	8011776 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	8ada      	ldrh	r2, [r3, #22]
 8011742:	4b37      	ldr	r3, [pc, #220]	; (8011820 <tcp_input+0x49c>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	885b      	ldrh	r3, [r3, #2]
 8011748:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801174a:	429a      	cmp	r2, r3
 801174c:	d113      	bne.n	8011776 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801174e:	69fb      	ldr	r3, [r7, #28]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	4b34      	ldr	r3, [pc, #208]	; (8011824 <tcp_input+0x4a0>)
 8011754:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011756:	429a      	cmp	r2, r3
 8011758:	d10d      	bne.n	8011776 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	4b31      	ldr	r3, [pc, #196]	; (8011824 <tcp_input+0x4a0>)
 8011760:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011762:	429a      	cmp	r2, r3
 8011764:	d107      	bne.n	8011776 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011766:	69f8      	ldr	r0, [r7, #28]
 8011768:	f000 fb56 	bl	8011e18 <tcp_timewait_input>
        }
        pbuf_free(p);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7fd ffd1 	bl	800f714 <pbuf_free>
        return;
 8011772:	e1fd      	b.n	8011b70 <tcp_input+0x7ec>
        continue;
 8011774:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	61fb      	str	r3, [r7, #28]
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1bc      	bne.n	80116fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011782:	2300      	movs	r3, #0
 8011784:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011786:	4b2f      	ldr	r3, [pc, #188]	; (8011844 <tcp_input+0x4c0>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	617b      	str	r3, [r7, #20]
 801178c:	e02a      	b.n	80117e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	7a1b      	ldrb	r3, [r3, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00c      	beq.n	80117b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	7a1a      	ldrb	r2, [r3, #8]
 801179a:	4b22      	ldr	r3, [pc, #136]	; (8011824 <tcp_input+0x4a0>)
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80117a2:	3301      	adds	r3, #1
 80117a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d002      	beq.n	80117b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	61bb      	str	r3, [r7, #24]
        continue;
 80117ae:	e016      	b.n	80117de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	8ada      	ldrh	r2, [r3, #22]
 80117b4:	4b1a      	ldr	r3, [pc, #104]	; (8011820 <tcp_input+0x49c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	885b      	ldrh	r3, [r3, #2]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	429a      	cmp	r2, r3
 80117be:	d10c      	bne.n	80117da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	4b17      	ldr	r3, [pc, #92]	; (8011824 <tcp_input+0x4a0>)
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d00f      	beq.n	80117ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00d      	beq.n	80117ee <tcp_input+0x46a>
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d009      	beq.n	80117ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	617b      	str	r3, [r7, #20]
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1d1      	bne.n	801178e <tcp_input+0x40a>
 80117ea:	e000      	b.n	80117ee <tcp_input+0x46a>
            break;
 80117ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d029      	beq.n	8011848 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80117f4:	69bb      	ldr	r3, [r7, #24]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00a      	beq.n	8011810 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	68da      	ldr	r2, [r3, #12]
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011802:	4b10      	ldr	r3, [pc, #64]	; (8011844 <tcp_input+0x4c0>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801180a:	4a0e      	ldr	r2, [pc, #56]	; (8011844 <tcp_input+0x4c0>)
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011810:	6978      	ldr	r0, [r7, #20]
 8011812:	f000 fa03 	bl	8011c1c <tcp_listen_input>
      }
      pbuf_free(p);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7fd ff7c 	bl	800f714 <pbuf_free>
      return;
 801181c:	e1a8      	b.n	8011b70 <tcp_input+0x7ec>
 801181e:	bf00      	nop
 8011820:	2000b4a4 	.word	0x2000b4a4
 8011824:	20007eec 	.word	0x20007eec
 8011828:	0801dd84 	.word	0x0801dd84
 801182c:	0801deb0 	.word	0x0801deb0
 8011830:	0801ddd0 	.word	0x0801ddd0
 8011834:	2000b488 	.word	0x2000b488
 8011838:	0801dedc 	.word	0x0801dedc
 801183c:	2000b48c 	.word	0x2000b48c
 8011840:	0801df08 	.word	0x0801df08
 8011844:	2000b484 	.word	0x2000b484
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 8158 	beq.w	8011b00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011850:	4b95      	ldr	r3, [pc, #596]	; (8011aa8 <tcp_input+0x724>)
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	891a      	ldrh	r2, [r3, #8]
 801185a:	4b93      	ldr	r3, [pc, #588]	; (8011aa8 <tcp_input+0x724>)
 801185c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801185e:	4a92      	ldr	r2, [pc, #584]	; (8011aa8 <tcp_input+0x724>)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011864:	4b91      	ldr	r3, [pc, #580]	; (8011aac <tcp_input+0x728>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a8f      	ldr	r2, [pc, #572]	; (8011aa8 <tcp_input+0x724>)
 801186a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801186c:	4b90      	ldr	r3, [pc, #576]	; (8011ab0 <tcp_input+0x72c>)
 801186e:	2200      	movs	r2, #0
 8011870:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011872:	4b90      	ldr	r3, [pc, #576]	; (8011ab4 <tcp_input+0x730>)
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011878:	4b8f      	ldr	r3, [pc, #572]	; (8011ab8 <tcp_input+0x734>)
 801187a:	2200      	movs	r2, #0
 801187c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801187e:	4b8f      	ldr	r3, [pc, #572]	; (8011abc <tcp_input+0x738>)
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	f003 0308 	and.w	r3, r3, #8
 8011886:	2b00      	cmp	r3, #0
 8011888:	d006      	beq.n	8011898 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	7b5b      	ldrb	r3, [r3, #13]
 801188e:	f043 0301 	orr.w	r3, r3, #1
 8011892:	b2da      	uxtb	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801189c:	2b00      	cmp	r3, #0
 801189e:	d017      	beq.n	80118d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80118a0:	69f8      	ldr	r0, [r7, #28]
 80118a2:	f7ff f929 	bl	8010af8 <tcp_process_refused_data>
 80118a6:	4603      	mov	r3, r0
 80118a8:	f113 0f0d 	cmn.w	r3, #13
 80118ac:	d007      	beq.n	80118be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00c      	beq.n	80118d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80118b6:	4b82      	ldr	r3, [pc, #520]	; (8011ac0 <tcp_input+0x73c>)
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d008      	beq.n	80118d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f040 80e3 	bne.w	8011a8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80118c8:	69f8      	ldr	r0, [r7, #28]
 80118ca:	f003 f9ad 	bl	8014c28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80118ce:	e0de      	b.n	8011a8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80118d0:	4a7c      	ldr	r2, [pc, #496]	; (8011ac4 <tcp_input+0x740>)
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80118d6:	69f8      	ldr	r0, [r7, #28]
 80118d8:	f000 fb18 	bl	8011f0c <tcp_process>
 80118dc:	4603      	mov	r3, r0
 80118de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80118e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118e4:	f113 0f0d 	cmn.w	r3, #13
 80118e8:	f000 80d3 	beq.w	8011a92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80118ec:	4b71      	ldr	r3, [pc, #452]	; (8011ab4 <tcp_input+0x730>)
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f003 0308 	and.w	r3, r3, #8
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d015      	beq.n	8011924 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d008      	beq.n	8011914 <tcp_input+0x590>
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011908:	69fa      	ldr	r2, [r7, #28]
 801190a:	6912      	ldr	r2, [r2, #16]
 801190c:	f06f 010d 	mvn.w	r1, #13
 8011910:	4610      	mov	r0, r2
 8011912:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011914:	69f9      	ldr	r1, [r7, #28]
 8011916:	486c      	ldr	r0, [pc, #432]	; (8011ac8 <tcp_input+0x744>)
 8011918:	f7ff fbbc 	bl	8011094 <tcp_pcb_remove>
        tcp_free(pcb);
 801191c:	69f8      	ldr	r0, [r7, #28]
 801191e:	f7fe f9a9 	bl	800fc74 <tcp_free>
 8011922:	e0da      	b.n	8011ada <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011928:	4b63      	ldr	r3, [pc, #396]	; (8011ab8 <tcp_input+0x734>)
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d01d      	beq.n	801196c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011930:	4b61      	ldr	r3, [pc, #388]	; (8011ab8 <tcp_input+0x734>)
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <tcp_input+0x5d2>
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011946:	69fa      	ldr	r2, [r7, #28]
 8011948:	6910      	ldr	r0, [r2, #16]
 801194a:	89fa      	ldrh	r2, [r7, #14]
 801194c:	69f9      	ldr	r1, [r7, #28]
 801194e:	4798      	blx	r3
 8011950:	4603      	mov	r3, r0
 8011952:	74fb      	strb	r3, [r7, #19]
 8011954:	e001      	b.n	801195a <tcp_input+0x5d6>
 8011956:	2300      	movs	r3, #0
 8011958:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801195a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801195e:	f113 0f0d 	cmn.w	r3, #13
 8011962:	f000 8098 	beq.w	8011a96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011966:	4b54      	ldr	r3, [pc, #336]	; (8011ab8 <tcp_input+0x734>)
 8011968:	2200      	movs	r2, #0
 801196a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801196c:	69f8      	ldr	r0, [r7, #28]
 801196e:	f000 f915 	bl	8011b9c <tcp_input_delayed_close>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	f040 8090 	bne.w	8011a9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801197a:	4b4d      	ldr	r3, [pc, #308]	; (8011ab0 <tcp_input+0x72c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d041      	beq.n	8011a06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011986:	2b00      	cmp	r3, #0
 8011988:	d006      	beq.n	8011998 <tcp_input+0x614>
 801198a:	4b50      	ldr	r3, [pc, #320]	; (8011acc <tcp_input+0x748>)
 801198c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011990:	494f      	ldr	r1, [pc, #316]	; (8011ad0 <tcp_input+0x74c>)
 8011992:	4850      	ldr	r0, [pc, #320]	; (8011ad4 <tcp_input+0x750>)
 8011994:	f008 fcc0 	bl	801a318 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	8b5b      	ldrh	r3, [r3, #26]
 801199c:	f003 0310 	and.w	r3, r3, #16
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d008      	beq.n	80119b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80119a4:	4b42      	ldr	r3, [pc, #264]	; (8011ab0 <tcp_input+0x72c>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fd feb3 	bl	800f714 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80119ae:	69f8      	ldr	r0, [r7, #28]
 80119b0:	f7fe fc48 	bl	8010244 <tcp_abort>
            goto aborted;
 80119b4:	e091      	b.n	8011ada <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d00c      	beq.n	80119da <tcp_input+0x656>
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	6918      	ldr	r0, [r3, #16]
 80119ca:	4b39      	ldr	r3, [pc, #228]	; (8011ab0 <tcp_input+0x72c>)
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	2300      	movs	r3, #0
 80119d0:	69f9      	ldr	r1, [r7, #28]
 80119d2:	47a0      	blx	r4
 80119d4:	4603      	mov	r3, r0
 80119d6:	74fb      	strb	r3, [r7, #19]
 80119d8:	e008      	b.n	80119ec <tcp_input+0x668>
 80119da:	4b35      	ldr	r3, [pc, #212]	; (8011ab0 <tcp_input+0x72c>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	2300      	movs	r3, #0
 80119e0:	69f9      	ldr	r1, [r7, #28]
 80119e2:	2000      	movs	r0, #0
 80119e4:	f7ff f95e 	bl	8010ca4 <tcp_recv_null>
 80119e8:	4603      	mov	r3, r0
 80119ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80119ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119f0:	f113 0f0d 	cmn.w	r3, #13
 80119f4:	d053      	beq.n	8011a9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80119f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d003      	beq.n	8011a06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80119fe:	4b2c      	ldr	r3, [pc, #176]	; (8011ab0 <tcp_input+0x72c>)
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011a06:	4b2b      	ldr	r3, [pc, #172]	; (8011ab4 <tcp_input+0x730>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f003 0320 	and.w	r3, r3, #32
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d030      	beq.n	8011a74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d009      	beq.n	8011a2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a1e:	7b5a      	ldrb	r2, [r3, #13]
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a24:	f042 0220 	orr.w	r2, r2, #32
 8011a28:	b2d2      	uxtb	r2, r2
 8011a2a:	735a      	strb	r2, [r3, #13]
 8011a2c:	e022      	b.n	8011a74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011a36:	d005      	beq.n	8011a44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00b      	beq.n	8011a66 <tcp_input+0x6e2>
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	6918      	ldr	r0, [r3, #16]
 8011a58:	2300      	movs	r3, #0
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	69f9      	ldr	r1, [r7, #28]
 8011a5e:	47a0      	blx	r4
 8011a60:	4603      	mov	r3, r0
 8011a62:	74fb      	strb	r3, [r7, #19]
 8011a64:	e001      	b.n	8011a6a <tcp_input+0x6e6>
 8011a66:	2300      	movs	r3, #0
 8011a68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a6e:	f113 0f0d 	cmn.w	r3, #13
 8011a72:	d016      	beq.n	8011aa2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a74:	4b13      	ldr	r3, [pc, #76]	; (8011ac4 <tcp_input+0x740>)
 8011a76:	2200      	movs	r2, #0
 8011a78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a7a:	69f8      	ldr	r0, [r7, #28]
 8011a7c:	f000 f88e 	bl	8011b9c <tcp_input_delayed_close>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d128      	bne.n	8011ad8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a86:	69f8      	ldr	r0, [r7, #28]
 8011a88:	f002 fac8 	bl	801401c <tcp_output>
 8011a8c:	e025      	b.n	8011ada <tcp_input+0x756>
        goto aborted;
 8011a8e:	bf00      	nop
 8011a90:	e023      	b.n	8011ada <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a92:	bf00      	nop
 8011a94:	e021      	b.n	8011ada <tcp_input+0x756>
              goto aborted;
 8011a96:	bf00      	nop
 8011a98:	e01f      	b.n	8011ada <tcp_input+0x756>
          goto aborted;
 8011a9a:	bf00      	nop
 8011a9c:	e01d      	b.n	8011ada <tcp_input+0x756>
            goto aborted;
 8011a9e:	bf00      	nop
 8011aa0:	e01b      	b.n	8011ada <tcp_input+0x756>
              goto aborted;
 8011aa2:	bf00      	nop
 8011aa4:	e019      	b.n	8011ada <tcp_input+0x756>
 8011aa6:	bf00      	nop
 8011aa8:	2000b494 	.word	0x2000b494
 8011aac:	2000b4a4 	.word	0x2000b4a4
 8011ab0:	2000b4c4 	.word	0x2000b4c4
 8011ab4:	2000b4c1 	.word	0x2000b4c1
 8011ab8:	2000b4bc 	.word	0x2000b4bc
 8011abc:	2000b4c0 	.word	0x2000b4c0
 8011ac0:	2000b4be 	.word	0x2000b4be
 8011ac4:	2000b4c8 	.word	0x2000b4c8
 8011ac8:	2000b488 	.word	0x2000b488
 8011acc:	0801dd84 	.word	0x0801dd84
 8011ad0:	0801df38 	.word	0x0801df38
 8011ad4:	0801ddd0 	.word	0x0801ddd0
          goto aborted;
 8011ad8:	bf00      	nop
    tcp_input_pcb = NULL;
 8011ada:	4b27      	ldr	r3, [pc, #156]	; (8011b78 <tcp_input+0x7f4>)
 8011adc:	2200      	movs	r2, #0
 8011ade:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011ae0:	4b26      	ldr	r3, [pc, #152]	; (8011b7c <tcp_input+0x7f8>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011ae6:	4b26      	ldr	r3, [pc, #152]	; (8011b80 <tcp_input+0x7fc>)
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d03f      	beq.n	8011b6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011aee:	4b24      	ldr	r3, [pc, #144]	; (8011b80 <tcp_input+0x7fc>)
 8011af0:	685b      	ldr	r3, [r3, #4]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fd fe0e 	bl	800f714 <pbuf_free>
      inseg.p = NULL;
 8011af8:	4b21      	ldr	r3, [pc, #132]	; (8011b80 <tcp_input+0x7fc>)
 8011afa:	2200      	movs	r2, #0
 8011afc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011afe:	e036      	b.n	8011b6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011b00:	4b20      	ldr	r3, [pc, #128]	; (8011b84 <tcp_input+0x800>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	899b      	ldrh	r3, [r3, #12]
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fc fab9 	bl	800e080 <lwip_htons>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	f003 0304 	and.w	r3, r3, #4
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d118      	bne.n	8011b4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b1a:	4b1b      	ldr	r3, [pc, #108]	; (8011b88 <tcp_input+0x804>)
 8011b1c:	6819      	ldr	r1, [r3, #0]
 8011b1e:	4b1b      	ldr	r3, [pc, #108]	; (8011b8c <tcp_input+0x808>)
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	461a      	mov	r2, r3
 8011b24:	4b1a      	ldr	r3, [pc, #104]	; (8011b90 <tcp_input+0x80c>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b2a:	4b16      	ldr	r3, [pc, #88]	; (8011b84 <tcp_input+0x800>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b2e:	885b      	ldrh	r3, [r3, #2]
 8011b30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b32:	4a14      	ldr	r2, [pc, #80]	; (8011b84 <tcp_input+0x800>)
 8011b34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b36:	8812      	ldrh	r2, [r2, #0]
 8011b38:	b292      	uxth	r2, r2
 8011b3a:	9202      	str	r2, [sp, #8]
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	4b15      	ldr	r3, [pc, #84]	; (8011b94 <tcp_input+0x810>)
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	4b15      	ldr	r3, [pc, #84]	; (8011b98 <tcp_input+0x814>)
 8011b44:	4602      	mov	r2, r0
 8011b46:	2000      	movs	r0, #0
 8011b48:	f003 f81c 	bl	8014b84 <tcp_rst>
    pbuf_free(p);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7fd fde1 	bl	800f714 <pbuf_free>
  return;
 8011b52:	e00c      	b.n	8011b6e <tcp_input+0x7ea>
    goto dropped;
 8011b54:	bf00      	nop
 8011b56:	e006      	b.n	8011b66 <tcp_input+0x7e2>
    goto dropped;
 8011b58:	bf00      	nop
 8011b5a:	e004      	b.n	8011b66 <tcp_input+0x7e2>
    goto dropped;
 8011b5c:	bf00      	nop
 8011b5e:	e002      	b.n	8011b66 <tcp_input+0x7e2>
      goto dropped;
 8011b60:	bf00      	nop
 8011b62:	e000      	b.n	8011b66 <tcp_input+0x7e2>
      goto dropped;
 8011b64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7fd fdd4 	bl	800f714 <pbuf_free>
 8011b6c:	e000      	b.n	8011b70 <tcp_input+0x7ec>
  return;
 8011b6e:	bf00      	nop
}
 8011b70:	3724      	adds	r7, #36	; 0x24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd90      	pop	{r4, r7, pc}
 8011b76:	bf00      	nop
 8011b78:	2000b4c8 	.word	0x2000b4c8
 8011b7c:	2000b4c4 	.word	0x2000b4c4
 8011b80:	2000b494 	.word	0x2000b494
 8011b84:	2000b4a4 	.word	0x2000b4a4
 8011b88:	2000b4b8 	.word	0x2000b4b8
 8011b8c:	2000b4be 	.word	0x2000b4be
 8011b90:	2000b4b4 	.word	0x2000b4b4
 8011b94:	20007efc 	.word	0x20007efc
 8011b98:	20007f00 	.word	0x20007f00

08011b9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d106      	bne.n	8011bb8 <tcp_input_delayed_close+0x1c>
 8011baa:	4b17      	ldr	r3, [pc, #92]	; (8011c08 <tcp_input_delayed_close+0x6c>)
 8011bac:	f240 225a 	movw	r2, #602	; 0x25a
 8011bb0:	4916      	ldr	r1, [pc, #88]	; (8011c0c <tcp_input_delayed_close+0x70>)
 8011bb2:	4817      	ldr	r0, [pc, #92]	; (8011c10 <tcp_input_delayed_close+0x74>)
 8011bb4:	f008 fbb0 	bl	801a318 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011bb8:	4b16      	ldr	r3, [pc, #88]	; (8011c14 <tcp_input_delayed_close+0x78>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f003 0310 	and.w	r3, r3, #16
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d01c      	beq.n	8011bfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	8b5b      	ldrh	r3, [r3, #26]
 8011bc8:	f003 0310 	and.w	r3, r3, #16
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d10d      	bne.n	8011bec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d008      	beq.n	8011bec <tcp_input_delayed_close+0x50>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	6912      	ldr	r2, [r2, #16]
 8011be4:	f06f 010e 	mvn.w	r1, #14
 8011be8:	4610      	mov	r0, r2
 8011bea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	480a      	ldr	r0, [pc, #40]	; (8011c18 <tcp_input_delayed_close+0x7c>)
 8011bf0:	f7ff fa50 	bl	8011094 <tcp_pcb_remove>
    tcp_free(pcb);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7fe f83d 	bl	800fc74 <tcp_free>
    return 1;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e000      	b.n	8011c00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0801dd84 	.word	0x0801dd84
 8011c0c:	0801df54 	.word	0x0801df54
 8011c10:	0801ddd0 	.word	0x0801ddd0
 8011c14:	2000b4c1 	.word	0x2000b4c1
 8011c18:	2000b488 	.word	0x2000b488

08011c1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011c1c:	b590      	push	{r4, r7, lr}
 8011c1e:	b08b      	sub	sp, #44	; 0x2c
 8011c20:	af04      	add	r7, sp, #16
 8011c22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011c24:	4b6f      	ldr	r3, [pc, #444]	; (8011de4 <tcp_listen_input+0x1c8>)
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	f003 0304 	and.w	r3, r3, #4
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f040 80d2 	bne.w	8011dd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <tcp_listen_input+0x2a>
 8011c38:	4b6b      	ldr	r3, [pc, #428]	; (8011de8 <tcp_listen_input+0x1cc>)
 8011c3a:	f240 2281 	movw	r2, #641	; 0x281
 8011c3e:	496b      	ldr	r1, [pc, #428]	; (8011dec <tcp_listen_input+0x1d0>)
 8011c40:	486b      	ldr	r0, [pc, #428]	; (8011df0 <tcp_listen_input+0x1d4>)
 8011c42:	f008 fb69 	bl	801a318 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011c46:	4b67      	ldr	r3, [pc, #412]	; (8011de4 <tcp_listen_input+0x1c8>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	f003 0310 	and.w	r3, r3, #16
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d019      	beq.n	8011c86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c52:	4b68      	ldr	r3, [pc, #416]	; (8011df4 <tcp_listen_input+0x1d8>)
 8011c54:	6819      	ldr	r1, [r3, #0]
 8011c56:	4b68      	ldr	r3, [pc, #416]	; (8011df8 <tcp_listen_input+0x1dc>)
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	4b67      	ldr	r3, [pc, #412]	; (8011dfc <tcp_listen_input+0x1e0>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c62:	4b67      	ldr	r3, [pc, #412]	; (8011e00 <tcp_listen_input+0x1e4>)
 8011c64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c66:	885b      	ldrh	r3, [r3, #2]
 8011c68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c6a:	4a65      	ldr	r2, [pc, #404]	; (8011e00 <tcp_listen_input+0x1e4>)
 8011c6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c6e:	8812      	ldrh	r2, [r2, #0]
 8011c70:	b292      	uxth	r2, r2
 8011c72:	9202      	str	r2, [sp, #8]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	4b63      	ldr	r3, [pc, #396]	; (8011e04 <tcp_listen_input+0x1e8>)
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	4b63      	ldr	r3, [pc, #396]	; (8011e08 <tcp_listen_input+0x1ec>)
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f002 ff80 	bl	8014b84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c84:	e0a9      	b.n	8011dda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011c86:	4b57      	ldr	r3, [pc, #348]	; (8011de4 <tcp_listen_input+0x1c8>)
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	f003 0302 	and.w	r3, r3, #2
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f000 80a3 	beq.w	8011dda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	7d5b      	ldrb	r3, [r3, #21]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7ff f927 	bl	8010eec <tcp_alloc>
 8011c9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d111      	bne.n	8011cca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	699b      	ldr	r3, [r3, #24]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00a      	beq.n	8011cc4 <tcp_listen_input+0xa8>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	6910      	ldr	r0, [r2, #16]
 8011cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011cba:	2100      	movs	r1, #0
 8011cbc:	4798      	blx	r3
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	73bb      	strb	r3, [r7, #14]
      return;
 8011cc2:	e08b      	b.n	8011ddc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011cc4:	23f0      	movs	r3, #240	; 0xf0
 8011cc6:	73bb      	strb	r3, [r7, #14]
      return;
 8011cc8:	e088      	b.n	8011ddc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011cca:	4b50      	ldr	r3, [pc, #320]	; (8011e0c <tcp_listen_input+0x1f0>)
 8011ccc:	695a      	ldr	r2, [r3, #20]
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011cd2:	4b4e      	ldr	r3, [pc, #312]	; (8011e0c <tcp_listen_input+0x1f0>)
 8011cd4:	691a      	ldr	r2, [r3, #16]
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	8ada      	ldrh	r2, [r3, #22]
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011ce2:	4b47      	ldr	r3, [pc, #284]	; (8011e00 <tcp_listen_input+0x1e4>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2203      	movs	r2, #3
 8011cf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011cf4:	4b41      	ldr	r3, [pc, #260]	; (8011dfc <tcp_listen_input+0x1e0>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	1c5a      	adds	r2, r3, #1
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011d06:	6978      	ldr	r0, [r7, #20]
 8011d08:	f7ff fa58 	bl	80111bc <tcp_next_iss>
 8011d0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	693a      	ldr	r2, [r7, #16]
 8011d12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	693a      	ldr	r2, [r7, #16]
 8011d18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	693a      	ldr	r2, [r7, #16]
 8011d24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011d26:	4b35      	ldr	r3, [pc, #212]	; (8011dfc <tcp_listen_input+0x1e0>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	1e5a      	subs	r2, r3, #1
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	691a      	ldr	r2, [r3, #16]
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	7a5b      	ldrb	r3, [r3, #9]
 8011d42:	f003 030c 	and.w	r3, r3, #12
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	7a1a      	ldrb	r2, [r3, #8]
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011d54:	4b2e      	ldr	r3, [pc, #184]	; (8011e10 <tcp_listen_input+0x1f4>)
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	60da      	str	r2, [r3, #12]
 8011d5c:	4a2c      	ldr	r2, [pc, #176]	; (8011e10 <tcp_listen_input+0x1f4>)
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	6013      	str	r3, [r2, #0]
 8011d62:	f003 f8d1 	bl	8014f08 <tcp_timer_needed>
 8011d66:	4b2b      	ldr	r3, [pc, #172]	; (8011e14 <tcp_listen_input+0x1f8>)
 8011d68:	2201      	movs	r2, #1
 8011d6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011d6c:	6978      	ldr	r0, [r7, #20]
 8011d6e:	f001 fd8f 	bl	8013890 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011d72:	4b23      	ldr	r3, [pc, #140]	; (8011e00 <tcp_listen_input+0x1e4>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	89db      	ldrh	r3, [r3, #14]
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	3304      	adds	r3, #4
 8011d94:	4618      	mov	r0, r3
 8011d96:	f006 fded 	bl	8018974 <ip4_route>
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	3304      	adds	r3, #4
 8011da0:	461a      	mov	r2, r3
 8011da2:	4620      	mov	r0, r4
 8011da4:	f7ff fa30 	bl	8011208 <tcp_eff_send_mss_netif>
 8011da8:	4603      	mov	r3, r0
 8011daa:	461a      	mov	r2, r3
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011db0:	2112      	movs	r1, #18
 8011db2:	6978      	ldr	r0, [r7, #20]
 8011db4:	f002 f844 	bl	8013e40 <tcp_enqueue_flags>
 8011db8:	4603      	mov	r3, r0
 8011dba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d004      	beq.n	8011dce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	6978      	ldr	r0, [r7, #20]
 8011dc8:	f7fe f97e 	bl	80100c8 <tcp_abandon>
      return;
 8011dcc:	e006      	b.n	8011ddc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011dce:	6978      	ldr	r0, [r7, #20]
 8011dd0:	f002 f924 	bl	801401c <tcp_output>
  return;
 8011dd4:	e001      	b.n	8011dda <tcp_listen_input+0x1be>
    return;
 8011dd6:	bf00      	nop
 8011dd8:	e000      	b.n	8011ddc <tcp_listen_input+0x1c0>
  return;
 8011dda:	bf00      	nop
}
 8011ddc:	371c      	adds	r7, #28
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd90      	pop	{r4, r7, pc}
 8011de2:	bf00      	nop
 8011de4:	2000b4c0 	.word	0x2000b4c0
 8011de8:	0801dd84 	.word	0x0801dd84
 8011dec:	0801df7c 	.word	0x0801df7c
 8011df0:	0801ddd0 	.word	0x0801ddd0
 8011df4:	2000b4b8 	.word	0x2000b4b8
 8011df8:	2000b4be 	.word	0x2000b4be
 8011dfc:	2000b4b4 	.word	0x2000b4b4
 8011e00:	2000b4a4 	.word	0x2000b4a4
 8011e04:	20007efc 	.word	0x20007efc
 8011e08:	20007f00 	.word	0x20007f00
 8011e0c:	20007eec 	.word	0x20007eec
 8011e10:	2000b488 	.word	0x2000b488
 8011e14:	2000b490 	.word	0x2000b490

08011e18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af04      	add	r7, sp, #16
 8011e1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011e20:	4b2f      	ldr	r3, [pc, #188]	; (8011ee0 <tcp_timewait_input+0xc8>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f003 0304 	and.w	r3, r3, #4
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d153      	bne.n	8011ed4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d106      	bne.n	8011e40 <tcp_timewait_input+0x28>
 8011e32:	4b2c      	ldr	r3, [pc, #176]	; (8011ee4 <tcp_timewait_input+0xcc>)
 8011e34:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011e38:	492b      	ldr	r1, [pc, #172]	; (8011ee8 <tcp_timewait_input+0xd0>)
 8011e3a:	482c      	ldr	r0, [pc, #176]	; (8011eec <tcp_timewait_input+0xd4>)
 8011e3c:	f008 fa6c 	bl	801a318 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011e40:	4b27      	ldr	r3, [pc, #156]	; (8011ee0 <tcp_timewait_input+0xc8>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 0302 	and.w	r3, r3, #2
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d02a      	beq.n	8011ea2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011e4c:	4b28      	ldr	r3, [pc, #160]	; (8011ef0 <tcp_timewait_input+0xd8>)
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e54:	1ad3      	subs	r3, r2, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	db2d      	blt.n	8011eb6 <tcp_timewait_input+0x9e>
 8011e5a:	4b25      	ldr	r3, [pc, #148]	; (8011ef0 <tcp_timewait_input+0xd8>)
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e62:	6879      	ldr	r1, [r7, #4]
 8011e64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e66:	440b      	add	r3, r1
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	dc23      	bgt.n	8011eb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e6e:	4b21      	ldr	r3, [pc, #132]	; (8011ef4 <tcp_timewait_input+0xdc>)
 8011e70:	6819      	ldr	r1, [r3, #0]
 8011e72:	4b21      	ldr	r3, [pc, #132]	; (8011ef8 <tcp_timewait_input+0xe0>)
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	461a      	mov	r2, r3
 8011e78:	4b1d      	ldr	r3, [pc, #116]	; (8011ef0 <tcp_timewait_input+0xd8>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e7e:	4b1f      	ldr	r3, [pc, #124]	; (8011efc <tcp_timewait_input+0xe4>)
 8011e80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e82:	885b      	ldrh	r3, [r3, #2]
 8011e84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e86:	4a1d      	ldr	r2, [pc, #116]	; (8011efc <tcp_timewait_input+0xe4>)
 8011e88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e8a:	8812      	ldrh	r2, [r2, #0]
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	9202      	str	r2, [sp, #8]
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	4b1b      	ldr	r3, [pc, #108]	; (8011f00 <tcp_timewait_input+0xe8>)
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	4b1b      	ldr	r3, [pc, #108]	; (8011f04 <tcp_timewait_input+0xec>)
 8011e98:	4602      	mov	r2, r0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f002 fe72 	bl	8014b84 <tcp_rst>
      return;
 8011ea0:	e01b      	b.n	8011eda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011ea2:	4b0f      	ldr	r3, [pc, #60]	; (8011ee0 <tcp_timewait_input+0xc8>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f003 0301 	and.w	r3, r3, #1
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d003      	beq.n	8011eb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011eae:	4b16      	ldr	r3, [pc, #88]	; (8011f08 <tcp_timewait_input+0xf0>)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011eb6:	4b10      	ldr	r3, [pc, #64]	; (8011ef8 <tcp_timewait_input+0xe0>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00c      	beq.n	8011ed8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	8b5b      	ldrh	r3, [r3, #26]
 8011ec2:	f043 0302 	orr.w	r3, r3, #2
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f002 f8a5 	bl	801401c <tcp_output>
  }
  return;
 8011ed2:	e001      	b.n	8011ed8 <tcp_timewait_input+0xc0>
    return;
 8011ed4:	bf00      	nop
 8011ed6:	e000      	b.n	8011eda <tcp_timewait_input+0xc2>
  return;
 8011ed8:	bf00      	nop
}
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	2000b4c0 	.word	0x2000b4c0
 8011ee4:	0801dd84 	.word	0x0801dd84
 8011ee8:	0801df9c 	.word	0x0801df9c
 8011eec:	0801ddd0 	.word	0x0801ddd0
 8011ef0:	2000b4b4 	.word	0x2000b4b4
 8011ef4:	2000b4b8 	.word	0x2000b4b8
 8011ef8:	2000b4be 	.word	0x2000b4be
 8011efc:	2000b4a4 	.word	0x2000b4a4
 8011f00:	20007efc 	.word	0x20007efc
 8011f04:	20007f00 	.word	0x20007f00
 8011f08:	2000b47c 	.word	0x2000b47c

08011f0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011f0c:	b590      	push	{r4, r7, lr}
 8011f0e:	b08d      	sub	sp, #52	; 0x34
 8011f10:	af04      	add	r7, sp, #16
 8011f12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011f14:	2300      	movs	r3, #0
 8011f16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d106      	bne.n	8011f30 <tcp_process+0x24>
 8011f22:	4b9d      	ldr	r3, [pc, #628]	; (8012198 <tcp_process+0x28c>)
 8011f24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011f28:	499c      	ldr	r1, [pc, #624]	; (801219c <tcp_process+0x290>)
 8011f2a:	489d      	ldr	r0, [pc, #628]	; (80121a0 <tcp_process+0x294>)
 8011f2c:	f008 f9f4 	bl	801a318 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011f30:	4b9c      	ldr	r3, [pc, #624]	; (80121a4 <tcp_process+0x298>)
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f003 0304 	and.w	r3, r3, #4
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d04e      	beq.n	8011fda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	7d1b      	ldrb	r3, [r3, #20]
 8011f40:	2b02      	cmp	r3, #2
 8011f42:	d108      	bne.n	8011f56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f48:	4b97      	ldr	r3, [pc, #604]	; (80121a8 <tcp_process+0x29c>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d123      	bne.n	8011f98 <tcp_process+0x8c>
        acceptable = 1;
 8011f50:	2301      	movs	r3, #1
 8011f52:	76fb      	strb	r3, [r7, #27]
 8011f54:	e020      	b.n	8011f98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f5a:	4b94      	ldr	r3, [pc, #592]	; (80121ac <tcp_process+0x2a0>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d102      	bne.n	8011f68 <tcp_process+0x5c>
        acceptable = 1;
 8011f62:	2301      	movs	r3, #1
 8011f64:	76fb      	strb	r3, [r7, #27]
 8011f66:	e017      	b.n	8011f98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f68:	4b90      	ldr	r3, [pc, #576]	; (80121ac <tcp_process+0x2a0>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	db10      	blt.n	8011f98 <tcp_process+0x8c>
 8011f76:	4b8d      	ldr	r3, [pc, #564]	; (80121ac <tcp_process+0x2a0>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7e:	6879      	ldr	r1, [r7, #4]
 8011f80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f82:	440b      	add	r3, r1
 8011f84:	1ad3      	subs	r3, r2, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	dc06      	bgt.n	8011f98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	8b5b      	ldrh	r3, [r3, #26]
 8011f8e:	f043 0302 	orr.w	r3, r3, #2
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011f98:	7efb      	ldrb	r3, [r7, #27]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d01b      	beq.n	8011fd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	7d1b      	ldrb	r3, [r3, #20]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <tcp_process+0xa8>
 8011fa6:	4b7c      	ldr	r3, [pc, #496]	; (8012198 <tcp_process+0x28c>)
 8011fa8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011fac:	4980      	ldr	r1, [pc, #512]	; (80121b0 <tcp_process+0x2a4>)
 8011fae:	487c      	ldr	r0, [pc, #496]	; (80121a0 <tcp_process+0x294>)
 8011fb0:	f008 f9b2 	bl	801a318 <iprintf>
      recv_flags |= TF_RESET;
 8011fb4:	4b7f      	ldr	r3, [pc, #508]	; (80121b4 <tcp_process+0x2a8>)
 8011fb6:	781b      	ldrb	r3, [r3, #0]
 8011fb8:	f043 0308 	orr.w	r3, r3, #8
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	4b7d      	ldr	r3, [pc, #500]	; (80121b4 <tcp_process+0x2a8>)
 8011fc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	8b5b      	ldrh	r3, [r3, #26]
 8011fc6:	f023 0301 	bic.w	r3, r3, #1
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011fd0:	f06f 030d 	mvn.w	r3, #13
 8011fd4:	e37a      	b.n	80126cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	e378      	b.n	80126cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011fda:	4b72      	ldr	r3, [pc, #456]	; (80121a4 <tcp_process+0x298>)
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	f003 0302 	and.w	r3, r3, #2
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d010      	beq.n	8012008 <tcp_process+0xfc>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7d1b      	ldrb	r3, [r3, #20]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d00c      	beq.n	8012008 <tcp_process+0xfc>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	7d1b      	ldrb	r3, [r3, #20]
 8011ff2:	2b03      	cmp	r3, #3
 8011ff4:	d008      	beq.n	8012008 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8b5b      	ldrh	r3, [r3, #26]
 8011ffa:	f043 0302 	orr.w	r3, r3, #2
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	e361      	b.n	80126cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	8b5b      	ldrh	r3, [r3, #26]
 801200c:	f003 0310 	and.w	r3, r3, #16
 8012010:	2b00      	cmp	r3, #0
 8012012:	d103      	bne.n	801201c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012014:	4b68      	ldr	r3, [pc, #416]	; (80121b8 <tcp_process+0x2ac>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2200      	movs	r2, #0
 8012028:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f001 fc2f 	bl	8013890 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	7d1b      	ldrb	r3, [r3, #20]
 8012036:	3b02      	subs	r3, #2
 8012038:	2b07      	cmp	r3, #7
 801203a:	f200 8337 	bhi.w	80126ac <tcp_process+0x7a0>
 801203e:	a201      	add	r2, pc, #4	; (adr r2, 8012044 <tcp_process+0x138>)
 8012040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012044:	08012065 	.word	0x08012065
 8012048:	08012295 	.word	0x08012295
 801204c:	0801240d 	.word	0x0801240d
 8012050:	08012437 	.word	0x08012437
 8012054:	0801255b 	.word	0x0801255b
 8012058:	0801240d 	.word	0x0801240d
 801205c:	080125e7 	.word	0x080125e7
 8012060:	08012677 	.word	0x08012677
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012064:	4b4f      	ldr	r3, [pc, #316]	; (80121a4 <tcp_process+0x298>)
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	f003 0310 	and.w	r3, r3, #16
 801206c:	2b00      	cmp	r3, #0
 801206e:	f000 80e4 	beq.w	801223a <tcp_process+0x32e>
 8012072:	4b4c      	ldr	r3, [pc, #304]	; (80121a4 <tcp_process+0x298>)
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	f003 0302 	and.w	r3, r3, #2
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 80dd 	beq.w	801223a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012084:	1c5a      	adds	r2, r3, #1
 8012086:	4b48      	ldr	r3, [pc, #288]	; (80121a8 <tcp_process+0x29c>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	f040 80d5 	bne.w	801223a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012090:	4b46      	ldr	r3, [pc, #280]	; (80121ac <tcp_process+0x2a0>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	1c5a      	adds	r2, r3, #1
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80120a2:	4b41      	ldr	r3, [pc, #260]	; (80121a8 <tcp_process+0x29c>)
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80120aa:	4b44      	ldr	r3, [pc, #272]	; (80121bc <tcp_process+0x2b0>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	89db      	ldrh	r3, [r3, #14]
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80120c4:	4b39      	ldr	r3, [pc, #228]	; (80121ac <tcp_process+0x2a0>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	1e5a      	subs	r2, r3, #1
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2204      	movs	r2, #4
 80120d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	3304      	adds	r3, #4
 80120dc:	4618      	mov	r0, r3
 80120de:	f006 fc49 	bl	8018974 <ip4_route>
 80120e2:	4601      	mov	r1, r0
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	3304      	adds	r3, #4
 80120e8:	461a      	mov	r2, r3
 80120ea:	4620      	mov	r0, r4
 80120ec:	f7ff f88c 	bl	8011208 <tcp_eff_send_mss_netif>
 80120f0:	4603      	mov	r3, r0
 80120f2:	461a      	mov	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120fc:	009a      	lsls	r2, r3, #2
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012102:	005b      	lsls	r3, r3, #1
 8012104:	f241 111c 	movw	r1, #4380	; 0x111c
 8012108:	428b      	cmp	r3, r1
 801210a:	bf38      	it	cc
 801210c:	460b      	movcc	r3, r1
 801210e:	429a      	cmp	r2, r3
 8012110:	d204      	bcs.n	801211c <tcp_process+0x210>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	b29b      	uxth	r3, r3
 801211a:	e00d      	b.n	8012138 <tcp_process+0x22c>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	f241 121c 	movw	r2, #4380	; 0x111c
 8012126:	4293      	cmp	r3, r2
 8012128:	d904      	bls.n	8012134 <tcp_process+0x228>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801212e:	005b      	lsls	r3, r3, #1
 8012130:	b29b      	uxth	r3, r3
 8012132:	e001      	b.n	8012138 <tcp_process+0x22c>
 8012134:	f241 131c 	movw	r3, #4380	; 0x111c
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012144:	2b00      	cmp	r3, #0
 8012146:	d106      	bne.n	8012156 <tcp_process+0x24a>
 8012148:	4b13      	ldr	r3, [pc, #76]	; (8012198 <tcp_process+0x28c>)
 801214a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801214e:	491c      	ldr	r1, [pc, #112]	; (80121c0 <tcp_process+0x2b4>)
 8012150:	4813      	ldr	r0, [pc, #76]	; (80121a0 <tcp_process+0x294>)
 8012152:	f008 f8e1 	bl	801a318 <iprintf>
        --pcb->snd_queuelen;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801215c:	3b01      	subs	r3, #1
 801215e:	b29a      	uxth	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801216a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d12a      	bne.n	80121c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012176:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d106      	bne.n	801218c <tcp_process+0x280>
 801217e:	4b06      	ldr	r3, [pc, #24]	; (8012198 <tcp_process+0x28c>)
 8012180:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012184:	490f      	ldr	r1, [pc, #60]	; (80121c4 <tcp_process+0x2b8>)
 8012186:	4806      	ldr	r0, [pc, #24]	; (80121a0 <tcp_process+0x294>)
 8012188:	f008 f8c6 	bl	801a318 <iprintf>
          pcb->unsent = rseg->next;
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	66da      	str	r2, [r3, #108]	; 0x6c
 8012194:	e01c      	b.n	80121d0 <tcp_process+0x2c4>
 8012196:	bf00      	nop
 8012198:	0801dd84 	.word	0x0801dd84
 801219c:	0801dfbc 	.word	0x0801dfbc
 80121a0:	0801ddd0 	.word	0x0801ddd0
 80121a4:	2000b4c0 	.word	0x2000b4c0
 80121a8:	2000b4b8 	.word	0x2000b4b8
 80121ac:	2000b4b4 	.word	0x2000b4b4
 80121b0:	0801dfd8 	.word	0x0801dfd8
 80121b4:	2000b4c1 	.word	0x2000b4c1
 80121b8:	2000b47c 	.word	0x2000b47c
 80121bc:	2000b4a4 	.word	0x2000b4a4
 80121c0:	0801dff8 	.word	0x0801dff8
 80121c4:	0801e010 	.word	0x0801e010
        } else {
          pcb->unacked = rseg->next;
 80121c8:	69fb      	ldr	r3, [r7, #28]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80121d0:	69f8      	ldr	r0, [r7, #28]
 80121d2:	f7fe fd22 	bl	8010c1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d104      	bne.n	80121e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121e4:	861a      	strh	r2, [r3, #48]	; 0x30
 80121e6:	e006      	b.n	80121f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2200      	movs	r2, #0
 80121ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d00a      	beq.n	8012216 <tcp_process+0x30a>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	6910      	ldr	r0, [r2, #16]
 801220a:	2200      	movs	r2, #0
 801220c:	6879      	ldr	r1, [r7, #4]
 801220e:	4798      	blx	r3
 8012210:	4603      	mov	r3, r0
 8012212:	76bb      	strb	r3, [r7, #26]
 8012214:	e001      	b.n	801221a <tcp_process+0x30e>
 8012216:	2300      	movs	r3, #0
 8012218:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801221a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801221e:	f113 0f0d 	cmn.w	r3, #13
 8012222:	d102      	bne.n	801222a <tcp_process+0x31e>
          return ERR_ABRT;
 8012224:	f06f 030c 	mvn.w	r3, #12
 8012228:	e250      	b.n	80126cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8b5b      	ldrh	r3, [r3, #26]
 801222e:	f043 0302 	orr.w	r3, r3, #2
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012238:	e23a      	b.n	80126b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801223a:	4b98      	ldr	r3, [pc, #608]	; (801249c <tcp_process+0x590>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	f003 0310 	and.w	r3, r3, #16
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 8234 	beq.w	80126b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012248:	4b95      	ldr	r3, [pc, #596]	; (80124a0 <tcp_process+0x594>)
 801224a:	6819      	ldr	r1, [r3, #0]
 801224c:	4b95      	ldr	r3, [pc, #596]	; (80124a4 <tcp_process+0x598>)
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	461a      	mov	r2, r3
 8012252:	4b95      	ldr	r3, [pc, #596]	; (80124a8 <tcp_process+0x59c>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012258:	4b94      	ldr	r3, [pc, #592]	; (80124ac <tcp_process+0x5a0>)
 801225a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801225c:	885b      	ldrh	r3, [r3, #2]
 801225e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012260:	4a92      	ldr	r2, [pc, #584]	; (80124ac <tcp_process+0x5a0>)
 8012262:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012264:	8812      	ldrh	r2, [r2, #0]
 8012266:	b292      	uxth	r2, r2
 8012268:	9202      	str	r2, [sp, #8]
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	4b90      	ldr	r3, [pc, #576]	; (80124b0 <tcp_process+0x5a4>)
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	4b90      	ldr	r3, [pc, #576]	; (80124b4 <tcp_process+0x5a8>)
 8012272:	4602      	mov	r2, r0
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f002 fc85 	bl	8014b84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012280:	2b05      	cmp	r3, #5
 8012282:	f200 8215 	bhi.w	80126b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2200      	movs	r2, #0
 801228a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f002 fa51 	bl	8014734 <tcp_rexmit_rto>
      break;
 8012292:	e20d      	b.n	80126b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012294:	4b81      	ldr	r3, [pc, #516]	; (801249c <tcp_process+0x590>)
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f003 0310 	and.w	r3, r3, #16
 801229c:	2b00      	cmp	r3, #0
 801229e:	f000 80a1 	beq.w	80123e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122a2:	4b7f      	ldr	r3, [pc, #508]	; (80124a0 <tcp_process+0x594>)
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122aa:	1ad3      	subs	r3, r2, r3
 80122ac:	3b01      	subs	r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	db7e      	blt.n	80123b0 <tcp_process+0x4a4>
 80122b2:	4b7b      	ldr	r3, [pc, #492]	; (80124a0 <tcp_process+0x594>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ba:	1ad3      	subs	r3, r2, r3
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dc77      	bgt.n	80123b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2204      	movs	r2, #4
 80122c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80122ce:	23fa      	movs	r3, #250	; 0xfa
 80122d0:	76bb      	strb	r3, [r7, #26]
 80122d2:	e01d      	b.n	8012310 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <tcp_process+0x3e0>
 80122de:	4b76      	ldr	r3, [pc, #472]	; (80124b8 <tcp_process+0x5ac>)
 80122e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80122e4:	4975      	ldr	r1, [pc, #468]	; (80124bc <tcp_process+0x5b0>)
 80122e6:	4876      	ldr	r0, [pc, #472]	; (80124c0 <tcp_process+0x5b4>)
 80122e8:	f008 f816 	bl	801a318 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f0:	699b      	ldr	r3, [r3, #24]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00a      	beq.n	801230c <tcp_process+0x400>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122fa:	699b      	ldr	r3, [r3, #24]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	6910      	ldr	r0, [r2, #16]
 8012300:	2200      	movs	r2, #0
 8012302:	6879      	ldr	r1, [r7, #4]
 8012304:	4798      	blx	r3
 8012306:	4603      	mov	r3, r0
 8012308:	76bb      	strb	r3, [r7, #26]
 801230a:	e001      	b.n	8012310 <tcp_process+0x404>
 801230c:	23f0      	movs	r3, #240	; 0xf0
 801230e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012310:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d00a      	beq.n	801232e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012318:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801231c:	f113 0f0d 	cmn.w	r3, #13
 8012320:	d002      	beq.n	8012328 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7fd ff8e 	bl	8010244 <tcp_abort>
            }
            return ERR_ABRT;
 8012328:	f06f 030c 	mvn.w	r3, #12
 801232c:	e1ce      	b.n	80126cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 fae0 	bl	80128f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012334:	4b63      	ldr	r3, [pc, #396]	; (80124c4 <tcp_process+0x5b8>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d005      	beq.n	8012348 <tcp_process+0x43c>
            recv_acked--;
 801233c:	4b61      	ldr	r3, [pc, #388]	; (80124c4 <tcp_process+0x5b8>)
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	3b01      	subs	r3, #1
 8012342:	b29a      	uxth	r2, r3
 8012344:	4b5f      	ldr	r3, [pc, #380]	; (80124c4 <tcp_process+0x5b8>)
 8012346:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801234c:	009a      	lsls	r2, r3, #2
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	f241 111c 	movw	r1, #4380	; 0x111c
 8012358:	428b      	cmp	r3, r1
 801235a:	bf38      	it	cc
 801235c:	460b      	movcc	r3, r1
 801235e:	429a      	cmp	r2, r3
 8012360:	d204      	bcs.n	801236c <tcp_process+0x460>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012366:	009b      	lsls	r3, r3, #2
 8012368:	b29b      	uxth	r3, r3
 801236a:	e00d      	b.n	8012388 <tcp_process+0x47c>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	f241 121c 	movw	r2, #4380	; 0x111c
 8012376:	4293      	cmp	r3, r2
 8012378:	d904      	bls.n	8012384 <tcp_process+0x478>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	b29b      	uxth	r3, r3
 8012382:	e001      	b.n	8012388 <tcp_process+0x47c>
 8012384:	f241 131c 	movw	r3, #4380	; 0x111c
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801238e:	4b4e      	ldr	r3, [pc, #312]	; (80124c8 <tcp_process+0x5bc>)
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	f003 0320 	and.w	r3, r3, #32
 8012396:	2b00      	cmp	r3, #0
 8012398:	d037      	beq.n	801240a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	8b5b      	ldrh	r3, [r3, #26]
 801239e:	f043 0302 	orr.w	r3, r3, #2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2207      	movs	r2, #7
 80123ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80123ae:	e02c      	b.n	801240a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123b0:	4b3b      	ldr	r3, [pc, #236]	; (80124a0 <tcp_process+0x594>)
 80123b2:	6819      	ldr	r1, [r3, #0]
 80123b4:	4b3b      	ldr	r3, [pc, #236]	; (80124a4 <tcp_process+0x598>)
 80123b6:	881b      	ldrh	r3, [r3, #0]
 80123b8:	461a      	mov	r2, r3
 80123ba:	4b3b      	ldr	r3, [pc, #236]	; (80124a8 <tcp_process+0x59c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123c0:	4b3a      	ldr	r3, [pc, #232]	; (80124ac <tcp_process+0x5a0>)
 80123c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123c4:	885b      	ldrh	r3, [r3, #2]
 80123c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123c8:	4a38      	ldr	r2, [pc, #224]	; (80124ac <tcp_process+0x5a0>)
 80123ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123cc:	8812      	ldrh	r2, [r2, #0]
 80123ce:	b292      	uxth	r2, r2
 80123d0:	9202      	str	r2, [sp, #8]
 80123d2:	9301      	str	r3, [sp, #4]
 80123d4:	4b36      	ldr	r3, [pc, #216]	; (80124b0 <tcp_process+0x5a4>)
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	4b36      	ldr	r3, [pc, #216]	; (80124b4 <tcp_process+0x5a8>)
 80123da:	4602      	mov	r2, r0
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f002 fbd1 	bl	8014b84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80123e2:	e167      	b.n	80126b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80123e4:	4b2d      	ldr	r3, [pc, #180]	; (801249c <tcp_process+0x590>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 0302 	and.w	r3, r3, #2
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 8161 	beq.w	80126b4 <tcp_process+0x7a8>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	1e5a      	subs	r2, r3, #1
 80123f8:	4b2b      	ldr	r3, [pc, #172]	; (80124a8 <tcp_process+0x59c>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	f040 8159 	bne.w	80126b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f002 f9b8 	bl	8014778 <tcp_rexmit>
      break;
 8012408:	e154      	b.n	80126b4 <tcp_process+0x7a8>
 801240a:	e153      	b.n	80126b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fa71 	bl	80128f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012412:	4b2d      	ldr	r3, [pc, #180]	; (80124c8 <tcp_process+0x5bc>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f003 0320 	and.w	r3, r3, #32
 801241a:	2b00      	cmp	r3, #0
 801241c:	f000 814c 	beq.w	80126b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	8b5b      	ldrh	r3, [r3, #26]
 8012424:	f043 0302 	orr.w	r3, r3, #2
 8012428:	b29a      	uxth	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2207      	movs	r2, #7
 8012432:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012434:	e140      	b.n	80126b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fa5c 	bl	80128f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801243c:	4b22      	ldr	r3, [pc, #136]	; (80124c8 <tcp_process+0x5bc>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f003 0320 	and.w	r3, r3, #32
 8012444:	2b00      	cmp	r3, #0
 8012446:	d071      	beq.n	801252c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012448:	4b14      	ldr	r3, [pc, #80]	; (801249c <tcp_process+0x590>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	f003 0310 	and.w	r3, r3, #16
 8012450:	2b00      	cmp	r3, #0
 8012452:	d060      	beq.n	8012516 <tcp_process+0x60a>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012458:	4b11      	ldr	r3, [pc, #68]	; (80124a0 <tcp_process+0x594>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	429a      	cmp	r2, r3
 801245e:	d15a      	bne.n	8012516 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012464:	2b00      	cmp	r3, #0
 8012466:	d156      	bne.n	8012516 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8b5b      	ldrh	r3, [r3, #26]
 801246c:	f043 0302 	orr.w	r3, r3, #2
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7fe fdbc 	bl	8010ff4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801247c:	4b13      	ldr	r3, [pc, #76]	; (80124cc <tcp_process+0x5c0>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	429a      	cmp	r2, r3
 8012484:	d105      	bne.n	8012492 <tcp_process+0x586>
 8012486:	4b11      	ldr	r3, [pc, #68]	; (80124cc <tcp_process+0x5c0>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	4a0f      	ldr	r2, [pc, #60]	; (80124cc <tcp_process+0x5c0>)
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	e02e      	b.n	80124f0 <tcp_process+0x5e4>
 8012492:	4b0e      	ldr	r3, [pc, #56]	; (80124cc <tcp_process+0x5c0>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	617b      	str	r3, [r7, #20]
 8012498:	e027      	b.n	80124ea <tcp_process+0x5de>
 801249a:	bf00      	nop
 801249c:	2000b4c0 	.word	0x2000b4c0
 80124a0:	2000b4b8 	.word	0x2000b4b8
 80124a4:	2000b4be 	.word	0x2000b4be
 80124a8:	2000b4b4 	.word	0x2000b4b4
 80124ac:	2000b4a4 	.word	0x2000b4a4
 80124b0:	20007efc 	.word	0x20007efc
 80124b4:	20007f00 	.word	0x20007f00
 80124b8:	0801dd84 	.word	0x0801dd84
 80124bc:	0801e024 	.word	0x0801e024
 80124c0:	0801ddd0 	.word	0x0801ddd0
 80124c4:	2000b4bc 	.word	0x2000b4bc
 80124c8:	2000b4c1 	.word	0x2000b4c1
 80124cc:	2000b488 	.word	0x2000b488
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d104      	bne.n	80124e4 <tcp_process+0x5d8>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	68da      	ldr	r2, [r3, #12]
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	60da      	str	r2, [r3, #12]
 80124e2:	e005      	b.n	80124f0 <tcp_process+0x5e4>
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	617b      	str	r3, [r7, #20]
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1ef      	bne.n	80124d0 <tcp_process+0x5c4>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	60da      	str	r2, [r3, #12]
 80124f6:	4b77      	ldr	r3, [pc, #476]	; (80126d4 <tcp_process+0x7c8>)
 80124f8:	2201      	movs	r2, #1
 80124fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	220a      	movs	r2, #10
 8012500:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012502:	4b75      	ldr	r3, [pc, #468]	; (80126d8 <tcp_process+0x7cc>)
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	60da      	str	r2, [r3, #12]
 801250a:	4a73      	ldr	r2, [pc, #460]	; (80126d8 <tcp_process+0x7cc>)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	f002 fcfa 	bl	8014f08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012514:	e0d2      	b.n	80126bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8b5b      	ldrh	r3, [r3, #26]
 801251a:	f043 0302 	orr.w	r3, r3, #2
 801251e:	b29a      	uxth	r2, r3
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2208      	movs	r2, #8
 8012528:	751a      	strb	r2, [r3, #20]
      break;
 801252a:	e0c7      	b.n	80126bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801252c:	4b6b      	ldr	r3, [pc, #428]	; (80126dc <tcp_process+0x7d0>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	f003 0310 	and.w	r3, r3, #16
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 80c1 	beq.w	80126bc <tcp_process+0x7b0>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801253e:	4b68      	ldr	r3, [pc, #416]	; (80126e0 <tcp_process+0x7d4>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	f040 80ba 	bne.w	80126bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801254c:	2b00      	cmp	r3, #0
 801254e:	f040 80b5 	bne.w	80126bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2206      	movs	r2, #6
 8012556:	751a      	strb	r2, [r3, #20]
      break;
 8012558:	e0b0      	b.n	80126bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f9ca 	bl	80128f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012560:	4b60      	ldr	r3, [pc, #384]	; (80126e4 <tcp_process+0x7d8>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f003 0320 	and.w	r3, r3, #32
 8012568:	2b00      	cmp	r3, #0
 801256a:	f000 80a9 	beq.w	80126c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	8b5b      	ldrh	r3, [r3, #26]
 8012572:	f043 0302 	orr.w	r3, r3, #2
 8012576:	b29a      	uxth	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7fe fd39 	bl	8010ff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012582:	4b59      	ldr	r3, [pc, #356]	; (80126e8 <tcp_process+0x7dc>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	429a      	cmp	r2, r3
 801258a:	d105      	bne.n	8012598 <tcp_process+0x68c>
 801258c:	4b56      	ldr	r3, [pc, #344]	; (80126e8 <tcp_process+0x7dc>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	4a55      	ldr	r2, [pc, #340]	; (80126e8 <tcp_process+0x7dc>)
 8012594:	6013      	str	r3, [r2, #0]
 8012596:	e013      	b.n	80125c0 <tcp_process+0x6b4>
 8012598:	4b53      	ldr	r3, [pc, #332]	; (80126e8 <tcp_process+0x7dc>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	613b      	str	r3, [r7, #16]
 801259e:	e00c      	b.n	80125ba <tcp_process+0x6ae>
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d104      	bne.n	80125b4 <tcp_process+0x6a8>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	68da      	ldr	r2, [r3, #12]
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	60da      	str	r2, [r3, #12]
 80125b2:	e005      	b.n	80125c0 <tcp_process+0x6b4>
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	613b      	str	r3, [r7, #16]
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d1ef      	bne.n	80125a0 <tcp_process+0x694>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	60da      	str	r2, [r3, #12]
 80125c6:	4b43      	ldr	r3, [pc, #268]	; (80126d4 <tcp_process+0x7c8>)
 80125c8:	2201      	movs	r2, #1
 80125ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	220a      	movs	r2, #10
 80125d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80125d2:	4b41      	ldr	r3, [pc, #260]	; (80126d8 <tcp_process+0x7cc>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	60da      	str	r2, [r3, #12]
 80125da:	4a3f      	ldr	r2, [pc, #252]	; (80126d8 <tcp_process+0x7cc>)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6013      	str	r3, [r2, #0]
 80125e0:	f002 fc92 	bl	8014f08 <tcp_timer_needed>
      }
      break;
 80125e4:	e06c      	b.n	80126c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 f984 	bl	80128f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80125ec:	4b3b      	ldr	r3, [pc, #236]	; (80126dc <tcp_process+0x7d0>)
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	f003 0310 	and.w	r3, r3, #16
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d065      	beq.n	80126c4 <tcp_process+0x7b8>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125fc:	4b38      	ldr	r3, [pc, #224]	; (80126e0 <tcp_process+0x7d4>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	429a      	cmp	r2, r3
 8012602:	d15f      	bne.n	80126c4 <tcp_process+0x7b8>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012608:	2b00      	cmp	r3, #0
 801260a:	d15b      	bne.n	80126c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7fe fcf1 	bl	8010ff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012612:	4b35      	ldr	r3, [pc, #212]	; (80126e8 <tcp_process+0x7dc>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	429a      	cmp	r2, r3
 801261a:	d105      	bne.n	8012628 <tcp_process+0x71c>
 801261c:	4b32      	ldr	r3, [pc, #200]	; (80126e8 <tcp_process+0x7dc>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	4a31      	ldr	r2, [pc, #196]	; (80126e8 <tcp_process+0x7dc>)
 8012624:	6013      	str	r3, [r2, #0]
 8012626:	e013      	b.n	8012650 <tcp_process+0x744>
 8012628:	4b2f      	ldr	r3, [pc, #188]	; (80126e8 <tcp_process+0x7dc>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	60fb      	str	r3, [r7, #12]
 801262e:	e00c      	b.n	801264a <tcp_process+0x73e>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	429a      	cmp	r2, r3
 8012638:	d104      	bne.n	8012644 <tcp_process+0x738>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	68da      	ldr	r2, [r3, #12]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	60da      	str	r2, [r3, #12]
 8012642:	e005      	b.n	8012650 <tcp_process+0x744>
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	60fb      	str	r3, [r7, #12]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d1ef      	bne.n	8012630 <tcp_process+0x724>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2200      	movs	r2, #0
 8012654:	60da      	str	r2, [r3, #12]
 8012656:	4b1f      	ldr	r3, [pc, #124]	; (80126d4 <tcp_process+0x7c8>)
 8012658:	2201      	movs	r2, #1
 801265a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	220a      	movs	r2, #10
 8012660:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012662:	4b1d      	ldr	r3, [pc, #116]	; (80126d8 <tcp_process+0x7cc>)
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	4a1b      	ldr	r2, [pc, #108]	; (80126d8 <tcp_process+0x7cc>)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6013      	str	r3, [r2, #0]
 8012670:	f002 fc4a 	bl	8014f08 <tcp_timer_needed>
      }
      break;
 8012674:	e026      	b.n	80126c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f93c 	bl	80128f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801267c:	4b17      	ldr	r3, [pc, #92]	; (80126dc <tcp_process+0x7d0>)
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	f003 0310 	and.w	r3, r3, #16
 8012684:	2b00      	cmp	r3, #0
 8012686:	d01f      	beq.n	80126c8 <tcp_process+0x7bc>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801268c:	4b14      	ldr	r3, [pc, #80]	; (80126e0 <tcp_process+0x7d4>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	429a      	cmp	r2, r3
 8012692:	d119      	bne.n	80126c8 <tcp_process+0x7bc>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012698:	2b00      	cmp	r3, #0
 801269a:	d115      	bne.n	80126c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801269c:	4b11      	ldr	r3, [pc, #68]	; (80126e4 <tcp_process+0x7d8>)
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f043 0310 	orr.w	r3, r3, #16
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	4b0f      	ldr	r3, [pc, #60]	; (80126e4 <tcp_process+0x7d8>)
 80126a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80126aa:	e00d      	b.n	80126c8 <tcp_process+0x7bc>
    default:
      break;
 80126ac:	bf00      	nop
 80126ae:	e00c      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126b0:	bf00      	nop
 80126b2:	e00a      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126b4:	bf00      	nop
 80126b6:	e008      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126b8:	bf00      	nop
 80126ba:	e006      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126bc:	bf00      	nop
 80126be:	e004      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126c0:	bf00      	nop
 80126c2:	e002      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126c4:	bf00      	nop
 80126c6:	e000      	b.n	80126ca <tcp_process+0x7be>
      break;
 80126c8:	bf00      	nop
  }
  return ERR_OK;
 80126ca:	2300      	movs	r3, #0
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3724      	adds	r7, #36	; 0x24
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd90      	pop	{r4, r7, pc}
 80126d4:	2000b490 	.word	0x2000b490
 80126d8:	2000b48c 	.word	0x2000b48c
 80126dc:	2000b4c0 	.word	0x2000b4c0
 80126e0:	2000b4b8 	.word	0x2000b4b8
 80126e4:	2000b4c1 	.word	0x2000b4c1
 80126e8:	2000b488 	.word	0x2000b488

080126ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80126ec:	b590      	push	{r4, r7, lr}
 80126ee:	b085      	sub	sp, #20
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d106      	bne.n	801270a <tcp_oos_insert_segment+0x1e>
 80126fc:	4b3b      	ldr	r3, [pc, #236]	; (80127ec <tcp_oos_insert_segment+0x100>)
 80126fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8012702:	493b      	ldr	r1, [pc, #236]	; (80127f0 <tcp_oos_insert_segment+0x104>)
 8012704:	483b      	ldr	r0, [pc, #236]	; (80127f4 <tcp_oos_insert_segment+0x108>)
 8012706:	f007 fe07 	bl	801a318 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	899b      	ldrh	r3, [r3, #12]
 8012710:	b29b      	uxth	r3, r3
 8012712:	4618      	mov	r0, r3
 8012714:	f7fb fcb4 	bl	800e080 <lwip_htons>
 8012718:	4603      	mov	r3, r0
 801271a:	b2db      	uxtb	r3, r3
 801271c:	f003 0301 	and.w	r3, r3, #1
 8012720:	2b00      	cmp	r3, #0
 8012722:	d028      	beq.n	8012776 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012724:	6838      	ldr	r0, [r7, #0]
 8012726:	f7fe fa63 	bl	8010bf0 <tcp_segs_free>
    next = NULL;
 801272a:	2300      	movs	r3, #0
 801272c:	603b      	str	r3, [r7, #0]
 801272e:	e056      	b.n	80127de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	899b      	ldrh	r3, [r3, #12]
 8012736:	b29b      	uxth	r3, r3
 8012738:	4618      	mov	r0, r3
 801273a:	f7fb fca1 	bl	800e080 <lwip_htons>
 801273e:	4603      	mov	r3, r0
 8012740:	b2db      	uxtb	r3, r3
 8012742:	f003 0301 	and.w	r3, r3, #1
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00d      	beq.n	8012766 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	899b      	ldrh	r3, [r3, #12]
 8012750:	b29c      	uxth	r4, r3
 8012752:	2001      	movs	r0, #1
 8012754:	f7fb fc94 	bl	800e080 <lwip_htons>
 8012758:	4603      	mov	r3, r0
 801275a:	461a      	mov	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	4322      	orrs	r2, r4
 8012762:	b292      	uxth	r2, r2
 8012764:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f7fe fa52 	bl	8010c1a <tcp_seg_free>
    while (next &&
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00e      	beq.n	801279a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	891b      	ldrh	r3, [r3, #8]
 8012780:	461a      	mov	r2, r3
 8012782:	4b1d      	ldr	r3, [pc, #116]	; (80127f8 <tcp_oos_insert_segment+0x10c>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	441a      	add	r2, r3
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	8909      	ldrh	r1, [r1, #8]
 8012792:	440b      	add	r3, r1
 8012794:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012796:	2b00      	cmp	r3, #0
 8012798:	daca      	bge.n	8012730 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d01e      	beq.n	80127de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	891b      	ldrh	r3, [r3, #8]
 80127a4:	461a      	mov	r2, r3
 80127a6:	4b14      	ldr	r3, [pc, #80]	; (80127f8 <tcp_oos_insert_segment+0x10c>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	441a      	add	r2, r3
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	dd12      	ble.n	80127de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	b29a      	uxth	r2, r3
 80127c0:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <tcp_oos_insert_segment+0x10c>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	685a      	ldr	r2, [r3, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	891b      	ldrh	r3, [r3, #8]
 80127d6:	4619      	mov	r1, r3
 80127d8:	4610      	mov	r0, r2
 80127da:	f7fc fe15 	bl	800f408 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	683a      	ldr	r2, [r7, #0]
 80127e2:	601a      	str	r2, [r3, #0]
}
 80127e4:	bf00      	nop
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd90      	pop	{r4, r7, pc}
 80127ec:	0801dd84 	.word	0x0801dd84
 80127f0:	0801e044 	.word	0x0801e044
 80127f4:	0801ddd0 	.word	0x0801ddd0
 80127f8:	2000b4b4 	.word	0x2000b4b4

080127fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80127fc:	b5b0      	push	{r4, r5, r7, lr}
 80127fe:	b086      	sub	sp, #24
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801280a:	e03e      	b.n	801288a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	4618      	mov	r0, r3
 801281c:	f7fd f802 	bl	800f824 <pbuf_clen>
 8012820:	4603      	mov	r3, r0
 8012822:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801282a:	8a7a      	ldrh	r2, [r7, #18]
 801282c:	429a      	cmp	r2, r3
 801282e:	d906      	bls.n	801283e <tcp_free_acked_segments+0x42>
 8012830:	4b2a      	ldr	r3, [pc, #168]	; (80128dc <tcp_free_acked_segments+0xe0>)
 8012832:	f240 4257 	movw	r2, #1111	; 0x457
 8012836:	492a      	ldr	r1, [pc, #168]	; (80128e0 <tcp_free_acked_segments+0xe4>)
 8012838:	482a      	ldr	r0, [pc, #168]	; (80128e4 <tcp_free_acked_segments+0xe8>)
 801283a:	f007 fd6d 	bl	801a318 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012844:	8a7b      	ldrh	r3, [r7, #18]
 8012846:	1ad3      	subs	r3, r2, r3
 8012848:	b29a      	uxth	r2, r3
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	891a      	ldrh	r2, [r3, #8]
 8012854:	4b24      	ldr	r3, [pc, #144]	; (80128e8 <tcp_free_acked_segments+0xec>)
 8012856:	881b      	ldrh	r3, [r3, #0]
 8012858:	4413      	add	r3, r2
 801285a:	b29a      	uxth	r2, r3
 801285c:	4b22      	ldr	r3, [pc, #136]	; (80128e8 <tcp_free_acked_segments+0xec>)
 801285e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012860:	6978      	ldr	r0, [r7, #20]
 8012862:	f7fe f9da 	bl	8010c1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801286c:	2b00      	cmp	r3, #0
 801286e:	d00c      	beq.n	801288a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d109      	bne.n	801288a <tcp_free_acked_segments+0x8e>
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d106      	bne.n	801288a <tcp_free_acked_segments+0x8e>
 801287c:	4b17      	ldr	r3, [pc, #92]	; (80128dc <tcp_free_acked_segments+0xe0>)
 801287e:	f240 4261 	movw	r2, #1121	; 0x461
 8012882:	491a      	ldr	r1, [pc, #104]	; (80128ec <tcp_free_acked_segments+0xf0>)
 8012884:	4817      	ldr	r0, [pc, #92]	; (80128e4 <tcp_free_acked_segments+0xe8>)
 8012886:	f007 fd47 	bl	801a318 <iprintf>
  while (seg_list != NULL &&
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d020      	beq.n	80128d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	4618      	mov	r0, r3
 8012898:	f7fb fc07 	bl	800e0aa <lwip_htonl>
 801289c:	4604      	mov	r4, r0
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	891b      	ldrh	r3, [r3, #8]
 80128a2:	461d      	mov	r5, r3
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	899b      	ldrh	r3, [r3, #12]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fb fbe7 	bl	800e080 <lwip_htons>
 80128b2:	4603      	mov	r3, r0
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	f003 0303 	and.w	r3, r3, #3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d001      	beq.n	80128c2 <tcp_free_acked_segments+0xc6>
 80128be:	2301      	movs	r3, #1
 80128c0:	e000      	b.n	80128c4 <tcp_free_acked_segments+0xc8>
 80128c2:	2300      	movs	r3, #0
 80128c4:	442b      	add	r3, r5
 80128c6:	18e2      	adds	r2, r4, r3
 80128c8:	4b09      	ldr	r3, [pc, #36]	; (80128f0 <tcp_free_acked_segments+0xf4>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	dd9c      	ble.n	801280c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80128d2:	68bb      	ldr	r3, [r7, #8]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bdb0      	pop	{r4, r5, r7, pc}
 80128dc:	0801dd84 	.word	0x0801dd84
 80128e0:	0801e06c 	.word	0x0801e06c
 80128e4:	0801ddd0 	.word	0x0801ddd0
 80128e8:	2000b4bc 	.word	0x2000b4bc
 80128ec:	0801e094 	.word	0x0801e094
 80128f0:	2000b4b8 	.word	0x2000b4b8

080128f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80128f4:	b5b0      	push	{r4, r5, r7, lr}
 80128f6:	b094      	sub	sp, #80	; 0x50
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80128fc:	2300      	movs	r3, #0
 80128fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d106      	bne.n	8012914 <tcp_receive+0x20>
 8012906:	4b91      	ldr	r3, [pc, #580]	; (8012b4c <tcp_receive+0x258>)
 8012908:	f240 427b 	movw	r2, #1147	; 0x47b
 801290c:	4990      	ldr	r1, [pc, #576]	; (8012b50 <tcp_receive+0x25c>)
 801290e:	4891      	ldr	r0, [pc, #580]	; (8012b54 <tcp_receive+0x260>)
 8012910:	f007 fd02 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	7d1b      	ldrb	r3, [r3, #20]
 8012918:	2b03      	cmp	r3, #3
 801291a:	d806      	bhi.n	801292a <tcp_receive+0x36>
 801291c:	4b8b      	ldr	r3, [pc, #556]	; (8012b4c <tcp_receive+0x258>)
 801291e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012922:	498d      	ldr	r1, [pc, #564]	; (8012b58 <tcp_receive+0x264>)
 8012924:	488b      	ldr	r0, [pc, #556]	; (8012b54 <tcp_receive+0x260>)
 8012926:	f007 fcf7 	bl	801a318 <iprintf>

  if (flags & TCP_ACK) {
 801292a:	4b8c      	ldr	r3, [pc, #560]	; (8012b5c <tcp_receive+0x268>)
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	f003 0310 	and.w	r3, r3, #16
 8012932:	2b00      	cmp	r3, #0
 8012934:	f000 8264 	beq.w	8012e00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801293e:	461a      	mov	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012944:	4413      	add	r3, r2
 8012946:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801294c:	4b84      	ldr	r3, [pc, #528]	; (8012b60 <tcp_receive+0x26c>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	db1b      	blt.n	801298e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801295a:	4b81      	ldr	r3, [pc, #516]	; (8012b60 <tcp_receive+0x26c>)
 801295c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801295e:	429a      	cmp	r2, r3
 8012960:	d106      	bne.n	8012970 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012966:	4b7f      	ldr	r3, [pc, #508]	; (8012b64 <tcp_receive+0x270>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	1ad3      	subs	r3, r2, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	db0e      	blt.n	801298e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012974:	4b7b      	ldr	r3, [pc, #492]	; (8012b64 <tcp_receive+0x270>)
 8012976:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012978:	429a      	cmp	r2, r3
 801297a:	d125      	bne.n	80129c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801297c:	4b7a      	ldr	r3, [pc, #488]	; (8012b68 <tcp_receive+0x274>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	89db      	ldrh	r3, [r3, #14]
 8012982:	b29a      	uxth	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801298a:	429a      	cmp	r2, r3
 801298c:	d91c      	bls.n	80129c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801298e:	4b76      	ldr	r3, [pc, #472]	; (8012b68 <tcp_receive+0x274>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	89db      	ldrh	r3, [r3, #14]
 8012994:	b29a      	uxth	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d205      	bcs.n	80129b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80129b8:	4b69      	ldr	r3, [pc, #420]	; (8012b60 <tcp_receive+0x26c>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80129c0:	4b68      	ldr	r3, [pc, #416]	; (8012b64 <tcp_receive+0x270>)
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80129c8:	4b66      	ldr	r3, [pc, #408]	; (8012b64 <tcp_receive+0x270>)
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129d0:	1ad3      	subs	r3, r2, r3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	dc58      	bgt.n	8012a88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80129d6:	4b65      	ldr	r3, [pc, #404]	; (8012b6c <tcp_receive+0x278>)
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d14b      	bne.n	8012a76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80129e8:	4413      	add	r3, r2
 80129ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d142      	bne.n	8012a76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	db3d      	blt.n	8012a76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80129fe:	4b59      	ldr	r3, [pc, #356]	; (8012b64 <tcp_receive+0x270>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d137      	bne.n	8012a76 <tcp_receive+0x182>
              found_dupack = 1;
 8012a06:	2301      	movs	r3, #1
 8012a08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a10:	2bff      	cmp	r3, #255	; 0xff
 8012a12:	d007      	beq.n	8012a24 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	b2da      	uxtb	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a2a:	2b03      	cmp	r3, #3
 8012a2c:	d91b      	bls.n	8012a66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a38:	4413      	add	r3, r2
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d30a      	bcc.n	8012a5c <tcp_receive+0x168>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a50:	4413      	add	r3, r2
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a5a:	e004      	b.n	8012a66 <tcp_receive+0x172>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a6c:	2b02      	cmp	r3, #2
 8012a6e:	d902      	bls.n	8012a76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f001 feed 	bl	8014850 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f040 8161 	bne.w	8012d40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012a86:	e15b      	b.n	8012d40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a88:	4b36      	ldr	r3, [pc, #216]	; (8012b64 <tcp_receive+0x270>)
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a90:	1ad3      	subs	r3, r2, r3
 8012a92:	3b01      	subs	r3, #1
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f2c0 814e 	blt.w	8012d36 <tcp_receive+0x442>
 8012a9a:	4b32      	ldr	r3, [pc, #200]	; (8012b64 <tcp_receive+0x270>)
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012aa2:	1ad3      	subs	r3, r2, r3
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f300 8146 	bgt.w	8012d36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8b5b      	ldrh	r3, [r3, #26]
 8012aae:	f003 0304 	and.w	r3, r3, #4
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d010      	beq.n	8012ad8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	8b5b      	ldrh	r3, [r3, #26]
 8012aba:	f023 0304 	bic.w	r3, r3, #4
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2200      	movs	r2, #0
 8012adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ae6:	10db      	asrs	r3, r3, #3
 8012ae8:	b21b      	sxth	r3, r3
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4413      	add	r3, r2
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	b21a      	sxth	r2, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012b00:	4b18      	ldr	r3, [pc, #96]	; (8012b64 <tcp_receive+0x270>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	b29a      	uxth	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2200      	movs	r2, #0
 8012b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012b18:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <tcp_receive+0x270>)
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	7d1b      	ldrb	r3, [r3, #20]
 8012b24:	2b03      	cmp	r3, #3
 8012b26:	f240 8097 	bls.w	8012c58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d245      	bcs.n	8012bc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	8b5b      	ldrh	r3, [r3, #26]
 8012b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d014      	beq.n	8012b70 <tcp_receive+0x27c>
 8012b46:	2301      	movs	r3, #1
 8012b48:	e013      	b.n	8012b72 <tcp_receive+0x27e>
 8012b4a:	bf00      	nop
 8012b4c:	0801dd84 	.word	0x0801dd84
 8012b50:	0801e0b4 	.word	0x0801e0b4
 8012b54:	0801ddd0 	.word	0x0801ddd0
 8012b58:	0801e0d0 	.word	0x0801e0d0
 8012b5c:	2000b4c0 	.word	0x2000b4c0
 8012b60:	2000b4b4 	.word	0x2000b4b4
 8012b64:	2000b4b8 	.word	0x2000b4b8
 8012b68:	2000b4a4 	.word	0x2000b4a4
 8012b6c:	2000b4be 	.word	0x2000b4be
 8012b70:	2302      	movs	r3, #2
 8012b72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012b76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b80:	fb12 f303 	smulbb	r3, r2, r3
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	bf28      	it	cs
 8012b8c:	4613      	movcs	r3, r2
 8012b8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b98:	4413      	add	r3, r2
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d309      	bcc.n	8012bba <tcp_receive+0x2c6>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012bae:	4413      	add	r3, r2
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bb8:	e04e      	b.n	8012c58 <tcp_receive+0x364>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bc4:	e048      	b.n	8012c58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012bce:	4413      	add	r3, r2
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d309      	bcc.n	8012bf0 <tcp_receive+0x2fc>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012be4:	4413      	add	r3, r2
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012bee:	e004      	b.n	8012bfa <tcp_receive+0x306>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d326      	bcc.n	8012c58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c16:	1ad3      	subs	r3, r2, r3
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c2a:	4413      	add	r3, r2
 8012c2c:	b29a      	uxth	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d30a      	bcc.n	8012c4e <tcp_receive+0x35a>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c42:	4413      	add	r3, r2
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c4c:	e004      	b.n	8012c58 <tcp_receive+0x364>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c60:	4a98      	ldr	r2, [pc, #608]	; (8012ec4 <tcp_receive+0x5d0>)
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7ff fdca 	bl	80127fc <tcp_free_acked_segments>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c76:	4a94      	ldr	r2, [pc, #592]	; (8012ec8 <tcp_receive+0x5d4>)
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7ff fdbf 	bl	80127fc <tcp_free_acked_segments>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d104      	bne.n	8012c96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c92:	861a      	strh	r2, [r3, #48]	; 0x30
 8012c94:	e002      	b.n	8012c9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d103      	bne.n	8012cb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012cb8:	4b84      	ldr	r3, [pc, #528]	; (8012ecc <tcp_receive+0x5d8>)
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	b29a      	uxth	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	8b5b      	ldrh	r3, [r3, #26]
 8012cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d035      	beq.n	8012d3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d118      	bne.n	8012d0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00c      	beq.n	8012cfc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7fb f9db 	bl	800e0aa <lwip_htonl>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	dc20      	bgt.n	8012d3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	8b5b      	ldrh	r3, [r3, #26]
 8012d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d0a:	e018      	b.n	8012d3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d14:	68db      	ldr	r3, [r3, #12]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fb f9c6 	bl	800e0aa <lwip_htonl>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	1ae3      	subs	r3, r4, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	dc0b      	bgt.n	8012d3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	8b5b      	ldrh	r3, [r3, #26]
 8012d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d34:	e003      	b.n	8012d3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f001 ff76 	bl	8014c28 <tcp_send_empty_ack>
 8012d3c:	e000      	b.n	8012d40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d05b      	beq.n	8012e00 <tcp_receive+0x50c>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d4c:	4b60      	ldr	r3, [pc, #384]	; (8012ed0 <tcp_receive+0x5dc>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	da54      	bge.n	8012e00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012d56:	4b5f      	ldr	r3, [pc, #380]	; (8012ed4 <tcp_receive+0x5e0>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012d6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d74:	10db      	asrs	r3, r3, #3
 8012d76:	b21b      	sxth	r3, r3
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	1ad3      	subs	r3, r2, r3
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d8e:	4413      	add	r3, r2
 8012d90:	b29b      	uxth	r3, r3
 8012d92:	b21a      	sxth	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012d98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	da05      	bge.n	8012dac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012da0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012da4:	425b      	negs	r3, r3
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012dac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012db6:	109b      	asrs	r3, r3, #2
 8012db8:	b21b      	sxth	r3, r3
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	1ad3      	subs	r3, r2, r3
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012dd0:	4413      	add	r3, r2
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	b21a      	sxth	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012de0:	10db      	asrs	r3, r3, #3
 8012de2:	b21b      	sxth	r3, r3
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	4413      	add	r3, r2
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	b21a      	sxth	r2, r3
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012e00:	4b35      	ldr	r3, [pc, #212]	; (8012ed8 <tcp_receive+0x5e4>)
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	f000 84e2 	beq.w	80137ce <tcp_receive+0xeda>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	7d1b      	ldrb	r3, [r3, #20]
 8012e0e:	2b06      	cmp	r3, #6
 8012e10:	f200 84dd 	bhi.w	80137ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e18:	4b30      	ldr	r3, [pc, #192]	; (8012edc <tcp_receive+0x5e8>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	3b01      	subs	r3, #1
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f2c0 808f 	blt.w	8012f44 <tcp_receive+0x650>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e2a:	4b2b      	ldr	r3, [pc, #172]	; (8012ed8 <tcp_receive+0x5e4>)
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	4b2a      	ldr	r3, [pc, #168]	; (8012edc <tcp_receive+0x5e8>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	440b      	add	r3, r1
 8012e36:	1ad3      	subs	r3, r2, r3
 8012e38:	3301      	adds	r3, #1
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f300 8082 	bgt.w	8012f44 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012e40:	4b27      	ldr	r3, [pc, #156]	; (8012ee0 <tcp_receive+0x5ec>)
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e4a:	4b24      	ldr	r3, [pc, #144]	; (8012edc <tcp_receive+0x5e8>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012e52:	4b23      	ldr	r3, [pc, #140]	; (8012ee0 <tcp_receive+0x5ec>)
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <tcp_receive+0x574>
 8012e5a:	4b22      	ldr	r3, [pc, #136]	; (8012ee4 <tcp_receive+0x5f0>)
 8012e5c:	f240 5294 	movw	r2, #1428	; 0x594
 8012e60:	4921      	ldr	r1, [pc, #132]	; (8012ee8 <tcp_receive+0x5f4>)
 8012e62:	4822      	ldr	r0, [pc, #136]	; (8012eec <tcp_receive+0x5f8>)
 8012e64:	f007 fa58 	bl	801a318 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d906      	bls.n	8012e80 <tcp_receive+0x58c>
 8012e72:	4b1c      	ldr	r3, [pc, #112]	; (8012ee4 <tcp_receive+0x5f0>)
 8012e74:	f240 5295 	movw	r2, #1429	; 0x595
 8012e78:	491d      	ldr	r1, [pc, #116]	; (8012ef0 <tcp_receive+0x5fc>)
 8012e7a:	481c      	ldr	r0, [pc, #112]	; (8012eec <tcp_receive+0x5f8>)
 8012e7c:	f007 fa4c 	bl	801a318 <iprintf>
      off = (u16_t)off32;
 8012e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012e86:	4b16      	ldr	r3, [pc, #88]	; (8012ee0 <tcp_receive+0x5ec>)
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	891b      	ldrh	r3, [r3, #8]
 8012e8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d906      	bls.n	8012ea2 <tcp_receive+0x5ae>
 8012e94:	4b13      	ldr	r3, [pc, #76]	; (8012ee4 <tcp_receive+0x5f0>)
 8012e96:	f240 5297 	movw	r2, #1431	; 0x597
 8012e9a:	4916      	ldr	r1, [pc, #88]	; (8012ef4 <tcp_receive+0x600>)
 8012e9c:	4813      	ldr	r0, [pc, #76]	; (8012eec <tcp_receive+0x5f8>)
 8012e9e:	f007 fa3b 	bl	801a318 <iprintf>
      inseg.len -= off;
 8012ea2:	4b0f      	ldr	r3, [pc, #60]	; (8012ee0 <tcp_receive+0x5ec>)
 8012ea4:	891a      	ldrh	r2, [r3, #8]
 8012ea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	4b0c      	ldr	r3, [pc, #48]	; (8012ee0 <tcp_receive+0x5ec>)
 8012eb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012eb2:	4b0b      	ldr	r3, [pc, #44]	; (8012ee0 <tcp_receive+0x5ec>)
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	891a      	ldrh	r2, [r3, #8]
 8012eb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ebc:	1ad3      	subs	r3, r2, r3
 8012ebe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012ec0:	e02a      	b.n	8012f18 <tcp_receive+0x624>
 8012ec2:	bf00      	nop
 8012ec4:	0801e0ec 	.word	0x0801e0ec
 8012ec8:	0801e0f4 	.word	0x0801e0f4
 8012ecc:	2000b4bc 	.word	0x2000b4bc
 8012ed0:	2000b4b8 	.word	0x2000b4b8
 8012ed4:	2000b47c 	.word	0x2000b47c
 8012ed8:	2000b4be 	.word	0x2000b4be
 8012edc:	2000b4b4 	.word	0x2000b4b4
 8012ee0:	2000b494 	.word	0x2000b494
 8012ee4:	0801dd84 	.word	0x0801dd84
 8012ee8:	0801e0fc 	.word	0x0801e0fc
 8012eec:	0801ddd0 	.word	0x0801ddd0
 8012ef0:	0801e10c 	.word	0x0801e10c
 8012ef4:	0801e11c 	.word	0x0801e11c
        off -= p->len;
 8012ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012efa:	895b      	ldrh	r3, [r3, #10]
 8012efc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f00:	1ad3      	subs	r3, r2, r3
 8012f02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f0a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f0e:	2200      	movs	r2, #0
 8012f10:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f1a:	895b      	ldrh	r3, [r3, #10]
 8012f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d8e9      	bhi.n	8012ef8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f28:	4619      	mov	r1, r3
 8012f2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f2c:	f7fc fb6c 	bl	800f608 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f34:	4a91      	ldr	r2, [pc, #580]	; (801317c <tcp_receive+0x888>)
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	4b91      	ldr	r3, [pc, #580]	; (8013180 <tcp_receive+0x88c>)
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	4a8f      	ldr	r2, [pc, #572]	; (801317c <tcp_receive+0x888>)
 8012f3e:	6812      	ldr	r2, [r2, #0]
 8012f40:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012f42:	e00d      	b.n	8012f60 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012f44:	4b8d      	ldr	r3, [pc, #564]	; (801317c <tcp_receive+0x888>)
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	da06      	bge.n	8012f60 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8b5b      	ldrh	r3, [r3, #26]
 8012f56:	f043 0302 	orr.w	r3, r3, #2
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f60:	4b86      	ldr	r3, [pc, #536]	; (801317c <tcp_receive+0x888>)
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f2c0 842a 	blt.w	80137c4 <tcp_receive+0xed0>
 8012f70:	4b82      	ldr	r3, [pc, #520]	; (801317c <tcp_receive+0x888>)
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f78:	6879      	ldr	r1, [r7, #4]
 8012f7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f7c:	440b      	add	r3, r1
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	3301      	adds	r3, #1
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f300 841e 	bgt.w	80137c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f8c:	4b7b      	ldr	r3, [pc, #492]	; (801317c <tcp_receive+0x888>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	f040 829a 	bne.w	80134ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012f96:	4b7a      	ldr	r3, [pc, #488]	; (8013180 <tcp_receive+0x88c>)
 8012f98:	891c      	ldrh	r4, [r3, #8]
 8012f9a:	4b79      	ldr	r3, [pc, #484]	; (8013180 <tcp_receive+0x88c>)
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	899b      	ldrh	r3, [r3, #12]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fb f86c 	bl	800e080 <lwip_htons>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	f003 0303 	and.w	r3, r3, #3
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d001      	beq.n	8012fb8 <tcp_receive+0x6c4>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e000      	b.n	8012fba <tcp_receive+0x6c6>
 8012fb8:	2300      	movs	r3, #0
 8012fba:	4423      	add	r3, r4
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	4b71      	ldr	r3, [pc, #452]	; (8013184 <tcp_receive+0x890>)
 8012fc0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fc6:	4b6f      	ldr	r3, [pc, #444]	; (8013184 <tcp_receive+0x890>)
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d275      	bcs.n	80130ba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012fce:	4b6c      	ldr	r3, [pc, #432]	; (8013180 <tcp_receive+0x88c>)
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	899b      	ldrh	r3, [r3, #12]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fb f852 	bl	800e080 <lwip_htons>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	f003 0301 	and.w	r3, r3, #1
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d01f      	beq.n	8013028 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012fe8:	4b65      	ldr	r3, [pc, #404]	; (8013180 <tcp_receive+0x88c>)
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	899b      	ldrh	r3, [r3, #12]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	b21b      	sxth	r3, r3
 8012ff2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ff6:	b21c      	sxth	r4, r3
 8012ff8:	4b61      	ldr	r3, [pc, #388]	; (8013180 <tcp_receive+0x88c>)
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	899b      	ldrh	r3, [r3, #12]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	4618      	mov	r0, r3
 8013002:	f7fb f83d 	bl	800e080 <lwip_htons>
 8013006:	4603      	mov	r3, r0
 8013008:	b2db      	uxtb	r3, r3
 801300a:	b29b      	uxth	r3, r3
 801300c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013010:	b29b      	uxth	r3, r3
 8013012:	4618      	mov	r0, r3
 8013014:	f7fb f834 	bl	800e080 <lwip_htons>
 8013018:	4603      	mov	r3, r0
 801301a:	b21b      	sxth	r3, r3
 801301c:	4323      	orrs	r3, r4
 801301e:	b21a      	sxth	r2, r3
 8013020:	4b57      	ldr	r3, [pc, #348]	; (8013180 <tcp_receive+0x88c>)
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	b292      	uxth	r2, r2
 8013026:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801302c:	4b54      	ldr	r3, [pc, #336]	; (8013180 <tcp_receive+0x88c>)
 801302e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013030:	4b53      	ldr	r3, [pc, #332]	; (8013180 <tcp_receive+0x88c>)
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	899b      	ldrh	r3, [r3, #12]
 8013036:	b29b      	uxth	r3, r3
 8013038:	4618      	mov	r0, r3
 801303a:	f7fb f821 	bl	800e080 <lwip_htons>
 801303e:	4603      	mov	r3, r0
 8013040:	b2db      	uxtb	r3, r3
 8013042:	f003 0302 	and.w	r3, r3, #2
 8013046:	2b00      	cmp	r3, #0
 8013048:	d005      	beq.n	8013056 <tcp_receive+0x762>
            inseg.len -= 1;
 801304a:	4b4d      	ldr	r3, [pc, #308]	; (8013180 <tcp_receive+0x88c>)
 801304c:	891b      	ldrh	r3, [r3, #8]
 801304e:	3b01      	subs	r3, #1
 8013050:	b29a      	uxth	r2, r3
 8013052:	4b4b      	ldr	r3, [pc, #300]	; (8013180 <tcp_receive+0x88c>)
 8013054:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013056:	4b4a      	ldr	r3, [pc, #296]	; (8013180 <tcp_receive+0x88c>)
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	4a49      	ldr	r2, [pc, #292]	; (8013180 <tcp_receive+0x88c>)
 801305c:	8912      	ldrh	r2, [r2, #8]
 801305e:	4611      	mov	r1, r2
 8013060:	4618      	mov	r0, r3
 8013062:	f7fc f9d1 	bl	800f408 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013066:	4b46      	ldr	r3, [pc, #280]	; (8013180 <tcp_receive+0x88c>)
 8013068:	891c      	ldrh	r4, [r3, #8]
 801306a:	4b45      	ldr	r3, [pc, #276]	; (8013180 <tcp_receive+0x88c>)
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	899b      	ldrh	r3, [r3, #12]
 8013070:	b29b      	uxth	r3, r3
 8013072:	4618      	mov	r0, r3
 8013074:	f7fb f804 	bl	800e080 <lwip_htons>
 8013078:	4603      	mov	r3, r0
 801307a:	b2db      	uxtb	r3, r3
 801307c:	f003 0303 	and.w	r3, r3, #3
 8013080:	2b00      	cmp	r3, #0
 8013082:	d001      	beq.n	8013088 <tcp_receive+0x794>
 8013084:	2301      	movs	r3, #1
 8013086:	e000      	b.n	801308a <tcp_receive+0x796>
 8013088:	2300      	movs	r3, #0
 801308a:	4423      	add	r3, r4
 801308c:	b29a      	uxth	r2, r3
 801308e:	4b3d      	ldr	r3, [pc, #244]	; (8013184 <tcp_receive+0x890>)
 8013090:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013092:	4b3c      	ldr	r3, [pc, #240]	; (8013184 <tcp_receive+0x890>)
 8013094:	881b      	ldrh	r3, [r3, #0]
 8013096:	461a      	mov	r2, r3
 8013098:	4b38      	ldr	r3, [pc, #224]	; (801317c <tcp_receive+0x888>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	441a      	add	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a2:	6879      	ldr	r1, [r7, #4]
 80130a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130a6:	440b      	add	r3, r1
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d006      	beq.n	80130ba <tcp_receive+0x7c6>
 80130ac:	4b36      	ldr	r3, [pc, #216]	; (8013188 <tcp_receive+0x894>)
 80130ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80130b2:	4936      	ldr	r1, [pc, #216]	; (801318c <tcp_receive+0x898>)
 80130b4:	4836      	ldr	r0, [pc, #216]	; (8013190 <tcp_receive+0x89c>)
 80130b6:	f007 f92f 	bl	801a318 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130be:	2b00      	cmp	r3, #0
 80130c0:	f000 80e7 	beq.w	8013292 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80130c4:	4b2e      	ldr	r3, [pc, #184]	; (8013180 <tcp_receive+0x88c>)
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	899b      	ldrh	r3, [r3, #12]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fa ffd7 	bl	800e080 <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	f003 0301 	and.w	r3, r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d010      	beq.n	8013100 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80130de:	e00a      	b.n	80130f6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80130f0:	68f8      	ldr	r0, [r7, #12]
 80130f2:	f7fd fd92 	bl	8010c1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d1f0      	bne.n	80130e0 <tcp_receive+0x7ec>
 80130fe:	e0c8      	b.n	8013292 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013104:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013106:	e052      	b.n	80131ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	899b      	ldrh	r3, [r3, #12]
 801310e:	b29b      	uxth	r3, r3
 8013110:	4618      	mov	r0, r3
 8013112:	f7fa ffb5 	bl	800e080 <lwip_htons>
 8013116:	4603      	mov	r3, r0
 8013118:	b2db      	uxtb	r3, r3
 801311a:	f003 0301 	and.w	r3, r3, #1
 801311e:	2b00      	cmp	r3, #0
 8013120:	d03d      	beq.n	801319e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013122:	4b17      	ldr	r3, [pc, #92]	; (8013180 <tcp_receive+0x88c>)
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	899b      	ldrh	r3, [r3, #12]
 8013128:	b29b      	uxth	r3, r3
 801312a:	4618      	mov	r0, r3
 801312c:	f7fa ffa8 	bl	800e080 <lwip_htons>
 8013130:	4603      	mov	r3, r0
 8013132:	b2db      	uxtb	r3, r3
 8013134:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013138:	2b00      	cmp	r3, #0
 801313a:	d130      	bne.n	801319e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801313c:	4b10      	ldr	r3, [pc, #64]	; (8013180 <tcp_receive+0x88c>)
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	899b      	ldrh	r3, [r3, #12]
 8013142:	b29c      	uxth	r4, r3
 8013144:	2001      	movs	r0, #1
 8013146:	f7fa ff9b 	bl	800e080 <lwip_htons>
 801314a:	4603      	mov	r3, r0
 801314c:	461a      	mov	r2, r3
 801314e:	4b0c      	ldr	r3, [pc, #48]	; (8013180 <tcp_receive+0x88c>)
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	4322      	orrs	r2, r4
 8013154:	b292      	uxth	r2, r2
 8013156:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013158:	4b09      	ldr	r3, [pc, #36]	; (8013180 <tcp_receive+0x88c>)
 801315a:	891c      	ldrh	r4, [r3, #8]
 801315c:	4b08      	ldr	r3, [pc, #32]	; (8013180 <tcp_receive+0x88c>)
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	899b      	ldrh	r3, [r3, #12]
 8013162:	b29b      	uxth	r3, r3
 8013164:	4618      	mov	r0, r3
 8013166:	f7fa ff8b 	bl	800e080 <lwip_htons>
 801316a:	4603      	mov	r3, r0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	f003 0303 	and.w	r3, r3, #3
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00e      	beq.n	8013194 <tcp_receive+0x8a0>
 8013176:	2301      	movs	r3, #1
 8013178:	e00d      	b.n	8013196 <tcp_receive+0x8a2>
 801317a:	bf00      	nop
 801317c:	2000b4b4 	.word	0x2000b4b4
 8013180:	2000b494 	.word	0x2000b494
 8013184:	2000b4be 	.word	0x2000b4be
 8013188:	0801dd84 	.word	0x0801dd84
 801318c:	0801e12c 	.word	0x0801e12c
 8013190:	0801ddd0 	.word	0x0801ddd0
 8013194:	2300      	movs	r3, #0
 8013196:	4423      	add	r3, r4
 8013198:	b29a      	uxth	r2, r3
 801319a:	4b98      	ldr	r3, [pc, #608]	; (80133fc <tcp_receive+0xb08>)
 801319c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80131a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80131a8:	6938      	ldr	r0, [r7, #16]
 80131aa:	f7fd fd36 	bl	8010c1a <tcp_seg_free>
            while (next &&
 80131ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00e      	beq.n	80131d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80131b4:	4b91      	ldr	r3, [pc, #580]	; (80133fc <tcp_receive+0xb08>)
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	461a      	mov	r2, r3
 80131ba:	4b91      	ldr	r3, [pc, #580]	; (8013400 <tcp_receive+0xb0c>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	441a      	add	r2, r3
 80131c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c2:	68db      	ldr	r3, [r3, #12]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80131c8:	8909      	ldrh	r1, [r1, #8]
 80131ca:	440b      	add	r3, r1
 80131cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	da9a      	bge.n	8013108 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80131d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d059      	beq.n	801328c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80131d8:	4b88      	ldr	r3, [pc, #544]	; (80133fc <tcp_receive+0xb08>)
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	461a      	mov	r2, r3
 80131de:	4b88      	ldr	r3, [pc, #544]	; (8013400 <tcp_receive+0xb0c>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	441a      	add	r2, r3
 80131e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	dd4d      	ble.n	801328c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80131f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	b29a      	uxth	r2, r3
 80131f8:	4b81      	ldr	r3, [pc, #516]	; (8013400 <tcp_receive+0xb0c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	1ad3      	subs	r3, r2, r3
 8013200:	b29a      	uxth	r2, r3
 8013202:	4b80      	ldr	r3, [pc, #512]	; (8013404 <tcp_receive+0xb10>)
 8013204:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013206:	4b7f      	ldr	r3, [pc, #508]	; (8013404 <tcp_receive+0xb10>)
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	899b      	ldrh	r3, [r3, #12]
 801320c:	b29b      	uxth	r3, r3
 801320e:	4618      	mov	r0, r3
 8013210:	f7fa ff36 	bl	800e080 <lwip_htons>
 8013214:	4603      	mov	r3, r0
 8013216:	b2db      	uxtb	r3, r3
 8013218:	f003 0302 	and.w	r3, r3, #2
 801321c:	2b00      	cmp	r3, #0
 801321e:	d005      	beq.n	801322c <tcp_receive+0x938>
                inseg.len -= 1;
 8013220:	4b78      	ldr	r3, [pc, #480]	; (8013404 <tcp_receive+0xb10>)
 8013222:	891b      	ldrh	r3, [r3, #8]
 8013224:	3b01      	subs	r3, #1
 8013226:	b29a      	uxth	r2, r3
 8013228:	4b76      	ldr	r3, [pc, #472]	; (8013404 <tcp_receive+0xb10>)
 801322a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801322c:	4b75      	ldr	r3, [pc, #468]	; (8013404 <tcp_receive+0xb10>)
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	4a74      	ldr	r2, [pc, #464]	; (8013404 <tcp_receive+0xb10>)
 8013232:	8912      	ldrh	r2, [r2, #8]
 8013234:	4611      	mov	r1, r2
 8013236:	4618      	mov	r0, r3
 8013238:	f7fc f8e6 	bl	800f408 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801323c:	4b71      	ldr	r3, [pc, #452]	; (8013404 <tcp_receive+0xb10>)
 801323e:	891c      	ldrh	r4, [r3, #8]
 8013240:	4b70      	ldr	r3, [pc, #448]	; (8013404 <tcp_receive+0xb10>)
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	899b      	ldrh	r3, [r3, #12]
 8013246:	b29b      	uxth	r3, r3
 8013248:	4618      	mov	r0, r3
 801324a:	f7fa ff19 	bl	800e080 <lwip_htons>
 801324e:	4603      	mov	r3, r0
 8013250:	b2db      	uxtb	r3, r3
 8013252:	f003 0303 	and.w	r3, r3, #3
 8013256:	2b00      	cmp	r3, #0
 8013258:	d001      	beq.n	801325e <tcp_receive+0x96a>
 801325a:	2301      	movs	r3, #1
 801325c:	e000      	b.n	8013260 <tcp_receive+0x96c>
 801325e:	2300      	movs	r3, #0
 8013260:	4423      	add	r3, r4
 8013262:	b29a      	uxth	r2, r3
 8013264:	4b65      	ldr	r3, [pc, #404]	; (80133fc <tcp_receive+0xb08>)
 8013266:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013268:	4b64      	ldr	r3, [pc, #400]	; (80133fc <tcp_receive+0xb08>)
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	461a      	mov	r2, r3
 801326e:	4b64      	ldr	r3, [pc, #400]	; (8013400 <tcp_receive+0xb0c>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	441a      	add	r2, r3
 8013274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	429a      	cmp	r2, r3
 801327c:	d006      	beq.n	801328c <tcp_receive+0x998>
 801327e:	4b62      	ldr	r3, [pc, #392]	; (8013408 <tcp_receive+0xb14>)
 8013280:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013284:	4961      	ldr	r1, [pc, #388]	; (801340c <tcp_receive+0xb18>)
 8013286:	4862      	ldr	r0, [pc, #392]	; (8013410 <tcp_receive+0xb1c>)
 8013288:	f007 f846 	bl	801a318 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013290:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013292:	4b5a      	ldr	r3, [pc, #360]	; (80133fc <tcp_receive+0xb08>)
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	461a      	mov	r2, r3
 8013298:	4b59      	ldr	r3, [pc, #356]	; (8013400 <tcp_receive+0xb0c>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	441a      	add	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132a6:	4b55      	ldr	r3, [pc, #340]	; (80133fc <tcp_receive+0xb08>)
 80132a8:	881b      	ldrh	r3, [r3, #0]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d206      	bcs.n	80132bc <tcp_receive+0x9c8>
 80132ae:	4b56      	ldr	r3, [pc, #344]	; (8013408 <tcp_receive+0xb14>)
 80132b0:	f240 6207 	movw	r2, #1543	; 0x607
 80132b4:	4957      	ldr	r1, [pc, #348]	; (8013414 <tcp_receive+0xb20>)
 80132b6:	4856      	ldr	r0, [pc, #344]	; (8013410 <tcp_receive+0xb1c>)
 80132b8:	f007 f82e 	bl	801a318 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132c0:	4b4e      	ldr	r3, [pc, #312]	; (80133fc <tcp_receive+0xb08>)
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7fc ffc5 	bl	801025c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80132d2:	4b4c      	ldr	r3, [pc, #304]	; (8013404 <tcp_receive+0xb10>)
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	891b      	ldrh	r3, [r3, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d006      	beq.n	80132ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80132dc:	4b49      	ldr	r3, [pc, #292]	; (8013404 <tcp_receive+0xb10>)
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	4a4d      	ldr	r2, [pc, #308]	; (8013418 <tcp_receive+0xb24>)
 80132e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80132e4:	4b47      	ldr	r3, [pc, #284]	; (8013404 <tcp_receive+0xb10>)
 80132e6:	2200      	movs	r2, #0
 80132e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80132ea:	4b46      	ldr	r3, [pc, #280]	; (8013404 <tcp_receive+0xb10>)
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	899b      	ldrh	r3, [r3, #12]
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fa fec4 	bl	800e080 <lwip_htons>
 80132f8:	4603      	mov	r3, r0
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	f003 0301 	and.w	r3, r3, #1
 8013300:	2b00      	cmp	r3, #0
 8013302:	f000 80b8 	beq.w	8013476 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013306:	4b45      	ldr	r3, [pc, #276]	; (801341c <tcp_receive+0xb28>)
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	f043 0320 	orr.w	r3, r3, #32
 801330e:	b2da      	uxtb	r2, r3
 8013310:	4b42      	ldr	r3, [pc, #264]	; (801341c <tcp_receive+0xb28>)
 8013312:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013314:	e0af      	b.n	8013476 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801331a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	685b      	ldr	r3, [r3, #4]
 8013324:	4a36      	ldr	r2, [pc, #216]	; (8013400 <tcp_receive+0xb0c>)
 8013326:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	891b      	ldrh	r3, [r3, #8]
 801332c:	461c      	mov	r4, r3
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	899b      	ldrh	r3, [r3, #12]
 8013334:	b29b      	uxth	r3, r3
 8013336:	4618      	mov	r0, r3
 8013338:	f7fa fea2 	bl	800e080 <lwip_htons>
 801333c:	4603      	mov	r3, r0
 801333e:	b2db      	uxtb	r3, r3
 8013340:	f003 0303 	and.w	r3, r3, #3
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <tcp_receive+0xa58>
 8013348:	2301      	movs	r3, #1
 801334a:	e000      	b.n	801334e <tcp_receive+0xa5a>
 801334c:	2300      	movs	r3, #0
 801334e:	191a      	adds	r2, r3, r4
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013354:	441a      	add	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801335e:	461c      	mov	r4, r3
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	891b      	ldrh	r3, [r3, #8]
 8013364:	461d      	mov	r5, r3
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	899b      	ldrh	r3, [r3, #12]
 801336c:	b29b      	uxth	r3, r3
 801336e:	4618      	mov	r0, r3
 8013370:	f7fa fe86 	bl	800e080 <lwip_htons>
 8013374:	4603      	mov	r3, r0
 8013376:	b2db      	uxtb	r3, r3
 8013378:	f003 0303 	and.w	r3, r3, #3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d001      	beq.n	8013384 <tcp_receive+0xa90>
 8013380:	2301      	movs	r3, #1
 8013382:	e000      	b.n	8013386 <tcp_receive+0xa92>
 8013384:	2300      	movs	r3, #0
 8013386:	442b      	add	r3, r5
 8013388:	429c      	cmp	r4, r3
 801338a:	d206      	bcs.n	801339a <tcp_receive+0xaa6>
 801338c:	4b1e      	ldr	r3, [pc, #120]	; (8013408 <tcp_receive+0xb14>)
 801338e:	f240 622b 	movw	r2, #1579	; 0x62b
 8013392:	4923      	ldr	r1, [pc, #140]	; (8013420 <tcp_receive+0xb2c>)
 8013394:	481e      	ldr	r0, [pc, #120]	; (8013410 <tcp_receive+0xb1c>)
 8013396:	f006 ffbf 	bl	801a318 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	891b      	ldrh	r3, [r3, #8]
 801339e:	461c      	mov	r4, r3
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	899b      	ldrh	r3, [r3, #12]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fa fe69 	bl	800e080 <lwip_htons>
 80133ae:	4603      	mov	r3, r0
 80133b0:	b2db      	uxtb	r3, r3
 80133b2:	f003 0303 	and.w	r3, r3, #3
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <tcp_receive+0xaca>
 80133ba:	2301      	movs	r3, #1
 80133bc:	e000      	b.n	80133c0 <tcp_receive+0xacc>
 80133be:	2300      	movs	r3, #0
 80133c0:	1919      	adds	r1, r3, r4
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80133c6:	b28b      	uxth	r3, r1
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f7fc ff43 	bl	801025c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	891b      	ldrh	r3, [r3, #8]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d028      	beq.n	8013432 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80133e0:	4b0d      	ldr	r3, [pc, #52]	; (8013418 <tcp_receive+0xb24>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d01d      	beq.n	8013424 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80133e8:	4b0b      	ldr	r3, [pc, #44]	; (8013418 <tcp_receive+0xb24>)
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	4619      	mov	r1, r3
 80133f2:	4610      	mov	r0, r2
 80133f4:	f7fc fa50 	bl	800f898 <pbuf_cat>
 80133f8:	e018      	b.n	801342c <tcp_receive+0xb38>
 80133fa:	bf00      	nop
 80133fc:	2000b4be 	.word	0x2000b4be
 8013400:	2000b4b4 	.word	0x2000b4b4
 8013404:	2000b494 	.word	0x2000b494
 8013408:	0801dd84 	.word	0x0801dd84
 801340c:	0801e164 	.word	0x0801e164
 8013410:	0801ddd0 	.word	0x0801ddd0
 8013414:	0801e1a0 	.word	0x0801e1a0
 8013418:	2000b4c4 	.word	0x2000b4c4
 801341c:	2000b4c1 	.word	0x2000b4c1
 8013420:	0801e1c0 	.word	0x0801e1c0
            } else {
              recv_data = cseg->p;
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	4a70      	ldr	r2, [pc, #448]	; (80135ec <tcp_receive+0xcf8>)
 801342a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	2200      	movs	r2, #0
 8013430:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	899b      	ldrh	r3, [r3, #12]
 8013438:	b29b      	uxth	r3, r3
 801343a:	4618      	mov	r0, r3
 801343c:	f7fa fe20 	bl	800e080 <lwip_htons>
 8013440:	4603      	mov	r3, r0
 8013442:	b2db      	uxtb	r3, r3
 8013444:	f003 0301 	and.w	r3, r3, #1
 8013448:	2b00      	cmp	r3, #0
 801344a:	d00d      	beq.n	8013468 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801344c:	4b68      	ldr	r3, [pc, #416]	; (80135f0 <tcp_receive+0xcfc>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	f043 0320 	orr.w	r3, r3, #32
 8013454:	b2da      	uxtb	r2, r3
 8013456:	4b66      	ldr	r3, [pc, #408]	; (80135f0 <tcp_receive+0xcfc>)
 8013458:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	7d1b      	ldrb	r3, [r3, #20]
 801345e:	2b04      	cmp	r3, #4
 8013460:	d102      	bne.n	8013468 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2207      	movs	r2, #7
 8013466:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013470:	68b8      	ldr	r0, [r7, #8]
 8013472:	f7fd fbd2 	bl	8010c1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801347a:	2b00      	cmp	r3, #0
 801347c:	d008      	beq.n	8013490 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	685a      	ldr	r2, [r3, #4]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801348a:	429a      	cmp	r2, r3
 801348c:	f43f af43 	beq.w	8013316 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	8b5b      	ldrh	r3, [r3, #26]
 8013494:	f003 0301 	and.w	r3, r3, #1
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00e      	beq.n	80134ba <tcp_receive+0xbc6>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	8b5b      	ldrh	r3, [r3, #26]
 80134a0:	f023 0301 	bic.w	r3, r3, #1
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	835a      	strh	r2, [r3, #26]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	8b5b      	ldrh	r3, [r3, #26]
 80134ae:	f043 0302 	orr.w	r3, r3, #2
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80134b8:	e188      	b.n	80137cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	8b5b      	ldrh	r3, [r3, #26]
 80134be:	f043 0301 	orr.w	r3, r3, #1
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80134c8:	e180      	b.n	80137cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d106      	bne.n	80134e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80134d2:	4848      	ldr	r0, [pc, #288]	; (80135f4 <tcp_receive+0xd00>)
 80134d4:	f7fd fbba 	bl	8010c4c <tcp_seg_copy>
 80134d8:	4602      	mov	r2, r0
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	675a      	str	r2, [r3, #116]	; 0x74
 80134de:	e16d      	b.n	80137bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80134e0:	2300      	movs	r3, #0
 80134e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80134ea:	e157      	b.n	801379c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80134ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	685a      	ldr	r2, [r3, #4]
 80134f2:	4b41      	ldr	r3, [pc, #260]	; (80135f8 <tcp_receive+0xd04>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d11d      	bne.n	8013536 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80134fa:	4b3e      	ldr	r3, [pc, #248]	; (80135f4 <tcp_receive+0xd00>)
 80134fc:	891a      	ldrh	r2, [r3, #8]
 80134fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013500:	891b      	ldrh	r3, [r3, #8]
 8013502:	429a      	cmp	r2, r3
 8013504:	f240 814f 	bls.w	80137a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013508:	483a      	ldr	r0, [pc, #232]	; (80135f4 <tcp_receive+0xd00>)
 801350a:	f7fd fb9f 	bl	8010c4c <tcp_seg_copy>
 801350e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	2b00      	cmp	r3, #0
 8013514:	f000 8149 	beq.w	80137aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801351a:	2b00      	cmp	r3, #0
 801351c:	d003      	beq.n	8013526 <tcp_receive+0xc32>
                    prev->next = cseg;
 801351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013520:	697a      	ldr	r2, [r7, #20]
 8013522:	601a      	str	r2, [r3, #0]
 8013524:	e002      	b.n	801352c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	697a      	ldr	r2, [r7, #20]
 801352a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801352c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801352e:	6978      	ldr	r0, [r7, #20]
 8013530:	f7ff f8dc 	bl	80126ec <tcp_oos_insert_segment>
                }
                break;
 8013534:	e139      	b.n	80137aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013538:	2b00      	cmp	r3, #0
 801353a:	d117      	bne.n	801356c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801353c:	4b2e      	ldr	r3, [pc, #184]	; (80135f8 <tcp_receive+0xd04>)
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	2b00      	cmp	r3, #0
 801354a:	da57      	bge.n	80135fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801354c:	4829      	ldr	r0, [pc, #164]	; (80135f4 <tcp_receive+0xd00>)
 801354e:	f7fd fb7d 	bl	8010c4c <tcp_seg_copy>
 8013552:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	2b00      	cmp	r3, #0
 8013558:	f000 8129 	beq.w	80137ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	69ba      	ldr	r2, [r7, #24]
 8013560:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013564:	69b8      	ldr	r0, [r7, #24]
 8013566:	f7ff f8c1 	bl	80126ec <tcp_oos_insert_segment>
                  }
                  break;
 801356a:	e120      	b.n	80137ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801356c:	4b22      	ldr	r3, [pc, #136]	; (80135f8 <tcp_receive+0xd04>)
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	3b01      	subs	r3, #1
 801357a:	2b00      	cmp	r3, #0
 801357c:	db3e      	blt.n	80135fc <tcp_receive+0xd08>
 801357e:	4b1e      	ldr	r3, [pc, #120]	; (80135f8 <tcp_receive+0xd04>)
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013584:	68db      	ldr	r3, [r3, #12]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	3301      	adds	r3, #1
 801358c:	2b00      	cmp	r3, #0
 801358e:	dc35      	bgt.n	80135fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013590:	4818      	ldr	r0, [pc, #96]	; (80135f4 <tcp_receive+0xd00>)
 8013592:	f7fd fb5b 	bl	8010c4c <tcp_seg_copy>
 8013596:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	2b00      	cmp	r3, #0
 801359c:	f000 8109 	beq.w	80137b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80135a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135a8:	8912      	ldrh	r2, [r2, #8]
 80135aa:	441a      	add	r2, r3
 80135ac:	4b12      	ldr	r3, [pc, #72]	; (80135f8 <tcp_receive+0xd04>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	dd12      	ble.n	80135dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80135b6:	4b10      	ldr	r3, [pc, #64]	; (80135f8 <tcp_receive+0xd04>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80135cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d2:	891b      	ldrh	r3, [r3, #8]
 80135d4:	4619      	mov	r1, r3
 80135d6:	4610      	mov	r0, r2
 80135d8:	f7fb ff16 	bl	800f408 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80135dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135de:	69fa      	ldr	r2, [r7, #28]
 80135e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80135e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80135e4:	69f8      	ldr	r0, [r7, #28]
 80135e6:	f7ff f881 	bl	80126ec <tcp_oos_insert_segment>
                  }
                  break;
 80135ea:	e0e2      	b.n	80137b2 <tcp_receive+0xebe>
 80135ec:	2000b4c4 	.word	0x2000b4c4
 80135f0:	2000b4c1 	.word	0x2000b4c1
 80135f4:	2000b494 	.word	0x2000b494
 80135f8:	2000b4b4 	.word	0x2000b4b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80135fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	f040 80c6 	bne.w	8013796 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801360a:	4b80      	ldr	r3, [pc, #512]	; (801380c <tcp_receive+0xf18>)
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013616:	2b00      	cmp	r3, #0
 8013618:	f340 80bd 	ble.w	8013796 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	899b      	ldrh	r3, [r3, #12]
 8013622:	b29b      	uxth	r3, r3
 8013624:	4618      	mov	r0, r3
 8013626:	f7fa fd2b 	bl	800e080 <lwip_htons>
 801362a:	4603      	mov	r3, r0
 801362c:	b2db      	uxtb	r3, r3
 801362e:	f003 0301 	and.w	r3, r3, #1
 8013632:	2b00      	cmp	r3, #0
 8013634:	f040 80bf 	bne.w	80137b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013638:	4875      	ldr	r0, [pc, #468]	; (8013810 <tcp_receive+0xf1c>)
 801363a:	f7fd fb07 	bl	8010c4c <tcp_seg_copy>
 801363e:	4602      	mov	r2, r0
 8013640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013642:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	f000 80b6 	beq.w	80137ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013656:	8912      	ldrh	r2, [r2, #8]
 8013658:	441a      	add	r2, r3
 801365a:	4b6c      	ldr	r3, [pc, #432]	; (801380c <tcp_receive+0xf18>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	2b00      	cmp	r3, #0
 8013662:	dd12      	ble.n	801368a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013664:	4b69      	ldr	r3, [pc, #420]	; (801380c <tcp_receive+0xf18>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	b29a      	uxth	r2, r3
 801366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366c:	68db      	ldr	r3, [r3, #12]
 801366e:	685b      	ldr	r3, [r3, #4]
 8013670:	b29b      	uxth	r3, r3
 8013672:	1ad3      	subs	r3, r2, r3
 8013674:	b29a      	uxth	r2, r3
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801367c:	685a      	ldr	r2, [r3, #4]
 801367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013680:	891b      	ldrh	r3, [r3, #8]
 8013682:	4619      	mov	r1, r3
 8013684:	4610      	mov	r0, r2
 8013686:	f7fb febf 	bl	800f408 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801368a:	4b62      	ldr	r3, [pc, #392]	; (8013814 <tcp_receive+0xf20>)
 801368c:	881b      	ldrh	r3, [r3, #0]
 801368e:	461a      	mov	r2, r3
 8013690:	4b5e      	ldr	r3, [pc, #376]	; (801380c <tcp_receive+0xf18>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	441a      	add	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801369a:	6879      	ldr	r1, [r7, #4]
 801369c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801369e:	440b      	add	r3, r1
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f340 8089 	ble.w	80137ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80136a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	899b      	ldrh	r3, [r3, #12]
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fa fce4 	bl	800e080 <lwip_htons>
 80136b8:	4603      	mov	r3, r0
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	f003 0301 	and.w	r3, r3, #1
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d022      	beq.n	801370a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80136c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	899b      	ldrh	r3, [r3, #12]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	b21b      	sxth	r3, r3
 80136d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80136d4:	b21c      	sxth	r4, r3
 80136d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	899b      	ldrh	r3, [r3, #12]
 80136de:	b29b      	uxth	r3, r3
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fa fccd 	bl	800e080 <lwip_htons>
 80136e6:	4603      	mov	r3, r0
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7fa fcc4 	bl	800e080 <lwip_htons>
 80136f8:	4603      	mov	r3, r0
 80136fa:	b21b      	sxth	r3, r3
 80136fc:	4323      	orrs	r3, r4
 80136fe:	b21a      	sxth	r2, r3
 8013700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	b292      	uxth	r2, r2
 8013708:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370e:	b29a      	uxth	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013714:	4413      	add	r3, r2
 8013716:	b299      	uxth	r1, r3
 8013718:	4b3c      	ldr	r3, [pc, #240]	; (801380c <tcp_receive+0xf18>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	b29a      	uxth	r2, r3
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	1a8a      	subs	r2, r1, r2
 8013724:	b292      	uxth	r2, r2
 8013726:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	685a      	ldr	r2, [r3, #4]
 801372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	891b      	ldrh	r3, [r3, #8]
 8013734:	4619      	mov	r1, r3
 8013736:	4610      	mov	r0, r2
 8013738:	f7fb fe66 	bl	800f408 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	891c      	ldrh	r4, [r3, #8]
 8013742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	899b      	ldrh	r3, [r3, #12]
 801374a:	b29b      	uxth	r3, r3
 801374c:	4618      	mov	r0, r3
 801374e:	f7fa fc97 	bl	800e080 <lwip_htons>
 8013752:	4603      	mov	r3, r0
 8013754:	b2db      	uxtb	r3, r3
 8013756:	f003 0303 	and.w	r3, r3, #3
 801375a:	2b00      	cmp	r3, #0
 801375c:	d001      	beq.n	8013762 <tcp_receive+0xe6e>
 801375e:	2301      	movs	r3, #1
 8013760:	e000      	b.n	8013764 <tcp_receive+0xe70>
 8013762:	2300      	movs	r3, #0
 8013764:	4423      	add	r3, r4
 8013766:	b29a      	uxth	r2, r3
 8013768:	4b2a      	ldr	r3, [pc, #168]	; (8013814 <tcp_receive+0xf20>)
 801376a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801376c:	4b29      	ldr	r3, [pc, #164]	; (8013814 <tcp_receive+0xf20>)
 801376e:	881b      	ldrh	r3, [r3, #0]
 8013770:	461a      	mov	r2, r3
 8013772:	4b26      	ldr	r3, [pc, #152]	; (801380c <tcp_receive+0xf18>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	441a      	add	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013780:	440b      	add	r3, r1
 8013782:	429a      	cmp	r2, r3
 8013784:	d019      	beq.n	80137ba <tcp_receive+0xec6>
 8013786:	4b24      	ldr	r3, [pc, #144]	; (8013818 <tcp_receive+0xf24>)
 8013788:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801378c:	4923      	ldr	r1, [pc, #140]	; (801381c <tcp_receive+0xf28>)
 801378e:	4824      	ldr	r0, [pc, #144]	; (8013820 <tcp_receive+0xf2c>)
 8013790:	f006 fdc2 	bl	801a318 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013794:	e011      	b.n	80137ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	63bb      	str	r3, [r7, #56]	; 0x38
 801379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f47f aea4 	bne.w	80134ec <tcp_receive+0xbf8>
 80137a4:	e00a      	b.n	80137bc <tcp_receive+0xec8>
                break;
 80137a6:	bf00      	nop
 80137a8:	e008      	b.n	80137bc <tcp_receive+0xec8>
                break;
 80137aa:	bf00      	nop
 80137ac:	e006      	b.n	80137bc <tcp_receive+0xec8>
                  break;
 80137ae:	bf00      	nop
 80137b0:	e004      	b.n	80137bc <tcp_receive+0xec8>
                  break;
 80137b2:	bf00      	nop
 80137b4:	e002      	b.n	80137bc <tcp_receive+0xec8>
                  break;
 80137b6:	bf00      	nop
 80137b8:	e000      	b.n	80137bc <tcp_receive+0xec8>
                break;
 80137ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f001 fa33 	bl	8014c28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80137c2:	e003      	b.n	80137cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f001 fa2f 	bl	8014c28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80137ca:	e01a      	b.n	8013802 <tcp_receive+0xf0e>
 80137cc:	e019      	b.n	8013802 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80137ce:	4b0f      	ldr	r3, [pc, #60]	; (801380c <tcp_receive+0xf18>)
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	2b00      	cmp	r3, #0
 80137da:	db0a      	blt.n	80137f2 <tcp_receive+0xefe>
 80137dc:	4b0b      	ldr	r3, [pc, #44]	; (801380c <tcp_receive+0xf18>)
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e4:	6879      	ldr	r1, [r7, #4]
 80137e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80137e8:	440b      	add	r3, r1
 80137ea:	1ad3      	subs	r3, r2, r3
 80137ec:	3301      	adds	r3, #1
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd07      	ble.n	8013802 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	8b5b      	ldrh	r3, [r3, #26]
 80137f6:	f043 0302 	orr.w	r3, r3, #2
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013800:	e7ff      	b.n	8013802 <tcp_receive+0xf0e>
 8013802:	bf00      	nop
 8013804:	3750      	adds	r7, #80	; 0x50
 8013806:	46bd      	mov	sp, r7
 8013808:	bdb0      	pop	{r4, r5, r7, pc}
 801380a:	bf00      	nop
 801380c:	2000b4b4 	.word	0x2000b4b4
 8013810:	2000b494 	.word	0x2000b494
 8013814:	2000b4be 	.word	0x2000b4be
 8013818:	0801dd84 	.word	0x0801dd84
 801381c:	0801e12c 	.word	0x0801e12c
 8013820:	0801ddd0 	.word	0x0801ddd0

08013824 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013824:	b480      	push	{r7}
 8013826:	b083      	sub	sp, #12
 8013828:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801382a:	4b15      	ldr	r3, [pc, #84]	; (8013880 <tcp_get_next_optbyte+0x5c>)
 801382c:	881b      	ldrh	r3, [r3, #0]
 801382e:	1c5a      	adds	r2, r3, #1
 8013830:	b291      	uxth	r1, r2
 8013832:	4a13      	ldr	r2, [pc, #76]	; (8013880 <tcp_get_next_optbyte+0x5c>)
 8013834:	8011      	strh	r1, [r2, #0]
 8013836:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013838:	4b12      	ldr	r3, [pc, #72]	; (8013884 <tcp_get_next_optbyte+0x60>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <tcp_get_next_optbyte+0x26>
 8013840:	4b11      	ldr	r3, [pc, #68]	; (8013888 <tcp_get_next_optbyte+0x64>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	88fa      	ldrh	r2, [r7, #6]
 8013846:	429a      	cmp	r2, r3
 8013848:	d208      	bcs.n	801385c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801384a:	4b10      	ldr	r3, [pc, #64]	; (801388c <tcp_get_next_optbyte+0x68>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	3314      	adds	r3, #20
 8013850:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013852:	88fb      	ldrh	r3, [r7, #6]
 8013854:	683a      	ldr	r2, [r7, #0]
 8013856:	4413      	add	r3, r2
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	e00b      	b.n	8013874 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801385c:	88fb      	ldrh	r3, [r7, #6]
 801385e:	b2da      	uxtb	r2, r3
 8013860:	4b09      	ldr	r3, [pc, #36]	; (8013888 <tcp_get_next_optbyte+0x64>)
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	b2db      	uxtb	r3, r3
 8013866:	1ad3      	subs	r3, r2, r3
 8013868:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801386a:	4b06      	ldr	r3, [pc, #24]	; (8013884 <tcp_get_next_optbyte+0x60>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	797b      	ldrb	r3, [r7, #5]
 8013870:	4413      	add	r3, r2
 8013872:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013874:	4618      	mov	r0, r3
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr
 8013880:	2000b4b0 	.word	0x2000b4b0
 8013884:	2000b4ac 	.word	0x2000b4ac
 8013888:	2000b4aa 	.word	0x2000b4aa
 801388c:	2000b4a4 	.word	0x2000b4a4

08013890 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b084      	sub	sp, #16
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <tcp_parseopt+0x1c>
 801389e:	4b32      	ldr	r3, [pc, #200]	; (8013968 <tcp_parseopt+0xd8>)
 80138a0:	f240 727d 	movw	r2, #1917	; 0x77d
 80138a4:	4931      	ldr	r1, [pc, #196]	; (801396c <tcp_parseopt+0xdc>)
 80138a6:	4832      	ldr	r0, [pc, #200]	; (8013970 <tcp_parseopt+0xe0>)
 80138a8:	f006 fd36 	bl	801a318 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80138ac:	4b31      	ldr	r3, [pc, #196]	; (8013974 <tcp_parseopt+0xe4>)
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d055      	beq.n	8013960 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138b4:	4b30      	ldr	r3, [pc, #192]	; (8013978 <tcp_parseopt+0xe8>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	801a      	strh	r2, [r3, #0]
 80138ba:	e045      	b.n	8013948 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80138bc:	f7ff ffb2 	bl	8013824 <tcp_get_next_optbyte>
 80138c0:	4603      	mov	r3, r0
 80138c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80138c4:	7bfb      	ldrb	r3, [r7, #15]
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d006      	beq.n	80138d8 <tcp_parseopt+0x48>
 80138ca:	2b02      	cmp	r3, #2
 80138cc:	dc2b      	bgt.n	8013926 <tcp_parseopt+0x96>
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d041      	beq.n	8013956 <tcp_parseopt+0xc6>
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	d127      	bne.n	8013926 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80138d6:	e037      	b.n	8013948 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80138d8:	f7ff ffa4 	bl	8013824 <tcp_get_next_optbyte>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b04      	cmp	r3, #4
 80138e0:	d13b      	bne.n	801395a <tcp_parseopt+0xca>
 80138e2:	4b25      	ldr	r3, [pc, #148]	; (8013978 <tcp_parseopt+0xe8>)
 80138e4:	881b      	ldrh	r3, [r3, #0]
 80138e6:	3301      	adds	r3, #1
 80138e8:	4a22      	ldr	r2, [pc, #136]	; (8013974 <tcp_parseopt+0xe4>)
 80138ea:	8812      	ldrh	r2, [r2, #0]
 80138ec:	4293      	cmp	r3, r2
 80138ee:	da34      	bge.n	801395a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80138f0:	f7ff ff98 	bl	8013824 <tcp_get_next_optbyte>
 80138f4:	4603      	mov	r3, r0
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	021b      	lsls	r3, r3, #8
 80138fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80138fc:	f7ff ff92 	bl	8013824 <tcp_get_next_optbyte>
 8013900:	4603      	mov	r3, r0
 8013902:	b29a      	uxth	r2, r3
 8013904:	89bb      	ldrh	r3, [r7, #12]
 8013906:	4313      	orrs	r3, r2
 8013908:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801390a:	89bb      	ldrh	r3, [r7, #12]
 801390c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013910:	d804      	bhi.n	801391c <tcp_parseopt+0x8c>
 8013912:	89bb      	ldrh	r3, [r7, #12]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <tcp_parseopt+0x8c>
 8013918:	89ba      	ldrh	r2, [r7, #12]
 801391a:	e001      	b.n	8013920 <tcp_parseopt+0x90>
 801391c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013924:	e010      	b.n	8013948 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013926:	f7ff ff7d 	bl	8013824 <tcp_get_next_optbyte>
 801392a:	4603      	mov	r3, r0
 801392c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801392e:	7afb      	ldrb	r3, [r7, #11]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d914      	bls.n	801395e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013934:	7afb      	ldrb	r3, [r7, #11]
 8013936:	b29a      	uxth	r2, r3
 8013938:	4b0f      	ldr	r3, [pc, #60]	; (8013978 <tcp_parseopt+0xe8>)
 801393a:	881b      	ldrh	r3, [r3, #0]
 801393c:	4413      	add	r3, r2
 801393e:	b29b      	uxth	r3, r3
 8013940:	3b02      	subs	r3, #2
 8013942:	b29a      	uxth	r2, r3
 8013944:	4b0c      	ldr	r3, [pc, #48]	; (8013978 <tcp_parseopt+0xe8>)
 8013946:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013948:	4b0b      	ldr	r3, [pc, #44]	; (8013978 <tcp_parseopt+0xe8>)
 801394a:	881a      	ldrh	r2, [r3, #0]
 801394c:	4b09      	ldr	r3, [pc, #36]	; (8013974 <tcp_parseopt+0xe4>)
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d3b3      	bcc.n	80138bc <tcp_parseopt+0x2c>
 8013954:	e004      	b.n	8013960 <tcp_parseopt+0xd0>
          return;
 8013956:	bf00      	nop
 8013958:	e002      	b.n	8013960 <tcp_parseopt+0xd0>
            return;
 801395a:	bf00      	nop
 801395c:	e000      	b.n	8013960 <tcp_parseopt+0xd0>
            return;
 801395e:	bf00      	nop
      }
    }
  }
}
 8013960:	3710      	adds	r7, #16
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	0801dd84 	.word	0x0801dd84
 801396c:	0801e1e8 	.word	0x0801e1e8
 8013970:	0801ddd0 	.word	0x0801ddd0
 8013974:	2000b4a8 	.word	0x2000b4a8
 8013978:	2000b4b0 	.word	0x2000b4b0

0801397c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801397c:	b480      	push	{r7}
 801397e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013980:	4b05      	ldr	r3, [pc, #20]	; (8013998 <tcp_trigger_input_pcb_close+0x1c>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	f043 0310 	orr.w	r3, r3, #16
 8013988:	b2da      	uxtb	r2, r3
 801398a:	4b03      	ldr	r3, [pc, #12]	; (8013998 <tcp_trigger_input_pcb_close+0x1c>)
 801398c:	701a      	strb	r2, [r3, #0]
}
 801398e:	bf00      	nop
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	2000b4c1 	.word	0x2000b4c1

0801399c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d00a      	beq.n	80139c4 <tcp_route+0x28>
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	7a1b      	ldrb	r3, [r3, #8]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d006      	beq.n	80139c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	7a1b      	ldrb	r3, [r3, #8]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fb fb6a 	bl	800f094 <netif_get_by_index>
 80139c0:	4603      	mov	r3, r0
 80139c2:	e003      	b.n	80139cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f004 ffd5 	bl	8018974 <ip4_route>
 80139ca:	4603      	mov	r3, r0
  }
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3710      	adds	r7, #16
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80139d4:	b590      	push	{r4, r7, lr}
 80139d6:	b087      	sub	sp, #28
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	603b      	str	r3, [r7, #0]
 80139e0:	4613      	mov	r3, r2
 80139e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d105      	bne.n	80139f6 <tcp_create_segment+0x22>
 80139ea:	4b44      	ldr	r3, [pc, #272]	; (8013afc <tcp_create_segment+0x128>)
 80139ec:	22a3      	movs	r2, #163	; 0xa3
 80139ee:	4944      	ldr	r1, [pc, #272]	; (8013b00 <tcp_create_segment+0x12c>)
 80139f0:	4844      	ldr	r0, [pc, #272]	; (8013b04 <tcp_create_segment+0x130>)
 80139f2:	f006 fc91 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d105      	bne.n	8013a08 <tcp_create_segment+0x34>
 80139fc:	4b3f      	ldr	r3, [pc, #252]	; (8013afc <tcp_create_segment+0x128>)
 80139fe:	22a4      	movs	r2, #164	; 0xa4
 8013a00:	4941      	ldr	r1, [pc, #260]	; (8013b08 <tcp_create_segment+0x134>)
 8013a02:	4840      	ldr	r0, [pc, #256]	; (8013b04 <tcp_create_segment+0x130>)
 8013a04:	f006 fc88 	bl	801a318 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	f003 0304 	and.w	r3, r3, #4
 8013a14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013a16:	2003      	movs	r0, #3
 8013a18:	f7fa ffaa 	bl	800e970 <memp_malloc>
 8013a1c:	6138      	str	r0, [r7, #16]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d104      	bne.n	8013a2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013a24:	68b8      	ldr	r0, [r7, #8]
 8013a26:	f7fb fe75 	bl	800f714 <pbuf_free>
    return NULL;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e061      	b.n	8013af2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	891a      	ldrh	r2, [r3, #8]
 8013a46:	7dfb      	ldrb	r3, [r7, #23]
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d205      	bcs.n	8013a5a <tcp_create_segment+0x86>
 8013a4e:	4b2b      	ldr	r3, [pc, #172]	; (8013afc <tcp_create_segment+0x128>)
 8013a50:	22b0      	movs	r2, #176	; 0xb0
 8013a52:	492e      	ldr	r1, [pc, #184]	; (8013b0c <tcp_create_segment+0x138>)
 8013a54:	482b      	ldr	r0, [pc, #172]	; (8013b04 <tcp_create_segment+0x130>)
 8013a56:	f006 fc5f 	bl	801a318 <iprintf>
  seg->len = p->tot_len - optlen;
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	891a      	ldrh	r2, [r3, #8]
 8013a5e:	7dfb      	ldrb	r3, [r7, #23]
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013a6a:	2114      	movs	r1, #20
 8013a6c:	68b8      	ldr	r0, [r7, #8]
 8013a6e:	f7fb fdbb 	bl	800f5e8 <pbuf_add_header>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d004      	beq.n	8013a82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013a78:	6938      	ldr	r0, [r7, #16]
 8013a7a:	f7fd f8ce 	bl	8010c1a <tcp_seg_free>
    return NULL;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	e037      	b.n	8013af2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	685a      	ldr	r2, [r3, #4]
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	8ada      	ldrh	r2, [r3, #22]
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	68dc      	ldr	r4, [r3, #12]
 8013a94:	4610      	mov	r0, r2
 8013a96:	f7fa faf3 	bl	800e080 <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	8b1a      	ldrh	r2, [r3, #24]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	68dc      	ldr	r4, [r3, #12]
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	f7fa faea 	bl	800e080 <lwip_htons>
 8013aac:	4603      	mov	r3, r0
 8013aae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	68dc      	ldr	r4, [r3, #12]
 8013ab4:	6838      	ldr	r0, [r7, #0]
 8013ab6:	f7fa faf8 	bl	800e0aa <lwip_htonl>
 8013aba:	4603      	mov	r3, r0
 8013abc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013abe:	7dfb      	ldrb	r3, [r7, #23]
 8013ac0:	089b      	lsrs	r3, r3, #2
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	3305      	adds	r3, #5
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	031b      	lsls	r3, r3, #12
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	79fb      	ldrb	r3, [r7, #7]
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	68dc      	ldr	r4, [r3, #12]
 8013ada:	4610      	mov	r0, r2
 8013adc:	f7fa fad0 	bl	800e080 <lwip_htons>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	749a      	strb	r2, [r3, #18]
 8013aec:	2200      	movs	r2, #0
 8013aee:	74da      	strb	r2, [r3, #19]
  return seg;
 8013af0:	693b      	ldr	r3, [r7, #16]
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	371c      	adds	r7, #28
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd90      	pop	{r4, r7, pc}
 8013afa:	bf00      	nop
 8013afc:	0801e204 	.word	0x0801e204
 8013b00:	0801e238 	.word	0x0801e238
 8013b04:	0801e258 	.word	0x0801e258
 8013b08:	0801e280 	.word	0x0801e280
 8013b0c:	0801e2a4 	.word	0x0801e2a4

08013b10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013b10:	b590      	push	{r4, r7, lr}
 8013b12:	b08b      	sub	sp, #44	; 0x2c
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	460b      	mov	r3, r1
 8013b1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	61fb      	str	r3, [r7, #28]
 8013b20:	2300      	movs	r3, #0
 8013b22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013b24:	2300      	movs	r3, #0
 8013b26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d106      	bne.n	8013b3c <tcp_split_unsent_seg+0x2c>
 8013b2e:	4b95      	ldr	r3, [pc, #596]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b30:	f240 324b 	movw	r2, #843	; 0x34b
 8013b34:	4994      	ldr	r1, [pc, #592]	; (8013d88 <tcp_split_unsent_seg+0x278>)
 8013b36:	4895      	ldr	r0, [pc, #596]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b38:	f006 fbee 	bl	801a318 <iprintf>

  useg = pcb->unsent;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b4c:	e116      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013b4e:	887b      	ldrh	r3, [r7, #2]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d109      	bne.n	8013b68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013b54:	4b8b      	ldr	r3, [pc, #556]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b56:	f240 3253 	movw	r2, #851	; 0x353
 8013b5a:	498d      	ldr	r1, [pc, #564]	; (8013d90 <tcp_split_unsent_seg+0x280>)
 8013b5c:	488b      	ldr	r0, [pc, #556]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b5e:	f006 fbdb 	bl	801a318 <iprintf>
    return ERR_VAL;
 8013b62:	f06f 0305 	mvn.w	r3, #5
 8013b66:	e109      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	891b      	ldrh	r3, [r3, #8]
 8013b6c:	887a      	ldrh	r2, [r7, #2]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d301      	bcc.n	8013b76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	e102      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b7a:	887a      	ldrh	r2, [r7, #2]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d906      	bls.n	8013b8e <tcp_split_unsent_seg+0x7e>
 8013b80:	4b80      	ldr	r3, [pc, #512]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b82:	f240 325b 	movw	r2, #859	; 0x35b
 8013b86:	4983      	ldr	r1, [pc, #524]	; (8013d94 <tcp_split_unsent_seg+0x284>)
 8013b88:	4880      	ldr	r0, [pc, #512]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b8a:	f006 fbc5 	bl	801a318 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	891b      	ldrh	r3, [r3, #8]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d106      	bne.n	8013ba4 <tcp_split_unsent_seg+0x94>
 8013b96:	4b7b      	ldr	r3, [pc, #492]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b9c:	497e      	ldr	r1, [pc, #504]	; (8013d98 <tcp_split_unsent_seg+0x288>)
 8013b9e:	487b      	ldr	r0, [pc, #492]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013ba0:	f006 fbba 	bl	801a318 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	7a9b      	ldrb	r3, [r3, #10]
 8013ba8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013baa:	7bfb      	ldrb	r3, [r7, #15]
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	f003 0304 	and.w	r3, r3, #4
 8013bb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	891a      	ldrh	r2, [r3, #8]
 8013bba:	887b      	ldrh	r3, [r7, #2]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013bc0:	7bbb      	ldrb	r3, [r7, #14]
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	89bb      	ldrh	r3, [r7, #12]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bce:	4619      	mov	r1, r3
 8013bd0:	2036      	movs	r0, #54	; 0x36
 8013bd2:	f7fb fabb 	bl	800f14c <pbuf_alloc>
 8013bd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f000 80b7 	beq.w	8013d4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	891a      	ldrh	r2, [r3, #8]
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	891b      	ldrh	r3, [r3, #8]
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	887b      	ldrh	r3, [r7, #2]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	6858      	ldr	r0, [r3, #4]
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	7bbb      	ldrb	r3, [r7, #14]
 8013bfe:	18d1      	adds	r1, r2, r3
 8013c00:	897b      	ldrh	r3, [r7, #10]
 8013c02:	89ba      	ldrh	r2, [r7, #12]
 8013c04:	f7fb ff80 	bl	800fb08 <pbuf_copy_partial>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	89bb      	ldrh	r3, [r7, #12]
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	f040 809f 	bne.w	8013d52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	899b      	ldrh	r3, [r3, #12]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fa fa2f 	bl	800e080 <lwip_htons>
 8013c22:	4603      	mov	r3, r0
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013c30:	7efb      	ldrb	r3, [r7, #27]
 8013c32:	f003 0308 	and.w	r3, r3, #8
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d007      	beq.n	8013c4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013c3a:	7efb      	ldrb	r3, [r7, #27]
 8013c3c:	f023 0308 	bic.w	r3, r3, #8
 8013c40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013c42:	7ebb      	ldrb	r3, [r7, #26]
 8013c44:	f043 0308 	orr.w	r3, r3, #8
 8013c48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013c4a:	7efb      	ldrb	r3, [r7, #27]
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d007      	beq.n	8013c64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013c54:	7efb      	ldrb	r3, [r7, #27]
 8013c56:	f023 0301 	bic.w	r3, r3, #1
 8013c5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013c5c:	7ebb      	ldrb	r3, [r7, #26]
 8013c5e:	f043 0301 	orr.w	r3, r3, #1
 8013c62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fa fa1d 	bl	800e0aa <lwip_htonl>
 8013c70:	4602      	mov	r2, r0
 8013c72:	887b      	ldrh	r3, [r7, #2]
 8013c74:	18d1      	adds	r1, r2, r3
 8013c76:	7eba      	ldrb	r2, [r7, #26]
 8013c78:	7bfb      	ldrb	r3, [r7, #15]
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	6939      	ldr	r1, [r7, #16]
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f7ff fea7 	bl	80139d4 <tcp_create_segment>
 8013c86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d063      	beq.n	8013d56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fb fdc6 	bl	800f824 <pbuf_clen>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ca2:	1a9b      	subs	r3, r3, r2
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	6858      	ldr	r0, [r3, #4]
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	891a      	ldrh	r2, [r3, #8]
 8013cb6:	89bb      	ldrh	r3, [r7, #12]
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	f7fb fba3 	bl	800f408 <pbuf_realloc>
  useg->len -= remainder;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	891a      	ldrh	r2, [r3, #8]
 8013cc6:	89bb      	ldrh	r3, [r7, #12]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29a      	uxth	r2, r3
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	899b      	ldrh	r3, [r3, #12]
 8013cd6:	b29c      	uxth	r4, r3
 8013cd8:	7efb      	ldrb	r3, [r7, #27]
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fa f9cf 	bl	800e080 <lwip_htons>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	4322      	orrs	r2, r4
 8013cec:	b292      	uxth	r2, r2
 8013cee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fb fd95 	bl	800f824 <pbuf_clen>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d04:	4413      	add	r3, r2
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fb fd86 	bl	800f824 <pbuf_clen>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d22:	4413      	add	r3, r2
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	69fa      	ldr	r2, [r7, #28]
 8013d38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d103      	bne.n	8013d4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	e016      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013d4e:	bf00      	nop
 8013d50:	e002      	b.n	8013d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d52:	bf00      	nop
 8013d54:	e000      	b.n	8013d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d006      	beq.n	8013d6c <tcp_split_unsent_seg+0x25c>
 8013d5e:	4b09      	ldr	r3, [pc, #36]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013d60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d64:	490d      	ldr	r1, [pc, #52]	; (8013d9c <tcp_split_unsent_seg+0x28c>)
 8013d66:	4809      	ldr	r0, [pc, #36]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013d68:	f006 fad6 	bl	801a318 <iprintf>
  if (p != NULL) {
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d002      	beq.n	8013d78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013d72:	6938      	ldr	r0, [r7, #16]
 8013d74:	f7fb fcce 	bl	800f714 <pbuf_free>
  }

  return ERR_MEM;
 8013d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3724      	adds	r7, #36	; 0x24
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd90      	pop	{r4, r7, pc}
 8013d84:	0801e204 	.word	0x0801e204
 8013d88:	0801e598 	.word	0x0801e598
 8013d8c:	0801e258 	.word	0x0801e258
 8013d90:	0801e5bc 	.word	0x0801e5bc
 8013d94:	0801e5e0 	.word	0x0801e5e0
 8013d98:	0801e5f0 	.word	0x0801e5f0
 8013d9c:	0801e600 	.word	0x0801e600

08013da0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b085      	sub	sp, #20
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <tcp_send_fin+0x1c>
 8013dae:	4b21      	ldr	r3, [pc, #132]	; (8013e34 <tcp_send_fin+0x94>)
 8013db0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013db4:	4920      	ldr	r1, [pc, #128]	; (8013e38 <tcp_send_fin+0x98>)
 8013db6:	4821      	ldr	r0, [pc, #132]	; (8013e3c <tcp_send_fin+0x9c>)
 8013db8:	f006 faae 	bl	801a318 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d02e      	beq.n	8013e22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dc8:	60fb      	str	r3, [r7, #12]
 8013dca:	e002      	b.n	8013dd2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1f8      	bne.n	8013dcc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	899b      	ldrh	r3, [r3, #12]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fa f94c 	bl	800e080 <lwip_htons>
 8013de8:	4603      	mov	r3, r0
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	f003 0307 	and.w	r3, r3, #7
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d116      	bne.n	8013e22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	899b      	ldrh	r3, [r3, #12]
 8013dfa:	b29c      	uxth	r4, r3
 8013dfc:	2001      	movs	r0, #1
 8013dfe:	f7fa f93f 	bl	800e080 <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	4322      	orrs	r2, r4
 8013e0c:	b292      	uxth	r2, r2
 8013e0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	8b5b      	ldrh	r3, [r3, #26]
 8013e14:	f043 0320 	orr.w	r3, r3, #32
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e004      	b.n	8013e2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013e22:	2101      	movs	r1, #1
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 f80b 	bl	8013e40 <tcp_enqueue_flags>
 8013e2a:	4603      	mov	r3, r0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd90      	pop	{r4, r7, pc}
 8013e34:	0801e204 	.word	0x0801e204
 8013e38:	0801e60c 	.word	0x0801e60c
 8013e3c:	0801e258 	.word	0x0801e258

08013e40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b08a      	sub	sp, #40	; 0x28
 8013e44:	af02      	add	r7, sp, #8
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e54:	78fb      	ldrb	r3, [r7, #3]
 8013e56:	f003 0303 	and.w	r3, r3, #3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_enqueue_flags+0x2c>
 8013e5e:	4b67      	ldr	r3, [pc, #412]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013e60:	f240 4211 	movw	r2, #1041	; 0x411
 8013e64:	4966      	ldr	r1, [pc, #408]	; (8014000 <tcp_enqueue_flags+0x1c0>)
 8013e66:	4867      	ldr	r0, [pc, #412]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013e68:	f006 fa56 	bl	801a318 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d106      	bne.n	8013e80 <tcp_enqueue_flags+0x40>
 8013e72:	4b62      	ldr	r3, [pc, #392]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013e74:	f240 4213 	movw	r2, #1043	; 0x413
 8013e78:	4963      	ldr	r1, [pc, #396]	; (8014008 <tcp_enqueue_flags+0x1c8>)
 8013e7a:	4862      	ldr	r0, [pc, #392]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013e7c:	f006 fa4c 	bl	801a318 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	f003 0302 	and.w	r3, r3, #2
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e8e:	7ffb      	ldrb	r3, [r7, #31]
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	f003 0304 	and.w	r3, r3, #4
 8013e98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	2036      	movs	r0, #54	; 0x36
 8013ea6:	f7fb f951 	bl	800f14c <pbuf_alloc>
 8013eaa:	6138      	str	r0, [r7, #16]
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d109      	bne.n	8013ec6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	8b5b      	ldrh	r3, [r3, #26]
 8013eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ec4:	e095      	b.n	8013ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	895a      	ldrh	r2, [r3, #10]
 8013eca:	7dfb      	ldrb	r3, [r7, #23]
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d206      	bcs.n	8013ee0 <tcp_enqueue_flags+0xa0>
 8013ed2:	4b4a      	ldr	r3, [pc, #296]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013ed4:	f240 4239 	movw	r2, #1081	; 0x439
 8013ed8:	494c      	ldr	r1, [pc, #304]	; (801400c <tcp_enqueue_flags+0x1cc>)
 8013eda:	484a      	ldr	r0, [pc, #296]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013edc:	f006 fa1c 	bl	801a318 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ee4:	78fa      	ldrb	r2, [r7, #3]
 8013ee6:	7ffb      	ldrb	r3, [r7, #31]
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	460b      	mov	r3, r1
 8013eec:	6939      	ldr	r1, [r7, #16]
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff fd70 	bl	80139d4 <tcp_create_segment>
 8013ef4:	60f8      	str	r0, [r7, #12]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d109      	bne.n	8013f10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f0e:	e070      	b.n	8013ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	68db      	ldr	r3, [r3, #12]
 8013f14:	f003 0303 	and.w	r3, r3, #3
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d006      	beq.n	8013f2a <tcp_enqueue_flags+0xea>
 8013f1c:	4b37      	ldr	r3, [pc, #220]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013f1e:	f240 4242 	movw	r2, #1090	; 0x442
 8013f22:	493b      	ldr	r1, [pc, #236]	; (8014010 <tcp_enqueue_flags+0x1d0>)
 8013f24:	4837      	ldr	r0, [pc, #220]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013f26:	f006 f9f7 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	891b      	ldrh	r3, [r3, #8]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d006      	beq.n	8013f40 <tcp_enqueue_flags+0x100>
 8013f32:	4b32      	ldr	r3, [pc, #200]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013f34:	f240 4243 	movw	r2, #1091	; 0x443
 8013f38:	4936      	ldr	r1, [pc, #216]	; (8014014 <tcp_enqueue_flags+0x1d4>)
 8013f3a:	4832      	ldr	r0, [pc, #200]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013f3c:	f006 f9ec 	bl	801a318 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d103      	bne.n	8013f50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f4e:	e00d      	b.n	8013f6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f54:	61bb      	str	r3, [r7, #24]
 8013f56:	e002      	b.n	8013f5e <tcp_enqueue_flags+0x11e>
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	61bb      	str	r3, [r7, #24]
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1f8      	bne.n	8013f58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f74:	78fb      	ldrb	r3, [r7, #3]
 8013f76:	f003 0302 	and.w	r3, r3, #2
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d104      	bne.n	8013f88 <tcp_enqueue_flags+0x148>
 8013f7e:	78fb      	ldrb	r3, [r7, #3]
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d004      	beq.n	8013f92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f92:	78fb      	ldrb	r3, [r7, #3]
 8013f94:	f003 0301 	and.w	r3, r3, #1
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d006      	beq.n	8013faa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f043 0320 	orr.w	r3, r3, #32
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fb fc38 	bl	800f824 <pbuf_clen>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fbe:	4413      	add	r3, r2
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00e      	beq.n	8013ff0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d10a      	bne.n	8013ff0 <tcp_enqueue_flags+0x1b0>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d106      	bne.n	8013ff0 <tcp_enqueue_flags+0x1b0>
 8013fe2:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013fe4:	f240 4265 	movw	r2, #1125	; 0x465
 8013fe8:	490b      	ldr	r1, [pc, #44]	; (8014018 <tcp_enqueue_flags+0x1d8>)
 8013fea:	4806      	ldr	r0, [pc, #24]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013fec:	f006 f994 	bl	801a318 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3720      	adds	r7, #32
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	0801e204 	.word	0x0801e204
 8014000:	0801e628 	.word	0x0801e628
 8014004:	0801e258 	.word	0x0801e258
 8014008:	0801e680 	.word	0x0801e680
 801400c:	0801e6a0 	.word	0x0801e6a0
 8014010:	0801e6dc 	.word	0x0801e6dc
 8014014:	0801e6f4 	.word	0x0801e6f4
 8014018:	0801e720 	.word	0x0801e720

0801401c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801401c:	b5b0      	push	{r4, r5, r7, lr}
 801401e:	b08a      	sub	sp, #40	; 0x28
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d106      	bne.n	8014038 <tcp_output+0x1c>
 801402a:	4b8a      	ldr	r3, [pc, #552]	; (8014254 <tcp_output+0x238>)
 801402c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014030:	4989      	ldr	r1, [pc, #548]	; (8014258 <tcp_output+0x23c>)
 8014032:	488a      	ldr	r0, [pc, #552]	; (801425c <tcp_output+0x240>)
 8014034:	f006 f970 	bl	801a318 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	7d1b      	ldrb	r3, [r3, #20]
 801403c:	2b01      	cmp	r3, #1
 801403e:	d106      	bne.n	801404e <tcp_output+0x32>
 8014040:	4b84      	ldr	r3, [pc, #528]	; (8014254 <tcp_output+0x238>)
 8014042:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014046:	4986      	ldr	r1, [pc, #536]	; (8014260 <tcp_output+0x244>)
 8014048:	4884      	ldr	r0, [pc, #528]	; (801425c <tcp_output+0x240>)
 801404a:	f006 f965 	bl	801a318 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801404e:	4b85      	ldr	r3, [pc, #532]	; (8014264 <tcp_output+0x248>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	429a      	cmp	r2, r3
 8014056:	d101      	bne.n	801405c <tcp_output+0x40>
    return ERR_OK;
 8014058:	2300      	movs	r3, #0
 801405a:	e1ce      	b.n	80143fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014068:	4293      	cmp	r3, r2
 801406a:	bf28      	it	cs
 801406c:	4613      	movcs	r3, r2
 801406e:	b29b      	uxth	r3, r3
 8014070:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014076:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10b      	bne.n	8014096 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	8b5b      	ldrh	r3, [r3, #26]
 8014082:	f003 0302 	and.w	r3, r3, #2
 8014086:	2b00      	cmp	r3, #0
 8014088:	f000 81aa 	beq.w	80143e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f000 fdcb 	bl	8014c28 <tcp_send_empty_ack>
 8014092:	4603      	mov	r3, r0
 8014094:	e1b1      	b.n	80143fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014096:	6879      	ldr	r1, [r7, #4]
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	3304      	adds	r3, #4
 801409c:	461a      	mov	r2, r3
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ff fc7c 	bl	801399c <tcp_route>
 80140a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <tcp_output+0x96>
    return ERR_RTE;
 80140ac:	f06f 0303 	mvn.w	r3, #3
 80140b0:	e1a3      	b.n	80143fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d003      	beq.n	80140c0 <tcp_output+0xa4>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d111      	bne.n	80140e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d002      	beq.n	80140cc <tcp_output+0xb0>
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	3304      	adds	r3, #4
 80140ca:	e000      	b.n	80140ce <tcp_output+0xb2>
 80140cc:	2300      	movs	r3, #0
 80140ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d102      	bne.n	80140dc <tcp_output+0xc0>
      return ERR_RTE;
 80140d6:	f06f 0303 	mvn.w	r3, #3
 80140da:	e18e      	b.n	80143fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80140e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f9 ffdd 	bl	800e0aa <lwip_htonl>
 80140f0:	4602      	mov	r2, r0
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140fa:	8912      	ldrh	r2, [r2, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	69ba      	ldr	r2, [r7, #24]
 8014100:	429a      	cmp	r2, r3
 8014102:	d227      	bcs.n	8014154 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801410a:	461a      	mov	r2, r3
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	4293      	cmp	r3, r2
 8014110:	d114      	bne.n	801413c <tcp_output+0x120>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014116:	2b00      	cmp	r3, #0
 8014118:	d110      	bne.n	801413c <tcp_output+0x120>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10b      	bne.n	801413c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2201      	movs	r2, #1
 8014130:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2200      	movs	r2, #0
 8014138:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	8b5b      	ldrh	r3, [r3, #26]
 8014140:	f003 0302 	and.w	r3, r3, #2
 8014144:	2b00      	cmp	r3, #0
 8014146:	f000 814d 	beq.w	80143e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 fd6c 	bl	8014c28 <tcp_send_empty_ack>
 8014150:	4603      	mov	r3, r0
 8014152:	e152      	b.n	80143fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014160:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	2b00      	cmp	r3, #0
 8014166:	f000 811c 	beq.w	80143a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801416a:	e002      	b.n	8014172 <tcp_output+0x156>
 801416c:	6a3b      	ldr	r3, [r7, #32]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	623b      	str	r3, [r7, #32]
 8014172:	6a3b      	ldr	r3, [r7, #32]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d1f8      	bne.n	801416c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801417a:	e112      	b.n	80143a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	899b      	ldrh	r3, [r3, #12]
 8014182:	b29b      	uxth	r3, r3
 8014184:	4618      	mov	r0, r3
 8014186:	f7f9 ff7b 	bl	800e080 <lwip_htons>
 801418a:	4603      	mov	r3, r0
 801418c:	b2db      	uxtb	r3, r3
 801418e:	f003 0304 	and.w	r3, r3, #4
 8014192:	2b00      	cmp	r3, #0
 8014194:	d006      	beq.n	80141a4 <tcp_output+0x188>
 8014196:	4b2f      	ldr	r3, [pc, #188]	; (8014254 <tcp_output+0x238>)
 8014198:	f240 5236 	movw	r2, #1334	; 0x536
 801419c:	4932      	ldr	r1, [pc, #200]	; (8014268 <tcp_output+0x24c>)
 801419e:	482f      	ldr	r0, [pc, #188]	; (801425c <tcp_output+0x240>)
 80141a0:	f006 f8ba 	bl	801a318 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d01f      	beq.n	80141ec <tcp_output+0x1d0>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8b5b      	ldrh	r3, [r3, #26]
 80141b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d119      	bne.n	80141ec <tcp_output+0x1d0>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <tcp_output+0x1bc>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d110      	bne.n	80141ec <tcp_output+0x1d0>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ce:	891a      	ldrh	r2, [r3, #8]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d209      	bcs.n	80141ec <tcp_output+0x1d0>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d004      	beq.n	80141ec <tcp_output+0x1d0>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141e8:	2b08      	cmp	r3, #8
 80141ea:	d901      	bls.n	80141f0 <tcp_output+0x1d4>
 80141ec:	2301      	movs	r3, #1
 80141ee:	e000      	b.n	80141f2 <tcp_output+0x1d6>
 80141f0:	2300      	movs	r3, #0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8b5b      	ldrh	r3, [r3, #26]
 80141fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 80e4 	beq.w	80143cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7d1b      	ldrb	r3, [r3, #20]
 8014208:	2b02      	cmp	r3, #2
 801420a:	d00d      	beq.n	8014228 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	899b      	ldrh	r3, [r3, #12]
 8014212:	b29c      	uxth	r4, r3
 8014214:	2010      	movs	r0, #16
 8014216:	f7f9 ff33 	bl	800e080 <lwip_htons>
 801421a:	4603      	mov	r3, r0
 801421c:	461a      	mov	r2, r3
 801421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	4322      	orrs	r2, r4
 8014224:	b292      	uxth	r2, r2
 8014226:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801422e:	f000 f909 	bl	8014444 <tcp_output_segment>
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d016      	beq.n	801426c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
      return err;
 801424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014250:	e0d3      	b.n	80143fa <tcp_output+0x3de>
 8014252:	bf00      	nop
 8014254:	0801e204 	.word	0x0801e204
 8014258:	0801e748 	.word	0x0801e748
 801425c:	0801e258 	.word	0x0801e258
 8014260:	0801e760 	.word	0x0801e760
 8014264:	2000b4c8 	.word	0x2000b4c8
 8014268:	0801e788 	.word	0x0801e788
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7d1b      	ldrb	r3, [r3, #20]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d006      	beq.n	801428a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	8b5b      	ldrh	r3, [r3, #26]
 8014280:	f023 0303 	bic.w	r3, r3, #3
 8014284:	b29a      	uxth	r2, r3
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	4618      	mov	r0, r3
 8014292:	f7f9 ff0a 	bl	800e0aa <lwip_htonl>
 8014296:	4604      	mov	r4, r0
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	891b      	ldrh	r3, [r3, #8]
 801429c:	461d      	mov	r5, r3
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	899b      	ldrh	r3, [r3, #12]
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f9 feea 	bl	800e080 <lwip_htons>
 80142ac:	4603      	mov	r3, r0
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	f003 0303 	and.w	r3, r3, #3
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d001      	beq.n	80142bc <tcp_output+0x2a0>
 80142b8:	2301      	movs	r3, #1
 80142ba:	e000      	b.n	80142be <tcp_output+0x2a2>
 80142bc:	2300      	movs	r3, #0
 80142be:	442b      	add	r3, r5
 80142c0:	4423      	add	r3, r4
 80142c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	da02      	bge.n	80142d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	68ba      	ldr	r2, [r7, #8]
 80142d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	461c      	mov	r4, r3
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7f9 fecb 	bl	800e080 <lwip_htons>
 80142ea:	4603      	mov	r3, r0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0303 	and.w	r3, r3, #3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <tcp_output+0x2de>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e000      	b.n	80142fc <tcp_output+0x2e0>
 80142fa:	2300      	movs	r3, #0
 80142fc:	4423      	add	r3, r4
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d049      	beq.n	8014396 <tcp_output+0x37a>
      seg->next = NULL;
 8014302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801430c:	2b00      	cmp	r3, #0
 801430e:	d105      	bne.n	801431c <tcp_output+0x300>
        pcb->unacked = seg;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014314:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	623b      	str	r3, [r7, #32]
 801431a:	e03f      	b.n	801439c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	685b      	ldr	r3, [r3, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	f7f9 fec1 	bl	800e0aa <lwip_htonl>
 8014328:	4604      	mov	r4, r0
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	f7f9 feba 	bl	800e0aa <lwip_htonl>
 8014336:	4603      	mov	r3, r0
 8014338:	1ae3      	subs	r3, r4, r3
 801433a:	2b00      	cmp	r3, #0
 801433c:	da24      	bge.n	8014388 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3370      	adds	r3, #112	; 0x70
 8014342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014344:	e002      	b.n	801434c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d011      	beq.n	8014378 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	4618      	mov	r0, r3
 801435e:	f7f9 fea4 	bl	800e0aa <lwip_htonl>
 8014362:	4604      	mov	r4, r0
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	f7f9 fe9d 	bl	800e0aa <lwip_htonl>
 8014370:	4603      	mov	r3, r0
 8014372:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014374:	2b00      	cmp	r3, #0
 8014376:	dbe6      	blt.n	8014346 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	e009      	b.n	801439c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801438c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	623b      	str	r3, [r7, #32]
 8014394:	e002      	b.n	801439c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014398:	f7fc fc3f 	bl	8010c1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d012      	beq.n	80143ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f9 fe7b 	bl	800e0aa <lwip_htonl>
 80143b4:	4602      	mov	r2, r0
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143be:	8912      	ldrh	r2, [r2, #8]
 80143c0:	4413      	add	r3, r2
  while (seg != NULL &&
 80143c2:	69ba      	ldr	r2, [r7, #24]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	f4bf aed9 	bcs.w	801417c <tcp_output+0x160>
 80143ca:	e000      	b.n	80143ce <tcp_output+0x3b2>
      break;
 80143cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d108      	bne.n	80143e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80143de:	e004      	b.n	80143ea <tcp_output+0x3ce>
    goto output_done;
 80143e0:	bf00      	nop
 80143e2:	e002      	b.n	80143ea <tcp_output+0x3ce>
    goto output_done;
 80143e4:	bf00      	nop
 80143e6:	e000      	b.n	80143ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80143e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	8b5b      	ldrh	r3, [r3, #26]
 80143ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3728      	adds	r7, #40	; 0x28
 80143fe:	46bd      	mov	sp, r7
 8014400:	bdb0      	pop	{r4, r5, r7, pc}
 8014402:	bf00      	nop

08014404 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <tcp_output_segment_busy+0x1c>
 8014412:	4b09      	ldr	r3, [pc, #36]	; (8014438 <tcp_output_segment_busy+0x34>)
 8014414:	f240 529a 	movw	r2, #1434	; 0x59a
 8014418:	4908      	ldr	r1, [pc, #32]	; (801443c <tcp_output_segment_busy+0x38>)
 801441a:	4809      	ldr	r0, [pc, #36]	; (8014440 <tcp_output_segment_busy+0x3c>)
 801441c:	f005 ff7c 	bl	801a318 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	7b9b      	ldrb	r3, [r3, #14]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d001      	beq.n	801442e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801442a:	2301      	movs	r3, #1
 801442c:	e000      	b.n	8014430 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}
 8014438:	0801e204 	.word	0x0801e204
 801443c:	0801e7a0 	.word	0x0801e7a0
 8014440:	0801e258 	.word	0x0801e258

08014444 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014444:	b5b0      	push	{r4, r5, r7, lr}
 8014446:	b08c      	sub	sp, #48	; 0x30
 8014448:	af04      	add	r7, sp, #16
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d106      	bne.n	8014464 <tcp_output_segment+0x20>
 8014456:	4b64      	ldr	r3, [pc, #400]	; (80145e8 <tcp_output_segment+0x1a4>)
 8014458:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801445c:	4963      	ldr	r1, [pc, #396]	; (80145ec <tcp_output_segment+0x1a8>)
 801445e:	4864      	ldr	r0, [pc, #400]	; (80145f0 <tcp_output_segment+0x1ac>)
 8014460:	f005 ff5a 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d106      	bne.n	8014478 <tcp_output_segment+0x34>
 801446a:	4b5f      	ldr	r3, [pc, #380]	; (80145e8 <tcp_output_segment+0x1a4>)
 801446c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014470:	4960      	ldr	r1, [pc, #384]	; (80145f4 <tcp_output_segment+0x1b0>)
 8014472:	485f      	ldr	r0, [pc, #380]	; (80145f0 <tcp_output_segment+0x1ac>)
 8014474:	f005 ff50 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d106      	bne.n	801448c <tcp_output_segment+0x48>
 801447e:	4b5a      	ldr	r3, [pc, #360]	; (80145e8 <tcp_output_segment+0x1a4>)
 8014480:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014484:	495c      	ldr	r1, [pc, #368]	; (80145f8 <tcp_output_segment+0x1b4>)
 8014486:	485a      	ldr	r0, [pc, #360]	; (80145f0 <tcp_output_segment+0x1ac>)
 8014488:	f005 ff46 	bl	801a318 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f7ff ffb9 	bl	8014404 <tcp_output_segment_busy>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	e0a1      	b.n	80145e0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	68dc      	ldr	r4, [r3, #12]
 80144a4:	4610      	mov	r0, r2
 80144a6:	f7f9 fe00 	bl	800e0aa <lwip_htonl>
 80144aa:	4603      	mov	r3, r0
 80144ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	68dc      	ldr	r4, [r3, #12]
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7f9 fde2 	bl	800e080 <lwip_htons>
 80144bc:	4603      	mov	r3, r0
 80144be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c4:	68ba      	ldr	r2, [r7, #8]
 80144c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144c8:	441a      	add	r2, r3
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	3314      	adds	r3, #20
 80144d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	7a9b      	ldrb	r3, [r3, #10]
 80144da:	f003 0301 	and.w	r3, r3, #1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d015      	beq.n	801450e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	3304      	adds	r3, #4
 80144e6:	461a      	mov	r2, r3
 80144e8:	6879      	ldr	r1, [r7, #4]
 80144ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144ee:	f7fc fe8b 	bl	8011208 <tcp_eff_send_mss_netif>
 80144f2:	4603      	mov	r3, r0
 80144f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144f6:	8b7b      	ldrh	r3, [r7, #26]
 80144f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f9 fdd4 	bl	800e0aa <lwip_htonl>
 8014502:	4602      	mov	r2, r0
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	3304      	adds	r3, #4
 801450c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014514:	2b00      	cmp	r3, #0
 8014516:	da02      	bge.n	801451e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2200      	movs	r2, #0
 801451c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014522:	2b00      	cmp	r3, #0
 8014524:	d10c      	bne.n	8014540 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014526:	4b35      	ldr	r3, [pc, #212]	; (80145fc <tcp_output_segment+0x1b8>)
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	4618      	mov	r0, r3
 8014536:	f7f9 fdb8 	bl	800e0aa <lwip_htonl>
 801453a:	4602      	mov	r2, r0
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	68da      	ldr	r2, [r3, #12]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	8959      	ldrh	r1, [r3, #10]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	8b3a      	ldrh	r2, [r7, #24]
 801455a:	1a8a      	subs	r2, r1, r2
 801455c:	b292      	uxth	r2, r2
 801455e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	8919      	ldrh	r1, [r3, #8]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	8b3a      	ldrh	r2, [r7, #24]
 801456c:	1a8a      	subs	r2, r1, r2
 801456e:	b292      	uxth	r2, r2
 8014570:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	68d2      	ldr	r2, [r2, #12]
 801457a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	741a      	strb	r2, [r3, #16]
 8014584:	2200      	movs	r2, #0
 8014586:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	68da      	ldr	r2, [r3, #12]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	7a9b      	ldrb	r3, [r3, #10]
 8014590:	f003 0301 	and.w	r3, r3, #1
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <tcp_output_segment+0x158>
 8014598:	2318      	movs	r3, #24
 801459a:	e000      	b.n	801459e <tcp_output_segment+0x15a>
 801459c:	2314      	movs	r3, #20
 801459e:	4413      	add	r3, r2
 80145a0:	69fa      	ldr	r2, [r7, #28]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d006      	beq.n	80145b4 <tcp_output_segment+0x170>
 80145a6:	4b10      	ldr	r3, [pc, #64]	; (80145e8 <tcp_output_segment+0x1a4>)
 80145a8:	f240 621c 	movw	r2, #1564	; 0x61c
 80145ac:	4914      	ldr	r1, [pc, #80]	; (8014600 <tcp_output_segment+0x1bc>)
 80145ae:	4810      	ldr	r0, [pc, #64]	; (80145f0 <tcp_output_segment+0x1ac>)
 80145b0:	f005 feb2 	bl	801a318 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6858      	ldr	r0, [r3, #4]
 80145b8:	68b9      	ldr	r1, [r7, #8]
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	1d1c      	adds	r4, r3, #4
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	7add      	ldrb	r5, [r3, #11]
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	7a9b      	ldrb	r3, [r3, #10]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	9202      	str	r2, [sp, #8]
 80145ca:	2206      	movs	r2, #6
 80145cc:	9201      	str	r2, [sp, #4]
 80145ce:	9300      	str	r3, [sp, #0]
 80145d0:	462b      	mov	r3, r5
 80145d2:	4622      	mov	r2, r4
 80145d4:	f004 fbaa 	bl	8018d2c <ip4_output_if>
 80145d8:	4603      	mov	r3, r0
 80145da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	3720      	adds	r7, #32
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bdb0      	pop	{r4, r5, r7, pc}
 80145e8:	0801e204 	.word	0x0801e204
 80145ec:	0801e7c8 	.word	0x0801e7c8
 80145f0:	0801e258 	.word	0x0801e258
 80145f4:	0801e7e8 	.word	0x0801e7e8
 80145f8:	0801e808 	.word	0x0801e808
 80145fc:	2000b47c 	.word	0x2000b47c
 8014600:	0801e82c 	.word	0x0801e82c

08014604 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014604:	b5b0      	push	{r4, r5, r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d106      	bne.n	8014620 <tcp_rexmit_rto_prepare+0x1c>
 8014612:	4b31      	ldr	r3, [pc, #196]	; (80146d8 <tcp_rexmit_rto_prepare+0xd4>)
 8014614:	f240 6263 	movw	r2, #1635	; 0x663
 8014618:	4930      	ldr	r1, [pc, #192]	; (80146dc <tcp_rexmit_rto_prepare+0xd8>)
 801461a:	4831      	ldr	r0, [pc, #196]	; (80146e0 <tcp_rexmit_rto_prepare+0xdc>)
 801461c:	f005 fe7c 	bl	801a318 <iprintf>

  if (pcb->unacked == NULL) {
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014624:	2b00      	cmp	r3, #0
 8014626:	d102      	bne.n	801462e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014628:	f06f 0305 	mvn.w	r3, #5
 801462c:	e050      	b.n	80146d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014632:	60fb      	str	r3, [r7, #12]
 8014634:	e00b      	b.n	801464e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f7ff fee4 	bl	8014404 <tcp_output_segment_busy>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d002      	beq.n	8014648 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014642:	f06f 0305 	mvn.w	r3, #5
 8014646:	e043      	b.n	80146d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d1ef      	bne.n	8014636 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	f7ff fed4 	bl	8014404 <tcp_output_segment_busy>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d002      	beq.n	8014668 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014662:	f06f 0305 	mvn.w	r3, #5
 8014666:	e033      	b.n	80146d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2200      	movs	r2, #0
 801467c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	8b5b      	ldrh	r3, [r3, #26]
 8014682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014686:	b29a      	uxth	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	4618      	mov	r0, r3
 8014694:	f7f9 fd09 	bl	800e0aa <lwip_htonl>
 8014698:	4604      	mov	r4, r0
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	891b      	ldrh	r3, [r3, #8]
 801469e:	461d      	mov	r5, r3
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	899b      	ldrh	r3, [r3, #12]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7f9 fce9 	bl	800e080 <lwip_htons>
 80146ae:	4603      	mov	r3, r0
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	f003 0303 	and.w	r3, r3, #3
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d001      	beq.n	80146be <tcp_rexmit_rto_prepare+0xba>
 80146ba:	2301      	movs	r3, #1
 80146bc:	e000      	b.n	80146c0 <tcp_rexmit_rto_prepare+0xbc>
 80146be:	2300      	movs	r3, #0
 80146c0:	442b      	add	r3, r5
 80146c2:	18e2      	adds	r2, r4, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3710      	adds	r7, #16
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bdb0      	pop	{r4, r5, r7, pc}
 80146d8:	0801e204 	.word	0x0801e204
 80146dc:	0801e840 	.word	0x0801e840
 80146e0:	0801e258 	.word	0x0801e258

080146e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <tcp_rexmit_rto_commit+0x1c>
 80146f2:	4b0d      	ldr	r3, [pc, #52]	; (8014728 <tcp_rexmit_rto_commit+0x44>)
 80146f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146f8:	490c      	ldr	r1, [pc, #48]	; (801472c <tcp_rexmit_rto_commit+0x48>)
 80146fa:	480d      	ldr	r0, [pc, #52]	; (8014730 <tcp_rexmit_rto_commit+0x4c>)
 80146fc:	f005 fe0c 	bl	801a318 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014706:	2bff      	cmp	r3, #255	; 0xff
 8014708:	d007      	beq.n	801471a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014710:	3301      	adds	r3, #1
 8014712:	b2da      	uxtb	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7ff fc7e 	bl	801401c <tcp_output>
}
 8014720:	bf00      	nop
 8014722:	3708      	adds	r7, #8
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}
 8014728:	0801e204 	.word	0x0801e204
 801472c:	0801e864 	.word	0x0801e864
 8014730:	0801e258 	.word	0x0801e258

08014734 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d106      	bne.n	8014750 <tcp_rexmit_rto+0x1c>
 8014742:	4b0a      	ldr	r3, [pc, #40]	; (801476c <tcp_rexmit_rto+0x38>)
 8014744:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014748:	4909      	ldr	r1, [pc, #36]	; (8014770 <tcp_rexmit_rto+0x3c>)
 801474a:	480a      	ldr	r0, [pc, #40]	; (8014774 <tcp_rexmit_rto+0x40>)
 801474c:	f005 fde4 	bl	801a318 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7ff ff57 	bl	8014604 <tcp_rexmit_rto_prepare>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d102      	bne.n	8014762 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7ff ffc1 	bl	80146e4 <tcp_rexmit_rto_commit>
  }
}
 8014762:	bf00      	nop
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	0801e204 	.word	0x0801e204
 8014770:	0801e888 	.word	0x0801e888
 8014774:	0801e258 	.word	0x0801e258

08014778 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014778:	b590      	push	{r4, r7, lr}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d106      	bne.n	8014794 <tcp_rexmit+0x1c>
 8014786:	4b2f      	ldr	r3, [pc, #188]	; (8014844 <tcp_rexmit+0xcc>)
 8014788:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801478c:	492e      	ldr	r1, [pc, #184]	; (8014848 <tcp_rexmit+0xd0>)
 801478e:	482f      	ldr	r0, [pc, #188]	; (801484c <tcp_rexmit+0xd4>)
 8014790:	f005 fdc2 	bl	801a318 <iprintf>

  if (pcb->unacked == NULL) {
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014798:	2b00      	cmp	r3, #0
 801479a:	d102      	bne.n	80147a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801479c:	f06f 0305 	mvn.w	r3, #5
 80147a0:	e04c      	b.n	801483c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80147a8:	68b8      	ldr	r0, [r7, #8]
 80147aa:	f7ff fe2b 	bl	8014404 <tcp_output_segment_busy>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d002      	beq.n	80147ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80147b4:	f06f 0305 	mvn.w	r3, #5
 80147b8:	e040      	b.n	801483c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	336c      	adds	r3, #108	; 0x6c
 80147c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147c8:	e002      	b.n	80147d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d011      	beq.n	80147fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f9 fc62 	bl	800e0aa <lwip_htonl>
 80147e6:	4604      	mov	r4, r0
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7f9 fc5b 	bl	800e0aa <lwip_htonl>
 80147f4:	4603      	mov	r3, r0
 80147f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	dbe6      	blt.n	80147ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	68ba      	ldr	r2, [r7, #8]
 8014808:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d103      	bne.n	801481a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014820:	2bff      	cmp	r3, #255	; 0xff
 8014822:	d007      	beq.n	8014834 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801482a:	3301      	adds	r3, #1
 801482c:	b2da      	uxtb	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2200      	movs	r2, #0
 8014838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801483a:	2300      	movs	r3, #0
}
 801483c:	4618      	mov	r0, r3
 801483e:	3714      	adds	r7, #20
 8014840:	46bd      	mov	sp, r7
 8014842:	bd90      	pop	{r4, r7, pc}
 8014844:	0801e204 	.word	0x0801e204
 8014848:	0801e8a4 	.word	0x0801e8a4
 801484c:	0801e258 	.word	0x0801e258

08014850 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d106      	bne.n	801486c <tcp_rexmit_fast+0x1c>
 801485e:	4b2a      	ldr	r3, [pc, #168]	; (8014908 <tcp_rexmit_fast+0xb8>)
 8014860:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014864:	4929      	ldr	r1, [pc, #164]	; (801490c <tcp_rexmit_fast+0xbc>)
 8014866:	482a      	ldr	r0, [pc, #168]	; (8014910 <tcp_rexmit_fast+0xc0>)
 8014868:	f005 fd56 	bl	801a318 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014870:	2b00      	cmp	r3, #0
 8014872:	d045      	beq.n	8014900 <tcp_rexmit_fast+0xb0>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	8b5b      	ldrh	r3, [r3, #26]
 8014878:	f003 0304 	and.w	r3, r3, #4
 801487c:	2b00      	cmp	r3, #0
 801487e:	d13f      	bne.n	8014900 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f7ff ff79 	bl	8014778 <tcp_rexmit>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d139      	bne.n	8014900 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014898:	4293      	cmp	r3, r2
 801489a:	bf28      	it	cs
 801489c:	4613      	movcs	r3, r2
 801489e:	b29b      	uxth	r3, r3
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	da00      	bge.n	80148a6 <tcp_rexmit_fast+0x56>
 80148a4:	3301      	adds	r3, #1
 80148a6:	105b      	asrs	r3, r3, #1
 80148a8:	b29a      	uxth	r2, r3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80148b6:	461a      	mov	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148bc:	005b      	lsls	r3, r3, #1
 80148be:	429a      	cmp	r2, r3
 80148c0:	d206      	bcs.n	80148d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148da:	4619      	mov	r1, r3
 80148dc:	0049      	lsls	r1, r1, #1
 80148de:	440b      	add	r3, r1
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	4413      	add	r3, r2
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	8b5b      	ldrh	r3, [r3, #26]
 80148f0:	f043 0304 	orr.w	r3, r3, #4
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2200      	movs	r2, #0
 80148fe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	0801e204 	.word	0x0801e204
 801490c:	0801e8bc 	.word	0x0801e8bc
 8014910:	0801e258 	.word	0x0801e258

08014914 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b086      	sub	sp, #24
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	607b      	str	r3, [r7, #4]
 801491e:	460b      	mov	r3, r1
 8014920:	817b      	strh	r3, [r7, #10]
 8014922:	4613      	mov	r3, r2
 8014924:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014926:	897a      	ldrh	r2, [r7, #10]
 8014928:	893b      	ldrh	r3, [r7, #8]
 801492a:	4413      	add	r3, r2
 801492c:	b29b      	uxth	r3, r3
 801492e:	3314      	adds	r3, #20
 8014930:	b29b      	uxth	r3, r3
 8014932:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014936:	4619      	mov	r1, r3
 8014938:	2022      	movs	r0, #34	; 0x22
 801493a:	f7fa fc07 	bl	800f14c <pbuf_alloc>
 801493e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d04d      	beq.n	80149e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014946:	897b      	ldrh	r3, [r7, #10]
 8014948:	3313      	adds	r3, #19
 801494a:	697a      	ldr	r2, [r7, #20]
 801494c:	8952      	ldrh	r2, [r2, #10]
 801494e:	4293      	cmp	r3, r2
 8014950:	db06      	blt.n	8014960 <tcp_output_alloc_header_common+0x4c>
 8014952:	4b26      	ldr	r3, [pc, #152]	; (80149ec <tcp_output_alloc_header_common+0xd8>)
 8014954:	f240 7223 	movw	r2, #1827	; 0x723
 8014958:	4925      	ldr	r1, [pc, #148]	; (80149f0 <tcp_output_alloc_header_common+0xdc>)
 801495a:	4826      	ldr	r0, [pc, #152]	; (80149f4 <tcp_output_alloc_header_common+0xe0>)
 801495c:	f005 fcdc 	bl	801a318 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014966:	8c3b      	ldrh	r3, [r7, #32]
 8014968:	4618      	mov	r0, r3
 801496a:	f7f9 fb89 	bl	800e080 <lwip_htons>
 801496e:	4603      	mov	r3, r0
 8014970:	461a      	mov	r2, r3
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014978:	4618      	mov	r0, r3
 801497a:	f7f9 fb81 	bl	800e080 <lwip_htons>
 801497e:	4603      	mov	r3, r0
 8014980:	461a      	mov	r2, r3
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f7f9 fb8c 	bl	800e0aa <lwip_htonl>
 8014992:	4602      	mov	r2, r0
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014998:	897b      	ldrh	r3, [r7, #10]
 801499a:	089b      	lsrs	r3, r3, #2
 801499c:	b29b      	uxth	r3, r3
 801499e:	3305      	adds	r3, #5
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	031b      	lsls	r3, r3, #12
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	4313      	orrs	r3, r2
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7f9 fb65 	bl	800e080 <lwip_htons>
 80149b6:	4603      	mov	r3, r0
 80149b8:	461a      	mov	r2, r3
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80149be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7f9 fb5d 	bl	800e080 <lwip_htons>
 80149c6:	4603      	mov	r3, r0
 80149c8:	461a      	mov	r2, r3
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	2200      	movs	r2, #0
 80149d2:	741a      	strb	r2, [r3, #16]
 80149d4:	2200      	movs	r2, #0
 80149d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	2200      	movs	r2, #0
 80149dc:	749a      	strb	r2, [r3, #18]
 80149de:	2200      	movs	r2, #0
 80149e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80149e2:	697b      	ldr	r3, [r7, #20]
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3718      	adds	r7, #24
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	0801e204 	.word	0x0801e204
 80149f0:	0801e8dc 	.word	0x0801e8dc
 80149f4:	0801e258 	.word	0x0801e258

080149f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80149f8:	b5b0      	push	{r4, r5, r7, lr}
 80149fa:	b08a      	sub	sp, #40	; 0x28
 80149fc:	af04      	add	r7, sp, #16
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	607b      	str	r3, [r7, #4]
 8014a02:	460b      	mov	r3, r1
 8014a04:	817b      	strh	r3, [r7, #10]
 8014a06:	4613      	mov	r3, r2
 8014a08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d106      	bne.n	8014a1e <tcp_output_alloc_header+0x26>
 8014a10:	4b15      	ldr	r3, [pc, #84]	; (8014a68 <tcp_output_alloc_header+0x70>)
 8014a12:	f240 7242 	movw	r2, #1858	; 0x742
 8014a16:	4915      	ldr	r1, [pc, #84]	; (8014a6c <tcp_output_alloc_header+0x74>)
 8014a18:	4815      	ldr	r0, [pc, #84]	; (8014a70 <tcp_output_alloc_header+0x78>)
 8014a1a:	f005 fc7d 	bl	801a318 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	8adb      	ldrh	r3, [r3, #22]
 8014a26:	68fa      	ldr	r2, [r7, #12]
 8014a28:	8b12      	ldrh	r2, [r2, #24]
 8014a2a:	68f9      	ldr	r1, [r7, #12]
 8014a2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014a2e:	893d      	ldrh	r5, [r7, #8]
 8014a30:	897c      	ldrh	r4, [r7, #10]
 8014a32:	9103      	str	r1, [sp, #12]
 8014a34:	2110      	movs	r1, #16
 8014a36:	9102      	str	r1, [sp, #8]
 8014a38:	9201      	str	r2, [sp, #4]
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	462a      	mov	r2, r5
 8014a40:	4621      	mov	r1, r4
 8014a42:	f7ff ff67 	bl	8014914 <tcp_output_alloc_header_common>
 8014a46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d006      	beq.n	8014a5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a56:	441a      	add	r2, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a5c:	697b      	ldr	r3, [r7, #20]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bdb0      	pop	{r4, r5, r7, pc}
 8014a66:	bf00      	nop
 8014a68:	0801e204 	.word	0x0801e204
 8014a6c:	0801e90c 	.word	0x0801e90c
 8014a70:	0801e258 	.word	0x0801e258

08014a74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b088      	sub	sp, #32
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	60b9      	str	r1, [r7, #8]
 8014a7e:	4611      	mov	r1, r2
 8014a80:	461a      	mov	r2, r3
 8014a82:	460b      	mov	r3, r1
 8014a84:	71fb      	strb	r3, [r7, #7]
 8014a86:	4613      	mov	r3, r2
 8014a88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d106      	bne.n	8014aa2 <tcp_output_fill_options+0x2e>
 8014a94:	4b12      	ldr	r3, [pc, #72]	; (8014ae0 <tcp_output_fill_options+0x6c>)
 8014a96:	f240 7256 	movw	r2, #1878	; 0x756
 8014a9a:	4912      	ldr	r1, [pc, #72]	; (8014ae4 <tcp_output_fill_options+0x70>)
 8014a9c:	4812      	ldr	r0, [pc, #72]	; (8014ae8 <tcp_output_fill_options+0x74>)
 8014a9e:	f005 fc3b 	bl	801a318 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014aa8:	69bb      	ldr	r3, [r7, #24]
 8014aaa:	3314      	adds	r3, #20
 8014aac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014aae:	8bfb      	ldrh	r3, [r7, #30]
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	79fb      	ldrb	r3, [r7, #7]
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	f003 0304 	and.w	r3, r3, #4
 8014abc:	4413      	add	r3, r2
 8014abe:	3314      	adds	r3, #20
 8014ac0:	69ba      	ldr	r2, [r7, #24]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	697a      	ldr	r2, [r7, #20]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d006      	beq.n	8014ad8 <tcp_output_fill_options+0x64>
 8014aca:	4b05      	ldr	r3, [pc, #20]	; (8014ae0 <tcp_output_fill_options+0x6c>)
 8014acc:	f240 7275 	movw	r2, #1909	; 0x775
 8014ad0:	4906      	ldr	r1, [pc, #24]	; (8014aec <tcp_output_fill_options+0x78>)
 8014ad2:	4805      	ldr	r0, [pc, #20]	; (8014ae8 <tcp_output_fill_options+0x74>)
 8014ad4:	f005 fc20 	bl	801a318 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014ad8:	bf00      	nop
 8014ada:	3720      	adds	r7, #32
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	0801e204 	.word	0x0801e204
 8014ae4:	0801e934 	.word	0x0801e934
 8014ae8:	0801e258 	.word	0x0801e258
 8014aec:	0801e82c 	.word	0x0801e82c

08014af0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b08a      	sub	sp, #40	; 0x28
 8014af4:	af04      	add	r7, sp, #16
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	607a      	str	r2, [r7, #4]
 8014afc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d106      	bne.n	8014b12 <tcp_output_control_segment+0x22>
 8014b04:	4b1c      	ldr	r3, [pc, #112]	; (8014b78 <tcp_output_control_segment+0x88>)
 8014b06:	f240 7287 	movw	r2, #1927	; 0x787
 8014b0a:	491c      	ldr	r1, [pc, #112]	; (8014b7c <tcp_output_control_segment+0x8c>)
 8014b0c:	481c      	ldr	r0, [pc, #112]	; (8014b80 <tcp_output_control_segment+0x90>)
 8014b0e:	f005 fc03 	bl	801a318 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014b12:	683a      	ldr	r2, [r7, #0]
 8014b14:	6879      	ldr	r1, [r7, #4]
 8014b16:	68f8      	ldr	r0, [r7, #12]
 8014b18:	f7fe ff40 	bl	801399c <tcp_route>
 8014b1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d102      	bne.n	8014b2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014b24:	23fc      	movs	r3, #252	; 0xfc
 8014b26:	75fb      	strb	r3, [r7, #23]
 8014b28:	e01c      	b.n	8014b64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d006      	beq.n	8014b3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	7adb      	ldrb	r3, [r3, #11]
 8014b34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	7a9b      	ldrb	r3, [r3, #10]
 8014b3a:	757b      	strb	r3, [r7, #21]
 8014b3c:	e003      	b.n	8014b46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b3e:	23ff      	movs	r3, #255	; 0xff
 8014b40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014b42:	2300      	movs	r3, #0
 8014b44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b46:	7dba      	ldrb	r2, [r7, #22]
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	9302      	str	r3, [sp, #8]
 8014b4c:	2306      	movs	r3, #6
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	7d7b      	ldrb	r3, [r7, #21]
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	4613      	mov	r3, r2
 8014b56:	683a      	ldr	r2, [r7, #0]
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	68b8      	ldr	r0, [r7, #8]
 8014b5c:	f004 f8e6 	bl	8018d2c <ip4_output_if>
 8014b60:	4603      	mov	r3, r0
 8014b62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b64:	68b8      	ldr	r0, [r7, #8]
 8014b66:	f7fa fdd5 	bl	800f714 <pbuf_free>
  return err;
 8014b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3718      	adds	r7, #24
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	0801e204 	.word	0x0801e204
 8014b7c:	0801e95c 	.word	0x0801e95c
 8014b80:	0801e258 	.word	0x0801e258

08014b84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b84:	b590      	push	{r4, r7, lr}
 8014b86:	b08b      	sub	sp, #44	; 0x2c
 8014b88:	af04      	add	r7, sp, #16
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
 8014b90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d106      	bne.n	8014ba6 <tcp_rst+0x22>
 8014b98:	4b1f      	ldr	r3, [pc, #124]	; (8014c18 <tcp_rst+0x94>)
 8014b9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b9e:	491f      	ldr	r1, [pc, #124]	; (8014c1c <tcp_rst+0x98>)
 8014ba0:	481f      	ldr	r0, [pc, #124]	; (8014c20 <tcp_rst+0x9c>)
 8014ba2:	f005 fbb9 	bl	801a318 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d106      	bne.n	8014bba <tcp_rst+0x36>
 8014bac:	4b1a      	ldr	r3, [pc, #104]	; (8014c18 <tcp_rst+0x94>)
 8014bae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014bb2:	491c      	ldr	r1, [pc, #112]	; (8014c24 <tcp_rst+0xa0>)
 8014bb4:	481a      	ldr	r0, [pc, #104]	; (8014c20 <tcp_rst+0x9c>)
 8014bb6:	f005 fbaf 	bl	801a318 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014bba:	2300      	movs	r3, #0
 8014bbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014bbe:	f246 0308 	movw	r3, #24584	; 0x6008
 8014bc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014bc4:	7dfb      	ldrb	r3, [r7, #23]
 8014bc6:	b29c      	uxth	r4, r3
 8014bc8:	68b8      	ldr	r0, [r7, #8]
 8014bca:	f7f9 fa6e 	bl	800e0aa <lwip_htonl>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	8abb      	ldrh	r3, [r7, #20]
 8014bd2:	9303      	str	r3, [sp, #12]
 8014bd4:	2314      	movs	r3, #20
 8014bd6:	9302      	str	r3, [sp, #8]
 8014bd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014bda:	9301      	str	r3, [sp, #4]
 8014bdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	4613      	mov	r3, r2
 8014be2:	2200      	movs	r2, #0
 8014be4:	4621      	mov	r1, r4
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7ff fe94 	bl	8014914 <tcp_output_alloc_header_common>
 8014bec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00c      	beq.n	8014c0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bf4:	7dfb      	ldrb	r3, [r7, #23]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	6939      	ldr	r1, [r7, #16]
 8014bfa:	68f8      	ldr	r0, [r7, #12]
 8014bfc:	f7ff ff3a 	bl	8014a74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	6939      	ldr	r1, [r7, #16]
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff ff72 	bl	8014af0 <tcp_output_control_segment>
 8014c0c:	e000      	b.n	8014c10 <tcp_rst+0x8c>
    return;
 8014c0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c10:	371c      	adds	r7, #28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd90      	pop	{r4, r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0801e204 	.word	0x0801e204
 8014c1c:	0801e988 	.word	0x0801e988
 8014c20:	0801e258 	.word	0x0801e258
 8014c24:	0801e9a4 	.word	0x0801e9a4

08014c28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014c28:	b590      	push	{r4, r7, lr}
 8014c2a:	b087      	sub	sp, #28
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c30:	2300      	movs	r3, #0
 8014c32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d106      	bne.n	8014c4c <tcp_send_empty_ack+0x24>
 8014c3e:	4b28      	ldr	r3, [pc, #160]	; (8014ce0 <tcp_send_empty_ack+0xb8>)
 8014c40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c44:	4927      	ldr	r1, [pc, #156]	; (8014ce4 <tcp_send_empty_ack+0xbc>)
 8014c46:	4828      	ldr	r0, [pc, #160]	; (8014ce8 <tcp_send_empty_ack+0xc0>)
 8014c48:	f005 fb66 	bl	801a318 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c4c:	7dfb      	ldrb	r3, [r7, #23]
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	f003 0304 	and.w	r3, r3, #4
 8014c56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c58:	7d7b      	ldrb	r3, [r7, #21]
 8014c5a:	b29c      	uxth	r4, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7f9 fa22 	bl	800e0aa <lwip_htonl>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2200      	movs	r2, #0
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f7ff fec3 	bl	80149f8 <tcp_output_alloc_header>
 8014c72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d109      	bne.n	8014c8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	8b5b      	ldrh	r3, [r3, #26]
 8014c7e:	f043 0303 	orr.w	r3, r3, #3
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c88:	f06f 0301 	mvn.w	r3, #1
 8014c8c:	e023      	b.n	8014cd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c8e:	7dbb      	ldrb	r3, [r7, #22]
 8014c90:	7dfa      	ldrb	r2, [r7, #23]
 8014c92:	6939      	ldr	r1, [r7, #16]
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff feed 	bl	8014a74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	6939      	ldr	r1, [r7, #16]
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7ff ff24 	bl	8014af0 <tcp_output_control_segment>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d007      	beq.n	8014cc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	8b5b      	ldrh	r3, [r3, #26]
 8014cb8:	f043 0303 	orr.w	r3, r3, #3
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	835a      	strh	r2, [r3, #26]
 8014cc2:	e006      	b.n	8014cd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	8b5b      	ldrh	r3, [r3, #26]
 8014cc8:	f023 0303 	bic.w	r3, r3, #3
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	371c      	adds	r7, #28
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd90      	pop	{r4, r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	0801e204 	.word	0x0801e204
 8014ce4:	0801e9c0 	.word	0x0801e9c0
 8014ce8:	0801e258 	.word	0x0801e258

08014cec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014cec:	b590      	push	{r4, r7, lr}
 8014cee:	b087      	sub	sp, #28
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d106      	bne.n	8014d0c <tcp_keepalive+0x20>
 8014cfe:	4b18      	ldr	r3, [pc, #96]	; (8014d60 <tcp_keepalive+0x74>)
 8014d00:	f640 0224 	movw	r2, #2084	; 0x824
 8014d04:	4917      	ldr	r1, [pc, #92]	; (8014d64 <tcp_keepalive+0x78>)
 8014d06:	4818      	ldr	r0, [pc, #96]	; (8014d68 <tcp_keepalive+0x7c>)
 8014d08:	f005 fb06 	bl	801a318 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014d0c:	7dfb      	ldrb	r3, [r7, #23]
 8014d0e:	b29c      	uxth	r4, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d14:	3b01      	subs	r3, #1
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f9 f9c7 	bl	800e0aa <lwip_htonl>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2200      	movs	r2, #0
 8014d20:	4621      	mov	r1, r4
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff fe68 	bl	80149f8 <tcp_output_alloc_header>
 8014d28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d102      	bne.n	8014d36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d34:	e010      	b.n	8014d58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d36:	7dfb      	ldrb	r3, [r7, #23]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	6939      	ldr	r1, [r7, #16]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7ff fe99 	bl	8014a74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	3304      	adds	r3, #4
 8014d48:	6939      	ldr	r1, [r7, #16]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff fed0 	bl	8014af0 <tcp_output_control_segment>
 8014d50:	4603      	mov	r3, r0
 8014d52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	371c      	adds	r7, #28
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd90      	pop	{r4, r7, pc}
 8014d60:	0801e204 	.word	0x0801e204
 8014d64:	0801e9e0 	.word	0x0801e9e0
 8014d68:	0801e258 	.word	0x0801e258

08014d6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d6c:	b590      	push	{r4, r7, lr}
 8014d6e:	b08b      	sub	sp, #44	; 0x2c
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d74:	2300      	movs	r3, #0
 8014d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d106      	bne.n	8014d8e <tcp_zero_window_probe+0x22>
 8014d80:	4b4c      	ldr	r3, [pc, #304]	; (8014eb4 <tcp_zero_window_probe+0x148>)
 8014d82:	f640 024f 	movw	r2, #2127	; 0x84f
 8014d86:	494c      	ldr	r1, [pc, #304]	; (8014eb8 <tcp_zero_window_probe+0x14c>)
 8014d88:	484c      	ldr	r0, [pc, #304]	; (8014ebc <tcp_zero_window_probe+0x150>)
 8014d8a:	f005 fac5 	bl	801a318 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014d94:	6a3b      	ldr	r3, [r7, #32]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d101      	bne.n	8014d9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e086      	b.n	8014eac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014da4:	2bff      	cmp	r3, #255	; 0xff
 8014da6:	d007      	beq.n	8014db8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014dae:	3301      	adds	r3, #1
 8014db0:	b2da      	uxtb	r2, r3
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	899b      	ldrh	r3, [r3, #12]
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f9 f95d 	bl	800e080 <lwip_htons>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	f003 0301 	and.w	r3, r3, #1
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d005      	beq.n	8014dde <tcp_zero_window_probe+0x72>
 8014dd2:	6a3b      	ldr	r3, [r7, #32]
 8014dd4:	891b      	ldrh	r3, [r3, #8]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d101      	bne.n	8014dde <tcp_zero_window_probe+0x72>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e000      	b.n	8014de0 <tcp_zero_window_probe+0x74>
 8014dde:	2300      	movs	r3, #0
 8014de0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014de2:	7ffb      	ldrb	r3, [r7, #31]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	bf0c      	ite	eq
 8014de8:	2301      	moveq	r3, #1
 8014dea:	2300      	movne	r3, #0
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014df4:	b299      	uxth	r1, r3
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	8bba      	ldrh	r2, [r7, #28]
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f7ff fdfa 	bl	80149f8 <tcp_output_alloc_header>
 8014e04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d102      	bne.n	8014e12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e10:	e04c      	b.n	8014eac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014e18:	7ffb      	ldrb	r3, [r7, #31]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d011      	beq.n	8014e42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	899b      	ldrh	r3, [r3, #12]
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	b21b      	sxth	r3, r3
 8014e26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e2a:	b21c      	sxth	r4, r3
 8014e2c:	2011      	movs	r0, #17
 8014e2e:	f7f9 f927 	bl	800e080 <lwip_htons>
 8014e32:	4603      	mov	r3, r0
 8014e34:	b21b      	sxth	r3, r3
 8014e36:	4323      	orrs	r3, r4
 8014e38:	b21b      	sxth	r3, r3
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	819a      	strh	r2, [r3, #12]
 8014e40:	e010      	b.n	8014e64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	3314      	adds	r3, #20
 8014e48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	6858      	ldr	r0, [r3, #4]
 8014e4e:	6a3b      	ldr	r3, [r7, #32]
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	891a      	ldrh	r2, [r3, #8]
 8014e54:	6a3b      	ldr	r3, [r7, #32]
 8014e56:	891b      	ldrh	r3, [r3, #8]
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	6939      	ldr	r1, [r7, #16]
 8014e60:	f7fa fe52 	bl	800fb08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e64:	6a3b      	ldr	r3, [r7, #32]
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f9 f91d 	bl	800e0aa <lwip_htonl>
 8014e70:	4603      	mov	r3, r0
 8014e72:	3301      	adds	r3, #1
 8014e74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	1ad3      	subs	r3, r2, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	da02      	bge.n	8014e88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	69b9      	ldr	r1, [r7, #24]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff fdef 	bl	8014a74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	69b9      	ldr	r1, [r7, #24]
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7ff fe26 	bl	8014af0 <tcp_output_control_segment>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ea8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	372c      	adds	r7, #44	; 0x2c
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd90      	pop	{r4, r7, pc}
 8014eb4:	0801e204 	.word	0x0801e204
 8014eb8:	0801e9fc 	.word	0x0801e9fc
 8014ebc:	0801e258 	.word	0x0801e258

08014ec0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ec8:	f7fa ff0c 	bl	800fce4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <tcpip_tcp_timer+0x38>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d103      	bne.n	8014edc <tcpip_tcp_timer+0x1c>
 8014ed4:	4b09      	ldr	r3, [pc, #36]	; (8014efc <tcpip_tcp_timer+0x3c>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d005      	beq.n	8014ee8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014edc:	2200      	movs	r2, #0
 8014ede:	4908      	ldr	r1, [pc, #32]	; (8014f00 <tcpip_tcp_timer+0x40>)
 8014ee0:	20fa      	movs	r0, #250	; 0xfa
 8014ee2:	f000 f8f3 	bl	80150cc <sys_timeout>
 8014ee6:	e003      	b.n	8014ef0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014ee8:	4b06      	ldr	r3, [pc, #24]	; (8014f04 <tcpip_tcp_timer+0x44>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	601a      	str	r2, [r3, #0]
  }
}
 8014eee:	bf00      	nop
 8014ef0:	bf00      	nop
 8014ef2:	3708      	adds	r7, #8
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	2000b488 	.word	0x2000b488
 8014efc:	2000b48c 	.word	0x2000b48c
 8014f00:	08014ec1 	.word	0x08014ec1
 8014f04:	2000b4d4 	.word	0x2000b4d4

08014f08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f0c:	4b0a      	ldr	r3, [pc, #40]	; (8014f38 <tcp_timer_needed+0x30>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10f      	bne.n	8014f34 <tcp_timer_needed+0x2c>
 8014f14:	4b09      	ldr	r3, [pc, #36]	; (8014f3c <tcp_timer_needed+0x34>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d103      	bne.n	8014f24 <tcp_timer_needed+0x1c>
 8014f1c:	4b08      	ldr	r3, [pc, #32]	; (8014f40 <tcp_timer_needed+0x38>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d007      	beq.n	8014f34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f24:	4b04      	ldr	r3, [pc, #16]	; (8014f38 <tcp_timer_needed+0x30>)
 8014f26:	2201      	movs	r2, #1
 8014f28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	4905      	ldr	r1, [pc, #20]	; (8014f44 <tcp_timer_needed+0x3c>)
 8014f2e:	20fa      	movs	r0, #250	; 0xfa
 8014f30:	f000 f8cc 	bl	80150cc <sys_timeout>
  }
}
 8014f34:	bf00      	nop
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	2000b4d4 	.word	0x2000b4d4
 8014f3c:	2000b488 	.word	0x2000b488
 8014f40:	2000b48c 	.word	0x2000b48c
 8014f44:	08014ec1 	.word	0x08014ec1

08014f48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f54:	2006      	movs	r0, #6
 8014f56:	f7f9 fd0b 	bl	800e970 <memp_malloc>
 8014f5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d109      	bne.n	8014f76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d151      	bne.n	801500c <sys_timeout_abs+0xc4>
 8014f68:	4b2a      	ldr	r3, [pc, #168]	; (8015014 <sys_timeout_abs+0xcc>)
 8014f6a:	22be      	movs	r2, #190	; 0xbe
 8014f6c:	492a      	ldr	r1, [pc, #168]	; (8015018 <sys_timeout_abs+0xd0>)
 8014f6e:	482b      	ldr	r0, [pc, #172]	; (801501c <sys_timeout_abs+0xd4>)
 8014f70:	f005 f9d2 	bl	801a318 <iprintf>
    return;
 8014f74:	e04a      	b.n	801500c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	68ba      	ldr	r2, [r7, #8]
 8014f80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	68fa      	ldr	r2, [r7, #12]
 8014f8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f8e:	4b24      	ldr	r3, [pc, #144]	; (8015020 <sys_timeout_abs+0xd8>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d103      	bne.n	8014f9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f96:	4a22      	ldr	r2, [pc, #136]	; (8015020 <sys_timeout_abs+0xd8>)
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	6013      	str	r3, [r2, #0]
    return;
 8014f9c:	e037      	b.n	801500e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	685a      	ldr	r2, [r3, #4]
 8014fa2:	4b1f      	ldr	r3, [pc, #124]	; (8015020 <sys_timeout_abs+0xd8>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	1ad3      	subs	r3, r2, r3
 8014faa:	0fdb      	lsrs	r3, r3, #31
 8014fac:	f003 0301 	and.w	r3, r3, #1
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d007      	beq.n	8014fc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014fb6:	4b1a      	ldr	r3, [pc, #104]	; (8015020 <sys_timeout_abs+0xd8>)
 8014fb8:	681a      	ldr	r2, [r3, #0]
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014fbe:	4a18      	ldr	r2, [pc, #96]	; (8015020 <sys_timeout_abs+0xd8>)
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	6013      	str	r3, [r2, #0]
 8014fc4:	e023      	b.n	801500e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fc6:	4b16      	ldr	r3, [pc, #88]	; (8015020 <sys_timeout_abs+0xd8>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	617b      	str	r3, [r7, #20]
 8014fcc:	e01a      	b.n	8015004 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d00b      	beq.n	8014fee <sys_timeout_abs+0xa6>
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	685a      	ldr	r2, [r3, #4]
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	1ad3      	subs	r3, r2, r3
 8014fe2:	0fdb      	lsrs	r3, r3, #31
 8014fe4:	f003 0301 	and.w	r3, r3, #1
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d007      	beq.n	8014ffe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	693a      	ldr	r2, [r7, #16]
 8014ffa:	601a      	str	r2, [r3, #0]
        break;
 8014ffc:	e007      	b.n	801500e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	617b      	str	r3, [r7, #20]
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1e1      	bne.n	8014fce <sys_timeout_abs+0x86>
 801500a:	e000      	b.n	801500e <sys_timeout_abs+0xc6>
    return;
 801500c:	bf00      	nop
      }
    }
  }
}
 801500e:	3718      	adds	r7, #24
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	0801ea20 	.word	0x0801ea20
 8015018:	0801ea54 	.word	0x0801ea54
 801501c:	0801ea94 	.word	0x0801ea94
 8015020:	2000b4cc 	.word	0x2000b4cc

08015024 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b086      	sub	sp, #24
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	4798      	blx	r3

  now = sys_now();
 8015036:	f7f8 fe59 	bl	800dcec <sys_now>
 801503a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	4b0f      	ldr	r3, [pc, #60]	; (8015080 <lwip_cyclic_timer+0x5c>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4413      	add	r3, r2
 8015046:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	1ad3      	subs	r3, r2, r3
 801504e:	0fdb      	lsrs	r3, r3, #31
 8015050:	f003 0301 	and.w	r3, r3, #1
 8015054:	b2db      	uxtb	r3, r3
 8015056:	2b00      	cmp	r3, #0
 8015058:	d009      	beq.n	801506e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	4413      	add	r3, r2
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	4907      	ldr	r1, [pc, #28]	; (8015084 <lwip_cyclic_timer+0x60>)
 8015066:	4618      	mov	r0, r3
 8015068:	f7ff ff6e 	bl	8014f48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801506c:	e004      	b.n	8015078 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	4904      	ldr	r1, [pc, #16]	; (8015084 <lwip_cyclic_timer+0x60>)
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f7ff ff68 	bl	8014f48 <sys_timeout_abs>
}
 8015078:	bf00      	nop
 801507a:	3718      	adds	r7, #24
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	2000b4d0 	.word	0x2000b4d0
 8015084:	08015025 	.word	0x08015025

08015088 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b082      	sub	sp, #8
 801508c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801508e:	2301      	movs	r3, #1
 8015090:	607b      	str	r3, [r7, #4]
 8015092:	e00e      	b.n	80150b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015094:	4a0b      	ldr	r2, [pc, #44]	; (80150c4 <sys_timeouts_init+0x3c>)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	4a08      	ldr	r2, [pc, #32]	; (80150c4 <sys_timeouts_init+0x3c>)
 80150a2:	4413      	add	r3, r2
 80150a4:	461a      	mov	r2, r3
 80150a6:	4908      	ldr	r1, [pc, #32]	; (80150c8 <sys_timeouts_init+0x40>)
 80150a8:	f000 f810 	bl	80150cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3301      	adds	r3, #1
 80150b0:	607b      	str	r3, [r7, #4]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	2b04      	cmp	r3, #4
 80150b6:	d9ed      	bls.n	8015094 <sys_timeouts_init+0xc>
  }
}
 80150b8:	bf00      	nop
 80150ba:	bf00      	nop
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	0801fbc0 	.word	0x0801fbc0
 80150c8:	08015025 	.word	0x08015025

080150cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150de:	d306      	bcc.n	80150ee <sys_timeout+0x22>
 80150e0:	4b0a      	ldr	r3, [pc, #40]	; (801510c <sys_timeout+0x40>)
 80150e2:	f240 1229 	movw	r2, #297	; 0x129
 80150e6:	490a      	ldr	r1, [pc, #40]	; (8015110 <sys_timeout+0x44>)
 80150e8:	480a      	ldr	r0, [pc, #40]	; (8015114 <sys_timeout+0x48>)
 80150ea:	f005 f915 	bl	801a318 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150ee:	f7f8 fdfd 	bl	800dcec <sys_now>
 80150f2:	4602      	mov	r2, r0
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	4413      	add	r3, r2
 80150f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80150fa:	687a      	ldr	r2, [r7, #4]
 80150fc:	68b9      	ldr	r1, [r7, #8]
 80150fe:	6978      	ldr	r0, [r7, #20]
 8015100:	f7ff ff22 	bl	8014f48 <sys_timeout_abs>
#endif
}
 8015104:	bf00      	nop
 8015106:	3718      	adds	r7, #24
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	0801ea20 	.word	0x0801ea20
 8015110:	0801eabc 	.word	0x0801eabc
 8015114:	0801ea94 	.word	0x0801ea94

08015118 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801511c:	f004 ff5e 	bl	8019fdc <rand>
 8015120:	4603      	mov	r3, r0
 8015122:	b29b      	uxth	r3, r3
 8015124:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015128:	b29b      	uxth	r3, r3
 801512a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801512e:	b29a      	uxth	r2, r3
 8015130:	4b01      	ldr	r3, [pc, #4]	; (8015138 <udp_init+0x20>)
 8015132:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015134:	bf00      	nop
 8015136:	bd80      	pop	{r7, pc}
 8015138:	20000040 	.word	0x20000040

0801513c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801513c:	b480      	push	{r7}
 801513e:	b083      	sub	sp, #12
 8015140:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015142:	2300      	movs	r3, #0
 8015144:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015146:	4b17      	ldr	r3, [pc, #92]	; (80151a4 <udp_new_port+0x68>)
 8015148:	881b      	ldrh	r3, [r3, #0]
 801514a:	1c5a      	adds	r2, r3, #1
 801514c:	b291      	uxth	r1, r2
 801514e:	4a15      	ldr	r2, [pc, #84]	; (80151a4 <udp_new_port+0x68>)
 8015150:	8011      	strh	r1, [r2, #0]
 8015152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015156:	4293      	cmp	r3, r2
 8015158:	d103      	bne.n	8015162 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801515a:	4b12      	ldr	r3, [pc, #72]	; (80151a4 <udp_new_port+0x68>)
 801515c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015160:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015162:	4b11      	ldr	r3, [pc, #68]	; (80151a8 <udp_new_port+0x6c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	603b      	str	r3, [r7, #0]
 8015168:	e011      	b.n	801518e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	8a5a      	ldrh	r2, [r3, #18]
 801516e:	4b0d      	ldr	r3, [pc, #52]	; (80151a4 <udp_new_port+0x68>)
 8015170:	881b      	ldrh	r3, [r3, #0]
 8015172:	429a      	cmp	r2, r3
 8015174:	d108      	bne.n	8015188 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015176:	88fb      	ldrh	r3, [r7, #6]
 8015178:	3301      	adds	r3, #1
 801517a:	80fb      	strh	r3, [r7, #6]
 801517c:	88fb      	ldrh	r3, [r7, #6]
 801517e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015182:	d3e0      	bcc.n	8015146 <udp_new_port+0xa>
        return 0;
 8015184:	2300      	movs	r3, #0
 8015186:	e007      	b.n	8015198 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	603b      	str	r3, [r7, #0]
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1ea      	bne.n	801516a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015194:	4b03      	ldr	r3, [pc, #12]	; (80151a4 <udp_new_port+0x68>)
 8015196:	881b      	ldrh	r3, [r3, #0]
}
 8015198:	4618      	mov	r0, r3
 801519a:	370c      	adds	r7, #12
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr
 80151a4:	20000040 	.word	0x20000040
 80151a8:	2000b4d8 	.word	0x2000b4d8

080151ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	4613      	mov	r3, r2
 80151b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d105      	bne.n	80151cc <udp_input_local_match+0x20>
 80151c0:	4b27      	ldr	r3, [pc, #156]	; (8015260 <udp_input_local_match+0xb4>)
 80151c2:	2287      	movs	r2, #135	; 0x87
 80151c4:	4927      	ldr	r1, [pc, #156]	; (8015264 <udp_input_local_match+0xb8>)
 80151c6:	4828      	ldr	r0, [pc, #160]	; (8015268 <udp_input_local_match+0xbc>)
 80151c8:	f005 f8a6 	bl	801a318 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d105      	bne.n	80151de <udp_input_local_match+0x32>
 80151d2:	4b23      	ldr	r3, [pc, #140]	; (8015260 <udp_input_local_match+0xb4>)
 80151d4:	2288      	movs	r2, #136	; 0x88
 80151d6:	4925      	ldr	r1, [pc, #148]	; (801526c <udp_input_local_match+0xc0>)
 80151d8:	4823      	ldr	r0, [pc, #140]	; (8015268 <udp_input_local_match+0xbc>)
 80151da:	f005 f89d 	bl	801a318 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	7a1b      	ldrb	r3, [r3, #8]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00b      	beq.n	80151fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	7a1a      	ldrb	r2, [r3, #8]
 80151ea:	4b21      	ldr	r3, [pc, #132]	; (8015270 <udp_input_local_match+0xc4>)
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80151f2:	3301      	adds	r3, #1
 80151f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d001      	beq.n	80151fe <udp_input_local_match+0x52>
    return 0;
 80151fa:	2300      	movs	r3, #0
 80151fc:	e02b      	b.n	8015256 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80151fe:	79fb      	ldrb	r3, [r7, #7]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d018      	beq.n	8015236 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d013      	beq.n	8015232 <udp_input_local_match+0x86>
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d00f      	beq.n	8015232 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015212:	4b17      	ldr	r3, [pc, #92]	; (8015270 <udp_input_local_match+0xc4>)
 8015214:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801521a:	d00a      	beq.n	8015232 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	4b13      	ldr	r3, [pc, #76]	; (8015270 <udp_input_local_match+0xc4>)
 8015222:	695b      	ldr	r3, [r3, #20]
 8015224:	405a      	eors	r2, r3
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	3308      	adds	r3, #8
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801522e:	2b00      	cmp	r3, #0
 8015230:	d110      	bne.n	8015254 <udp_input_local_match+0xa8>
          return 1;
 8015232:	2301      	movs	r3, #1
 8015234:	e00f      	b.n	8015256 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d009      	beq.n	8015250 <udp_input_local_match+0xa4>
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d005      	beq.n	8015250 <udp_input_local_match+0xa4>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	4b09      	ldr	r3, [pc, #36]	; (8015270 <udp_input_local_match+0xc4>)
 801524a:	695b      	ldr	r3, [r3, #20]
 801524c:	429a      	cmp	r2, r3
 801524e:	d101      	bne.n	8015254 <udp_input_local_match+0xa8>
        return 1;
 8015250:	2301      	movs	r3, #1
 8015252:	e000      	b.n	8015256 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015254:	2300      	movs	r3, #0
}
 8015256:	4618      	mov	r0, r3
 8015258:	3710      	adds	r7, #16
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	0801eb08 	.word	0x0801eb08
 8015264:	0801eb38 	.word	0x0801eb38
 8015268:	0801eb5c 	.word	0x0801eb5c
 801526c:	0801eb84 	.word	0x0801eb84
 8015270:	20007eec 	.word	0x20007eec

08015274 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015274:	b590      	push	{r4, r7, lr}
 8015276:	b08d      	sub	sp, #52	; 0x34
 8015278:	af02      	add	r7, sp, #8
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801527e:	2300      	movs	r3, #0
 8015280:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d105      	bne.n	8015294 <udp_input+0x20>
 8015288:	4b7c      	ldr	r3, [pc, #496]	; (801547c <udp_input+0x208>)
 801528a:	22cf      	movs	r2, #207	; 0xcf
 801528c:	497c      	ldr	r1, [pc, #496]	; (8015480 <udp_input+0x20c>)
 801528e:	487d      	ldr	r0, [pc, #500]	; (8015484 <udp_input+0x210>)
 8015290:	f005 f842 	bl	801a318 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d105      	bne.n	80152a6 <udp_input+0x32>
 801529a:	4b78      	ldr	r3, [pc, #480]	; (801547c <udp_input+0x208>)
 801529c:	22d0      	movs	r2, #208	; 0xd0
 801529e:	497a      	ldr	r1, [pc, #488]	; (8015488 <udp_input+0x214>)
 80152a0:	4878      	ldr	r0, [pc, #480]	; (8015484 <udp_input+0x210>)
 80152a2:	f005 f839 	bl	801a318 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	895b      	ldrh	r3, [r3, #10]
 80152aa:	2b07      	cmp	r3, #7
 80152ac:	d803      	bhi.n	80152b6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7fa fa30 	bl	800f714 <pbuf_free>
    goto end;
 80152b4:	e0de      	b.n	8015474 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80152bc:	4b73      	ldr	r3, [pc, #460]	; (801548c <udp_input+0x218>)
 80152be:	695b      	ldr	r3, [r3, #20]
 80152c0:	4a72      	ldr	r2, [pc, #456]	; (801548c <udp_input+0x218>)
 80152c2:	6812      	ldr	r2, [r2, #0]
 80152c4:	4611      	mov	r1, r2
 80152c6:	4618      	mov	r0, r3
 80152c8:	f003 fe08 	bl	8018edc <ip4_addr_isbroadcast_u32>
 80152cc:	4603      	mov	r3, r0
 80152ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7f8 fed2 	bl	800e080 <lwip_htons>
 80152dc:	4603      	mov	r3, r0
 80152de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	885b      	ldrh	r3, [r3, #2]
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7f8 feca 	bl	800e080 <lwip_htons>
 80152ec:	4603      	mov	r3, r0
 80152ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80152f0:	2300      	movs	r3, #0
 80152f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80152f4:	2300      	movs	r3, #0
 80152f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80152f8:	2300      	movs	r3, #0
 80152fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152fc:	4b64      	ldr	r3, [pc, #400]	; (8015490 <udp_input+0x21c>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	627b      	str	r3, [r7, #36]	; 0x24
 8015302:	e054      	b.n	80153ae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015306:	8a5b      	ldrh	r3, [r3, #18]
 8015308:	89fa      	ldrh	r2, [r7, #14]
 801530a:	429a      	cmp	r2, r3
 801530c:	d14a      	bne.n	80153a4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801530e:	7cfb      	ldrb	r3, [r7, #19]
 8015310:	461a      	mov	r2, r3
 8015312:	6839      	ldr	r1, [r7, #0]
 8015314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015316:	f7ff ff49 	bl	80151ac <udp_input_local_match>
 801531a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801531c:	2b00      	cmp	r3, #0
 801531e:	d041      	beq.n	80153a4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015322:	7c1b      	ldrb	r3, [r3, #16]
 8015324:	f003 0304 	and.w	r3, r3, #4
 8015328:	2b00      	cmp	r3, #0
 801532a:	d11d      	bne.n	8015368 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d102      	bne.n	8015338 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015334:	61fb      	str	r3, [r7, #28]
 8015336:	e017      	b.n	8015368 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015338:	7cfb      	ldrb	r3, [r7, #19]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d014      	beq.n	8015368 <udp_input+0xf4>
 801533e:	4b53      	ldr	r3, [pc, #332]	; (801548c <udp_input+0x218>)
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015346:	d10f      	bne.n	8015368 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	3304      	adds	r3, #4
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	429a      	cmp	r2, r3
 8015354:	d008      	beq.n	8015368 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015358:	681a      	ldr	r2, [r3, #0]
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	3304      	adds	r3, #4
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	429a      	cmp	r2, r3
 8015362:	d101      	bne.n	8015368 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801536a:	8a9b      	ldrh	r3, [r3, #20]
 801536c:	8a3a      	ldrh	r2, [r7, #16]
 801536e:	429a      	cmp	r2, r3
 8015370:	d118      	bne.n	80153a4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015374:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015376:	2b00      	cmp	r3, #0
 8015378:	d005      	beq.n	8015386 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537c:	685a      	ldr	r2, [r3, #4]
 801537e:	4b43      	ldr	r3, [pc, #268]	; (801548c <udp_input+0x218>)
 8015380:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015382:	429a      	cmp	r2, r3
 8015384:	d10e      	bne.n	80153a4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015386:	6a3b      	ldr	r3, [r7, #32]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d014      	beq.n	80153b6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538e:	68da      	ldr	r2, [r3, #12]
 8015390:	6a3b      	ldr	r3, [r7, #32]
 8015392:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015394:	4b3e      	ldr	r3, [pc, #248]	; (8015490 <udp_input+0x21c>)
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801539c:	4a3c      	ldr	r2, [pc, #240]	; (8015490 <udp_input+0x21c>)
 801539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80153a2:	e008      	b.n	80153b6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80153a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153aa:	68db      	ldr	r3, [r3, #12]
 80153ac:	627b      	str	r3, [r7, #36]	; 0x24
 80153ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d1a7      	bne.n	8015304 <udp_input+0x90>
 80153b4:	e000      	b.n	80153b8 <udp_input+0x144>
        break;
 80153b6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80153b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d101      	bne.n	80153c2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80153c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <udp_input+0x15a>
    for_us = 1;
 80153c8:	2301      	movs	r3, #1
 80153ca:	76fb      	strb	r3, [r7, #27]
 80153cc:	e00a      	b.n	80153e4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	3304      	adds	r3, #4
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	4b2d      	ldr	r3, [pc, #180]	; (801548c <udp_input+0x218>)
 80153d6:	695b      	ldr	r3, [r3, #20]
 80153d8:	429a      	cmp	r2, r3
 80153da:	bf0c      	ite	eq
 80153dc:	2301      	moveq	r3, #1
 80153de:	2300      	movne	r3, #0
 80153e0:	b2db      	uxtb	r3, r3
 80153e2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80153e4:	7efb      	ldrb	r3, [r7, #27]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d041      	beq.n	801546e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80153ea:	2108      	movs	r1, #8
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7fa f90b 	bl	800f608 <pbuf_remove_header>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d00a      	beq.n	801540e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80153f8:	4b20      	ldr	r3, [pc, #128]	; (801547c <udp_input+0x208>)
 80153fa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80153fe:	4925      	ldr	r1, [pc, #148]	; (8015494 <udp_input+0x220>)
 8015400:	4820      	ldr	r0, [pc, #128]	; (8015484 <udp_input+0x210>)
 8015402:	f004 ff89 	bl	801a318 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7fa f984 	bl	800f714 <pbuf_free>
      goto end;
 801540c:	e032      	b.n	8015474 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015410:	2b00      	cmp	r3, #0
 8015412:	d012      	beq.n	801543a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015416:	699b      	ldr	r3, [r3, #24]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d00a      	beq.n	8015432 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541e:	699c      	ldr	r4, [r3, #24]
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	69d8      	ldr	r0, [r3, #28]
 8015424:	8a3b      	ldrh	r3, [r7, #16]
 8015426:	9300      	str	r3, [sp, #0]
 8015428:	4b1b      	ldr	r3, [pc, #108]	; (8015498 <udp_input+0x224>)
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801542e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015430:	e021      	b.n	8015476 <udp_input+0x202>
        pbuf_free(p);
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f7fa f96e 	bl	800f714 <pbuf_free>
        goto end;
 8015438:	e01c      	b.n	8015474 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801543a:	7cfb      	ldrb	r3, [r7, #19]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d112      	bne.n	8015466 <udp_input+0x1f2>
 8015440:	4b12      	ldr	r3, [pc, #72]	; (801548c <udp_input+0x218>)
 8015442:	695b      	ldr	r3, [r3, #20]
 8015444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015448:	2be0      	cmp	r3, #224	; 0xe0
 801544a:	d00c      	beq.n	8015466 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801544c:	4b0f      	ldr	r3, [pc, #60]	; (801548c <udp_input+0x218>)
 801544e:	899b      	ldrh	r3, [r3, #12]
 8015450:	3308      	adds	r3, #8
 8015452:	b29b      	uxth	r3, r3
 8015454:	b21b      	sxth	r3, r3
 8015456:	4619      	mov	r1, r3
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7fa f948 	bl	800f6ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801545e:	2103      	movs	r1, #3
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f003 f9fd 	bl	8018860 <icmp_dest_unreach>
      pbuf_free(p);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fa f954 	bl	800f714 <pbuf_free>
  return;
 801546c:	e003      	b.n	8015476 <udp_input+0x202>
    pbuf_free(p);
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f7fa f950 	bl	800f714 <pbuf_free>
  return;
 8015474:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015476:	372c      	adds	r7, #44	; 0x2c
 8015478:	46bd      	mov	sp, r7
 801547a:	bd90      	pop	{r4, r7, pc}
 801547c:	0801eb08 	.word	0x0801eb08
 8015480:	0801ebac 	.word	0x0801ebac
 8015484:	0801eb5c 	.word	0x0801eb5c
 8015488:	0801ebc4 	.word	0x0801ebc4
 801548c:	20007eec 	.word	0x20007eec
 8015490:	2000b4d8 	.word	0x2000b4d8
 8015494:	0801ebe0 	.word	0x0801ebe0
 8015498:	20007efc 	.word	0x20007efc

0801549c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b088      	sub	sp, #32
 80154a0:	af02      	add	r7, sp, #8
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
 80154a8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d109      	bne.n	80154c4 <udp_sendto_if+0x28>
 80154b0:	4b2e      	ldr	r3, [pc, #184]	; (801556c <udp_sendto_if+0xd0>)
 80154b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154b6:	492e      	ldr	r1, [pc, #184]	; (8015570 <udp_sendto_if+0xd4>)
 80154b8:	482e      	ldr	r0, [pc, #184]	; (8015574 <udp_sendto_if+0xd8>)
 80154ba:	f004 ff2d 	bl	801a318 <iprintf>
 80154be:	f06f 030f 	mvn.w	r3, #15
 80154c2:	e04f      	b.n	8015564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d109      	bne.n	80154de <udp_sendto_if+0x42>
 80154ca:	4b28      	ldr	r3, [pc, #160]	; (801556c <udp_sendto_if+0xd0>)
 80154cc:	f240 2281 	movw	r2, #641	; 0x281
 80154d0:	4929      	ldr	r1, [pc, #164]	; (8015578 <udp_sendto_if+0xdc>)
 80154d2:	4828      	ldr	r0, [pc, #160]	; (8015574 <udp_sendto_if+0xd8>)
 80154d4:	f004 ff20 	bl	801a318 <iprintf>
 80154d8:	f06f 030f 	mvn.w	r3, #15
 80154dc:	e042      	b.n	8015564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d109      	bne.n	80154f8 <udp_sendto_if+0x5c>
 80154e4:	4b21      	ldr	r3, [pc, #132]	; (801556c <udp_sendto_if+0xd0>)
 80154e6:	f240 2282 	movw	r2, #642	; 0x282
 80154ea:	4924      	ldr	r1, [pc, #144]	; (801557c <udp_sendto_if+0xe0>)
 80154ec:	4821      	ldr	r0, [pc, #132]	; (8015574 <udp_sendto_if+0xd8>)
 80154ee:	f004 ff13 	bl	801a318 <iprintf>
 80154f2:	f06f 030f 	mvn.w	r3, #15
 80154f6:	e035      	b.n	8015564 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80154f8:	6a3b      	ldr	r3, [r7, #32]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <udp_sendto_if+0x76>
 80154fe:	4b1b      	ldr	r3, [pc, #108]	; (801556c <udp_sendto_if+0xd0>)
 8015500:	f240 2283 	movw	r2, #643	; 0x283
 8015504:	491e      	ldr	r1, [pc, #120]	; (8015580 <udp_sendto_if+0xe4>)
 8015506:	481b      	ldr	r0, [pc, #108]	; (8015574 <udp_sendto_if+0xd8>)
 8015508:	f004 ff06 	bl	801a318 <iprintf>
 801550c:	f06f 030f 	mvn.w	r3, #15
 8015510:	e028      	b.n	8015564 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d009      	beq.n	801552c <udp_sendto_if+0x90>
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d005      	beq.n	801552c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015528:	2be0      	cmp	r3, #224	; 0xe0
 801552a:	d103      	bne.n	8015534 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801552c:	6a3b      	ldr	r3, [r7, #32]
 801552e:	3304      	adds	r3, #4
 8015530:	617b      	str	r3, [r7, #20]
 8015532:	e00b      	b.n	801554c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	6a3b      	ldr	r3, [r7, #32]
 801553a:	3304      	adds	r3, #4
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	429a      	cmp	r2, r3
 8015540:	d002      	beq.n	8015548 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015542:	f06f 0303 	mvn.w	r3, #3
 8015546:	e00d      	b.n	8015564 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801554c:	887a      	ldrh	r2, [r7, #2]
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	9301      	str	r3, [sp, #4]
 8015552:	6a3b      	ldr	r3, [r7, #32]
 8015554:	9300      	str	r3, [sp, #0]
 8015556:	4613      	mov	r3, r2
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	68b9      	ldr	r1, [r7, #8]
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	f000 f811 	bl	8015584 <udp_sendto_if_src>
 8015562:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015564:	4618      	mov	r0, r3
 8015566:	3718      	adds	r7, #24
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	0801eb08 	.word	0x0801eb08
 8015570:	0801ec7c 	.word	0x0801ec7c
 8015574:	0801eb5c 	.word	0x0801eb5c
 8015578:	0801ec98 	.word	0x0801ec98
 801557c:	0801ecb4 	.word	0x0801ecb4
 8015580:	0801ecd4 	.word	0x0801ecd4

08015584 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b08c      	sub	sp, #48	; 0x30
 8015588:	af04      	add	r7, sp, #16
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	607a      	str	r2, [r7, #4]
 8015590:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d109      	bne.n	80155ac <udp_sendto_if_src+0x28>
 8015598:	4b65      	ldr	r3, [pc, #404]	; (8015730 <udp_sendto_if_src+0x1ac>)
 801559a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801559e:	4965      	ldr	r1, [pc, #404]	; (8015734 <udp_sendto_if_src+0x1b0>)
 80155a0:	4865      	ldr	r0, [pc, #404]	; (8015738 <udp_sendto_if_src+0x1b4>)
 80155a2:	f004 feb9 	bl	801a318 <iprintf>
 80155a6:	f06f 030f 	mvn.w	r3, #15
 80155aa:	e0bc      	b.n	8015726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d109      	bne.n	80155c6 <udp_sendto_if_src+0x42>
 80155b2:	4b5f      	ldr	r3, [pc, #380]	; (8015730 <udp_sendto_if_src+0x1ac>)
 80155b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80155b8:	4960      	ldr	r1, [pc, #384]	; (801573c <udp_sendto_if_src+0x1b8>)
 80155ba:	485f      	ldr	r0, [pc, #380]	; (8015738 <udp_sendto_if_src+0x1b4>)
 80155bc:	f004 feac 	bl	801a318 <iprintf>
 80155c0:	f06f 030f 	mvn.w	r3, #15
 80155c4:	e0af      	b.n	8015726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d109      	bne.n	80155e0 <udp_sendto_if_src+0x5c>
 80155cc:	4b58      	ldr	r3, [pc, #352]	; (8015730 <udp_sendto_if_src+0x1ac>)
 80155ce:	f240 22d3 	movw	r2, #723	; 0x2d3
 80155d2:	495b      	ldr	r1, [pc, #364]	; (8015740 <udp_sendto_if_src+0x1bc>)
 80155d4:	4858      	ldr	r0, [pc, #352]	; (8015738 <udp_sendto_if_src+0x1b4>)
 80155d6:	f004 fe9f 	bl	801a318 <iprintf>
 80155da:	f06f 030f 	mvn.w	r3, #15
 80155de:	e0a2      	b.n	8015726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80155e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d109      	bne.n	80155fa <udp_sendto_if_src+0x76>
 80155e6:	4b52      	ldr	r3, [pc, #328]	; (8015730 <udp_sendto_if_src+0x1ac>)
 80155e8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80155ec:	4955      	ldr	r1, [pc, #340]	; (8015744 <udp_sendto_if_src+0x1c0>)
 80155ee:	4852      	ldr	r0, [pc, #328]	; (8015738 <udp_sendto_if_src+0x1b4>)
 80155f0:	f004 fe92 	bl	801a318 <iprintf>
 80155f4:	f06f 030f 	mvn.w	r3, #15
 80155f8:	e095      	b.n	8015726 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80155fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d109      	bne.n	8015614 <udp_sendto_if_src+0x90>
 8015600:	4b4b      	ldr	r3, [pc, #300]	; (8015730 <udp_sendto_if_src+0x1ac>)
 8015602:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015606:	4950      	ldr	r1, [pc, #320]	; (8015748 <udp_sendto_if_src+0x1c4>)
 8015608:	484b      	ldr	r0, [pc, #300]	; (8015738 <udp_sendto_if_src+0x1b4>)
 801560a:	f004 fe85 	bl	801a318 <iprintf>
 801560e:	f06f 030f 	mvn.w	r3, #15
 8015612:	e088      	b.n	8015726 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	8a5b      	ldrh	r3, [r3, #18]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d10f      	bne.n	801563c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801561c:	68f9      	ldr	r1, [r7, #12]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	8a5b      	ldrh	r3, [r3, #18]
 8015622:	461a      	mov	r2, r3
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	f000 f893 	bl	8015750 <udp_bind>
 801562a:	4603      	mov	r3, r0
 801562c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801562e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d002      	beq.n	801563c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015636:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801563a:	e074      	b.n	8015726 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	891b      	ldrh	r3, [r3, #8]
 8015640:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015644:	4293      	cmp	r3, r2
 8015646:	d902      	bls.n	801564e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801564c:	e06b      	b.n	8015726 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801564e:	2108      	movs	r1, #8
 8015650:	68b8      	ldr	r0, [r7, #8]
 8015652:	f7f9 ffc9 	bl	800f5e8 <pbuf_add_header>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d015      	beq.n	8015688 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801565c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015660:	2108      	movs	r1, #8
 8015662:	2022      	movs	r0, #34	; 0x22
 8015664:	f7f9 fd72 	bl	800f14c <pbuf_alloc>
 8015668:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d102      	bne.n	8015676 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015674:	e057      	b.n	8015726 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	891b      	ldrh	r3, [r3, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d006      	beq.n	801568c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801567e:	68b9      	ldr	r1, [r7, #8]
 8015680:	69f8      	ldr	r0, [r7, #28]
 8015682:	f7fa f95f 	bl	800f944 <pbuf_chain>
 8015686:	e001      	b.n	801568c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	895b      	ldrh	r3, [r3, #10]
 8015690:	2b07      	cmp	r3, #7
 8015692:	d806      	bhi.n	80156a2 <udp_sendto_if_src+0x11e>
 8015694:	4b26      	ldr	r3, [pc, #152]	; (8015730 <udp_sendto_if_src+0x1ac>)
 8015696:	f240 320d 	movw	r2, #781	; 0x30d
 801569a:	492c      	ldr	r1, [pc, #176]	; (801574c <udp_sendto_if_src+0x1c8>)
 801569c:	4826      	ldr	r0, [pc, #152]	; (8015738 <udp_sendto_if_src+0x1b4>)
 801569e:	f004 fe3b 	bl	801a318 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	8a5b      	ldrh	r3, [r3, #18]
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f8 fce7 	bl	800e080 <lwip_htons>
 80156b2:	4603      	mov	r3, r0
 80156b4:	461a      	mov	r2, r3
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80156ba:	887b      	ldrh	r3, [r7, #2]
 80156bc:	4618      	mov	r0, r3
 80156be:	f7f8 fcdf 	bl	800e080 <lwip_htons>
 80156c2:	4603      	mov	r3, r0
 80156c4:	461a      	mov	r2, r3
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	2200      	movs	r2, #0
 80156ce:	719a      	strb	r2, [r3, #6]
 80156d0:	2200      	movs	r2, #0
 80156d2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	891b      	ldrh	r3, [r3, #8]
 80156d8:	4618      	mov	r0, r3
 80156da:	f7f8 fcd1 	bl	800e080 <lwip_htons>
 80156de:	4603      	mov	r3, r0
 80156e0:	461a      	mov	r2, r3
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80156e6:	2311      	movs	r3, #17
 80156e8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	7adb      	ldrb	r3, [r3, #11]
 80156ee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	7a9b      	ldrb	r3, [r3, #10]
 80156f4:	7cb9      	ldrb	r1, [r7, #18]
 80156f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156f8:	9202      	str	r2, [sp, #8]
 80156fa:	7cfa      	ldrb	r2, [r7, #19]
 80156fc:	9201      	str	r2, [sp, #4]
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	460b      	mov	r3, r1
 8015702:	687a      	ldr	r2, [r7, #4]
 8015704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015706:	69f8      	ldr	r0, [r7, #28]
 8015708:	f003 fb3a 	bl	8018d80 <ip4_output_if_src>
 801570c:	4603      	mov	r3, r0
 801570e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015710:	69fa      	ldr	r2, [r7, #28]
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	429a      	cmp	r2, r3
 8015716:	d004      	beq.n	8015722 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015718:	69f8      	ldr	r0, [r7, #28]
 801571a:	f7f9 fffb 	bl	800f714 <pbuf_free>
    q = NULL;
 801571e:	2300      	movs	r3, #0
 8015720:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015722:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015726:	4618      	mov	r0, r3
 8015728:	3720      	adds	r7, #32
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	0801eb08 	.word	0x0801eb08
 8015734:	0801ecf4 	.word	0x0801ecf4
 8015738:	0801eb5c 	.word	0x0801eb5c
 801573c:	0801ed14 	.word	0x0801ed14
 8015740:	0801ed34 	.word	0x0801ed34
 8015744:	0801ed58 	.word	0x0801ed58
 8015748:	0801ed7c 	.word	0x0801ed7c
 801574c:	0801eda0 	.word	0x0801eda0

08015750 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b086      	sub	sp, #24
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	4613      	mov	r3, r2
 801575c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d101      	bne.n	8015768 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015764:	4b39      	ldr	r3, [pc, #228]	; (801584c <udp_bind+0xfc>)
 8015766:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d109      	bne.n	8015782 <udp_bind+0x32>
 801576e:	4b38      	ldr	r3, [pc, #224]	; (8015850 <udp_bind+0x100>)
 8015770:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015774:	4937      	ldr	r1, [pc, #220]	; (8015854 <udp_bind+0x104>)
 8015776:	4838      	ldr	r0, [pc, #224]	; (8015858 <udp_bind+0x108>)
 8015778:	f004 fdce 	bl	801a318 <iprintf>
 801577c:	f06f 030f 	mvn.w	r3, #15
 8015780:	e060      	b.n	8015844 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015782:	2300      	movs	r3, #0
 8015784:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015786:	4b35      	ldr	r3, [pc, #212]	; (801585c <udp_bind+0x10c>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	617b      	str	r3, [r7, #20]
 801578c:	e009      	b.n	80157a2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801578e:	68fa      	ldr	r2, [r7, #12]
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	429a      	cmp	r2, r3
 8015794:	d102      	bne.n	801579c <udp_bind+0x4c>
      rebind = 1;
 8015796:	2301      	movs	r3, #1
 8015798:	74fb      	strb	r3, [r7, #19]
      break;
 801579a:	e005      	b.n	80157a8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	617b      	str	r3, [r7, #20]
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d1f2      	bne.n	801578e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80157a8:	88fb      	ldrh	r3, [r7, #6]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d109      	bne.n	80157c2 <udp_bind+0x72>
    port = udp_new_port();
 80157ae:	f7ff fcc5 	bl	801513c <udp_new_port>
 80157b2:	4603      	mov	r3, r0
 80157b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80157b6:	88fb      	ldrh	r3, [r7, #6]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d12c      	bne.n	8015816 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80157bc:	f06f 0307 	mvn.w	r3, #7
 80157c0:	e040      	b.n	8015844 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157c2:	4b26      	ldr	r3, [pc, #152]	; (801585c <udp_bind+0x10c>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	617b      	str	r3, [r7, #20]
 80157c8:	e022      	b.n	8015810 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d01b      	beq.n	801580a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	8a5b      	ldrh	r3, [r3, #18]
 80157d6:	88fa      	ldrh	r2, [r7, #6]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d116      	bne.n	801580a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d00d      	beq.n	8015804 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d00a      	beq.n	8015804 <udp_bind+0xb4>
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d006      	beq.n	8015804 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157f6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d003      	beq.n	8015804 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d102      	bne.n	801580a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015804:	f06f 0307 	mvn.w	r3, #7
 8015808:	e01c      	b.n	8015844 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	617b      	str	r3, [r7, #20]
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d1d9      	bne.n	80157ca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d002      	beq.n	8015822 <udp_bind+0xd2>
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	e000      	b.n	8015824 <udp_bind+0xd4>
 8015822:	2300      	movs	r3, #0
 8015824:	68fa      	ldr	r2, [r7, #12]
 8015826:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	88fa      	ldrh	r2, [r7, #6]
 801582c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801582e:	7cfb      	ldrb	r3, [r7, #19]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d106      	bne.n	8015842 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015834:	4b09      	ldr	r3, [pc, #36]	; (801585c <udp_bind+0x10c>)
 8015836:	681a      	ldr	r2, [r3, #0]
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801583c:	4a07      	ldr	r2, [pc, #28]	; (801585c <udp_bind+0x10c>)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015842:	2300      	movs	r3, #0
}
 8015844:	4618      	mov	r0, r3
 8015846:	3718      	adds	r7, #24
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	0801fbe8 	.word	0x0801fbe8
 8015850:	0801eb08 	.word	0x0801eb08
 8015854:	0801edd0 	.word	0x0801edd0
 8015858:	0801eb5c 	.word	0x0801eb5c
 801585c:	2000b4d8 	.word	0x2000b4d8

08015860 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b086      	sub	sp, #24
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	4613      	mov	r3, r2
 801586c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d109      	bne.n	8015888 <udp_connect+0x28>
 8015874:	4b2c      	ldr	r3, [pc, #176]	; (8015928 <udp_connect+0xc8>)
 8015876:	f240 4235 	movw	r2, #1077	; 0x435
 801587a:	492c      	ldr	r1, [pc, #176]	; (801592c <udp_connect+0xcc>)
 801587c:	482c      	ldr	r0, [pc, #176]	; (8015930 <udp_connect+0xd0>)
 801587e:	f004 fd4b 	bl	801a318 <iprintf>
 8015882:	f06f 030f 	mvn.w	r3, #15
 8015886:	e04b      	b.n	8015920 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d109      	bne.n	80158a2 <udp_connect+0x42>
 801588e:	4b26      	ldr	r3, [pc, #152]	; (8015928 <udp_connect+0xc8>)
 8015890:	f240 4236 	movw	r2, #1078	; 0x436
 8015894:	4927      	ldr	r1, [pc, #156]	; (8015934 <udp_connect+0xd4>)
 8015896:	4826      	ldr	r0, [pc, #152]	; (8015930 <udp_connect+0xd0>)
 8015898:	f004 fd3e 	bl	801a318 <iprintf>
 801589c:	f06f 030f 	mvn.w	r3, #15
 80158a0:	e03e      	b.n	8015920 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	8a5b      	ldrh	r3, [r3, #18]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d10f      	bne.n	80158ca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80158aa:	68f9      	ldr	r1, [r7, #12]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	8a5b      	ldrh	r3, [r3, #18]
 80158b0:	461a      	mov	r2, r3
 80158b2:	68f8      	ldr	r0, [r7, #12]
 80158b4:	f7ff ff4c 	bl	8015750 <udp_bind>
 80158b8:	4603      	mov	r3, r0
 80158ba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80158bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d002      	beq.n	80158ca <udp_connect+0x6a>
      return err;
 80158c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158c8:	e02a      	b.n	8015920 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <udp_connect+0x76>
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	e000      	b.n	80158d8 <udp_connect+0x78>
 80158d6:	2300      	movs	r3, #0
 80158d8:	68fa      	ldr	r2, [r7, #12]
 80158da:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	88fa      	ldrh	r2, [r7, #6]
 80158e0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	7c1b      	ldrb	r3, [r3, #16]
 80158e6:	f043 0304 	orr.w	r3, r3, #4
 80158ea:	b2da      	uxtb	r2, r3
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80158f0:	4b11      	ldr	r3, [pc, #68]	; (8015938 <udp_connect+0xd8>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	617b      	str	r3, [r7, #20]
 80158f6:	e008      	b.n	801590a <udp_connect+0xaa>
    if (pcb == ipcb) {
 80158f8:	68fa      	ldr	r2, [r7, #12]
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d101      	bne.n	8015904 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015900:	2300      	movs	r3, #0
 8015902:	e00d      	b.n	8015920 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	617b      	str	r3, [r7, #20]
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d1f3      	bne.n	80158f8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015910:	4b09      	ldr	r3, [pc, #36]	; (8015938 <udp_connect+0xd8>)
 8015912:	681a      	ldr	r2, [r3, #0]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015918:	4a07      	ldr	r2, [pc, #28]	; (8015938 <udp_connect+0xd8>)
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801591e:	2300      	movs	r3, #0
}
 8015920:	4618      	mov	r0, r3
 8015922:	3718      	adds	r7, #24
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	0801eb08 	.word	0x0801eb08
 801592c:	0801ede8 	.word	0x0801ede8
 8015930:	0801eb5c 	.word	0x0801eb5c
 8015934:	0801ee04 	.word	0x0801ee04
 8015938:	2000b4d8 	.word	0x2000b4d8

0801593c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	60f8      	str	r0, [r7, #12]
 8015944:	60b9      	str	r1, [r7, #8]
 8015946:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d107      	bne.n	801595e <udp_recv+0x22>
 801594e:	4b08      	ldr	r3, [pc, #32]	; (8015970 <udp_recv+0x34>)
 8015950:	f240 428a 	movw	r2, #1162	; 0x48a
 8015954:	4907      	ldr	r1, [pc, #28]	; (8015974 <udp_recv+0x38>)
 8015956:	4808      	ldr	r0, [pc, #32]	; (8015978 <udp_recv+0x3c>)
 8015958:	f004 fcde 	bl	801a318 <iprintf>
 801595c:	e005      	b.n	801596a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	68ba      	ldr	r2, [r7, #8]
 8015962:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	687a      	ldr	r2, [r7, #4]
 8015968:	61da      	str	r2, [r3, #28]
}
 801596a:	3710      	adds	r7, #16
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	0801eb08 	.word	0x0801eb08
 8015974:	0801ee3c 	.word	0x0801ee3c
 8015978:	0801eb5c 	.word	0x0801eb5c

0801597c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d107      	bne.n	801599a <udp_remove+0x1e>
 801598a:	4b19      	ldr	r3, [pc, #100]	; (80159f0 <udp_remove+0x74>)
 801598c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015990:	4918      	ldr	r1, [pc, #96]	; (80159f4 <udp_remove+0x78>)
 8015992:	4819      	ldr	r0, [pc, #100]	; (80159f8 <udp_remove+0x7c>)
 8015994:	f004 fcc0 	bl	801a318 <iprintf>
 8015998:	e026      	b.n	80159e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801599a:	4b18      	ldr	r3, [pc, #96]	; (80159fc <udp_remove+0x80>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d105      	bne.n	80159b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80159a4:	4b15      	ldr	r3, [pc, #84]	; (80159fc <udp_remove+0x80>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	68db      	ldr	r3, [r3, #12]
 80159aa:	4a14      	ldr	r2, [pc, #80]	; (80159fc <udp_remove+0x80>)
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	e017      	b.n	80159e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80159b0:	4b12      	ldr	r3, [pc, #72]	; (80159fc <udp_remove+0x80>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	60fb      	str	r3, [r7, #12]
 80159b6:	e010      	b.n	80159da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d009      	beq.n	80159d4 <udp_remove+0x58>
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d104      	bne.n	80159d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	68da      	ldr	r2, [r3, #12]
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	60da      	str	r2, [r3, #12]
        break;
 80159d2:	e005      	b.n	80159e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	60fb      	str	r3, [r7, #12]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1eb      	bne.n	80159b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80159e0:	6879      	ldr	r1, [r7, #4]
 80159e2:	2000      	movs	r0, #0
 80159e4:	f7f9 f834 	bl	800ea50 <memp_free>
}
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	0801eb08 	.word	0x0801eb08
 80159f4:	0801ee54 	.word	0x0801ee54
 80159f8:	0801eb5c 	.word	0x0801eb5c
 80159fc:	2000b4d8 	.word	0x2000b4d8

08015a00 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015a06:	2000      	movs	r0, #0
 8015a08:	f7f8 ffb2 	bl	800e970 <memp_malloc>
 8015a0c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d007      	beq.n	8015a24 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015a14:	2220      	movs	r2, #32
 8015a16:	2100      	movs	r1, #0
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f004 fd04 	bl	801a426 <memset>
    pcb->ttl = UDP_TTL;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	22ff      	movs	r2, #255	; 0xff
 8015a22:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015a24:	687b      	ldr	r3, [r7, #4]
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3708      	adds	r7, #8
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
	...

08015a30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015a30:	b480      	push	{r7}
 8015a32:	b085      	sub	sp, #20
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d01e      	beq.n	8015a7e <udp_netif_ip_addr_changed+0x4e>
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d01a      	beq.n	8015a7e <udp_netif_ip_addr_changed+0x4e>
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d017      	beq.n	8015a7e <udp_netif_ip_addr_changed+0x4e>
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d013      	beq.n	8015a7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015a56:	4b0d      	ldr	r3, [pc, #52]	; (8015a8c <udp_netif_ip_addr_changed+0x5c>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	60fb      	str	r3, [r7, #12]
 8015a5c:	e00c      	b.n	8015a78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d103      	bne.n	8015a72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	60fb      	str	r3, [r7, #12]
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d1ef      	bne.n	8015a5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015a7e:	bf00      	nop
 8015a80:	3714      	adds	r7, #20
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop
 8015a8c:	2000b4d8 	.word	0x2000b4d8

08015a90 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015a94:	4b20      	ldr	r3, [pc, #128]	; (8015b18 <dhcp_inc_pcb_refcount+0x88>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d133      	bne.n	8015b04 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015a9c:	4b1f      	ldr	r3, [pc, #124]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d005      	beq.n	8015ab0 <dhcp_inc_pcb_refcount+0x20>
 8015aa4:	4b1e      	ldr	r3, [pc, #120]	; (8015b20 <dhcp_inc_pcb_refcount+0x90>)
 8015aa6:	22e5      	movs	r2, #229	; 0xe5
 8015aa8:	491e      	ldr	r1, [pc, #120]	; (8015b24 <dhcp_inc_pcb_refcount+0x94>)
 8015aaa:	481f      	ldr	r0, [pc, #124]	; (8015b28 <dhcp_inc_pcb_refcount+0x98>)
 8015aac:	f004 fc34 	bl	801a318 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015ab0:	f7ff ffa6 	bl	8015a00 <udp_new>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	4a19      	ldr	r2, [pc, #100]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015ab8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015aba:	4b18      	ldr	r3, [pc, #96]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d102      	bne.n	8015ac8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ac6:	e024      	b.n	8015b12 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015ac8:	4b14      	ldr	r3, [pc, #80]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	7a5a      	ldrb	r2, [r3, #9]
 8015ace:	4b13      	ldr	r3, [pc, #76]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	f042 0220 	orr.w	r2, r2, #32
 8015ad6:	b2d2      	uxtb	r2, r2
 8015ad8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015ada:	4b10      	ldr	r3, [pc, #64]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2244      	movs	r2, #68	; 0x44
 8015ae0:	4912      	ldr	r1, [pc, #72]	; (8015b2c <dhcp_inc_pcb_refcount+0x9c>)
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff fe34 	bl	8015750 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015ae8:	4b0c      	ldr	r3, [pc, #48]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	2243      	movs	r2, #67	; 0x43
 8015aee:	490f      	ldr	r1, [pc, #60]	; (8015b2c <dhcp_inc_pcb_refcount+0x9c>)
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7ff feb5 	bl	8015860 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015af6:	4b09      	ldr	r3, [pc, #36]	; (8015b1c <dhcp_inc_pcb_refcount+0x8c>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2200      	movs	r2, #0
 8015afc:	490c      	ldr	r1, [pc, #48]	; (8015b30 <dhcp_inc_pcb_refcount+0xa0>)
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7ff ff1c 	bl	801593c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015b04:	4b04      	ldr	r3, [pc, #16]	; (8015b18 <dhcp_inc_pcb_refcount+0x88>)
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	3301      	adds	r3, #1
 8015b0a:	b2da      	uxtb	r2, r3
 8015b0c:	4b02      	ldr	r3, [pc, #8]	; (8015b18 <dhcp_inc_pcb_refcount+0x88>)
 8015b0e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015b10:	2300      	movs	r3, #0
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	2000b508 	.word	0x2000b508
 8015b1c:	2000b504 	.word	0x2000b504
 8015b20:	0801ee6c 	.word	0x0801ee6c
 8015b24:	0801eea4 	.word	0x0801eea4
 8015b28:	0801eecc 	.word	0x0801eecc
 8015b2c:	0801fbe8 	.word	0x0801fbe8
 8015b30:	080173c9 	.word	0x080173c9

08015b34 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015b38:	4b0e      	ldr	r3, [pc, #56]	; (8015b74 <dhcp_dec_pcb_refcount+0x40>)
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d105      	bne.n	8015b4c <dhcp_dec_pcb_refcount+0x18>
 8015b40:	4b0d      	ldr	r3, [pc, #52]	; (8015b78 <dhcp_dec_pcb_refcount+0x44>)
 8015b42:	22ff      	movs	r2, #255	; 0xff
 8015b44:	490d      	ldr	r1, [pc, #52]	; (8015b7c <dhcp_dec_pcb_refcount+0x48>)
 8015b46:	480e      	ldr	r0, [pc, #56]	; (8015b80 <dhcp_dec_pcb_refcount+0x4c>)
 8015b48:	f004 fbe6 	bl	801a318 <iprintf>
  dhcp_pcb_refcount--;
 8015b4c:	4b09      	ldr	r3, [pc, #36]	; (8015b74 <dhcp_dec_pcb_refcount+0x40>)
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	3b01      	subs	r3, #1
 8015b52:	b2da      	uxtb	r2, r3
 8015b54:	4b07      	ldr	r3, [pc, #28]	; (8015b74 <dhcp_dec_pcb_refcount+0x40>)
 8015b56:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015b58:	4b06      	ldr	r3, [pc, #24]	; (8015b74 <dhcp_dec_pcb_refcount+0x40>)
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d107      	bne.n	8015b70 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015b60:	4b08      	ldr	r3, [pc, #32]	; (8015b84 <dhcp_dec_pcb_refcount+0x50>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7ff ff09 	bl	801597c <udp_remove>
    dhcp_pcb = NULL;
 8015b6a:	4b06      	ldr	r3, [pc, #24]	; (8015b84 <dhcp_dec_pcb_refcount+0x50>)
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	601a      	str	r2, [r3, #0]
  }
}
 8015b70:	bf00      	nop
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	2000b508 	.word	0x2000b508
 8015b78:	0801ee6c 	.word	0x0801ee6c
 8015b7c:	0801eef4 	.word	0x0801eef4
 8015b80:	0801eecc 	.word	0x0801eecc
 8015b84:	2000b504 	.word	0x2000b504

08015b88 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015b96:	210c      	movs	r1, #12
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f001 f857 	bl	8016c4c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015b9e:	4b06      	ldr	r3, [pc, #24]	; (8015bb8 <dhcp_handle_nak+0x30>)
 8015ba0:	4a05      	ldr	r2, [pc, #20]	; (8015bb8 <dhcp_handle_nak+0x30>)
 8015ba2:	4905      	ldr	r1, [pc, #20]	; (8015bb8 <dhcp_handle_nak+0x30>)
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7f9 f8f5 	bl	800ed94 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f000 fc4a 	bl	8016444 <dhcp_discover>
}
 8015bb0:	bf00      	nop
 8015bb2:	3710      	adds	r7, #16
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}
 8015bb8:	0801fbe8 	.word	0x0801fbe8

08015bbc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b084      	sub	sp, #16
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015bca:	2108      	movs	r1, #8
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f001 f83d 	bl	8016c4c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	331c      	adds	r3, #28
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	4619      	mov	r1, r3
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f002 fb3e 	bl	801825c <etharp_query>
 8015be0:	4603      	mov	r3, r0
 8015be2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	799b      	ldrb	r3, [r3, #6]
 8015be8:	2bff      	cmp	r3, #255	; 0xff
 8015bea:	d005      	beq.n	8015bf8 <dhcp_check+0x3c>
    dhcp->tries++;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	799b      	ldrb	r3, [r3, #6]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015bf8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015bfc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015bfe:	893b      	ldrh	r3, [r7, #8]
 8015c00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c04:	4a06      	ldr	r2, [pc, #24]	; (8015c20 <dhcp_check+0x64>)
 8015c06:	fb82 1203 	smull	r1, r2, r2, r3
 8015c0a:	1152      	asrs	r2, r2, #5
 8015c0c:	17db      	asrs	r3, r3, #31
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	b29a      	uxth	r2, r3
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015c16:	bf00      	nop
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	10624dd3 	.word	0x10624dd3

08015c24 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c32:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015c34:	4b0c      	ldr	r3, [pc, #48]	; (8015c68 <dhcp_handle_offer+0x44>)
 8015c36:	789b      	ldrb	r3, [r3, #2]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d011      	beq.n	8015c60 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015c42:	4b0a      	ldr	r3, [pc, #40]	; (8015c6c <dhcp_handle_offer+0x48>)
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7f8 fa2f 	bl	800e0aa <lwip_htonl>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	691a      	ldr	r2, [r3, #16]
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015c5a:	6878      	ldr	r0, [r7, #4]
 8015c5c:	f000 f808 	bl	8015c70 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015c60:	bf00      	nop
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	2000b4fc 	.word	0x2000b4fc
 8015c6c:	2000b4dc 	.word	0x2000b4dc

08015c70 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015c70:	b5b0      	push	{r4, r5, r7, lr}
 8015c72:	b08a      	sub	sp, #40	; 0x28
 8015c74:	af02      	add	r7, sp, #8
 8015c76:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d109      	bne.n	8015c92 <dhcp_select+0x22>
 8015c7e:	4b71      	ldr	r3, [pc, #452]	; (8015e44 <dhcp_select+0x1d4>)
 8015c80:	f240 1277 	movw	r2, #375	; 0x177
 8015c84:	4970      	ldr	r1, [pc, #448]	; (8015e48 <dhcp_select+0x1d8>)
 8015c86:	4871      	ldr	r0, [pc, #452]	; (8015e4c <dhcp_select+0x1dc>)
 8015c88:	f004 fb46 	bl	801a318 <iprintf>
 8015c8c:	f06f 030f 	mvn.w	r3, #15
 8015c90:	e0d3      	b.n	8015e3a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c96:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d109      	bne.n	8015cb2 <dhcp_select+0x42>
 8015c9e:	4b69      	ldr	r3, [pc, #420]	; (8015e44 <dhcp_select+0x1d4>)
 8015ca0:	f240 1279 	movw	r2, #377	; 0x179
 8015ca4:	496a      	ldr	r1, [pc, #424]	; (8015e50 <dhcp_select+0x1e0>)
 8015ca6:	4869      	ldr	r0, [pc, #420]	; (8015e4c <dhcp_select+0x1dc>)
 8015ca8:	f004 fb36 	bl	801a318 <iprintf>
 8015cac:	f06f 0305 	mvn.w	r3, #5
 8015cb0:	e0c3      	b.n	8015e3a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	69b8      	ldr	r0, [r7, #24]
 8015cb6:	f000 ffc9 	bl	8016c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015cba:	f107 030c 	add.w	r3, r7, #12
 8015cbe:	2203      	movs	r2, #3
 8015cc0:	69b9      	ldr	r1, [r7, #24]
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f001 fc4e 	bl	8017564 <dhcp_create_msg>
 8015cc8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f000 8085 	beq.w	8015ddc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015cd8:	89b8      	ldrh	r0, [r7, #12]
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ce0:	2302      	movs	r3, #2
 8015ce2:	2239      	movs	r2, #57	; 0x39
 8015ce4:	f000 ffcc 	bl	8016c80 <dhcp_option>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015cec:	89b8      	ldrh	r0, [r7, #12]
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	f001 f81b 	bl	8016d34 <dhcp_option_short>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015d02:	89b8      	ldrh	r0, [r7, #12]
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d0a:	2304      	movs	r3, #4
 8015d0c:	2232      	movs	r2, #50	; 0x32
 8015d0e:	f000 ffb7 	bl	8016c80 <dhcp_option>
 8015d12:	4603      	mov	r3, r0
 8015d14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015d16:	89bc      	ldrh	r4, [r7, #12]
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	69db      	ldr	r3, [r3, #28]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7f8 f9c1 	bl	800e0aa <lwip_htonl>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	4620      	mov	r0, r4
 8015d30:	f001 f832 	bl	8016d98 <dhcp_option_long>
 8015d34:	4603      	mov	r3, r0
 8015d36:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015d38:	89b8      	ldrh	r0, [r7, #12]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d40:	2304      	movs	r3, #4
 8015d42:	2236      	movs	r2, #54	; 0x36
 8015d44:	f000 ff9c 	bl	8016c80 <dhcp_option>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015d4c:	89bc      	ldrh	r4, [r7, #12]
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	699b      	ldr	r3, [r3, #24]
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f8 f9a6 	bl	800e0aa <lwip_htonl>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	461a      	mov	r2, r3
 8015d62:	4629      	mov	r1, r5
 8015d64:	4620      	mov	r0, r4
 8015d66:	f001 f817 	bl	8016d98 <dhcp_option_long>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015d6e:	89b8      	ldrh	r0, [r7, #12]
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d76:	2303      	movs	r3, #3
 8015d78:	2237      	movs	r2, #55	; 0x37
 8015d7a:	f000 ff81 	bl	8016c80 <dhcp_option>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015d82:	2300      	movs	r3, #0
 8015d84:	77bb      	strb	r3, [r7, #30]
 8015d86:	e00e      	b.n	8015da6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015d88:	89b8      	ldrh	r0, [r7, #12]
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d90:	7fbb      	ldrb	r3, [r7, #30]
 8015d92:	4a30      	ldr	r2, [pc, #192]	; (8015e54 <dhcp_select+0x1e4>)
 8015d94:	5cd3      	ldrb	r3, [r2, r3]
 8015d96:	461a      	mov	r2, r3
 8015d98:	f000 ffa6 	bl	8016ce8 <dhcp_option_byte>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015da0:	7fbb      	ldrb	r3, [r7, #30]
 8015da2:	3301      	adds	r3, #1
 8015da4:	77bb      	strb	r3, [r7, #30]
 8015da6:	7fbb      	ldrb	r3, [r7, #30]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d9ed      	bls.n	8015d88 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015dac:	89b8      	ldrh	r0, [r7, #12]
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	33f0      	adds	r3, #240	; 0xf0
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	4619      	mov	r1, r3
 8015db6:	f001 fcab 	bl	8017710 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015dba:	4b27      	ldr	r3, [pc, #156]	; (8015e58 <dhcp_select+0x1e8>)
 8015dbc:	6818      	ldr	r0, [r3, #0]
 8015dbe:	4b27      	ldr	r3, [pc, #156]	; (8015e5c <dhcp_select+0x1ec>)
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	2343      	movs	r3, #67	; 0x43
 8015dc8:	4a25      	ldr	r2, [pc, #148]	; (8015e60 <dhcp_select+0x1f0>)
 8015dca:	6979      	ldr	r1, [r7, #20]
 8015dcc:	f7ff fbda 	bl	8015584 <udp_sendto_if_src>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015dd4:	6978      	ldr	r0, [r7, #20]
 8015dd6:	f7f9 fc9d 	bl	800f714 <pbuf_free>
 8015dda:	e001      	b.n	8015de0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015ddc:	23ff      	movs	r3, #255	; 0xff
 8015dde:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015de0:	69bb      	ldr	r3, [r7, #24]
 8015de2:	799b      	ldrb	r3, [r3, #6]
 8015de4:	2bff      	cmp	r3, #255	; 0xff
 8015de6:	d005      	beq.n	8015df4 <dhcp_select+0x184>
    dhcp->tries++;
 8015de8:	69bb      	ldr	r3, [r7, #24]
 8015dea:	799b      	ldrb	r3, [r3, #6]
 8015dec:	3301      	adds	r3, #1
 8015dee:	b2da      	uxtb	r2, r3
 8015df0:	69bb      	ldr	r3, [r7, #24]
 8015df2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015df4:	69bb      	ldr	r3, [r7, #24]
 8015df6:	799b      	ldrb	r3, [r3, #6]
 8015df8:	2b05      	cmp	r3, #5
 8015dfa:	d80d      	bhi.n	8015e18 <dhcp_select+0x1a8>
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	799b      	ldrb	r3, [r3, #6]
 8015e00:	461a      	mov	r2, r3
 8015e02:	2301      	movs	r3, #1
 8015e04:	4093      	lsls	r3, r2
 8015e06:	b29b      	uxth	r3, r3
 8015e08:	461a      	mov	r2, r3
 8015e0a:	0152      	lsls	r2, r2, #5
 8015e0c:	1ad2      	subs	r2, r2, r3
 8015e0e:	0092      	lsls	r2, r2, #2
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	e001      	b.n	8015e1c <dhcp_select+0x1ac>
 8015e18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015e1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e1e:	89fb      	ldrh	r3, [r7, #14]
 8015e20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015e24:	4a0f      	ldr	r2, [pc, #60]	; (8015e64 <dhcp_select+0x1f4>)
 8015e26:	fb82 1203 	smull	r1, r2, r2, r3
 8015e2a:	1152      	asrs	r2, r2, #5
 8015e2c:	17db      	asrs	r3, r3, #31
 8015e2e:	1ad3      	subs	r3, r2, r3
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015e36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3720      	adds	r7, #32
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bdb0      	pop	{r4, r5, r7, pc}
 8015e42:	bf00      	nop
 8015e44:	0801ee6c 	.word	0x0801ee6c
 8015e48:	0801ef18 	.word	0x0801ef18
 8015e4c:	0801eecc 	.word	0x0801eecc
 8015e50:	0801ef34 	.word	0x0801ef34
 8015e54:	20000044 	.word	0x20000044
 8015e58:	2000b504 	.word	0x2000b504
 8015e5c:	0801fbe8 	.word	0x0801fbe8
 8015e60:	0801fbec 	.word	0x0801fbec
 8015e64:	10624dd3 	.word	0x10624dd3

08015e68 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015e6e:	4b27      	ldr	r3, [pc, #156]	; (8015f0c <dhcp_coarse_tmr+0xa4>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	607b      	str	r3, [r7, #4]
 8015e74:	e042      	b.n	8015efc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d039      	beq.n	8015ef6 <dhcp_coarse_tmr+0x8e>
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	795b      	ldrb	r3, [r3, #5]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d035      	beq.n	8015ef6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	8a9b      	ldrh	r3, [r3, #20]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d012      	beq.n	8015eb8 <dhcp_coarse_tmr+0x50>
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	8a5b      	ldrh	r3, [r3, #18]
 8015e96:	3301      	adds	r3, #1
 8015e98:	b29a      	uxth	r2, r3
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	825a      	strh	r2, [r3, #18]
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	8a5a      	ldrh	r2, [r3, #18]
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	8a9b      	ldrh	r3, [r3, #20]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d106      	bne.n	8015eb8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 fe34 	bl	8016b18 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 f96b 	bl	801618c <dhcp_start>
 8015eb6:	e01e      	b.n	8015ef6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	8a1b      	ldrh	r3, [r3, #16]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00b      	beq.n	8015ed8 <dhcp_coarse_tmr+0x70>
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	8a1b      	ldrh	r3, [r3, #16]
 8015ec4:	1e5a      	subs	r2, r3, #1
 8015ec6:	b291      	uxth	r1, r2
 8015ec8:	683a      	ldr	r2, [r7, #0]
 8015eca:	8211      	strh	r1, [r2, #16]
 8015ecc:	2b01      	cmp	r3, #1
 8015ece:	d103      	bne.n	8015ed8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f000 f8c7 	bl	8016064 <dhcp_t2_timeout>
 8015ed6:	e00e      	b.n	8015ef6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	89db      	ldrh	r3, [r3, #14]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d00a      	beq.n	8015ef6 <dhcp_coarse_tmr+0x8e>
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	89db      	ldrh	r3, [r3, #14]
 8015ee4:	1e5a      	subs	r2, r3, #1
 8015ee6:	b291      	uxth	r1, r2
 8015ee8:	683a      	ldr	r2, [r7, #0]
 8015eea:	81d1      	strh	r1, [r2, #14]
 8015eec:	2b01      	cmp	r3, #1
 8015eee:	d102      	bne.n	8015ef6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f000 f888 	bl	8016006 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	607b      	str	r3, [r7, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d1b9      	bne.n	8015e76 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015f02:	bf00      	nop
 8015f04:	bf00      	nop
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	2000b470 	.word	0x2000b470

08015f10 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015f16:	4b16      	ldr	r3, [pc, #88]	; (8015f70 <dhcp_fine_tmr+0x60>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	607b      	str	r3, [r7, #4]
 8015f1c:	e020      	b.n	8015f60 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f22:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d017      	beq.n	8015f5a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	891b      	ldrh	r3, [r3, #8]
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d906      	bls.n	8015f40 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015f32:	683b      	ldr	r3, [r7, #0]
 8015f34:	891b      	ldrh	r3, [r3, #8]
 8015f36:	3b01      	subs	r3, #1
 8015f38:	b29a      	uxth	r2, r3
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	811a      	strh	r2, [r3, #8]
 8015f3e:	e00c      	b.n	8015f5a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	891b      	ldrh	r3, [r3, #8]
 8015f44:	2b01      	cmp	r3, #1
 8015f46:	d108      	bne.n	8015f5a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	891b      	ldrh	r3, [r3, #8]
 8015f4c:	3b01      	subs	r3, #1
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f000 f80d 	bl	8015f74 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	607b      	str	r3, [r7, #4]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d1db      	bne.n	8015f1e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015f66:	bf00      	nop
 8015f68:	bf00      	nop
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	2000b470 	.word	0x2000b470

08015f74 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	795b      	ldrb	r3, [r3, #5]
 8015f86:	2b0c      	cmp	r3, #12
 8015f88:	d003      	beq.n	8015f92 <dhcp_timeout+0x1e>
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	795b      	ldrb	r3, [r3, #5]
 8015f8e:	2b06      	cmp	r3, #6
 8015f90:	d103      	bne.n	8015f9a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 fa56 	bl	8016444 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015f98:	e031      	b.n	8015ffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	795b      	ldrb	r3, [r3, #5]
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d10e      	bne.n	8015fc0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	799b      	ldrb	r3, [r3, #6]
 8015fa6:	2b05      	cmp	r3, #5
 8015fa8:	d803      	bhi.n	8015fb2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ff fe60 	bl	8015c70 <dhcp_select>
}
 8015fb0:	e025      	b.n	8015ffe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 fdb0 	bl	8016b18 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 f8e7 	bl	801618c <dhcp_start>
}
 8015fbe:	e01e      	b.n	8015ffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	795b      	ldrb	r3, [r3, #5]
 8015fc4:	2b08      	cmp	r3, #8
 8015fc6:	d10b      	bne.n	8015fe0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	799b      	ldrb	r3, [r3, #6]
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d803      	bhi.n	8015fd8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7ff fdf3 	bl	8015bbc <dhcp_check>
}
 8015fd6:	e012      	b.n	8015ffe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f000 fad5 	bl	8016588 <dhcp_bind>
}
 8015fde:	e00e      	b.n	8015ffe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	795b      	ldrb	r3, [r3, #5]
 8015fe4:	2b03      	cmp	r3, #3
 8015fe6:	d10a      	bne.n	8015ffe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	799b      	ldrb	r3, [r3, #6]
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d803      	bhi.n	8015ff8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 fcdb 	bl	80169ac <dhcp_reboot>
}
 8015ff6:	e002      	b.n	8015ffe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fa23 	bl	8016444 <dhcp_discover>
}
 8015ffe:	bf00      	nop
 8016000:	3710      	adds	r7, #16
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}

08016006 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016006:	b580      	push	{r7, lr}
 8016008:	b084      	sub	sp, #16
 801600a:	af00      	add	r7, sp, #0
 801600c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016012:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	795b      	ldrb	r3, [r3, #5]
 8016018:	2b01      	cmp	r3, #1
 801601a:	d007      	beq.n	801602c <dhcp_t1_timeout+0x26>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	795b      	ldrb	r3, [r3, #5]
 8016020:	2b0a      	cmp	r3, #10
 8016022:	d003      	beq.n	801602c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016028:	2b05      	cmp	r3, #5
 801602a:	d117      	bne.n	801605c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 fb85 	bl	801673c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	899b      	ldrh	r3, [r3, #12]
 8016036:	461a      	mov	r2, r3
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	8a5b      	ldrh	r3, [r3, #18]
 801603c:	1ad3      	subs	r3, r2, r3
 801603e:	2b01      	cmp	r3, #1
 8016040:	dd0c      	ble.n	801605c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	899b      	ldrh	r3, [r3, #12]
 8016046:	461a      	mov	r2, r3
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	8a5b      	ldrh	r3, [r3, #18]
 801604c:	1ad3      	subs	r3, r2, r3
 801604e:	2b00      	cmp	r3, #0
 8016050:	da00      	bge.n	8016054 <dhcp_t1_timeout+0x4e>
 8016052:	3301      	adds	r3, #1
 8016054:	105b      	asrs	r3, r3, #1
 8016056:	b29a      	uxth	r2, r3
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801605c:	bf00      	nop
 801605e:	3710      	adds	r7, #16
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016070:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	795b      	ldrb	r3, [r3, #5]
 8016076:	2b01      	cmp	r3, #1
 8016078:	d00b      	beq.n	8016092 <dhcp_t2_timeout+0x2e>
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	795b      	ldrb	r3, [r3, #5]
 801607e:	2b0a      	cmp	r3, #10
 8016080:	d007      	beq.n	8016092 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016086:	2b05      	cmp	r3, #5
 8016088:	d003      	beq.n	8016092 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	795b      	ldrb	r3, [r3, #5]
 801608e:	2b04      	cmp	r3, #4
 8016090:	d117      	bne.n	80160c2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 fbee 	bl	8016874 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	8a9b      	ldrh	r3, [r3, #20]
 801609c:	461a      	mov	r2, r3
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	8a5b      	ldrh	r3, [r3, #18]
 80160a2:	1ad3      	subs	r3, r2, r3
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	dd0c      	ble.n	80160c2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	8a9b      	ldrh	r3, [r3, #20]
 80160ac:	461a      	mov	r2, r3
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	8a5b      	ldrh	r3, [r3, #18]
 80160b2:	1ad3      	subs	r3, r2, r3
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	da00      	bge.n	80160ba <dhcp_t2_timeout+0x56>
 80160b8:	3301      	adds	r3, #1
 80160ba:	105b      	asrs	r3, r3, #1
 80160bc:	b29a      	uxth	r2, r3
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80160c2:	bf00      	nop
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
	...

080160cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160da:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2200      	movs	r2, #0
 80160e0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2200      	movs	r2, #0
 80160e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80160e8:	4b26      	ldr	r3, [pc, #152]	; (8016184 <dhcp_handle_ack+0xb8>)
 80160ea:	78db      	ldrb	r3, [r3, #3]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d003      	beq.n	80160f8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80160f0:	4b25      	ldr	r3, [pc, #148]	; (8016188 <dhcp_handle_ack+0xbc>)
 80160f2:	68da      	ldr	r2, [r3, #12]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80160f8:	4b22      	ldr	r3, [pc, #136]	; (8016184 <dhcp_handle_ack+0xb8>)
 80160fa:	791b      	ldrb	r3, [r3, #4]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d004      	beq.n	801610a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016100:	4b21      	ldr	r3, [pc, #132]	; (8016188 <dhcp_handle_ack+0xbc>)
 8016102:	691a      	ldr	r2, [r3, #16]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	62da      	str	r2, [r3, #44]	; 0x2c
 8016108:	e004      	b.n	8016114 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801610e:	085a      	lsrs	r2, r3, #1
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016114:	4b1b      	ldr	r3, [pc, #108]	; (8016184 <dhcp_handle_ack+0xb8>)
 8016116:	795b      	ldrb	r3, [r3, #5]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d004      	beq.n	8016126 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801611c:	4b1a      	ldr	r3, [pc, #104]	; (8016188 <dhcp_handle_ack+0xbc>)
 801611e:	695a      	ldr	r2, [r3, #20]
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	631a      	str	r2, [r3, #48]	; 0x30
 8016124:	e007      	b.n	8016136 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801612a:	4613      	mov	r3, r2
 801612c:	00db      	lsls	r3, r3, #3
 801612e:	1a9b      	subs	r3, r3, r2
 8016130:	08da      	lsrs	r2, r3, #3
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	691a      	ldr	r2, [r3, #16]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801613e:	4b11      	ldr	r3, [pc, #68]	; (8016184 <dhcp_handle_ack+0xb8>)
 8016140:	799b      	ldrb	r3, [r3, #6]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d00b      	beq.n	801615e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016146:	4b10      	ldr	r3, [pc, #64]	; (8016188 <dhcp_handle_ack+0xbc>)
 8016148:	699b      	ldr	r3, [r3, #24]
 801614a:	4618      	mov	r0, r3
 801614c:	f7f7 ffad 	bl	800e0aa <lwip_htonl>
 8016150:	4602      	mov	r2, r0
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2201      	movs	r2, #1
 801615a:	71da      	strb	r2, [r3, #7]
 801615c:	e002      	b.n	8016164 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016164:	4b07      	ldr	r3, [pc, #28]	; (8016184 <dhcp_handle_ack+0xb8>)
 8016166:	79db      	ldrb	r3, [r3, #7]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d007      	beq.n	801617c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801616c:	4b06      	ldr	r3, [pc, #24]	; (8016188 <dhcp_handle_ack+0xbc>)
 801616e:	69db      	ldr	r3, [r3, #28]
 8016170:	4618      	mov	r0, r3
 8016172:	f7f7 ff9a 	bl	800e0aa <lwip_htonl>
 8016176:	4602      	mov	r2, r0
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801617c:	bf00      	nop
 801617e:	3710      	adds	r7, #16
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	2000b4fc 	.word	0x2000b4fc
 8016188:	2000b4dc 	.word	0x2000b4dc

0801618c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d109      	bne.n	80161ae <dhcp_start+0x22>
 801619a:	4b37      	ldr	r3, [pc, #220]	; (8016278 <dhcp_start+0xec>)
 801619c:	f240 22e7 	movw	r2, #743	; 0x2e7
 80161a0:	4936      	ldr	r1, [pc, #216]	; (801627c <dhcp_start+0xf0>)
 80161a2:	4837      	ldr	r0, [pc, #220]	; (8016280 <dhcp_start+0xf4>)
 80161a4:	f004 f8b8 	bl	801a318 <iprintf>
 80161a8:	f06f 030f 	mvn.w	r3, #15
 80161ac:	e060      	b.n	8016270 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161b4:	f003 0301 	and.w	r3, r3, #1
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d109      	bne.n	80161d0 <dhcp_start+0x44>
 80161bc:	4b2e      	ldr	r3, [pc, #184]	; (8016278 <dhcp_start+0xec>)
 80161be:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80161c2:	4930      	ldr	r1, [pc, #192]	; (8016284 <dhcp_start+0xf8>)
 80161c4:	482e      	ldr	r0, [pc, #184]	; (8016280 <dhcp_start+0xf4>)
 80161c6:	f004 f8a7 	bl	801a318 <iprintf>
 80161ca:	f06f 030f 	mvn.w	r3, #15
 80161ce:	e04f      	b.n	8016270 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80161de:	d202      	bcs.n	80161e6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80161e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161e4:	e044      	b.n	8016270 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d10d      	bne.n	8016208 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80161ec:	2034      	movs	r0, #52	; 0x34
 80161ee:	f7f8 fa2f 	bl	800e650 <mem_malloc>
 80161f2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d102      	bne.n	8016200 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80161fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161fe:	e037      	b.n	8016270 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	68fa      	ldr	r2, [r7, #12]
 8016204:	625a      	str	r2, [r3, #36]	; 0x24
 8016206:	e005      	b.n	8016214 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	791b      	ldrb	r3, [r3, #4]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d001      	beq.n	8016214 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016210:	f7ff fc90 	bl	8015b34 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016214:	2234      	movs	r2, #52	; 0x34
 8016216:	2100      	movs	r1, #0
 8016218:	68f8      	ldr	r0, [r7, #12]
 801621a:	f004 f904 	bl	801a426 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801621e:	f7ff fc37 	bl	8015a90 <dhcp_inc_pcb_refcount>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d002      	beq.n	801622e <dhcp_start+0xa2>
    return ERR_MEM;
 8016228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801622c:	e020      	b.n	8016270 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2201      	movs	r2, #1
 8016232:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801623a:	f003 0304 	and.w	r3, r3, #4
 801623e:	2b00      	cmp	r3, #0
 8016240:	d105      	bne.n	801624e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016242:	2102      	movs	r1, #2
 8016244:	68f8      	ldr	r0, [r7, #12]
 8016246:	f000 fd01 	bl	8016c4c <dhcp_set_state>
    return ERR_OK;
 801624a:	2300      	movs	r3, #0
 801624c:	e010      	b.n	8016270 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 f8f8 	bl	8016444 <dhcp_discover>
 8016254:	4603      	mov	r3, r0
 8016256:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016258:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d005      	beq.n	801626c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f000 fc59 	bl	8016b18 <dhcp_release_and_stop>
    return ERR_MEM;
 8016266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801626a:	e001      	b.n	8016270 <dhcp_start+0xe4>
  }
  return result;
 801626c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016270:	4618      	mov	r0, r3
 8016272:	3710      	adds	r7, #16
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}
 8016278:	0801ee6c 	.word	0x0801ee6c
 801627c:	0801ef50 	.word	0x0801ef50
 8016280:	0801eecc 	.word	0x0801eecc
 8016284:	0801ef94 	.word	0x0801ef94

08016288 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016294:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d025      	beq.n	80162e8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	795b      	ldrb	r3, [r3, #5]
 80162a0:	2b0a      	cmp	r3, #10
 80162a2:	d008      	beq.n	80162b6 <dhcp_network_changed+0x2e>
 80162a4:	2b0a      	cmp	r3, #10
 80162a6:	dc0d      	bgt.n	80162c4 <dhcp_network_changed+0x3c>
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d01f      	beq.n	80162ec <dhcp_network_changed+0x64>
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	db09      	blt.n	80162c4 <dhcp_network_changed+0x3c>
 80162b0:	3b03      	subs	r3, #3
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	d806      	bhi.n	80162c4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2200      	movs	r2, #0
 80162ba:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 fb75 	bl	80169ac <dhcp_reboot>
      break;
 80162c2:	e014      	b.n	80162ee <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	795b      	ldrb	r3, [r3, #5]
 80162c8:	2b0c      	cmp	r3, #12
 80162ca:	d906      	bls.n	80162da <dhcp_network_changed+0x52>
 80162cc:	4b09      	ldr	r3, [pc, #36]	; (80162f4 <dhcp_network_changed+0x6c>)
 80162ce:	f240 326d 	movw	r2, #877	; 0x36d
 80162d2:	4909      	ldr	r1, [pc, #36]	; (80162f8 <dhcp_network_changed+0x70>)
 80162d4:	4809      	ldr	r0, [pc, #36]	; (80162fc <dhcp_network_changed+0x74>)
 80162d6:	f004 f81f 	bl	801a318 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 f8af 	bl	8016444 <dhcp_discover>
      break;
 80162e6:	e002      	b.n	80162ee <dhcp_network_changed+0x66>
    return;
 80162e8:	bf00      	nop
 80162ea:	e000      	b.n	80162ee <dhcp_network_changed+0x66>
      break;
 80162ec:	bf00      	nop
  }
}
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	0801ee6c 	.word	0x0801ee6c
 80162f8:	0801efb8 	.word	0x0801efb8
 80162fc:	0801eecc 	.word	0x0801eecc

08016300 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d107      	bne.n	8016320 <dhcp_arp_reply+0x20>
 8016310:	4b0e      	ldr	r3, [pc, #56]	; (801634c <dhcp_arp_reply+0x4c>)
 8016312:	f240 328b 	movw	r2, #907	; 0x38b
 8016316:	490e      	ldr	r1, [pc, #56]	; (8016350 <dhcp_arp_reply+0x50>)
 8016318:	480e      	ldr	r0, [pc, #56]	; (8016354 <dhcp_arp_reply+0x54>)
 801631a:	f003 fffd 	bl	801a318 <iprintf>
 801631e:	e012      	b.n	8016346 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016324:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d00c      	beq.n	8016346 <dhcp_arp_reply+0x46>
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	795b      	ldrb	r3, [r3, #5]
 8016330:	2b08      	cmp	r3, #8
 8016332:	d108      	bne.n	8016346 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	69db      	ldr	r3, [r3, #28]
 801633c:	429a      	cmp	r2, r3
 801633e:	d102      	bne.n	8016346 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f000 f809 	bl	8016358 <dhcp_decline>
    }
  }
}
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	0801ee6c 	.word	0x0801ee6c
 8016350:	0801ef50 	.word	0x0801ef50
 8016354:	0801eecc 	.word	0x0801eecc

08016358 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016358:	b5b0      	push	{r4, r5, r7, lr}
 801635a:	b08a      	sub	sp, #40	; 0x28
 801635c:	af02      	add	r7, sp, #8
 801635e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016364:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016366:	210c      	movs	r1, #12
 8016368:	69b8      	ldr	r0, [r7, #24]
 801636a:	f000 fc6f 	bl	8016c4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801636e:	f107 030c 	add.w	r3, r7, #12
 8016372:	2204      	movs	r2, #4
 8016374:	69b9      	ldr	r1, [r7, #24]
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f001 f8f4 	bl	8017564 <dhcp_create_msg>
 801637c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d035      	beq.n	80163f0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801638a:	89b8      	ldrh	r0, [r7, #12]
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016392:	2304      	movs	r3, #4
 8016394:	2232      	movs	r2, #50	; 0x32
 8016396:	f000 fc73 	bl	8016c80 <dhcp_option>
 801639a:	4603      	mov	r3, r0
 801639c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801639e:	89bc      	ldrh	r4, [r7, #12]
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	69db      	ldr	r3, [r3, #28]
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f7 fe7d 	bl	800e0aa <lwip_htonl>
 80163b0:	4603      	mov	r3, r0
 80163b2:	461a      	mov	r2, r3
 80163b4:	4629      	mov	r1, r5
 80163b6:	4620      	mov	r0, r4
 80163b8:	f000 fcee 	bl	8016d98 <dhcp_option_long>
 80163bc:	4603      	mov	r3, r0
 80163be:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80163c0:	89b8      	ldrh	r0, [r7, #12]
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	33f0      	adds	r3, #240	; 0xf0
 80163c6:	697a      	ldr	r2, [r7, #20]
 80163c8:	4619      	mov	r1, r3
 80163ca:	f001 f9a1 	bl	8017710 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80163ce:	4b19      	ldr	r3, [pc, #100]	; (8016434 <dhcp_decline+0xdc>)
 80163d0:	6818      	ldr	r0, [r3, #0]
 80163d2:	4b19      	ldr	r3, [pc, #100]	; (8016438 <dhcp_decline+0xe0>)
 80163d4:	9301      	str	r3, [sp, #4]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	2343      	movs	r3, #67	; 0x43
 80163dc:	4a17      	ldr	r2, [pc, #92]	; (801643c <dhcp_decline+0xe4>)
 80163de:	6979      	ldr	r1, [r7, #20]
 80163e0:	f7ff f8d0 	bl	8015584 <udp_sendto_if_src>
 80163e4:	4603      	mov	r3, r0
 80163e6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80163e8:	6978      	ldr	r0, [r7, #20]
 80163ea:	f7f9 f993 	bl	800f714 <pbuf_free>
 80163ee:	e001      	b.n	80163f4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80163f0:	23ff      	movs	r3, #255	; 0xff
 80163f2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80163f4:	69bb      	ldr	r3, [r7, #24]
 80163f6:	799b      	ldrb	r3, [r3, #6]
 80163f8:	2bff      	cmp	r3, #255	; 0xff
 80163fa:	d005      	beq.n	8016408 <dhcp_decline+0xb0>
    dhcp->tries++;
 80163fc:	69bb      	ldr	r3, [r7, #24]
 80163fe:	799b      	ldrb	r3, [r3, #6]
 8016400:	3301      	adds	r3, #1
 8016402:	b2da      	uxtb	r2, r3
 8016404:	69bb      	ldr	r3, [r7, #24]
 8016406:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016408:	f242 7310 	movw	r3, #10000	; 0x2710
 801640c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801640e:	89fb      	ldrh	r3, [r7, #14]
 8016410:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016414:	4a0a      	ldr	r2, [pc, #40]	; (8016440 <dhcp_decline+0xe8>)
 8016416:	fb82 1203 	smull	r1, r2, r2, r3
 801641a:	1152      	asrs	r2, r2, #5
 801641c:	17db      	asrs	r3, r3, #31
 801641e:	1ad3      	subs	r3, r2, r3
 8016420:	b29a      	uxth	r2, r3
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016426:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801642a:	4618      	mov	r0, r3
 801642c:	3720      	adds	r7, #32
 801642e:	46bd      	mov	sp, r7
 8016430:	bdb0      	pop	{r4, r5, r7, pc}
 8016432:	bf00      	nop
 8016434:	2000b504 	.word	0x2000b504
 8016438:	0801fbe8 	.word	0x0801fbe8
 801643c:	0801fbec 	.word	0x0801fbec
 8016440:	10624dd3 	.word	0x10624dd3

08016444 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08a      	sub	sp, #40	; 0x28
 8016448:	af02      	add	r7, sp, #8
 801644a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016450:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016452:	2300      	movs	r3, #0
 8016454:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	2200      	movs	r2, #0
 801645a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801645c:	2106      	movs	r1, #6
 801645e:	69b8      	ldr	r0, [r7, #24]
 8016460:	f000 fbf4 	bl	8016c4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016464:	f107 0308 	add.w	r3, r7, #8
 8016468:	2201      	movs	r2, #1
 801646a:	69b9      	ldr	r1, [r7, #24]
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f001 f879 	bl	8017564 <dhcp_create_msg>
 8016472:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d04b      	beq.n	8016512 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016480:	8938      	ldrh	r0, [r7, #8]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016488:	2302      	movs	r3, #2
 801648a:	2239      	movs	r2, #57	; 0x39
 801648c:	f000 fbf8 	bl	8016c80 <dhcp_option>
 8016490:	4603      	mov	r3, r0
 8016492:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016494:	8938      	ldrh	r0, [r7, #8]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164a0:	461a      	mov	r2, r3
 80164a2:	f000 fc47 	bl	8016d34 <dhcp_option_short>
 80164a6:	4603      	mov	r3, r0
 80164a8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80164aa:	8938      	ldrh	r0, [r7, #8]
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164b2:	2303      	movs	r3, #3
 80164b4:	2237      	movs	r2, #55	; 0x37
 80164b6:	f000 fbe3 	bl	8016c80 <dhcp_option>
 80164ba:	4603      	mov	r3, r0
 80164bc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80164be:	2300      	movs	r3, #0
 80164c0:	77fb      	strb	r3, [r7, #31]
 80164c2:	e00e      	b.n	80164e2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80164c4:	8938      	ldrh	r0, [r7, #8]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164cc:	7ffb      	ldrb	r3, [r7, #31]
 80164ce:	4a29      	ldr	r2, [pc, #164]	; (8016574 <dhcp_discover+0x130>)
 80164d0:	5cd3      	ldrb	r3, [r2, r3]
 80164d2:	461a      	mov	r2, r3
 80164d4:	f000 fc08 	bl	8016ce8 <dhcp_option_byte>
 80164d8:	4603      	mov	r3, r0
 80164da:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80164dc:	7ffb      	ldrb	r3, [r7, #31]
 80164de:	3301      	adds	r3, #1
 80164e0:	77fb      	strb	r3, [r7, #31]
 80164e2:	7ffb      	ldrb	r3, [r7, #31]
 80164e4:	2b02      	cmp	r3, #2
 80164e6:	d9ed      	bls.n	80164c4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80164e8:	8938      	ldrh	r0, [r7, #8]
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	33f0      	adds	r3, #240	; 0xf0
 80164ee:	693a      	ldr	r2, [r7, #16]
 80164f0:	4619      	mov	r1, r3
 80164f2:	f001 f90d 	bl	8017710 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80164f6:	4b20      	ldr	r3, [pc, #128]	; (8016578 <dhcp_discover+0x134>)
 80164f8:	6818      	ldr	r0, [r3, #0]
 80164fa:	4b20      	ldr	r3, [pc, #128]	; (801657c <dhcp_discover+0x138>)
 80164fc:	9301      	str	r3, [sp, #4]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	9300      	str	r3, [sp, #0]
 8016502:	2343      	movs	r3, #67	; 0x43
 8016504:	4a1e      	ldr	r2, [pc, #120]	; (8016580 <dhcp_discover+0x13c>)
 8016506:	6939      	ldr	r1, [r7, #16]
 8016508:	f7ff f83c 	bl	8015584 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801650c:	6938      	ldr	r0, [r7, #16]
 801650e:	f7f9 f901 	bl	800f714 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	799b      	ldrb	r3, [r3, #6]
 8016516:	2bff      	cmp	r3, #255	; 0xff
 8016518:	d005      	beq.n	8016526 <dhcp_discover+0xe2>
    dhcp->tries++;
 801651a:	69bb      	ldr	r3, [r7, #24]
 801651c:	799b      	ldrb	r3, [r3, #6]
 801651e:	3301      	adds	r3, #1
 8016520:	b2da      	uxtb	r2, r3
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016526:	69bb      	ldr	r3, [r7, #24]
 8016528:	799b      	ldrb	r3, [r3, #6]
 801652a:	2b05      	cmp	r3, #5
 801652c:	d80d      	bhi.n	801654a <dhcp_discover+0x106>
 801652e:	69bb      	ldr	r3, [r7, #24]
 8016530:	799b      	ldrb	r3, [r3, #6]
 8016532:	461a      	mov	r2, r3
 8016534:	2301      	movs	r3, #1
 8016536:	4093      	lsls	r3, r2
 8016538:	b29b      	uxth	r3, r3
 801653a:	461a      	mov	r2, r3
 801653c:	0152      	lsls	r2, r2, #5
 801653e:	1ad2      	subs	r2, r2, r3
 8016540:	0092      	lsls	r2, r2, #2
 8016542:	4413      	add	r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	b29b      	uxth	r3, r3
 8016548:	e001      	b.n	801654e <dhcp_discover+0x10a>
 801654a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801654e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016550:	897b      	ldrh	r3, [r7, #10]
 8016552:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016556:	4a0b      	ldr	r2, [pc, #44]	; (8016584 <dhcp_discover+0x140>)
 8016558:	fb82 1203 	smull	r1, r2, r2, r3
 801655c:	1152      	asrs	r2, r2, #5
 801655e:	17db      	asrs	r3, r3, #31
 8016560:	1ad3      	subs	r3, r2, r3
 8016562:	b29a      	uxth	r2, r3
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3720      	adds	r7, #32
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	20000044 	.word	0x20000044
 8016578:	2000b504 	.word	0x2000b504
 801657c:	0801fbe8 	.word	0x0801fbe8
 8016580:	0801fbec 	.word	0x0801fbec
 8016584:	10624dd3 	.word	0x10624dd3

08016588 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b088      	sub	sp, #32
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d107      	bne.n	80165a6 <dhcp_bind+0x1e>
 8016596:	4b64      	ldr	r3, [pc, #400]	; (8016728 <dhcp_bind+0x1a0>)
 8016598:	f240 4215 	movw	r2, #1045	; 0x415
 801659c:	4963      	ldr	r1, [pc, #396]	; (801672c <dhcp_bind+0x1a4>)
 801659e:	4864      	ldr	r0, [pc, #400]	; (8016730 <dhcp_bind+0x1a8>)
 80165a0:	f003 feba 	bl	801a318 <iprintf>
 80165a4:	e0bc      	b.n	8016720 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165aa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d107      	bne.n	80165c2 <dhcp_bind+0x3a>
 80165b2:	4b5d      	ldr	r3, [pc, #372]	; (8016728 <dhcp_bind+0x1a0>)
 80165b4:	f240 4217 	movw	r2, #1047	; 0x417
 80165b8:	495e      	ldr	r1, [pc, #376]	; (8016734 <dhcp_bind+0x1ac>)
 80165ba:	485d      	ldr	r0, [pc, #372]	; (8016730 <dhcp_bind+0x1a8>)
 80165bc:	f003 feac 	bl	801a318 <iprintf>
 80165c0:	e0ae      	b.n	8016720 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	2200      	movs	r2, #0
 80165c6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165d0:	d019      	beq.n	8016606 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165d6:	331e      	adds	r3, #30
 80165d8:	4a57      	ldr	r2, [pc, #348]	; (8016738 <dhcp_bind+0x1b0>)
 80165da:	fba2 2303 	umull	r2, r3, r2, r3
 80165de:	095b      	lsrs	r3, r3, #5
 80165e0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165e8:	d302      	bcc.n	80165f0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80165ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165ee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80165f0:	69fb      	ldr	r3, [r7, #28]
 80165f2:	b29a      	uxth	r2, r3
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80165f8:	69bb      	ldr	r3, [r7, #24]
 80165fa:	8a9b      	ldrh	r3, [r3, #20]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d102      	bne.n	8016606 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016600:	69bb      	ldr	r3, [r7, #24]
 8016602:	2201      	movs	r2, #1
 8016604:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801660a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801660e:	d01d      	beq.n	801664c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016610:	69bb      	ldr	r3, [r7, #24]
 8016612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016614:	331e      	adds	r3, #30
 8016616:	4a48      	ldr	r2, [pc, #288]	; (8016738 <dhcp_bind+0x1b0>)
 8016618:	fba2 2303 	umull	r2, r3, r2, r3
 801661c:	095b      	lsrs	r3, r3, #5
 801661e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016626:	d302      	bcc.n	801662e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801662c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	b29a      	uxth	r2, r3
 8016632:	69bb      	ldr	r3, [r7, #24]
 8016634:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	895b      	ldrh	r3, [r3, #10]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d102      	bne.n	8016644 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801663e:	69bb      	ldr	r3, [r7, #24]
 8016640:	2201      	movs	r2, #1
 8016642:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	895a      	ldrh	r2, [r3, #10]
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016654:	d01d      	beq.n	8016692 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016656:	69bb      	ldr	r3, [r7, #24]
 8016658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801665a:	331e      	adds	r3, #30
 801665c:	4a36      	ldr	r2, [pc, #216]	; (8016738 <dhcp_bind+0x1b0>)
 801665e:	fba2 2303 	umull	r2, r3, r2, r3
 8016662:	095b      	lsrs	r3, r3, #5
 8016664:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801666c:	d302      	bcc.n	8016674 <dhcp_bind+0xec>
      timeout = 0xffff;
 801666e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016672:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016674:	69fb      	ldr	r3, [r7, #28]
 8016676:	b29a      	uxth	r2, r3
 8016678:	69bb      	ldr	r3, [r7, #24]
 801667a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801667c:	69bb      	ldr	r3, [r7, #24]
 801667e:	899b      	ldrh	r3, [r3, #12]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d102      	bne.n	801668a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016684:	69bb      	ldr	r3, [r7, #24]
 8016686:	2201      	movs	r2, #1
 8016688:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801668a:	69bb      	ldr	r3, [r7, #24]
 801668c:	899a      	ldrh	r2, [r3, #12]
 801668e:	69bb      	ldr	r3, [r7, #24]
 8016690:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016692:	69bb      	ldr	r3, [r7, #24]
 8016694:	895a      	ldrh	r2, [r3, #10]
 8016696:	69bb      	ldr	r3, [r7, #24]
 8016698:	899b      	ldrh	r3, [r3, #12]
 801669a:	429a      	cmp	r2, r3
 801669c:	d306      	bcc.n	80166ac <dhcp_bind+0x124>
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	899b      	ldrh	r3, [r3, #12]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d002      	beq.n	80166ac <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80166a6:	69bb      	ldr	r3, [r7, #24]
 80166a8:	2200      	movs	r2, #0
 80166aa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	79db      	ldrb	r3, [r3, #7]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d003      	beq.n	80166bc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80166b4:	69bb      	ldr	r3, [r7, #24]
 80166b6:	6a1b      	ldr	r3, [r3, #32]
 80166b8:	613b      	str	r3, [r7, #16]
 80166ba:	e014      	b.n	80166e6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	331c      	adds	r3, #28
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80166c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	db02      	blt.n	80166d2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80166cc:	23ff      	movs	r3, #255	; 0xff
 80166ce:	613b      	str	r3, [r7, #16]
 80166d0:	e009      	b.n	80166e6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	2bbf      	cmp	r3, #191	; 0xbf
 80166d6:	d903      	bls.n	80166e0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80166d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80166dc:	613b      	str	r3, [r7, #16]
 80166de:	e002      	b.n	80166e6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80166e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166e4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ea:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d108      	bne.n	8016704 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	69da      	ldr	r2, [r3, #28]
 80166f6:	693b      	ldr	r3, [r7, #16]
 80166f8:	4013      	ands	r3, r2
 80166fa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016702:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016704:	210a      	movs	r1, #10
 8016706:	69b8      	ldr	r0, [r7, #24]
 8016708:	f000 faa0 	bl	8016c4c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	f103 011c 	add.w	r1, r3, #28
 8016712:	f107 030c 	add.w	r3, r7, #12
 8016716:	f107 0210 	add.w	r2, r7, #16
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f7f8 fb3a 	bl	800ed94 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016720:	3720      	adds	r7, #32
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}
 8016726:	bf00      	nop
 8016728:	0801ee6c 	.word	0x0801ee6c
 801672c:	0801efcc 	.word	0x0801efcc
 8016730:	0801eecc 	.word	0x0801eecc
 8016734:	0801efe8 	.word	0x0801efe8
 8016738:	88888889 	.word	0x88888889

0801673c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b08a      	sub	sp, #40	; 0x28
 8016740:	af02      	add	r7, sp, #8
 8016742:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016748:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801674a:	2105      	movs	r1, #5
 801674c:	69b8      	ldr	r0, [r7, #24]
 801674e:	f000 fa7d 	bl	8016c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016752:	f107 030c 	add.w	r3, r7, #12
 8016756:	2203      	movs	r2, #3
 8016758:	69b9      	ldr	r1, [r7, #24]
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f000 ff02 	bl	8017564 <dhcp_create_msg>
 8016760:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d04e      	beq.n	8016806 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801676e:	89b8      	ldrh	r0, [r7, #12]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016776:	2302      	movs	r3, #2
 8016778:	2239      	movs	r2, #57	; 0x39
 801677a:	f000 fa81 	bl	8016c80 <dhcp_option>
 801677e:	4603      	mov	r3, r0
 8016780:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016782:	89b8      	ldrh	r0, [r7, #12]
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801678e:	461a      	mov	r2, r3
 8016790:	f000 fad0 	bl	8016d34 <dhcp_option_short>
 8016794:	4603      	mov	r3, r0
 8016796:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016798:	89b8      	ldrh	r0, [r7, #12]
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167a0:	2303      	movs	r3, #3
 80167a2:	2237      	movs	r2, #55	; 0x37
 80167a4:	f000 fa6c 	bl	8016c80 <dhcp_option>
 80167a8:	4603      	mov	r3, r0
 80167aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167ac:	2300      	movs	r3, #0
 80167ae:	77bb      	strb	r3, [r7, #30]
 80167b0:	e00e      	b.n	80167d0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80167b2:	89b8      	ldrh	r0, [r7, #12]
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167ba:	7fbb      	ldrb	r3, [r7, #30]
 80167bc:	4a2a      	ldr	r2, [pc, #168]	; (8016868 <dhcp_renew+0x12c>)
 80167be:	5cd3      	ldrb	r3, [r2, r3]
 80167c0:	461a      	mov	r2, r3
 80167c2:	f000 fa91 	bl	8016ce8 <dhcp_option_byte>
 80167c6:	4603      	mov	r3, r0
 80167c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167ca:	7fbb      	ldrb	r3, [r7, #30]
 80167cc:	3301      	adds	r3, #1
 80167ce:	77bb      	strb	r3, [r7, #30]
 80167d0:	7fbb      	ldrb	r3, [r7, #30]
 80167d2:	2b02      	cmp	r3, #2
 80167d4:	d9ed      	bls.n	80167b2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80167d6:	89b8      	ldrh	r0, [r7, #12]
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	33f0      	adds	r3, #240	; 0xf0
 80167dc:	697a      	ldr	r2, [r7, #20]
 80167de:	4619      	mov	r1, r3
 80167e0:	f000 ff96 	bl	8017710 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80167e4:	4b21      	ldr	r3, [pc, #132]	; (801686c <dhcp_renew+0x130>)
 80167e6:	6818      	ldr	r0, [r3, #0]
 80167e8:	69bb      	ldr	r3, [r7, #24]
 80167ea:	f103 0218 	add.w	r2, r3, #24
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	2343      	movs	r3, #67	; 0x43
 80167f4:	6979      	ldr	r1, [r7, #20]
 80167f6:	f7fe fe51 	bl	801549c <udp_sendto_if>
 80167fa:	4603      	mov	r3, r0
 80167fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80167fe:	6978      	ldr	r0, [r7, #20]
 8016800:	f7f8 ff88 	bl	800f714 <pbuf_free>
 8016804:	e001      	b.n	801680a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016806:	23ff      	movs	r3, #255	; 0xff
 8016808:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801680a:	69bb      	ldr	r3, [r7, #24]
 801680c:	799b      	ldrb	r3, [r3, #6]
 801680e:	2bff      	cmp	r3, #255	; 0xff
 8016810:	d005      	beq.n	801681e <dhcp_renew+0xe2>
    dhcp->tries++;
 8016812:	69bb      	ldr	r3, [r7, #24]
 8016814:	799b      	ldrb	r3, [r3, #6]
 8016816:	3301      	adds	r3, #1
 8016818:	b2da      	uxtb	r2, r3
 801681a:	69bb      	ldr	r3, [r7, #24]
 801681c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801681e:	69bb      	ldr	r3, [r7, #24]
 8016820:	799b      	ldrb	r3, [r3, #6]
 8016822:	2b09      	cmp	r3, #9
 8016824:	d80a      	bhi.n	801683c <dhcp_renew+0x100>
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	799b      	ldrb	r3, [r3, #6]
 801682a:	b29b      	uxth	r3, r3
 801682c:	461a      	mov	r2, r3
 801682e:	0152      	lsls	r2, r2, #5
 8016830:	1ad2      	subs	r2, r2, r3
 8016832:	0092      	lsls	r2, r2, #2
 8016834:	4413      	add	r3, r2
 8016836:	011b      	lsls	r3, r3, #4
 8016838:	b29b      	uxth	r3, r3
 801683a:	e001      	b.n	8016840 <dhcp_renew+0x104>
 801683c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016840:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016842:	89fb      	ldrh	r3, [r7, #14]
 8016844:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016848:	4a09      	ldr	r2, [pc, #36]	; (8016870 <dhcp_renew+0x134>)
 801684a:	fb82 1203 	smull	r1, r2, r2, r3
 801684e:	1152      	asrs	r2, r2, #5
 8016850:	17db      	asrs	r3, r3, #31
 8016852:	1ad3      	subs	r3, r2, r3
 8016854:	b29a      	uxth	r2, r3
 8016856:	69bb      	ldr	r3, [r7, #24]
 8016858:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801685a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3720      	adds	r7, #32
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	20000044 	.word	0x20000044
 801686c:	2000b504 	.word	0x2000b504
 8016870:	10624dd3 	.word	0x10624dd3

08016874 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b08a      	sub	sp, #40	; 0x28
 8016878:	af02      	add	r7, sp, #8
 801687a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016880:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016882:	2104      	movs	r1, #4
 8016884:	69b8      	ldr	r0, [r7, #24]
 8016886:	f000 f9e1 	bl	8016c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801688a:	f107 030c 	add.w	r3, r7, #12
 801688e:	2203      	movs	r2, #3
 8016890:	69b9      	ldr	r1, [r7, #24]
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 fe66 	bl	8017564 <dhcp_create_msg>
 8016898:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d04c      	beq.n	801693a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80168a6:	89b8      	ldrh	r0, [r7, #12]
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168ae:	2302      	movs	r3, #2
 80168b0:	2239      	movs	r2, #57	; 0x39
 80168b2:	f000 f9e5 	bl	8016c80 <dhcp_option>
 80168b6:	4603      	mov	r3, r0
 80168b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80168ba:	89b8      	ldrh	r0, [r7, #12]
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168c6:	461a      	mov	r2, r3
 80168c8:	f000 fa34 	bl	8016d34 <dhcp_option_short>
 80168cc:	4603      	mov	r3, r0
 80168ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80168d0:	89b8      	ldrh	r0, [r7, #12]
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168d8:	2303      	movs	r3, #3
 80168da:	2237      	movs	r2, #55	; 0x37
 80168dc:	f000 f9d0 	bl	8016c80 <dhcp_option>
 80168e0:	4603      	mov	r3, r0
 80168e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168e4:	2300      	movs	r3, #0
 80168e6:	77bb      	strb	r3, [r7, #30]
 80168e8:	e00e      	b.n	8016908 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80168ea:	89b8      	ldrh	r0, [r7, #12]
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168f2:	7fbb      	ldrb	r3, [r7, #30]
 80168f4:	4a29      	ldr	r2, [pc, #164]	; (801699c <dhcp_rebind+0x128>)
 80168f6:	5cd3      	ldrb	r3, [r2, r3]
 80168f8:	461a      	mov	r2, r3
 80168fa:	f000 f9f5 	bl	8016ce8 <dhcp_option_byte>
 80168fe:	4603      	mov	r3, r0
 8016900:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016902:	7fbb      	ldrb	r3, [r7, #30]
 8016904:	3301      	adds	r3, #1
 8016906:	77bb      	strb	r3, [r7, #30]
 8016908:	7fbb      	ldrb	r3, [r7, #30]
 801690a:	2b02      	cmp	r3, #2
 801690c:	d9ed      	bls.n	80168ea <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801690e:	89b8      	ldrh	r0, [r7, #12]
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	33f0      	adds	r3, #240	; 0xf0
 8016914:	697a      	ldr	r2, [r7, #20]
 8016916:	4619      	mov	r1, r3
 8016918:	f000 fefa 	bl	8017710 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801691c:	4b20      	ldr	r3, [pc, #128]	; (80169a0 <dhcp_rebind+0x12c>)
 801691e:	6818      	ldr	r0, [r3, #0]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	9300      	str	r3, [sp, #0]
 8016924:	2343      	movs	r3, #67	; 0x43
 8016926:	4a1f      	ldr	r2, [pc, #124]	; (80169a4 <dhcp_rebind+0x130>)
 8016928:	6979      	ldr	r1, [r7, #20]
 801692a:	f7fe fdb7 	bl	801549c <udp_sendto_if>
 801692e:	4603      	mov	r3, r0
 8016930:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016932:	6978      	ldr	r0, [r7, #20]
 8016934:	f7f8 feee 	bl	800f714 <pbuf_free>
 8016938:	e001      	b.n	801693e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801693a:	23ff      	movs	r3, #255	; 0xff
 801693c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801693e:	69bb      	ldr	r3, [r7, #24]
 8016940:	799b      	ldrb	r3, [r3, #6]
 8016942:	2bff      	cmp	r3, #255	; 0xff
 8016944:	d005      	beq.n	8016952 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016946:	69bb      	ldr	r3, [r7, #24]
 8016948:	799b      	ldrb	r3, [r3, #6]
 801694a:	3301      	adds	r3, #1
 801694c:	b2da      	uxtb	r2, r3
 801694e:	69bb      	ldr	r3, [r7, #24]
 8016950:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	799b      	ldrb	r3, [r3, #6]
 8016956:	2b09      	cmp	r3, #9
 8016958:	d80a      	bhi.n	8016970 <dhcp_rebind+0xfc>
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	799b      	ldrb	r3, [r3, #6]
 801695e:	b29b      	uxth	r3, r3
 8016960:	461a      	mov	r2, r3
 8016962:	0152      	lsls	r2, r2, #5
 8016964:	1ad2      	subs	r2, r2, r3
 8016966:	0092      	lsls	r2, r2, #2
 8016968:	4413      	add	r3, r2
 801696a:	00db      	lsls	r3, r3, #3
 801696c:	b29b      	uxth	r3, r3
 801696e:	e001      	b.n	8016974 <dhcp_rebind+0x100>
 8016970:	f242 7310 	movw	r3, #10000	; 0x2710
 8016974:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016976:	89fb      	ldrh	r3, [r7, #14]
 8016978:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801697c:	4a0a      	ldr	r2, [pc, #40]	; (80169a8 <dhcp_rebind+0x134>)
 801697e:	fb82 1203 	smull	r1, r2, r2, r3
 8016982:	1152      	asrs	r2, r2, #5
 8016984:	17db      	asrs	r3, r3, #31
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	b29a      	uxth	r2, r3
 801698a:	69bb      	ldr	r3, [r7, #24]
 801698c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801698e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016992:	4618      	mov	r0, r3
 8016994:	3720      	adds	r7, #32
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}
 801699a:	bf00      	nop
 801699c:	20000044 	.word	0x20000044
 80169a0:	2000b504 	.word	0x2000b504
 80169a4:	0801fbec 	.word	0x0801fbec
 80169a8:	10624dd3 	.word	0x10624dd3

080169ac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80169ac:	b5b0      	push	{r4, r5, r7, lr}
 80169ae:	b08a      	sub	sp, #40	; 0x28
 80169b0:	af02      	add	r7, sp, #8
 80169b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80169ba:	2103      	movs	r1, #3
 80169bc:	69b8      	ldr	r0, [r7, #24]
 80169be:	f000 f945 	bl	8016c4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80169c2:	f107 030c 	add.w	r3, r7, #12
 80169c6:	2203      	movs	r2, #3
 80169c8:	69b9      	ldr	r1, [r7, #24]
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 fdca 	bl	8017564 <dhcp_create_msg>
 80169d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d066      	beq.n	8016aa6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	685b      	ldr	r3, [r3, #4]
 80169dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80169de:	89b8      	ldrh	r0, [r7, #12]
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169e6:	2302      	movs	r3, #2
 80169e8:	2239      	movs	r2, #57	; 0x39
 80169ea:	f000 f949 	bl	8016c80 <dhcp_option>
 80169ee:	4603      	mov	r3, r0
 80169f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80169f2:	89b8      	ldrh	r0, [r7, #12]
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	33f0      	adds	r3, #240	; 0xf0
 80169f8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80169fc:	4619      	mov	r1, r3
 80169fe:	f000 f999 	bl	8016d34 <dhcp_option_short>
 8016a02:	4603      	mov	r3, r0
 8016a04:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016a06:	89b8      	ldrh	r0, [r7, #12]
 8016a08:	693b      	ldr	r3, [r7, #16]
 8016a0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a0e:	2304      	movs	r3, #4
 8016a10:	2232      	movs	r2, #50	; 0x32
 8016a12:	f000 f935 	bl	8016c80 <dhcp_option>
 8016a16:	4603      	mov	r3, r0
 8016a18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016a1a:	89bc      	ldrh	r4, [r7, #12]
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016a22:	69bb      	ldr	r3, [r7, #24]
 8016a24:	69db      	ldr	r3, [r3, #28]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7f7 fb3f 	bl	800e0aa <lwip_htonl>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	461a      	mov	r2, r3
 8016a30:	4629      	mov	r1, r5
 8016a32:	4620      	mov	r0, r4
 8016a34:	f000 f9b0 	bl	8016d98 <dhcp_option_long>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016a3c:	89b8      	ldrh	r0, [r7, #12]
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a44:	2303      	movs	r3, #3
 8016a46:	2237      	movs	r2, #55	; 0x37
 8016a48:	f000 f91a 	bl	8016c80 <dhcp_option>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a50:	2300      	movs	r3, #0
 8016a52:	77bb      	strb	r3, [r7, #30]
 8016a54:	e00e      	b.n	8016a74 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016a56:	89b8      	ldrh	r0, [r7, #12]
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a5e:	7fbb      	ldrb	r3, [r7, #30]
 8016a60:	4a29      	ldr	r2, [pc, #164]	; (8016b08 <dhcp_reboot+0x15c>)
 8016a62:	5cd3      	ldrb	r3, [r2, r3]
 8016a64:	461a      	mov	r2, r3
 8016a66:	f000 f93f 	bl	8016ce8 <dhcp_option_byte>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a6e:	7fbb      	ldrb	r3, [r7, #30]
 8016a70:	3301      	adds	r3, #1
 8016a72:	77bb      	strb	r3, [r7, #30]
 8016a74:	7fbb      	ldrb	r3, [r7, #30]
 8016a76:	2b02      	cmp	r3, #2
 8016a78:	d9ed      	bls.n	8016a56 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016a7a:	89b8      	ldrh	r0, [r7, #12]
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	33f0      	adds	r3, #240	; 0xf0
 8016a80:	697a      	ldr	r2, [r7, #20]
 8016a82:	4619      	mov	r1, r3
 8016a84:	f000 fe44 	bl	8017710 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016a88:	4b20      	ldr	r3, [pc, #128]	; (8016b0c <dhcp_reboot+0x160>)
 8016a8a:	6818      	ldr	r0, [r3, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	2343      	movs	r3, #67	; 0x43
 8016a92:	4a1f      	ldr	r2, [pc, #124]	; (8016b10 <dhcp_reboot+0x164>)
 8016a94:	6979      	ldr	r1, [r7, #20]
 8016a96:	f7fe fd01 	bl	801549c <udp_sendto_if>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016a9e:	6978      	ldr	r0, [r7, #20]
 8016aa0:	f7f8 fe38 	bl	800f714 <pbuf_free>
 8016aa4:	e001      	b.n	8016aaa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016aa6:	23ff      	movs	r3, #255	; 0xff
 8016aa8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	799b      	ldrb	r3, [r3, #6]
 8016aae:	2bff      	cmp	r3, #255	; 0xff
 8016ab0:	d005      	beq.n	8016abe <dhcp_reboot+0x112>
    dhcp->tries++;
 8016ab2:	69bb      	ldr	r3, [r7, #24]
 8016ab4:	799b      	ldrb	r3, [r3, #6]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	b2da      	uxtb	r2, r3
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	799b      	ldrb	r3, [r3, #6]
 8016ac2:	2b09      	cmp	r3, #9
 8016ac4:	d80a      	bhi.n	8016adc <dhcp_reboot+0x130>
 8016ac6:	69bb      	ldr	r3, [r7, #24]
 8016ac8:	799b      	ldrb	r3, [r3, #6]
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	461a      	mov	r2, r3
 8016ace:	0152      	lsls	r2, r2, #5
 8016ad0:	1ad2      	subs	r2, r2, r3
 8016ad2:	0092      	lsls	r2, r2, #2
 8016ad4:	4413      	add	r3, r2
 8016ad6:	00db      	lsls	r3, r3, #3
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	e001      	b.n	8016ae0 <dhcp_reboot+0x134>
 8016adc:	f242 7310 	movw	r3, #10000	; 0x2710
 8016ae0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ae2:	89fb      	ldrh	r3, [r7, #14]
 8016ae4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016ae8:	4a0a      	ldr	r2, [pc, #40]	; (8016b14 <dhcp_reboot+0x168>)
 8016aea:	fb82 1203 	smull	r1, r2, r2, r3
 8016aee:	1152      	asrs	r2, r2, #5
 8016af0:	17db      	asrs	r3, r3, #31
 8016af2:	1ad3      	subs	r3, r2, r3
 8016af4:	b29a      	uxth	r2, r3
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3720      	adds	r7, #32
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bdb0      	pop	{r4, r5, r7, pc}
 8016b06:	bf00      	nop
 8016b08:	20000044 	.word	0x20000044
 8016b0c:	2000b504 	.word	0x2000b504
 8016b10:	0801fbec 	.word	0x0801fbec
 8016b14:	10624dd3 	.word	0x10624dd3

08016b18 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016b18:	b5b0      	push	{r4, r5, r7, lr}
 8016b1a:	b08a      	sub	sp, #40	; 0x28
 8016b1c:	af02      	add	r7, sp, #8
 8016b1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b24:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f000 8084 	beq.w	8016c36 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	795b      	ldrb	r3, [r3, #5]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f000 8081 	beq.w	8016c3a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	699b      	ldr	r3, [r3, #24]
 8016b3c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	2200      	movs	r2, #0
 8016b42:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	2200      	movs	r2, #0
 8016b48:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016b4a:	69fb      	ldr	r3, [r7, #28]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016b50:	69fb      	ldr	r3, [r7, #28]
 8016b52:	2200      	movs	r2, #0
 8016b54:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b60:	69fb      	ldr	r3, [r7, #28]
 8016b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	829a      	strh	r2, [r3, #20]
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	8a9a      	ldrh	r2, [r3, #20]
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	825a      	strh	r2, [r3, #18]
 8016b7a:	69fb      	ldr	r3, [r7, #28]
 8016b7c:	8a5a      	ldrh	r2, [r3, #18]
 8016b7e:	69fb      	ldr	r3, [r7, #28]
 8016b80:	821a      	strh	r2, [r3, #16]
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	8a1a      	ldrh	r2, [r3, #16]
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 fdee 	bl	801776c <dhcp_supplied_address>
 8016b90:	4603      	mov	r3, r0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d03b      	beq.n	8016c0e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016b96:	f107 030e 	add.w	r3, r7, #14
 8016b9a:	2207      	movs	r2, #7
 8016b9c:	69f9      	ldr	r1, [r7, #28]
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	f000 fce0 	bl	8017564 <dhcp_create_msg>
 8016ba4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d030      	beq.n	8016c0e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016bb2:	89f8      	ldrh	r0, [r7, #14]
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016bba:	2304      	movs	r3, #4
 8016bbc:	2236      	movs	r2, #54	; 0x36
 8016bbe:	f000 f85f 	bl	8016c80 <dhcp_option>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016bc6:	89fc      	ldrh	r4, [r7, #14]
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016bce:	693b      	ldr	r3, [r7, #16]
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7f7 fa6a 	bl	800e0aa <lwip_htonl>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	461a      	mov	r2, r3
 8016bda:	4629      	mov	r1, r5
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f000 f8db 	bl	8016d98 <dhcp_option_long>
 8016be2:	4603      	mov	r3, r0
 8016be4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016be6:	89f8      	ldrh	r0, [r7, #14]
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	33f0      	adds	r3, #240	; 0xf0
 8016bec:	69ba      	ldr	r2, [r7, #24]
 8016bee:	4619      	mov	r1, r3
 8016bf0:	f000 fd8e 	bl	8017710 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016bf4:	4b13      	ldr	r3, [pc, #76]	; (8016c44 <dhcp_release_and_stop+0x12c>)
 8016bf6:	6818      	ldr	r0, [r3, #0]
 8016bf8:	f107 0210 	add.w	r2, r7, #16
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	9300      	str	r3, [sp, #0]
 8016c00:	2343      	movs	r3, #67	; 0x43
 8016c02:	69b9      	ldr	r1, [r7, #24]
 8016c04:	f7fe fc4a 	bl	801549c <udp_sendto_if>
      pbuf_free(p_out);
 8016c08:	69b8      	ldr	r0, [r7, #24]
 8016c0a:	f7f8 fd83 	bl	800f714 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016c0e:	4b0e      	ldr	r3, [pc, #56]	; (8016c48 <dhcp_release_and_stop+0x130>)
 8016c10:	4a0d      	ldr	r2, [pc, #52]	; (8016c48 <dhcp_release_and_stop+0x130>)
 8016c12:	490d      	ldr	r1, [pc, #52]	; (8016c48 <dhcp_release_and_stop+0x130>)
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f7f8 f8bd 	bl	800ed94 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016c1a:	2100      	movs	r1, #0
 8016c1c:	69f8      	ldr	r0, [r7, #28]
 8016c1e:	f000 f815 	bl	8016c4c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	791b      	ldrb	r3, [r3, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d008      	beq.n	8016c3c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016c2a:	f7fe ff83 	bl	8015b34 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	2200      	movs	r2, #0
 8016c32:	711a      	strb	r2, [r3, #4]
 8016c34:	e002      	b.n	8016c3c <dhcp_release_and_stop+0x124>
    return;
 8016c36:	bf00      	nop
 8016c38:	e000      	b.n	8016c3c <dhcp_release_and_stop+0x124>
    return;
 8016c3a:	bf00      	nop
  }
}
 8016c3c:	3720      	adds	r7, #32
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bdb0      	pop	{r4, r5, r7, pc}
 8016c42:	bf00      	nop
 8016c44:	2000b504 	.word	0x2000b504
 8016c48:	0801fbe8 	.word	0x0801fbe8

08016c4c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	b083      	sub	sp, #12
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	795b      	ldrb	r3, [r3, #5]
 8016c5c:	78fa      	ldrb	r2, [r7, #3]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d008      	beq.n	8016c74 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	78fa      	ldrb	r2, [r7, #3]
 8016c66:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2200      	movs	r2, #0
 8016c72:	811a      	strh	r2, [r3, #8]
  }
}
 8016c74:	bf00      	nop
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr

08016c80 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6039      	str	r1, [r7, #0]
 8016c88:	4611      	mov	r1, r2
 8016c8a:	461a      	mov	r2, r3
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	80fb      	strh	r3, [r7, #6]
 8016c90:	460b      	mov	r3, r1
 8016c92:	717b      	strb	r3, [r7, #5]
 8016c94:	4613      	mov	r3, r2
 8016c96:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016c98:	88fa      	ldrh	r2, [r7, #6]
 8016c9a:	793b      	ldrb	r3, [r7, #4]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	3302      	adds	r3, #2
 8016ca0:	2b44      	cmp	r3, #68	; 0x44
 8016ca2:	d906      	bls.n	8016cb2 <dhcp_option+0x32>
 8016ca4:	4b0d      	ldr	r3, [pc, #52]	; (8016cdc <dhcp_option+0x5c>)
 8016ca6:	f240 529a 	movw	r2, #1434	; 0x59a
 8016caa:	490d      	ldr	r1, [pc, #52]	; (8016ce0 <dhcp_option+0x60>)
 8016cac:	480d      	ldr	r0, [pc, #52]	; (8016ce4 <dhcp_option+0x64>)
 8016cae:	f003 fb33 	bl	801a318 <iprintf>
  options[options_out_len++] = option_type;
 8016cb2:	88fb      	ldrh	r3, [r7, #6]
 8016cb4:	1c5a      	adds	r2, r3, #1
 8016cb6:	80fa      	strh	r2, [r7, #6]
 8016cb8:	461a      	mov	r2, r3
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	4413      	add	r3, r2
 8016cbe:	797a      	ldrb	r2, [r7, #5]
 8016cc0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016cc2:	88fb      	ldrh	r3, [r7, #6]
 8016cc4:	1c5a      	adds	r2, r3, #1
 8016cc6:	80fa      	strh	r2, [r7, #6]
 8016cc8:	461a      	mov	r2, r3
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	4413      	add	r3, r2
 8016cce:	793a      	ldrb	r2, [r7, #4]
 8016cd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016cd2:	88fb      	ldrh	r3, [r7, #6]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	0801ee6c 	.word	0x0801ee6c
 8016ce0:	0801f000 	.word	0x0801f000
 8016ce4:	0801eecc 	.word	0x0801eecc

08016ce8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	4603      	mov	r3, r0
 8016cf0:	6039      	str	r1, [r7, #0]
 8016cf2:	80fb      	strh	r3, [r7, #6]
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016cf8:	88fb      	ldrh	r3, [r7, #6]
 8016cfa:	2b43      	cmp	r3, #67	; 0x43
 8016cfc:	d906      	bls.n	8016d0c <dhcp_option_byte+0x24>
 8016cfe:	4b0a      	ldr	r3, [pc, #40]	; (8016d28 <dhcp_option_byte+0x40>)
 8016d00:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016d04:	4909      	ldr	r1, [pc, #36]	; (8016d2c <dhcp_option_byte+0x44>)
 8016d06:	480a      	ldr	r0, [pc, #40]	; (8016d30 <dhcp_option_byte+0x48>)
 8016d08:	f003 fb06 	bl	801a318 <iprintf>
  options[options_out_len++] = value;
 8016d0c:	88fb      	ldrh	r3, [r7, #6]
 8016d0e:	1c5a      	adds	r2, r3, #1
 8016d10:	80fa      	strh	r2, [r7, #6]
 8016d12:	461a      	mov	r2, r3
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	4413      	add	r3, r2
 8016d18:	797a      	ldrb	r2, [r7, #5]
 8016d1a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016d1c:	88fb      	ldrh	r3, [r7, #6]
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3708      	adds	r7, #8
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	0801ee6c 	.word	0x0801ee6c
 8016d2c:	0801f044 	.word	0x0801f044
 8016d30:	0801eecc 	.word	0x0801eecc

08016d34 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	6039      	str	r1, [r7, #0]
 8016d3e:	80fb      	strh	r3, [r7, #6]
 8016d40:	4613      	mov	r3, r2
 8016d42:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016d44:	88fb      	ldrh	r3, [r7, #6]
 8016d46:	3302      	adds	r3, #2
 8016d48:	2b44      	cmp	r3, #68	; 0x44
 8016d4a:	d906      	bls.n	8016d5a <dhcp_option_short+0x26>
 8016d4c:	4b0f      	ldr	r3, [pc, #60]	; (8016d8c <dhcp_option_short+0x58>)
 8016d4e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016d52:	490f      	ldr	r1, [pc, #60]	; (8016d90 <dhcp_option_short+0x5c>)
 8016d54:	480f      	ldr	r0, [pc, #60]	; (8016d94 <dhcp_option_short+0x60>)
 8016d56:	f003 fadf 	bl	801a318 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016d5a:	88bb      	ldrh	r3, [r7, #4]
 8016d5c:	0a1b      	lsrs	r3, r3, #8
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	88fb      	ldrh	r3, [r7, #6]
 8016d62:	1c59      	adds	r1, r3, #1
 8016d64:	80f9      	strh	r1, [r7, #6]
 8016d66:	4619      	mov	r1, r3
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	440b      	add	r3, r1
 8016d6c:	b2d2      	uxtb	r2, r2
 8016d6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016d70:	88fb      	ldrh	r3, [r7, #6]
 8016d72:	1c5a      	adds	r2, r3, #1
 8016d74:	80fa      	strh	r2, [r7, #6]
 8016d76:	461a      	mov	r2, r3
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	4413      	add	r3, r2
 8016d7c:	88ba      	ldrh	r2, [r7, #4]
 8016d7e:	b2d2      	uxtb	r2, r2
 8016d80:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016d82:	88fb      	ldrh	r3, [r7, #6]
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3708      	adds	r7, #8
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	0801ee6c 	.word	0x0801ee6c
 8016d90:	0801f07c 	.word	0x0801f07c
 8016d94:	0801eecc 	.word	0x0801eecc

08016d98 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b084      	sub	sp, #16
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	4603      	mov	r3, r0
 8016da0:	60b9      	str	r1, [r7, #8]
 8016da2:	607a      	str	r2, [r7, #4]
 8016da4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016da6:	89fb      	ldrh	r3, [r7, #14]
 8016da8:	3304      	adds	r3, #4
 8016daa:	2b44      	cmp	r3, #68	; 0x44
 8016dac:	d906      	bls.n	8016dbc <dhcp_option_long+0x24>
 8016dae:	4b19      	ldr	r3, [pc, #100]	; (8016e14 <dhcp_option_long+0x7c>)
 8016db0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016db4:	4918      	ldr	r1, [pc, #96]	; (8016e18 <dhcp_option_long+0x80>)
 8016db6:	4819      	ldr	r0, [pc, #100]	; (8016e1c <dhcp_option_long+0x84>)
 8016db8:	f003 faae 	bl	801a318 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	0e1a      	lsrs	r2, r3, #24
 8016dc0:	89fb      	ldrh	r3, [r7, #14]
 8016dc2:	1c59      	adds	r1, r3, #1
 8016dc4:	81f9      	strh	r1, [r7, #14]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	440b      	add	r3, r1
 8016dcc:	b2d2      	uxtb	r2, r2
 8016dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	0c1a      	lsrs	r2, r3, #16
 8016dd4:	89fb      	ldrh	r3, [r7, #14]
 8016dd6:	1c59      	adds	r1, r3, #1
 8016dd8:	81f9      	strh	r1, [r7, #14]
 8016dda:	4619      	mov	r1, r3
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	440b      	add	r3, r1
 8016de0:	b2d2      	uxtb	r2, r2
 8016de2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	0a1a      	lsrs	r2, r3, #8
 8016de8:	89fb      	ldrh	r3, [r7, #14]
 8016dea:	1c59      	adds	r1, r3, #1
 8016dec:	81f9      	strh	r1, [r7, #14]
 8016dee:	4619      	mov	r1, r3
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	440b      	add	r3, r1
 8016df4:	b2d2      	uxtb	r2, r2
 8016df6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016df8:	89fb      	ldrh	r3, [r7, #14]
 8016dfa:	1c5a      	adds	r2, r3, #1
 8016dfc:	81fa      	strh	r2, [r7, #14]
 8016dfe:	461a      	mov	r2, r3
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	4413      	add	r3, r2
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	b2d2      	uxtb	r2, r2
 8016e08:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e0a:	89fb      	ldrh	r3, [r7, #14]
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3710      	adds	r7, #16
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	0801ee6c 	.word	0x0801ee6c
 8016e18:	0801f0b8 	.word	0x0801f0b8
 8016e1c:	0801eecc 	.word	0x0801eecc

08016e20 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b090      	sub	sp, #64	; 0x40
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016e32:	2208      	movs	r2, #8
 8016e34:	2100      	movs	r1, #0
 8016e36:	48b5      	ldr	r0, [pc, #724]	; (801710c <dhcp_parse_reply+0x2ec>)
 8016e38:	f003 faf5 	bl	801a426 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	895b      	ldrh	r3, [r3, #10]
 8016e40:	2b2b      	cmp	r3, #43	; 0x2b
 8016e42:	d802      	bhi.n	8016e4a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016e44:	f06f 0301 	mvn.w	r3, #1
 8016e48:	e2a7      	b.n	801739a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016e50:	23f0      	movs	r3, #240	; 0xf0
 8016e52:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	891b      	ldrh	r3, [r3, #8]
 8016e58:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016e5e:	e00c      	b.n	8016e7a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e62:	895b      	ldrh	r3, [r3, #10]
 8016e64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016e66:	1ad3      	subs	r3, r2, r3
 8016e68:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6c:	895b      	ldrh	r3, [r3, #10]
 8016e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016e70:	1ad3      	subs	r3, r2, r3
 8016e72:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d004      	beq.n	8016e8a <dhcp_parse_reply+0x6a>
 8016e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e82:	895b      	ldrh	r3, [r3, #10]
 8016e84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d2ea      	bcs.n	8016e60 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d102      	bne.n	8016e96 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016e90:	f06f 0301 	mvn.w	r3, #1
 8016e94:	e281      	b.n	801739a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8016e96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016e98:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8016e9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e9c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016ea4:	e239      	b.n	801731a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8016ea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016eaa:	4413      	add	r3, r2
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016eba:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016ebc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ebe:	3302      	adds	r3, #2
 8016ec0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016ec2:	8bfa      	ldrh	r2, [r7, #30]
 8016ec4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d202      	bcs.n	8016ed0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016eca:	f06f 0301 	mvn.w	r3, #1
 8016ece:	e264      	b.n	801739a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ed6:	8952      	ldrh	r2, [r2, #10]
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	da07      	bge.n	8016eec <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016edc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ede:	3301      	adds	r3, #1
 8016ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ee2:	4413      	add	r3, r2
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eea:	e00b      	b.n	8016f04 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d004      	beq.n	8016efe <dhcp_parse_reply+0xde>
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	685b      	ldr	r3, [r3, #4]
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	e000      	b.n	8016f00 <dhcp_parse_reply+0xe0>
 8016efe:	2300      	movs	r3, #0
 8016f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016f0c:	7dfb      	ldrb	r3, [r7, #23]
 8016f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8016f10:	f200 812c 	bhi.w	801716c <dhcp_parse_reply+0x34c>
 8016f14:	a201      	add	r2, pc, #4	; (adr r2, 8016f1c <dhcp_parse_reply+0xfc>)
 8016f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f1a:	bf00      	nop
 8016f1c:	0801700d 	.word	0x0801700d
 8016f20:	0801701d 	.word	0x0801701d
 8016f24:	0801716d 	.word	0x0801716d
 8016f28:	0801703f 	.word	0x0801703f
 8016f2c:	0801716d 	.word	0x0801716d
 8016f30:	0801716d 	.word	0x0801716d
 8016f34:	0801716d 	.word	0x0801716d
 8016f38:	0801716d 	.word	0x0801716d
 8016f3c:	0801716d 	.word	0x0801716d
 8016f40:	0801716d 	.word	0x0801716d
 8016f44:	0801716d 	.word	0x0801716d
 8016f48:	0801716d 	.word	0x0801716d
 8016f4c:	0801716d 	.word	0x0801716d
 8016f50:	0801716d 	.word	0x0801716d
 8016f54:	0801716d 	.word	0x0801716d
 8016f58:	0801716d 	.word	0x0801716d
 8016f5c:	0801716d 	.word	0x0801716d
 8016f60:	0801716d 	.word	0x0801716d
 8016f64:	0801716d 	.word	0x0801716d
 8016f68:	0801716d 	.word	0x0801716d
 8016f6c:	0801716d 	.word	0x0801716d
 8016f70:	0801716d 	.word	0x0801716d
 8016f74:	0801716d 	.word	0x0801716d
 8016f78:	0801716d 	.word	0x0801716d
 8016f7c:	0801716d 	.word	0x0801716d
 8016f80:	0801716d 	.word	0x0801716d
 8016f84:	0801716d 	.word	0x0801716d
 8016f88:	0801716d 	.word	0x0801716d
 8016f8c:	0801716d 	.word	0x0801716d
 8016f90:	0801716d 	.word	0x0801716d
 8016f94:	0801716d 	.word	0x0801716d
 8016f98:	0801716d 	.word	0x0801716d
 8016f9c:	0801716d 	.word	0x0801716d
 8016fa0:	0801716d 	.word	0x0801716d
 8016fa4:	0801716d 	.word	0x0801716d
 8016fa8:	0801716d 	.word	0x0801716d
 8016fac:	0801716d 	.word	0x0801716d
 8016fb0:	0801716d 	.word	0x0801716d
 8016fb4:	0801716d 	.word	0x0801716d
 8016fb8:	0801716d 	.word	0x0801716d
 8016fbc:	0801716d 	.word	0x0801716d
 8016fc0:	0801716d 	.word	0x0801716d
 8016fc4:	0801716d 	.word	0x0801716d
 8016fc8:	0801716d 	.word	0x0801716d
 8016fcc:	0801716d 	.word	0x0801716d
 8016fd0:	0801716d 	.word	0x0801716d
 8016fd4:	0801716d 	.word	0x0801716d
 8016fd8:	0801716d 	.word	0x0801716d
 8016fdc:	0801716d 	.word	0x0801716d
 8016fe0:	0801716d 	.word	0x0801716d
 8016fe4:	0801716d 	.word	0x0801716d
 8016fe8:	0801706b 	.word	0x0801706b
 8016fec:	0801708d 	.word	0x0801708d
 8016ff0:	080170c9 	.word	0x080170c9
 8016ff4:	080170eb 	.word	0x080170eb
 8016ff8:	0801716d 	.word	0x0801716d
 8016ffc:	0801716d 	.word	0x0801716d
 8017000:	0801716d 	.word	0x0801716d
 8017004:	08017129 	.word	0x08017129
 8017008:	0801714b 	.word	0x0801714b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801700c:	2300      	movs	r3, #0
 801700e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801701a:	e0ab      	b.n	8017174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801701c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017020:	2b04      	cmp	r3, #4
 8017022:	d009      	beq.n	8017038 <dhcp_parse_reply+0x218>
 8017024:	4b3a      	ldr	r3, [pc, #232]	; (8017110 <dhcp_parse_reply+0x2f0>)
 8017026:	f240 622e 	movw	r2, #1582	; 0x62e
 801702a:	493a      	ldr	r1, [pc, #232]	; (8017114 <dhcp_parse_reply+0x2f4>)
 801702c:	483a      	ldr	r0, [pc, #232]	; (8017118 <dhcp_parse_reply+0x2f8>)
 801702e:	f003 f973 	bl	801a318 <iprintf>
 8017032:	f06f 0305 	mvn.w	r3, #5
 8017036:	e1b0      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017038:	2306      	movs	r3, #6
 801703a:	623b      	str	r3, [r7, #32]
        break;
 801703c:	e09a      	b.n	8017174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801703e:	2304      	movs	r3, #4
 8017040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017044:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801704c:	429a      	cmp	r2, r3
 801704e:	d209      	bcs.n	8017064 <dhcp_parse_reply+0x244>
 8017050:	4b2f      	ldr	r3, [pc, #188]	; (8017110 <dhcp_parse_reply+0x2f0>)
 8017052:	f240 6233 	movw	r2, #1587	; 0x633
 8017056:	4931      	ldr	r1, [pc, #196]	; (801711c <dhcp_parse_reply+0x2fc>)
 8017058:	482f      	ldr	r0, [pc, #188]	; (8017118 <dhcp_parse_reply+0x2f8>)
 801705a:	f003 f95d 	bl	801a318 <iprintf>
 801705e:	f06f 0305 	mvn.w	r3, #5
 8017062:	e19a      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017064:	2307      	movs	r3, #7
 8017066:	623b      	str	r3, [r7, #32]
        break;
 8017068:	e084      	b.n	8017174 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801706a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801706e:	2b04      	cmp	r3, #4
 8017070:	d009      	beq.n	8017086 <dhcp_parse_reply+0x266>
 8017072:	4b27      	ldr	r3, [pc, #156]	; (8017110 <dhcp_parse_reply+0x2f0>)
 8017074:	f240 6241 	movw	r2, #1601	; 0x641
 8017078:	4926      	ldr	r1, [pc, #152]	; (8017114 <dhcp_parse_reply+0x2f4>)
 801707a:	4827      	ldr	r0, [pc, #156]	; (8017118 <dhcp_parse_reply+0x2f8>)
 801707c:	f003 f94c 	bl	801a318 <iprintf>
 8017080:	f06f 0305 	mvn.w	r3, #5
 8017084:	e189      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017086:	2303      	movs	r3, #3
 8017088:	623b      	str	r3, [r7, #32]
        break;
 801708a:	e073      	b.n	8017174 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801708c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017090:	2b01      	cmp	r3, #1
 8017092:	d009      	beq.n	80170a8 <dhcp_parse_reply+0x288>
 8017094:	4b1e      	ldr	r3, [pc, #120]	; (8017110 <dhcp_parse_reply+0x2f0>)
 8017096:	f240 624f 	movw	r2, #1615	; 0x64f
 801709a:	4921      	ldr	r1, [pc, #132]	; (8017120 <dhcp_parse_reply+0x300>)
 801709c:	481e      	ldr	r0, [pc, #120]	; (8017118 <dhcp_parse_reply+0x2f8>)
 801709e:	f003 f93b 	bl	801a318 <iprintf>
 80170a2:	f06f 0305 	mvn.w	r3, #5
 80170a6:	e178      	b.n	801739a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80170a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80170aa:	2bf0      	cmp	r3, #240	; 0xf0
 80170ac:	d009      	beq.n	80170c2 <dhcp_parse_reply+0x2a2>
 80170ae:	4b18      	ldr	r3, [pc, #96]	; (8017110 <dhcp_parse_reply+0x2f0>)
 80170b0:	f240 6251 	movw	r2, #1617	; 0x651
 80170b4:	491b      	ldr	r1, [pc, #108]	; (8017124 <dhcp_parse_reply+0x304>)
 80170b6:	4818      	ldr	r0, [pc, #96]	; (8017118 <dhcp_parse_reply+0x2f8>)
 80170b8:	f003 f92e 	bl	801a318 <iprintf>
 80170bc:	f06f 0305 	mvn.w	r3, #5
 80170c0:	e16b      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80170c2:	2300      	movs	r3, #0
 80170c4:	623b      	str	r3, [r7, #32]
        break;
 80170c6:	e055      	b.n	8017174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80170c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d009      	beq.n	80170e4 <dhcp_parse_reply+0x2c4>
 80170d0:	4b0f      	ldr	r3, [pc, #60]	; (8017110 <dhcp_parse_reply+0x2f0>)
 80170d2:	f240 6255 	movw	r2, #1621	; 0x655
 80170d6:	4912      	ldr	r1, [pc, #72]	; (8017120 <dhcp_parse_reply+0x300>)
 80170d8:	480f      	ldr	r0, [pc, #60]	; (8017118 <dhcp_parse_reply+0x2f8>)
 80170da:	f003 f91d 	bl	801a318 <iprintf>
 80170de:	f06f 0305 	mvn.w	r3, #5
 80170e2:	e15a      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80170e4:	2301      	movs	r3, #1
 80170e6:	623b      	str	r3, [r7, #32]
        break;
 80170e8:	e044      	b.n	8017174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80170ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ee:	2b04      	cmp	r3, #4
 80170f0:	d009      	beq.n	8017106 <dhcp_parse_reply+0x2e6>
 80170f2:	4b07      	ldr	r3, [pc, #28]	; (8017110 <dhcp_parse_reply+0x2f0>)
 80170f4:	f240 6259 	movw	r2, #1625	; 0x659
 80170f8:	4906      	ldr	r1, [pc, #24]	; (8017114 <dhcp_parse_reply+0x2f4>)
 80170fa:	4807      	ldr	r0, [pc, #28]	; (8017118 <dhcp_parse_reply+0x2f8>)
 80170fc:	f003 f90c 	bl	801a318 <iprintf>
 8017100:	f06f 0305 	mvn.w	r3, #5
 8017104:	e149      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017106:	2302      	movs	r3, #2
 8017108:	623b      	str	r3, [r7, #32]
        break;
 801710a:	e033      	b.n	8017174 <dhcp_parse_reply+0x354>
 801710c:	2000b4fc 	.word	0x2000b4fc
 8017110:	0801ee6c 	.word	0x0801ee6c
 8017114:	0801f0f4 	.word	0x0801f0f4
 8017118:	0801eecc 	.word	0x0801eecc
 801711c:	0801f100 	.word	0x0801f100
 8017120:	0801f114 	.word	0x0801f114
 8017124:	0801f120 	.word	0x0801f120
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801712c:	2b04      	cmp	r3, #4
 801712e:	d009      	beq.n	8017144 <dhcp_parse_reply+0x324>
 8017130:	4b9c      	ldr	r3, [pc, #624]	; (80173a4 <dhcp_parse_reply+0x584>)
 8017132:	f240 625d 	movw	r2, #1629	; 0x65d
 8017136:	499c      	ldr	r1, [pc, #624]	; (80173a8 <dhcp_parse_reply+0x588>)
 8017138:	489c      	ldr	r0, [pc, #624]	; (80173ac <dhcp_parse_reply+0x58c>)
 801713a:	f003 f8ed 	bl	801a318 <iprintf>
 801713e:	f06f 0305 	mvn.w	r3, #5
 8017142:	e12a      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017144:	2304      	movs	r3, #4
 8017146:	623b      	str	r3, [r7, #32]
        break;
 8017148:	e014      	b.n	8017174 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801714a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801714e:	2b04      	cmp	r3, #4
 8017150:	d009      	beq.n	8017166 <dhcp_parse_reply+0x346>
 8017152:	4b94      	ldr	r3, [pc, #592]	; (80173a4 <dhcp_parse_reply+0x584>)
 8017154:	f240 6261 	movw	r2, #1633	; 0x661
 8017158:	4993      	ldr	r1, [pc, #588]	; (80173a8 <dhcp_parse_reply+0x588>)
 801715a:	4894      	ldr	r0, [pc, #592]	; (80173ac <dhcp_parse_reply+0x58c>)
 801715c:	f003 f8dc 	bl	801a318 <iprintf>
 8017160:	f06f 0305 	mvn.w	r3, #5
 8017164:	e119      	b.n	801739a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017166:	2305      	movs	r3, #5
 8017168:	623b      	str	r3, [r7, #32]
        break;
 801716a:	e003      	b.n	8017174 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801716c:	2300      	movs	r3, #0
 801716e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017172:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017174:	7dfb      	ldrb	r3, [r7, #23]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d103      	bne.n	8017182 <dhcp_parse_reply+0x362>
      offset++;
 801717a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801717c:	3301      	adds	r3, #1
 801717e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017180:	e0a1      	b.n	80172c6 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017182:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017188:	4413      	add	r3, r2
 801718a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801718e:	4293      	cmp	r3, r2
 8017190:	dd02      	ble.n	8017198 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8017192:	f06f 0301 	mvn.w	r3, #1
 8017196:	e100      	b.n	801739a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8017198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801719c:	b29a      	uxth	r2, r3
 801719e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171a0:	4413      	add	r3, r2
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	3302      	adds	r3, #2
 80171a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80171a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 808a 	beq.w	80172c6 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80171b6:	6a3b      	ldr	r3, [r7, #32]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	db02      	blt.n	80171c2 <dhcp_parse_reply+0x3a2>
 80171bc:	6a3b      	ldr	r3, [r7, #32]
 80171be:	2b07      	cmp	r3, #7
 80171c0:	dd06      	ble.n	80171d0 <dhcp_parse_reply+0x3b0>
 80171c2:	4b78      	ldr	r3, [pc, #480]	; (80173a4 <dhcp_parse_reply+0x584>)
 80171c4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80171c8:	4979      	ldr	r1, [pc, #484]	; (80173b0 <dhcp_parse_reply+0x590>)
 80171ca:	4878      	ldr	r0, [pc, #480]	; (80173ac <dhcp_parse_reply+0x58c>)
 80171cc:	f003 f8a4 	bl	801a318 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80171d0:	4a78      	ldr	r2, [pc, #480]	; (80173b4 <dhcp_parse_reply+0x594>)
 80171d2:	6a3b      	ldr	r3, [r7, #32]
 80171d4:	4413      	add	r3, r2
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d174      	bne.n	80172c6 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80171dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80171e0:	2b04      	cmp	r3, #4
 80171e2:	bf28      	it	cs
 80171e4:	2304      	movcs	r3, #4
 80171e6:	b2db      	uxtb	r3, r3
 80171e8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80171ea:	8bfb      	ldrh	r3, [r7, #30]
 80171ec:	8aba      	ldrh	r2, [r7, #20]
 80171ee:	f107 0108 	add.w	r1, r7, #8
 80171f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171f4:	f7f8 fc88 	bl	800fb08 <pbuf_copy_partial>
 80171f8:	4603      	mov	r3, r0
 80171fa:	461a      	mov	r2, r3
 80171fc:	8abb      	ldrh	r3, [r7, #20]
 80171fe:	4293      	cmp	r3, r2
 8017200:	d002      	beq.n	8017208 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8017202:	f06f 0301 	mvn.w	r3, #1
 8017206:	e0c8      	b.n	801739a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8017208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801720c:	2b04      	cmp	r3, #4
 801720e:	d933      	bls.n	8017278 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017214:	f003 0303 	and.w	r3, r3, #3
 8017218:	b2db      	uxtb	r3, r3
 801721a:	2b00      	cmp	r3, #0
 801721c:	d009      	beq.n	8017232 <dhcp_parse_reply+0x412>
 801721e:	4b61      	ldr	r3, [pc, #388]	; (80173a4 <dhcp_parse_reply+0x584>)
 8017220:	f240 6281 	movw	r2, #1665	; 0x681
 8017224:	4964      	ldr	r1, [pc, #400]	; (80173b8 <dhcp_parse_reply+0x598>)
 8017226:	4861      	ldr	r0, [pc, #388]	; (80173ac <dhcp_parse_reply+0x58c>)
 8017228:	f003 f876 	bl	801a318 <iprintf>
 801722c:	f06f 0305 	mvn.w	r3, #5
 8017230:	e0b3      	b.n	801739a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8017232:	4a60      	ldr	r2, [pc, #384]	; (80173b4 <dhcp_parse_reply+0x594>)
 8017234:	6a3b      	ldr	r3, [r7, #32]
 8017236:	4413      	add	r3, r2
 8017238:	2201      	movs	r2, #1
 801723a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	4618      	mov	r0, r3
 8017240:	f7f6 ff33 	bl	800e0aa <lwip_htonl>
 8017244:	4602      	mov	r2, r0
 8017246:	495d      	ldr	r1, [pc, #372]	; (80173bc <dhcp_parse_reply+0x59c>)
 8017248:	6a3b      	ldr	r3, [r7, #32]
 801724a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801724e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017252:	3b04      	subs	r3, #4
 8017254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017258:	8bfb      	ldrh	r3, [r7, #30]
 801725a:	3304      	adds	r3, #4
 801725c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801725e:	8a7a      	ldrh	r2, [r7, #18]
 8017260:	8bfb      	ldrh	r3, [r7, #30]
 8017262:	429a      	cmp	r2, r3
 8017264:	d202      	bcs.n	801726c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8017266:	f06f 0301 	mvn.w	r3, #1
 801726a:	e096      	b.n	801739a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801726c:	8a7b      	ldrh	r3, [r7, #18]
 801726e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017270:	6a3b      	ldr	r3, [r7, #32]
 8017272:	3301      	adds	r3, #1
 8017274:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017276:	e79e      	b.n	80171b6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8017278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801727c:	2b04      	cmp	r3, #4
 801727e:	d106      	bne.n	801728e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	4618      	mov	r0, r3
 8017284:	f7f6 ff11 	bl	800e0aa <lwip_htonl>
 8017288:	4603      	mov	r3, r0
 801728a:	60bb      	str	r3, [r7, #8]
 801728c:	e011      	b.n	80172b2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801728e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017292:	2b01      	cmp	r3, #1
 8017294:	d009      	beq.n	80172aa <dhcp_parse_reply+0x48a>
 8017296:	4b43      	ldr	r3, [pc, #268]	; (80173a4 <dhcp_parse_reply+0x584>)
 8017298:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801729c:	4948      	ldr	r1, [pc, #288]	; (80173c0 <dhcp_parse_reply+0x5a0>)
 801729e:	4843      	ldr	r0, [pc, #268]	; (80173ac <dhcp_parse_reply+0x58c>)
 80172a0:	f003 f83a 	bl	801a318 <iprintf>
 80172a4:	f06f 0305 	mvn.w	r3, #5
 80172a8:	e077      	b.n	801739a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80172aa:	f107 0308 	add.w	r3, r7, #8
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80172b2:	4a40      	ldr	r2, [pc, #256]	; (80173b4 <dhcp_parse_reply+0x594>)
 80172b4:	6a3b      	ldr	r3, [r7, #32]
 80172b6:	4413      	add	r3, r2
 80172b8:	2201      	movs	r2, #1
 80172ba:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80172bc:	68ba      	ldr	r2, [r7, #8]
 80172be:	493f      	ldr	r1, [pc, #252]	; (80173bc <dhcp_parse_reply+0x59c>)
 80172c0:	6a3b      	ldr	r3, [r7, #32]
 80172c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80172c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c8:	895b      	ldrh	r3, [r3, #10]
 80172ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d324      	bcc.n	801731a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80172d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d2:	895b      	ldrh	r3, [r3, #10]
 80172d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172d6:	1ad3      	subs	r3, r2, r3
 80172d8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	895b      	ldrh	r3, [r3, #10]
 80172de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80172e0:	1ad3      	subs	r3, r2, r3
 80172e2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80172e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d213      	bcs.n	8017314 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80172ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80172f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d109      	bne.n	801730c <dhcp_parse_reply+0x4ec>
 80172f8:	4b2a      	ldr	r3, [pc, #168]	; (80173a4 <dhcp_parse_reply+0x584>)
 80172fa:	f240 629d 	movw	r2, #1693	; 0x69d
 80172fe:	4931      	ldr	r1, [pc, #196]	; (80173c4 <dhcp_parse_reply+0x5a4>)
 8017300:	482a      	ldr	r0, [pc, #168]	; (80173ac <dhcp_parse_reply+0x58c>)
 8017302:	f003 f809 	bl	801a318 <iprintf>
 8017306:	f06f 0305 	mvn.w	r3, #5
 801730a:	e046      	b.n	801739a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017312:	e002      	b.n	801731a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017314:	f06f 0301 	mvn.w	r3, #1
 8017318:	e03f      	b.n	801739a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00a      	beq.n	8017336 <dhcp_parse_reply+0x516>
 8017320:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017324:	429a      	cmp	r2, r3
 8017326:	d206      	bcs.n	8017336 <dhcp_parse_reply+0x516>
 8017328:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801732a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801732c:	4413      	add	r3, r2
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2bff      	cmp	r3, #255	; 0xff
 8017332:	f47f adb8 	bne.w	8016ea6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017336:	4b1f      	ldr	r3, [pc, #124]	; (80173b4 <dhcp_parse_reply+0x594>)
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d018      	beq.n	8017370 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801733e:	4b1f      	ldr	r3, [pc, #124]	; (80173bc <dhcp_parse_reply+0x59c>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017344:	4b1b      	ldr	r3, [pc, #108]	; (80173b4 <dhcp_parse_reply+0x594>)
 8017346:	2200      	movs	r2, #0
 8017348:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	2b01      	cmp	r3, #1
 801734e:	d102      	bne.n	8017356 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8017350:	2301      	movs	r3, #1
 8017352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017354:	e00c      	b.n	8017370 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	2b02      	cmp	r3, #2
 801735a:	d102      	bne.n	8017362 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801735c:	2301      	movs	r3, #1
 801735e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017360:	e006      	b.n	8017370 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	2b03      	cmp	r3, #3
 8017366:	d103      	bne.n	8017370 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8017368:	2301      	movs	r3, #1
 801736a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801736c:	2301      	movs	r3, #1
 801736e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017372:	2b00      	cmp	r3, #0
 8017374:	d006      	beq.n	8017384 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017376:	2300      	movs	r3, #0
 8017378:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801737a:	236c      	movs	r3, #108	; 0x6c
 801737c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801737e:	23ec      	movs	r3, #236	; 0xec
 8017380:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017382:	e56a      	b.n	8016e5a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017386:	2b00      	cmp	r3, #0
 8017388:	d006      	beq.n	8017398 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801738a:	2300      	movs	r3, #0
 801738c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801738e:	232c      	movs	r3, #44	; 0x2c
 8017390:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017392:	236c      	movs	r3, #108	; 0x6c
 8017394:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017396:	e560      	b.n	8016e5a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017398:	2300      	movs	r3, #0
}
 801739a:	4618      	mov	r0, r3
 801739c:	3740      	adds	r7, #64	; 0x40
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	0801ee6c 	.word	0x0801ee6c
 80173a8:	0801f0f4 	.word	0x0801f0f4
 80173ac:	0801eecc 	.word	0x0801eecc
 80173b0:	0801f138 	.word	0x0801f138
 80173b4:	2000b4fc 	.word	0x2000b4fc
 80173b8:	0801f14c 	.word	0x0801f14c
 80173bc:	2000b4dc 	.word	0x2000b4dc
 80173c0:	0801f164 	.word	0x0801f164
 80173c4:	0801f178 	.word	0x0801f178

080173c8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b08a      	sub	sp, #40	; 0x28
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]
 80173d4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80173d6:	4b60      	ldr	r3, [pc, #384]	; (8017558 <dhcp_recv+0x190>)
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173e0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80173e8:	69fb      	ldr	r3, [r7, #28]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	f000 809d 	beq.w	801752a <dhcp_recv+0x162>
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	791b      	ldrb	r3, [r3, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f000 8098 	beq.w	801752a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	895b      	ldrh	r3, [r3, #10]
 80173fe:	2b2b      	cmp	r3, #43	; 0x2b
 8017400:	f240 8095 	bls.w	801752e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017404:	69bb      	ldr	r3, [r7, #24]
 8017406:	781b      	ldrb	r3, [r3, #0]
 8017408:	2b02      	cmp	r3, #2
 801740a:	f040 8092 	bne.w	8017532 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801740e:	2300      	movs	r3, #0
 8017410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017414:	e012      	b.n	801743c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801741a:	6a3a      	ldr	r2, [r7, #32]
 801741c:	4413      	add	r3, r2
 801741e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017426:	69b9      	ldr	r1, [r7, #24]
 8017428:	440b      	add	r3, r1
 801742a:	7f1b      	ldrb	r3, [r3, #28]
 801742c:	429a      	cmp	r2, r3
 801742e:	f040 8082 	bne.w	8017536 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017436:	3301      	adds	r3, #1
 8017438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801743c:	6a3b      	ldr	r3, [r7, #32]
 801743e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017442:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017446:	429a      	cmp	r2, r3
 8017448:	d203      	bcs.n	8017452 <dhcp_recv+0x8a>
 801744a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801744e:	2b05      	cmp	r3, #5
 8017450:	d9e1      	bls.n	8017416 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017452:	69bb      	ldr	r3, [r7, #24]
 8017454:	685b      	ldr	r3, [r3, #4]
 8017456:	4618      	mov	r0, r3
 8017458:	f7f6 fe27 	bl	800e0aa <lwip_htonl>
 801745c:	4602      	mov	r2, r0
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	429a      	cmp	r2, r3
 8017464:	d169      	bne.n	801753a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017466:	69f9      	ldr	r1, [r7, #28]
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f7ff fcd9 	bl	8016e20 <dhcp_parse_reply>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d164      	bne.n	801753e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017474:	4b39      	ldr	r3, [pc, #228]	; (801755c <dhcp_recv+0x194>)
 8017476:	785b      	ldrb	r3, [r3, #1]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d062      	beq.n	8017542 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	685b      	ldr	r3, [r3, #4]
 8017480:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017482:	4b37      	ldr	r3, [pc, #220]	; (8017560 <dhcp_recv+0x198>)
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017488:	7cfb      	ldrb	r3, [r7, #19]
 801748a:	2b05      	cmp	r3, #5
 801748c:	d12a      	bne.n	80174e4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	795b      	ldrb	r3, [r3, #5]
 8017492:	2b01      	cmp	r3, #1
 8017494:	d112      	bne.n	80174bc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017496:	6979      	ldr	r1, [r7, #20]
 8017498:	6a38      	ldr	r0, [r7, #32]
 801749a:	f7fe fe17 	bl	80160cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801749e:	6a3b      	ldr	r3, [r7, #32]
 80174a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80174a4:	f003 0308 	and.w	r3, r3, #8
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d003      	beq.n	80174b4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80174ac:	6a38      	ldr	r0, [r7, #32]
 80174ae:	f7fe fb85 	bl	8015bbc <dhcp_check>
 80174b2:	e049      	b.n	8017548 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80174b4:	6a38      	ldr	r0, [r7, #32]
 80174b6:	f7ff f867 	bl	8016588 <dhcp_bind>
 80174ba:	e045      	b.n	8017548 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	795b      	ldrb	r3, [r3, #5]
 80174c0:	2b03      	cmp	r3, #3
 80174c2:	d007      	beq.n	80174d4 <dhcp_recv+0x10c>
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	795b      	ldrb	r3, [r3, #5]
 80174c8:	2b04      	cmp	r3, #4
 80174ca:	d003      	beq.n	80174d4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80174cc:	69fb      	ldr	r3, [r7, #28]
 80174ce:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80174d0:	2b05      	cmp	r3, #5
 80174d2:	d139      	bne.n	8017548 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80174d4:	6979      	ldr	r1, [r7, #20]
 80174d6:	6a38      	ldr	r0, [r7, #32]
 80174d8:	f7fe fdf8 	bl	80160cc <dhcp_handle_ack>
      dhcp_bind(netif);
 80174dc:	6a38      	ldr	r0, [r7, #32]
 80174de:	f7ff f853 	bl	8016588 <dhcp_bind>
 80174e2:	e031      	b.n	8017548 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80174e4:	7cfb      	ldrb	r3, [r7, #19]
 80174e6:	2b06      	cmp	r3, #6
 80174e8:	d113      	bne.n	8017512 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80174ee:	2b03      	cmp	r3, #3
 80174f0:	d00b      	beq.n	801750a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80174f2:	69fb      	ldr	r3, [r7, #28]
 80174f4:	795b      	ldrb	r3, [r3, #5]
 80174f6:	2b01      	cmp	r3, #1
 80174f8:	d007      	beq.n	801750a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80174fe:	2b04      	cmp	r3, #4
 8017500:	d003      	beq.n	801750a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	795b      	ldrb	r3, [r3, #5]
 8017506:	2b05      	cmp	r3, #5
 8017508:	d103      	bne.n	8017512 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801750a:	6a38      	ldr	r0, [r7, #32]
 801750c:	f7fe fb3c 	bl	8015b88 <dhcp_handle_nak>
 8017510:	e01a      	b.n	8017548 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017512:	7cfb      	ldrb	r3, [r7, #19]
 8017514:	2b02      	cmp	r3, #2
 8017516:	d116      	bne.n	8017546 <dhcp_recv+0x17e>
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	795b      	ldrb	r3, [r3, #5]
 801751c:	2b06      	cmp	r3, #6
 801751e:	d112      	bne.n	8017546 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017520:	6979      	ldr	r1, [r7, #20]
 8017522:	6a38      	ldr	r0, [r7, #32]
 8017524:	f7fe fb7e 	bl	8015c24 <dhcp_handle_offer>
 8017528:	e00e      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801752a:	bf00      	nop
 801752c:	e00c      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801752e:	bf00      	nop
 8017530:	e00a      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017532:	bf00      	nop
 8017534:	e008      	b.n	8017548 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017536:	bf00      	nop
 8017538:	e006      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801753a:	bf00      	nop
 801753c:	e004      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801753e:	bf00      	nop
 8017540:	e002      	b.n	8017548 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017542:	bf00      	nop
 8017544:	e000      	b.n	8017548 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8017546:	bf00      	nop
  pbuf_free(p);
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f7f8 f8e3 	bl	800f714 <pbuf_free>
}
 801754e:	bf00      	nop
 8017550:	3728      	adds	r7, #40	; 0x28
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	20007eec 	.word	0x20007eec
 801755c:	2000b4fc 	.word	0x2000b4fc
 8017560:	2000b4dc 	.word	0x2000b4dc

08017564 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b088      	sub	sp, #32
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	603b      	str	r3, [r7, #0]
 8017570:	4613      	mov	r3, r2
 8017572:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d108      	bne.n	801758c <dhcp_create_msg+0x28>
 801757a:	4b5f      	ldr	r3, [pc, #380]	; (80176f8 <dhcp_create_msg+0x194>)
 801757c:	f240 7269 	movw	r2, #1897	; 0x769
 8017580:	495e      	ldr	r1, [pc, #376]	; (80176fc <dhcp_create_msg+0x198>)
 8017582:	485f      	ldr	r0, [pc, #380]	; (8017700 <dhcp_create_msg+0x19c>)
 8017584:	f002 fec8 	bl	801a318 <iprintf>
 8017588:	2300      	movs	r3, #0
 801758a:	e0b1      	b.n	80176f0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d108      	bne.n	80175a4 <dhcp_create_msg+0x40>
 8017592:	4b59      	ldr	r3, [pc, #356]	; (80176f8 <dhcp_create_msg+0x194>)
 8017594:	f240 726a 	movw	r2, #1898	; 0x76a
 8017598:	495a      	ldr	r1, [pc, #360]	; (8017704 <dhcp_create_msg+0x1a0>)
 801759a:	4859      	ldr	r0, [pc, #356]	; (8017700 <dhcp_create_msg+0x19c>)
 801759c:	f002 febc 	bl	801a318 <iprintf>
 80175a0:	2300      	movs	r3, #0
 80175a2:	e0a5      	b.n	80176f0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80175a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175a8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80175ac:	2036      	movs	r0, #54	; 0x36
 80175ae:	f7f7 fdcd 	bl	800f14c <pbuf_alloc>
 80175b2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d101      	bne.n	80175be <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80175ba:	2300      	movs	r3, #0
 80175bc:	e098      	b.n	80176f0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	895b      	ldrh	r3, [r3, #10]
 80175c2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80175c6:	d206      	bcs.n	80175d6 <dhcp_create_msg+0x72>
 80175c8:	4b4b      	ldr	r3, [pc, #300]	; (80176f8 <dhcp_create_msg+0x194>)
 80175ca:	f240 7271 	movw	r2, #1905	; 0x771
 80175ce:	494e      	ldr	r1, [pc, #312]	; (8017708 <dhcp_create_msg+0x1a4>)
 80175d0:	484b      	ldr	r0, [pc, #300]	; (8017700 <dhcp_create_msg+0x19c>)
 80175d2:	f002 fea1 	bl	801a318 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80175d6:	79fb      	ldrb	r3, [r7, #7]
 80175d8:	2b03      	cmp	r3, #3
 80175da:	d103      	bne.n	80175e4 <dhcp_create_msg+0x80>
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	795b      	ldrb	r3, [r3, #5]
 80175e0:	2b03      	cmp	r3, #3
 80175e2:	d10d      	bne.n	8017600 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	799b      	ldrb	r3, [r3, #6]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d105      	bne.n	80175f8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80175ec:	f002 fcf6 	bl	8019fdc <rand>
 80175f0:	4603      	mov	r3, r0
 80175f2:	461a      	mov	r2, r3
 80175f4:	4b45      	ldr	r3, [pc, #276]	; (801770c <dhcp_create_msg+0x1a8>)
 80175f6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80175f8:	4b44      	ldr	r3, [pc, #272]	; (801770c <dhcp_create_msg+0x1a8>)
 80175fa:	681a      	ldr	r2, [r3, #0]
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017600:	69bb      	ldr	r3, [r7, #24]
 8017602:	685b      	ldr	r3, [r3, #4]
 8017604:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017606:	f44f 729a 	mov.w	r2, #308	; 0x134
 801760a:	2100      	movs	r1, #0
 801760c:	6978      	ldr	r0, [r7, #20]
 801760e:	f002 ff0a 	bl	801a426 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	2201      	movs	r2, #1
 8017616:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	2201      	movs	r2, #1
 801761c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	4618      	mov	r0, r3
 801762e:	f7f6 fd3c 	bl	800e0aa <lwip_htonl>
 8017632:	4602      	mov	r2, r0
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017638:	79fb      	ldrb	r3, [r7, #7]
 801763a:	2b08      	cmp	r3, #8
 801763c:	d010      	beq.n	8017660 <dhcp_create_msg+0xfc>
 801763e:	79fb      	ldrb	r3, [r7, #7]
 8017640:	2b04      	cmp	r3, #4
 8017642:	d00d      	beq.n	8017660 <dhcp_create_msg+0xfc>
 8017644:	79fb      	ldrb	r3, [r7, #7]
 8017646:	2b07      	cmp	r3, #7
 8017648:	d00a      	beq.n	8017660 <dhcp_create_msg+0xfc>
 801764a:	79fb      	ldrb	r3, [r7, #7]
 801764c:	2b03      	cmp	r3, #3
 801764e:	d10c      	bne.n	801766a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017654:	2b05      	cmp	r3, #5
 8017656:	d003      	beq.n	8017660 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	795b      	ldrb	r3, [r3, #5]
 801765c:	2b04      	cmp	r3, #4
 801765e:	d104      	bne.n	801766a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	3304      	adds	r3, #4
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801766a:	2300      	movs	r3, #0
 801766c:	83fb      	strh	r3, [r7, #30]
 801766e:	e00c      	b.n	801768a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017670:	8bfa      	ldrh	r2, [r7, #30]
 8017672:	8bfb      	ldrh	r3, [r7, #30]
 8017674:	68f9      	ldr	r1, [r7, #12]
 8017676:	440a      	add	r2, r1
 8017678:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801767c:	697a      	ldr	r2, [r7, #20]
 801767e:	4413      	add	r3, r2
 8017680:	460a      	mov	r2, r1
 8017682:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017684:	8bfb      	ldrh	r3, [r7, #30]
 8017686:	3301      	adds	r3, #1
 8017688:	83fb      	strh	r3, [r7, #30]
 801768a:	8bfb      	ldrh	r3, [r7, #30]
 801768c:	2b05      	cmp	r3, #5
 801768e:	d9ef      	bls.n	8017670 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	2200      	movs	r2, #0
 8017694:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801769c:	2200      	movs	r2, #0
 801769e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80176a2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80176a6:	2200      	movs	r2, #0
 80176a8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80176ac:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80176b0:	2200      	movs	r2, #0
 80176b2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80176b6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80176c0:	2301      	movs	r3, #1
 80176c2:	2235      	movs	r2, #53	; 0x35
 80176c4:	2000      	movs	r0, #0
 80176c6:	f7ff fadb 	bl	8016c80 <dhcp_option>
 80176ca:	4603      	mov	r3, r0
 80176cc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80176ce:	697b      	ldr	r3, [r7, #20]
 80176d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80176d4:	79fa      	ldrb	r2, [r7, #7]
 80176d6:	8a7b      	ldrh	r3, [r7, #18]
 80176d8:	4618      	mov	r0, r3
 80176da:	f7ff fb05 	bl	8016ce8 <dhcp_option_byte>
 80176de:	4603      	mov	r3, r0
 80176e0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d002      	beq.n	80176ee <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	8a7a      	ldrh	r2, [r7, #18]
 80176ec:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80176ee:	69bb      	ldr	r3, [r7, #24]
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3720      	adds	r7, #32
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	0801ee6c 	.word	0x0801ee6c
 80176fc:	0801f18c 	.word	0x0801f18c
 8017700:	0801eecc 	.word	0x0801eecc
 8017704:	0801f1ac 	.word	0x0801f1ac
 8017708:	0801f1cc 	.word	0x0801f1cc
 801770c:	2000b50c 	.word	0x2000b50c

08017710 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b084      	sub	sp, #16
 8017714:	af00      	add	r7, sp, #0
 8017716:	4603      	mov	r3, r0
 8017718:	60b9      	str	r1, [r7, #8]
 801771a:	607a      	str	r2, [r7, #4]
 801771c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801771e:	89fb      	ldrh	r3, [r7, #14]
 8017720:	1c5a      	adds	r2, r3, #1
 8017722:	81fa      	strh	r2, [r7, #14]
 8017724:	461a      	mov	r2, r3
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	4413      	add	r3, r2
 801772a:	22ff      	movs	r2, #255	; 0xff
 801772c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801772e:	e007      	b.n	8017740 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017730:	89fb      	ldrh	r3, [r7, #14]
 8017732:	1c5a      	adds	r2, r3, #1
 8017734:	81fa      	strh	r2, [r7, #14]
 8017736:	461a      	mov	r2, r3
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	4413      	add	r3, r2
 801773c:	2200      	movs	r2, #0
 801773e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017740:	89fb      	ldrh	r3, [r7, #14]
 8017742:	2b43      	cmp	r3, #67	; 0x43
 8017744:	d904      	bls.n	8017750 <dhcp_option_trailer+0x40>
 8017746:	89fb      	ldrh	r3, [r7, #14]
 8017748:	f003 0303 	and.w	r3, r3, #3
 801774c:	2b00      	cmp	r3, #0
 801774e:	d002      	beq.n	8017756 <dhcp_option_trailer+0x46>
 8017750:	89fb      	ldrh	r3, [r7, #14]
 8017752:	2b43      	cmp	r3, #67	; 0x43
 8017754:	d9ec      	bls.n	8017730 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017756:	89fb      	ldrh	r3, [r7, #14]
 8017758:	33f0      	adds	r3, #240	; 0xf0
 801775a:	b29b      	uxth	r3, r3
 801775c:	4619      	mov	r1, r3
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f7f7 fe52 	bl	800f408 <pbuf_realloc>
}
 8017764:	bf00      	nop
 8017766:	3710      	adds	r7, #16
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}

0801776c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801776c:	b480      	push	{r7}
 801776e:	b085      	sub	sp, #20
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d017      	beq.n	80177aa <dhcp_supplied_address+0x3e>
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801777e:	2b00      	cmp	r3, #0
 8017780:	d013      	beq.n	80177aa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017786:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	795b      	ldrb	r3, [r3, #5]
 801778c:	2b0a      	cmp	r3, #10
 801778e:	d007      	beq.n	80177a0 <dhcp_supplied_address+0x34>
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	795b      	ldrb	r3, [r3, #5]
 8017794:	2b05      	cmp	r3, #5
 8017796:	d003      	beq.n	80177a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801779c:	2b04      	cmp	r3, #4
 801779e:	d101      	bne.n	80177a4 <dhcp_supplied_address+0x38>
 80177a0:	2301      	movs	r3, #1
 80177a2:	e000      	b.n	80177a6 <dhcp_supplied_address+0x3a>
 80177a4:	2300      	movs	r3, #0
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	e000      	b.n	80177ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80177aa:	2300      	movs	r3, #0
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3714      	adds	r7, #20
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80177c0:	4915      	ldr	r1, [pc, #84]	; (8017818 <etharp_free_entry+0x60>)
 80177c2:	687a      	ldr	r2, [r7, #4]
 80177c4:	4613      	mov	r3, r2
 80177c6:	005b      	lsls	r3, r3, #1
 80177c8:	4413      	add	r3, r2
 80177ca:	00db      	lsls	r3, r3, #3
 80177cc:	440b      	add	r3, r1
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d013      	beq.n	80177fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80177d4:	4910      	ldr	r1, [pc, #64]	; (8017818 <etharp_free_entry+0x60>)
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	4613      	mov	r3, r2
 80177da:	005b      	lsls	r3, r3, #1
 80177dc:	4413      	add	r3, r2
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	440b      	add	r3, r1
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7f7 ff95 	bl	800f714 <pbuf_free>
    arp_table[i].q = NULL;
 80177ea:	490b      	ldr	r1, [pc, #44]	; (8017818 <etharp_free_entry+0x60>)
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	4613      	mov	r3, r2
 80177f0:	005b      	lsls	r3, r3, #1
 80177f2:	4413      	add	r3, r2
 80177f4:	00db      	lsls	r3, r3, #3
 80177f6:	440b      	add	r3, r1
 80177f8:	2200      	movs	r2, #0
 80177fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80177fc:	4906      	ldr	r1, [pc, #24]	; (8017818 <etharp_free_entry+0x60>)
 80177fe:	687a      	ldr	r2, [r7, #4]
 8017800:	4613      	mov	r3, r2
 8017802:	005b      	lsls	r3, r3, #1
 8017804:	4413      	add	r3, r2
 8017806:	00db      	lsls	r3, r3, #3
 8017808:	440b      	add	r3, r1
 801780a:	3314      	adds	r3, #20
 801780c:	2200      	movs	r2, #0
 801780e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017810:	bf00      	nop
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	2000b510 	.word	0x2000b510

0801781c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017822:	2300      	movs	r3, #0
 8017824:	607b      	str	r3, [r7, #4]
 8017826:	e096      	b.n	8017956 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017828:	494f      	ldr	r1, [pc, #316]	; (8017968 <etharp_tmr+0x14c>)
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	4613      	mov	r3, r2
 801782e:	005b      	lsls	r3, r3, #1
 8017830:	4413      	add	r3, r2
 8017832:	00db      	lsls	r3, r3, #3
 8017834:	440b      	add	r3, r1
 8017836:	3314      	adds	r3, #20
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801783c:	78fb      	ldrb	r3, [r7, #3]
 801783e:	2b00      	cmp	r3, #0
 8017840:	f000 8086 	beq.w	8017950 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017844:	4948      	ldr	r1, [pc, #288]	; (8017968 <etharp_tmr+0x14c>)
 8017846:	687a      	ldr	r2, [r7, #4]
 8017848:	4613      	mov	r3, r2
 801784a:	005b      	lsls	r3, r3, #1
 801784c:	4413      	add	r3, r2
 801784e:	00db      	lsls	r3, r3, #3
 8017850:	440b      	add	r3, r1
 8017852:	3312      	adds	r3, #18
 8017854:	881b      	ldrh	r3, [r3, #0]
 8017856:	3301      	adds	r3, #1
 8017858:	b298      	uxth	r0, r3
 801785a:	4943      	ldr	r1, [pc, #268]	; (8017968 <etharp_tmr+0x14c>)
 801785c:	687a      	ldr	r2, [r7, #4]
 801785e:	4613      	mov	r3, r2
 8017860:	005b      	lsls	r3, r3, #1
 8017862:	4413      	add	r3, r2
 8017864:	00db      	lsls	r3, r3, #3
 8017866:	440b      	add	r3, r1
 8017868:	3312      	adds	r3, #18
 801786a:	4602      	mov	r2, r0
 801786c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801786e:	493e      	ldr	r1, [pc, #248]	; (8017968 <etharp_tmr+0x14c>)
 8017870:	687a      	ldr	r2, [r7, #4]
 8017872:	4613      	mov	r3, r2
 8017874:	005b      	lsls	r3, r3, #1
 8017876:	4413      	add	r3, r2
 8017878:	00db      	lsls	r3, r3, #3
 801787a:	440b      	add	r3, r1
 801787c:	3312      	adds	r3, #18
 801787e:	881b      	ldrh	r3, [r3, #0]
 8017880:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017884:	d215      	bcs.n	80178b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017886:	4938      	ldr	r1, [pc, #224]	; (8017968 <etharp_tmr+0x14c>)
 8017888:	687a      	ldr	r2, [r7, #4]
 801788a:	4613      	mov	r3, r2
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	4413      	add	r3, r2
 8017890:	00db      	lsls	r3, r3, #3
 8017892:	440b      	add	r3, r1
 8017894:	3314      	adds	r3, #20
 8017896:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017898:	2b01      	cmp	r3, #1
 801789a:	d10e      	bne.n	80178ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801789c:	4932      	ldr	r1, [pc, #200]	; (8017968 <etharp_tmr+0x14c>)
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	4613      	mov	r3, r2
 80178a2:	005b      	lsls	r3, r3, #1
 80178a4:	4413      	add	r3, r2
 80178a6:	00db      	lsls	r3, r3, #3
 80178a8:	440b      	add	r3, r1
 80178aa:	3312      	adds	r3, #18
 80178ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80178ae:	2b04      	cmp	r3, #4
 80178b0:	d903      	bls.n	80178ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7ff ff80 	bl	80177b8 <etharp_free_entry>
 80178b8:	e04a      	b.n	8017950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80178ba:	492b      	ldr	r1, [pc, #172]	; (8017968 <etharp_tmr+0x14c>)
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	4613      	mov	r3, r2
 80178c0:	005b      	lsls	r3, r3, #1
 80178c2:	4413      	add	r3, r2
 80178c4:	00db      	lsls	r3, r3, #3
 80178c6:	440b      	add	r3, r1
 80178c8:	3314      	adds	r3, #20
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	2b03      	cmp	r3, #3
 80178ce:	d10a      	bne.n	80178e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80178d0:	4925      	ldr	r1, [pc, #148]	; (8017968 <etharp_tmr+0x14c>)
 80178d2:	687a      	ldr	r2, [r7, #4]
 80178d4:	4613      	mov	r3, r2
 80178d6:	005b      	lsls	r3, r3, #1
 80178d8:	4413      	add	r3, r2
 80178da:	00db      	lsls	r3, r3, #3
 80178dc:	440b      	add	r3, r1
 80178de:	3314      	adds	r3, #20
 80178e0:	2204      	movs	r2, #4
 80178e2:	701a      	strb	r2, [r3, #0]
 80178e4:	e034      	b.n	8017950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80178e6:	4920      	ldr	r1, [pc, #128]	; (8017968 <etharp_tmr+0x14c>)
 80178e8:	687a      	ldr	r2, [r7, #4]
 80178ea:	4613      	mov	r3, r2
 80178ec:	005b      	lsls	r3, r3, #1
 80178ee:	4413      	add	r3, r2
 80178f0:	00db      	lsls	r3, r3, #3
 80178f2:	440b      	add	r3, r1
 80178f4:	3314      	adds	r3, #20
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b04      	cmp	r3, #4
 80178fa:	d10a      	bne.n	8017912 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80178fc:	491a      	ldr	r1, [pc, #104]	; (8017968 <etharp_tmr+0x14c>)
 80178fe:	687a      	ldr	r2, [r7, #4]
 8017900:	4613      	mov	r3, r2
 8017902:	005b      	lsls	r3, r3, #1
 8017904:	4413      	add	r3, r2
 8017906:	00db      	lsls	r3, r3, #3
 8017908:	440b      	add	r3, r1
 801790a:	3314      	adds	r3, #20
 801790c:	2202      	movs	r2, #2
 801790e:	701a      	strb	r2, [r3, #0]
 8017910:	e01e      	b.n	8017950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017912:	4915      	ldr	r1, [pc, #84]	; (8017968 <etharp_tmr+0x14c>)
 8017914:	687a      	ldr	r2, [r7, #4]
 8017916:	4613      	mov	r3, r2
 8017918:	005b      	lsls	r3, r3, #1
 801791a:	4413      	add	r3, r2
 801791c:	00db      	lsls	r3, r3, #3
 801791e:	440b      	add	r3, r1
 8017920:	3314      	adds	r3, #20
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	2b01      	cmp	r3, #1
 8017926:	d113      	bne.n	8017950 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017928:	490f      	ldr	r1, [pc, #60]	; (8017968 <etharp_tmr+0x14c>)
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	4613      	mov	r3, r2
 801792e:	005b      	lsls	r3, r3, #1
 8017930:	4413      	add	r3, r2
 8017932:	00db      	lsls	r3, r3, #3
 8017934:	440b      	add	r3, r1
 8017936:	3308      	adds	r3, #8
 8017938:	6818      	ldr	r0, [r3, #0]
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	4613      	mov	r3, r2
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	4413      	add	r3, r2
 8017942:	00db      	lsls	r3, r3, #3
 8017944:	4a08      	ldr	r2, [pc, #32]	; (8017968 <etharp_tmr+0x14c>)
 8017946:	4413      	add	r3, r2
 8017948:	3304      	adds	r3, #4
 801794a:	4619      	mov	r1, r3
 801794c:	f000 fe72 	bl	8018634 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	3301      	adds	r3, #1
 8017954:	607b      	str	r3, [r7, #4]
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2b09      	cmp	r3, #9
 801795a:	f77f af65 	ble.w	8017828 <etharp_tmr+0xc>
      }
    }
  }
}
 801795e:	bf00      	nop
 8017960:	bf00      	nop
 8017962:	3708      	adds	r7, #8
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	2000b510 	.word	0x2000b510

0801796c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b08a      	sub	sp, #40	; 0x28
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	460b      	mov	r3, r1
 8017976:	607a      	str	r2, [r7, #4]
 8017978:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801797a:	230a      	movs	r3, #10
 801797c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801797e:	230a      	movs	r3, #10
 8017980:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017982:	230a      	movs	r3, #10
 8017984:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801798a:	230a      	movs	r3, #10
 801798c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	83bb      	strh	r3, [r7, #28]
 8017992:	2300      	movs	r3, #0
 8017994:	837b      	strh	r3, [r7, #26]
 8017996:	2300      	movs	r3, #0
 8017998:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801799a:	2300      	movs	r3, #0
 801799c:	843b      	strh	r3, [r7, #32]
 801799e:	e0ae      	b.n	8017afe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80179a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179a4:	49a6      	ldr	r1, [pc, #664]	; (8017c40 <etharp_find_entry+0x2d4>)
 80179a6:	4613      	mov	r3, r2
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	4413      	add	r3, r2
 80179ac:	00db      	lsls	r3, r3, #3
 80179ae:	440b      	add	r3, r1
 80179b0:	3314      	adds	r3, #20
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80179b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80179ba:	2b0a      	cmp	r3, #10
 80179bc:	d105      	bne.n	80179ca <etharp_find_entry+0x5e>
 80179be:	7dfb      	ldrb	r3, [r7, #23]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d102      	bne.n	80179ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80179c4:	8c3b      	ldrh	r3, [r7, #32]
 80179c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80179c8:	e095      	b.n	8017af6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80179ca:	7dfb      	ldrb	r3, [r7, #23]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	f000 8092 	beq.w	8017af6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80179d2:	7dfb      	ldrb	r3, [r7, #23]
 80179d4:	2b01      	cmp	r3, #1
 80179d6:	d009      	beq.n	80179ec <etharp_find_entry+0x80>
 80179d8:	7dfb      	ldrb	r3, [r7, #23]
 80179da:	2b01      	cmp	r3, #1
 80179dc:	d806      	bhi.n	80179ec <etharp_find_entry+0x80>
 80179de:	4b99      	ldr	r3, [pc, #612]	; (8017c44 <etharp_find_entry+0x2d8>)
 80179e0:	f240 1223 	movw	r2, #291	; 0x123
 80179e4:	4998      	ldr	r1, [pc, #608]	; (8017c48 <etharp_find_entry+0x2dc>)
 80179e6:	4899      	ldr	r0, [pc, #612]	; (8017c4c <etharp_find_entry+0x2e0>)
 80179e8:	f002 fc96 	bl	801a318 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d020      	beq.n	8017a34 <etharp_find_entry+0xc8>
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	6819      	ldr	r1, [r3, #0]
 80179f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179fa:	4891      	ldr	r0, [pc, #580]	; (8017c40 <etharp_find_entry+0x2d4>)
 80179fc:	4613      	mov	r3, r2
 80179fe:	005b      	lsls	r3, r3, #1
 8017a00:	4413      	add	r3, r2
 8017a02:	00db      	lsls	r3, r3, #3
 8017a04:	4403      	add	r3, r0
 8017a06:	3304      	adds	r3, #4
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	4299      	cmp	r1, r3
 8017a0c:	d112      	bne.n	8017a34 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d00c      	beq.n	8017a2e <etharp_find_entry+0xc2>
 8017a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a18:	4989      	ldr	r1, [pc, #548]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	005b      	lsls	r3, r3, #1
 8017a1e:	4413      	add	r3, r2
 8017a20:	00db      	lsls	r3, r3, #3
 8017a22:	440b      	add	r3, r1
 8017a24:	3308      	adds	r3, #8
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d102      	bne.n	8017a34 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017a32:	e100      	b.n	8017c36 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017a34:	7dfb      	ldrb	r3, [r7, #23]
 8017a36:	2b01      	cmp	r3, #1
 8017a38:	d140      	bne.n	8017abc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a3e:	4980      	ldr	r1, [pc, #512]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017a40:	4613      	mov	r3, r2
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	4413      	add	r3, r2
 8017a46:	00db      	lsls	r3, r3, #3
 8017a48:	440b      	add	r3, r1
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d01a      	beq.n	8017a86 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a54:	497a      	ldr	r1, [pc, #488]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017a56:	4613      	mov	r3, r2
 8017a58:	005b      	lsls	r3, r3, #1
 8017a5a:	4413      	add	r3, r2
 8017a5c:	00db      	lsls	r3, r3, #3
 8017a5e:	440b      	add	r3, r1
 8017a60:	3312      	adds	r3, #18
 8017a62:	881b      	ldrh	r3, [r3, #0]
 8017a64:	8bba      	ldrh	r2, [r7, #28]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d845      	bhi.n	8017af6 <etharp_find_entry+0x18a>
            old_queue = i;
 8017a6a:	8c3b      	ldrh	r3, [r7, #32]
 8017a6c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a72:	4973      	ldr	r1, [pc, #460]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017a74:	4613      	mov	r3, r2
 8017a76:	005b      	lsls	r3, r3, #1
 8017a78:	4413      	add	r3, r2
 8017a7a:	00db      	lsls	r3, r3, #3
 8017a7c:	440b      	add	r3, r1
 8017a7e:	3312      	adds	r3, #18
 8017a80:	881b      	ldrh	r3, [r3, #0]
 8017a82:	83bb      	strh	r3, [r7, #28]
 8017a84:	e037      	b.n	8017af6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017a86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a8a:	496d      	ldr	r1, [pc, #436]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	005b      	lsls	r3, r3, #1
 8017a90:	4413      	add	r3, r2
 8017a92:	00db      	lsls	r3, r3, #3
 8017a94:	440b      	add	r3, r1
 8017a96:	3312      	adds	r3, #18
 8017a98:	881b      	ldrh	r3, [r3, #0]
 8017a9a:	8b7a      	ldrh	r2, [r7, #26]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d82a      	bhi.n	8017af6 <etharp_find_entry+0x18a>
            old_pending = i;
 8017aa0:	8c3b      	ldrh	r3, [r7, #32]
 8017aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017aa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017aa8:	4965      	ldr	r1, [pc, #404]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017aaa:	4613      	mov	r3, r2
 8017aac:	005b      	lsls	r3, r3, #1
 8017aae:	4413      	add	r3, r2
 8017ab0:	00db      	lsls	r3, r3, #3
 8017ab2:	440b      	add	r3, r1
 8017ab4:	3312      	adds	r3, #18
 8017ab6:	881b      	ldrh	r3, [r3, #0]
 8017ab8:	837b      	strh	r3, [r7, #26]
 8017aba:	e01c      	b.n	8017af6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017abc:	7dfb      	ldrb	r3, [r7, #23]
 8017abe:	2b01      	cmp	r3, #1
 8017ac0:	d919      	bls.n	8017af6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ac6:	495e      	ldr	r1, [pc, #376]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017ac8:	4613      	mov	r3, r2
 8017aca:	005b      	lsls	r3, r3, #1
 8017acc:	4413      	add	r3, r2
 8017ace:	00db      	lsls	r3, r3, #3
 8017ad0:	440b      	add	r3, r1
 8017ad2:	3312      	adds	r3, #18
 8017ad4:	881b      	ldrh	r3, [r3, #0]
 8017ad6:	8b3a      	ldrh	r2, [r7, #24]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d80c      	bhi.n	8017af6 <etharp_find_entry+0x18a>
            old_stable = i;
 8017adc:	8c3b      	ldrh	r3, [r7, #32]
 8017ade:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ae4:	4956      	ldr	r1, [pc, #344]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	4413      	add	r3, r2
 8017aec:	00db      	lsls	r3, r3, #3
 8017aee:	440b      	add	r3, r1
 8017af0:	3312      	adds	r3, #18
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017af6:	8c3b      	ldrh	r3, [r7, #32]
 8017af8:	3301      	adds	r3, #1
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	843b      	strh	r3, [r7, #32]
 8017afe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b02:	2b09      	cmp	r3, #9
 8017b04:	f77f af4c 	ble.w	80179a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017b08:	7afb      	ldrb	r3, [r7, #11]
 8017b0a:	f003 0302 	and.w	r3, r3, #2
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d108      	bne.n	8017b24 <etharp_find_entry+0x1b8>
 8017b12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017b16:	2b0a      	cmp	r3, #10
 8017b18:	d107      	bne.n	8017b2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017b1a:	7afb      	ldrb	r3, [r7, #11]
 8017b1c:	f003 0301 	and.w	r3, r3, #1
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d102      	bne.n	8017b2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b28:	e085      	b.n	8017c36 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017b2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017b2e:	2b09      	cmp	r3, #9
 8017b30:	dc02      	bgt.n	8017b38 <etharp_find_entry+0x1cc>
    i = empty;
 8017b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b34:	843b      	strh	r3, [r7, #32]
 8017b36:	e039      	b.n	8017bac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017b3c:	2b09      	cmp	r3, #9
 8017b3e:	dc14      	bgt.n	8017b6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b48:	493d      	ldr	r1, [pc, #244]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	005b      	lsls	r3, r3, #1
 8017b4e:	4413      	add	r3, r2
 8017b50:	00db      	lsls	r3, r3, #3
 8017b52:	440b      	add	r3, r1
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d018      	beq.n	8017b8c <etharp_find_entry+0x220>
 8017b5a:	4b3a      	ldr	r3, [pc, #232]	; (8017c44 <etharp_find_entry+0x2d8>)
 8017b5c:	f240 126d 	movw	r2, #365	; 0x16d
 8017b60:	493b      	ldr	r1, [pc, #236]	; (8017c50 <etharp_find_entry+0x2e4>)
 8017b62:	483a      	ldr	r0, [pc, #232]	; (8017c4c <etharp_find_entry+0x2e0>)
 8017b64:	f002 fbd8 	bl	801a318 <iprintf>
 8017b68:	e010      	b.n	8017b8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017b6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017b6e:	2b09      	cmp	r3, #9
 8017b70:	dc02      	bgt.n	8017b78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b74:	843b      	strh	r3, [r7, #32]
 8017b76:	e009      	b.n	8017b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017b7c:	2b09      	cmp	r3, #9
 8017b7e:	dc02      	bgt.n	8017b86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017b80:	8bfb      	ldrh	r3, [r7, #30]
 8017b82:	843b      	strh	r3, [r7, #32]
 8017b84:	e002      	b.n	8017b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b8a:	e054      	b.n	8017c36 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017b8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b90:	2b09      	cmp	r3, #9
 8017b92:	dd06      	ble.n	8017ba2 <etharp_find_entry+0x236>
 8017b94:	4b2b      	ldr	r3, [pc, #172]	; (8017c44 <etharp_find_entry+0x2d8>)
 8017b96:	f240 127f 	movw	r2, #383	; 0x17f
 8017b9a:	492e      	ldr	r1, [pc, #184]	; (8017c54 <etharp_find_entry+0x2e8>)
 8017b9c:	482b      	ldr	r0, [pc, #172]	; (8017c4c <etharp_find_entry+0x2e0>)
 8017b9e:	f002 fbbb 	bl	801a318 <iprintf>
    etharp_free_entry(i);
 8017ba2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f7ff fe06 	bl	80177b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017bac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017bb0:	2b09      	cmp	r3, #9
 8017bb2:	dd06      	ble.n	8017bc2 <etharp_find_entry+0x256>
 8017bb4:	4b23      	ldr	r3, [pc, #140]	; (8017c44 <etharp_find_entry+0x2d8>)
 8017bb6:	f240 1283 	movw	r2, #387	; 0x183
 8017bba:	4926      	ldr	r1, [pc, #152]	; (8017c54 <etharp_find_entry+0x2e8>)
 8017bbc:	4823      	ldr	r0, [pc, #140]	; (8017c4c <etharp_find_entry+0x2e0>)
 8017bbe:	f002 fbab 	bl	801a318 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bc6:	491e      	ldr	r1, [pc, #120]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017bc8:	4613      	mov	r3, r2
 8017bca:	005b      	lsls	r3, r3, #1
 8017bcc:	4413      	add	r3, r2
 8017bce:	00db      	lsls	r3, r3, #3
 8017bd0:	440b      	add	r3, r1
 8017bd2:	3314      	adds	r3, #20
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d006      	beq.n	8017be8 <etharp_find_entry+0x27c>
 8017bda:	4b1a      	ldr	r3, [pc, #104]	; (8017c44 <etharp_find_entry+0x2d8>)
 8017bdc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017be0:	491d      	ldr	r1, [pc, #116]	; (8017c58 <etharp_find_entry+0x2ec>)
 8017be2:	481a      	ldr	r0, [pc, #104]	; (8017c4c <etharp_find_entry+0x2e0>)
 8017be4:	f002 fb98 	bl	801a318 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d00b      	beq.n	8017c06 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017bee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	6819      	ldr	r1, [r3, #0]
 8017bf6:	4812      	ldr	r0, [pc, #72]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017bf8:	4613      	mov	r3, r2
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	4413      	add	r3, r2
 8017bfe:	00db      	lsls	r3, r3, #3
 8017c00:	4403      	add	r3, r0
 8017c02:	3304      	adds	r3, #4
 8017c04:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c0a:	490d      	ldr	r1, [pc, #52]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017c0c:	4613      	mov	r3, r2
 8017c0e:	005b      	lsls	r3, r3, #1
 8017c10:	4413      	add	r3, r2
 8017c12:	00db      	lsls	r3, r3, #3
 8017c14:	440b      	add	r3, r1
 8017c16:	3312      	adds	r3, #18
 8017c18:	2200      	movs	r2, #0
 8017c1a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c20:	4907      	ldr	r1, [pc, #28]	; (8017c40 <etharp_find_entry+0x2d4>)
 8017c22:	4613      	mov	r3, r2
 8017c24:	005b      	lsls	r3, r3, #1
 8017c26:	4413      	add	r3, r2
 8017c28:	00db      	lsls	r3, r3, #3
 8017c2a:	440b      	add	r3, r1
 8017c2c:	3308      	adds	r3, #8
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3728      	adds	r7, #40	; 0x28
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	2000b510 	.word	0x2000b510
 8017c44:	0801f20c 	.word	0x0801f20c
 8017c48:	0801f244 	.word	0x0801f244
 8017c4c:	0801f284 	.word	0x0801f284
 8017c50:	0801f2ac 	.word	0x0801f2ac
 8017c54:	0801f2c4 	.word	0x0801f2c4
 8017c58:	0801f2d8 	.word	0x0801f2d8

08017c5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b088      	sub	sp, #32
 8017c60:	af02      	add	r7, sp, #8
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	60b9      	str	r1, [r7, #8]
 8017c66:	607a      	str	r2, [r7, #4]
 8017c68:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c70:	2b06      	cmp	r3, #6
 8017c72:	d006      	beq.n	8017c82 <etharp_update_arp_entry+0x26>
 8017c74:	4b48      	ldr	r3, [pc, #288]	; (8017d98 <etharp_update_arp_entry+0x13c>)
 8017c76:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017c7a:	4948      	ldr	r1, [pc, #288]	; (8017d9c <etharp_update_arp_entry+0x140>)
 8017c7c:	4848      	ldr	r0, [pc, #288]	; (8017da0 <etharp_update_arp_entry+0x144>)
 8017c7e:	f002 fb4b 	bl	801a318 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d012      	beq.n	8017cae <etharp_update_arp_entry+0x52>
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d00e      	beq.n	8017cae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	68f9      	ldr	r1, [r7, #12]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f001 f920 	bl	8018edc <ip4_addr_isbroadcast_u32>
 8017c9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d105      	bne.n	8017cae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017caa:	2be0      	cmp	r3, #224	; 0xe0
 8017cac:	d102      	bne.n	8017cb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017cae:	f06f 030f 	mvn.w	r3, #15
 8017cb2:	e06c      	b.n	8017d8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017cb4:	78fb      	ldrb	r3, [r7, #3]
 8017cb6:	68fa      	ldr	r2, [r7, #12]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	68b8      	ldr	r0, [r7, #8]
 8017cbc:	f7ff fe56 	bl	801796c <etharp_find_entry>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017cc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	da02      	bge.n	8017cd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017ccc:	8afb      	ldrh	r3, [r7, #22]
 8017cce:	b25b      	sxtb	r3, r3
 8017cd0:	e05d      	b.n	8017d8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017cd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cd6:	4933      	ldr	r1, [pc, #204]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017cd8:	4613      	mov	r3, r2
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	4413      	add	r3, r2
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	440b      	add	r3, r1
 8017ce2:	3314      	adds	r3, #20
 8017ce4:	2202      	movs	r2, #2
 8017ce6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cec:	492d      	ldr	r1, [pc, #180]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017cee:	4613      	mov	r3, r2
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4413      	add	r3, r2
 8017cf4:	00db      	lsls	r3, r3, #3
 8017cf6:	440b      	add	r3, r1
 8017cf8:	3308      	adds	r3, #8
 8017cfa:	68fa      	ldr	r2, [r7, #12]
 8017cfc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d02:	4613      	mov	r3, r2
 8017d04:	005b      	lsls	r3, r3, #1
 8017d06:	4413      	add	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	3308      	adds	r3, #8
 8017d0c:	4a25      	ldr	r2, [pc, #148]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017d0e:	4413      	add	r3, r2
 8017d10:	3304      	adds	r3, #4
 8017d12:	2206      	movs	r2, #6
 8017d14:	6879      	ldr	r1, [r7, #4]
 8017d16:	4618      	mov	r0, r3
 8017d18:	f002 fc47 	bl	801a5aa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017d1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d20:	4920      	ldr	r1, [pc, #128]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017d22:	4613      	mov	r3, r2
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	4413      	add	r3, r2
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	440b      	add	r3, r1
 8017d2c:	3312      	adds	r3, #18
 8017d2e:	2200      	movs	r2, #0
 8017d30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017d32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d36:	491b      	ldr	r1, [pc, #108]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017d38:	4613      	mov	r3, r2
 8017d3a:	005b      	lsls	r3, r3, #1
 8017d3c:	4413      	add	r3, r2
 8017d3e:	00db      	lsls	r3, r3, #3
 8017d40:	440b      	add	r3, r1
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d021      	beq.n	8017d8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017d48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d4c:	4915      	ldr	r1, [pc, #84]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017d4e:	4613      	mov	r3, r2
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	4413      	add	r3, r2
 8017d54:	00db      	lsls	r3, r3, #3
 8017d56:	440b      	add	r3, r1
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d60:	4910      	ldr	r1, [pc, #64]	; (8017da4 <etharp_update_arp_entry+0x148>)
 8017d62:	4613      	mov	r3, r2
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	4413      	add	r3, r2
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	440b      	add	r3, r1
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017d7a:	9300      	str	r3, [sp, #0]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6939      	ldr	r1, [r7, #16]
 8017d80:	68f8      	ldr	r0, [r7, #12]
 8017d82:	f001 ffb9 	bl	8019cf8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017d86:	6938      	ldr	r0, [r7, #16]
 8017d88:	f7f7 fcc4 	bl	800f714 <pbuf_free>
  }
  return ERR_OK;
 8017d8c:	2300      	movs	r3, #0
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3718      	adds	r7, #24
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	0801f20c 	.word	0x0801f20c
 8017d9c:	0801f304 	.word	0x0801f304
 8017da0:	0801f284 	.word	0x0801f284
 8017da4:	2000b510 	.word	0x2000b510

08017da8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b084      	sub	sp, #16
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017db0:	2300      	movs	r3, #0
 8017db2:	60fb      	str	r3, [r7, #12]
 8017db4:	e01e      	b.n	8017df4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017db6:	4913      	ldr	r1, [pc, #76]	; (8017e04 <etharp_cleanup_netif+0x5c>)
 8017db8:	68fa      	ldr	r2, [r7, #12]
 8017dba:	4613      	mov	r3, r2
 8017dbc:	005b      	lsls	r3, r3, #1
 8017dbe:	4413      	add	r3, r2
 8017dc0:	00db      	lsls	r3, r3, #3
 8017dc2:	440b      	add	r3, r1
 8017dc4:	3314      	adds	r3, #20
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017dca:	7afb      	ldrb	r3, [r7, #11]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d00e      	beq.n	8017dee <etharp_cleanup_netif+0x46>
 8017dd0:	490c      	ldr	r1, [pc, #48]	; (8017e04 <etharp_cleanup_netif+0x5c>)
 8017dd2:	68fa      	ldr	r2, [r7, #12]
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	4413      	add	r3, r2
 8017dda:	00db      	lsls	r3, r3, #3
 8017ddc:	440b      	add	r3, r1
 8017dde:	3308      	adds	r3, #8
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d102      	bne.n	8017dee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017de8:	68f8      	ldr	r0, [r7, #12]
 8017dea:	f7ff fce5 	bl	80177b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	3301      	adds	r3, #1
 8017df2:	60fb      	str	r3, [r7, #12]
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2b09      	cmp	r3, #9
 8017df8:	dddd      	ble.n	8017db6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017dfa:	bf00      	nop
 8017dfc:	bf00      	nop
 8017dfe:	3710      	adds	r7, #16
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	2000b510 	.word	0x2000b510

08017e08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017e08:	b5b0      	push	{r4, r5, r7, lr}
 8017e0a:	b08a      	sub	sp, #40	; 0x28
 8017e0c:	af04      	add	r7, sp, #16
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d107      	bne.n	8017e28 <etharp_input+0x20>
 8017e18:	4b3f      	ldr	r3, [pc, #252]	; (8017f18 <etharp_input+0x110>)
 8017e1a:	f240 228a 	movw	r2, #650	; 0x28a
 8017e1e:	493f      	ldr	r1, [pc, #252]	; (8017f1c <etharp_input+0x114>)
 8017e20:	483f      	ldr	r0, [pc, #252]	; (8017f20 <etharp_input+0x118>)
 8017e22:	f002 fa79 	bl	801a318 <iprintf>
 8017e26:	e074      	b.n	8017f12 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	685b      	ldr	r3, [r3, #4]
 8017e2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017e2e:	693b      	ldr	r3, [r7, #16]
 8017e30:	881b      	ldrh	r3, [r3, #0]
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e38:	d10c      	bne.n	8017e54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017e3e:	2b06      	cmp	r3, #6
 8017e40:	d108      	bne.n	8017e54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017e42:	693b      	ldr	r3, [r7, #16]
 8017e44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017e46:	2b04      	cmp	r3, #4
 8017e48:	d104      	bne.n	8017e54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	885b      	ldrh	r3, [r3, #2]
 8017e4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017e50:	2b08      	cmp	r3, #8
 8017e52:	d003      	beq.n	8017e5c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f7f7 fc5d 	bl	800f714 <pbuf_free>
    return;
 8017e5a:	e05a      	b.n	8017f12 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	330e      	adds	r3, #14
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	3318      	adds	r3, #24
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	3304      	adds	r3, #4
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d102      	bne.n	8017e7c <etharp_input+0x74>
    for_us = 0;
 8017e76:	2300      	movs	r3, #0
 8017e78:	75fb      	strb	r3, [r7, #23]
 8017e7a:	e009      	b.n	8017e90 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017e7c:	68ba      	ldr	r2, [r7, #8]
 8017e7e:	683b      	ldr	r3, [r7, #0]
 8017e80:	3304      	adds	r3, #4
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	bf0c      	ite	eq
 8017e88:	2301      	moveq	r3, #1
 8017e8a:	2300      	movne	r3, #0
 8017e8c:	b2db      	uxtb	r3, r3
 8017e8e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	f103 0208 	add.w	r2, r3, #8
 8017e96:	7dfb      	ldrb	r3, [r7, #23]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d001      	beq.n	8017ea0 <etharp_input+0x98>
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	e000      	b.n	8017ea2 <etharp_input+0x9a>
 8017ea0:	2302      	movs	r3, #2
 8017ea2:	f107 010c 	add.w	r1, r7, #12
 8017ea6:	6838      	ldr	r0, [r7, #0]
 8017ea8:	f7ff fed8 	bl	8017c5c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	88db      	ldrh	r3, [r3, #6]
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017eb6:	d003      	beq.n	8017ec0 <etharp_input+0xb8>
 8017eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ebc:	d01e      	beq.n	8017efc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017ebe:	e025      	b.n	8017f0c <etharp_input+0x104>
      if (for_us) {
 8017ec0:	7dfb      	ldrb	r3, [r7, #23]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d021      	beq.n	8017f0a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017edc:	693a      	ldr	r2, [r7, #16]
 8017ede:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017ee0:	2102      	movs	r1, #2
 8017ee2:	9103      	str	r1, [sp, #12]
 8017ee4:	f107 010c 	add.w	r1, r7, #12
 8017ee8:	9102      	str	r1, [sp, #8]
 8017eea:	9201      	str	r2, [sp, #4]
 8017eec:	9300      	str	r3, [sp, #0]
 8017eee:	462b      	mov	r3, r5
 8017ef0:	4622      	mov	r2, r4
 8017ef2:	4601      	mov	r1, r0
 8017ef4:	6838      	ldr	r0, [r7, #0]
 8017ef6:	f000 faef 	bl	80184d8 <etharp_raw>
      break;
 8017efa:	e006      	b.n	8017f0a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017efc:	f107 030c 	add.w	r3, r7, #12
 8017f00:	4619      	mov	r1, r3
 8017f02:	6838      	ldr	r0, [r7, #0]
 8017f04:	f7fe f9fc 	bl	8016300 <dhcp_arp_reply>
      break;
 8017f08:	e000      	b.n	8017f0c <etharp_input+0x104>
      break;
 8017f0a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f7f7 fc01 	bl	800f714 <pbuf_free>
}
 8017f12:	3718      	adds	r7, #24
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bdb0      	pop	{r4, r5, r7, pc}
 8017f18:	0801f20c 	.word	0x0801f20c
 8017f1c:	0801f35c 	.word	0x0801f35c
 8017f20:	0801f284 	.word	0x0801f284

08017f24 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af02      	add	r7, sp, #8
 8017f2a:	60f8      	str	r0, [r7, #12]
 8017f2c:	60b9      	str	r1, [r7, #8]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017f32:	79fa      	ldrb	r2, [r7, #7]
 8017f34:	4944      	ldr	r1, [pc, #272]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017f36:	4613      	mov	r3, r2
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	4413      	add	r3, r2
 8017f3c:	00db      	lsls	r3, r3, #3
 8017f3e:	440b      	add	r3, r1
 8017f40:	3314      	adds	r3, #20
 8017f42:	781b      	ldrb	r3, [r3, #0]
 8017f44:	2b01      	cmp	r3, #1
 8017f46:	d806      	bhi.n	8017f56 <etharp_output_to_arp_index+0x32>
 8017f48:	4b40      	ldr	r3, [pc, #256]	; (801804c <etharp_output_to_arp_index+0x128>)
 8017f4a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017f4e:	4940      	ldr	r1, [pc, #256]	; (8018050 <etharp_output_to_arp_index+0x12c>)
 8017f50:	4840      	ldr	r0, [pc, #256]	; (8018054 <etharp_output_to_arp_index+0x130>)
 8017f52:	f002 f9e1 	bl	801a318 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017f56:	79fa      	ldrb	r2, [r7, #7]
 8017f58:	493b      	ldr	r1, [pc, #236]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	005b      	lsls	r3, r3, #1
 8017f5e:	4413      	add	r3, r2
 8017f60:	00db      	lsls	r3, r3, #3
 8017f62:	440b      	add	r3, r1
 8017f64:	3314      	adds	r3, #20
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	2b02      	cmp	r3, #2
 8017f6a:	d153      	bne.n	8018014 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017f6c:	79fa      	ldrb	r2, [r7, #7]
 8017f6e:	4936      	ldr	r1, [pc, #216]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017f70:	4613      	mov	r3, r2
 8017f72:	005b      	lsls	r3, r3, #1
 8017f74:	4413      	add	r3, r2
 8017f76:	00db      	lsls	r3, r3, #3
 8017f78:	440b      	add	r3, r1
 8017f7a:	3312      	adds	r3, #18
 8017f7c:	881b      	ldrh	r3, [r3, #0]
 8017f7e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017f82:	d919      	bls.n	8017fb8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017f84:	79fa      	ldrb	r2, [r7, #7]
 8017f86:	4613      	mov	r3, r2
 8017f88:	005b      	lsls	r3, r3, #1
 8017f8a:	4413      	add	r3, r2
 8017f8c:	00db      	lsls	r3, r3, #3
 8017f8e:	4a2e      	ldr	r2, [pc, #184]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017f90:	4413      	add	r3, r2
 8017f92:	3304      	adds	r3, #4
 8017f94:	4619      	mov	r1, r3
 8017f96:	68f8      	ldr	r0, [r7, #12]
 8017f98:	f000 fb4c 	bl	8018634 <etharp_request>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d138      	bne.n	8018014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017fa2:	79fa      	ldrb	r2, [r7, #7]
 8017fa4:	4928      	ldr	r1, [pc, #160]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	005b      	lsls	r3, r3, #1
 8017faa:	4413      	add	r3, r2
 8017fac:	00db      	lsls	r3, r3, #3
 8017fae:	440b      	add	r3, r1
 8017fb0:	3314      	adds	r3, #20
 8017fb2:	2203      	movs	r2, #3
 8017fb4:	701a      	strb	r2, [r3, #0]
 8017fb6:	e02d      	b.n	8018014 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017fb8:	79fa      	ldrb	r2, [r7, #7]
 8017fba:	4923      	ldr	r1, [pc, #140]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	005b      	lsls	r3, r3, #1
 8017fc0:	4413      	add	r3, r2
 8017fc2:	00db      	lsls	r3, r3, #3
 8017fc4:	440b      	add	r3, r1
 8017fc6:	3312      	adds	r3, #18
 8017fc8:	881b      	ldrh	r3, [r3, #0]
 8017fca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017fce:	d321      	bcc.n	8018014 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017fd0:	79fa      	ldrb	r2, [r7, #7]
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	005b      	lsls	r3, r3, #1
 8017fd6:	4413      	add	r3, r2
 8017fd8:	00db      	lsls	r3, r3, #3
 8017fda:	4a1b      	ldr	r2, [pc, #108]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017fdc:	4413      	add	r3, r2
 8017fde:	1d19      	adds	r1, r3, #4
 8017fe0:	79fa      	ldrb	r2, [r7, #7]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	3308      	adds	r3, #8
 8017fec:	4a16      	ldr	r2, [pc, #88]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8017fee:	4413      	add	r3, r2
 8017ff0:	3304      	adds	r3, #4
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	68f8      	ldr	r0, [r7, #12]
 8017ff6:	f000 fafb 	bl	80185f0 <etharp_request_dst>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d109      	bne.n	8018014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018000:	79fa      	ldrb	r2, [r7, #7]
 8018002:	4911      	ldr	r1, [pc, #68]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8018004:	4613      	mov	r3, r2
 8018006:	005b      	lsls	r3, r3, #1
 8018008:	4413      	add	r3, r2
 801800a:	00db      	lsls	r3, r3, #3
 801800c:	440b      	add	r3, r1
 801800e:	3314      	adds	r3, #20
 8018010:	2203      	movs	r2, #3
 8018012:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801801a:	79fa      	ldrb	r2, [r7, #7]
 801801c:	4613      	mov	r3, r2
 801801e:	005b      	lsls	r3, r3, #1
 8018020:	4413      	add	r3, r2
 8018022:	00db      	lsls	r3, r3, #3
 8018024:	3308      	adds	r3, #8
 8018026:	4a08      	ldr	r2, [pc, #32]	; (8018048 <etharp_output_to_arp_index+0x124>)
 8018028:	4413      	add	r3, r2
 801802a:	3304      	adds	r3, #4
 801802c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018030:	9200      	str	r2, [sp, #0]
 8018032:	460a      	mov	r2, r1
 8018034:	68b9      	ldr	r1, [r7, #8]
 8018036:	68f8      	ldr	r0, [r7, #12]
 8018038:	f001 fe5e 	bl	8019cf8 <ethernet_output>
 801803c:	4603      	mov	r3, r0
}
 801803e:	4618      	mov	r0, r3
 8018040:	3710      	adds	r7, #16
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	2000b510 	.word	0x2000b510
 801804c:	0801f20c 	.word	0x0801f20c
 8018050:	0801f37c 	.word	0x0801f37c
 8018054:	0801f284 	.word	0x0801f284

08018058 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b08a      	sub	sp, #40	; 0x28
 801805c:	af02      	add	r7, sp, #8
 801805e:	60f8      	str	r0, [r7, #12]
 8018060:	60b9      	str	r1, [r7, #8]
 8018062:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d106      	bne.n	801807c <etharp_output+0x24>
 801806e:	4b73      	ldr	r3, [pc, #460]	; (801823c <etharp_output+0x1e4>)
 8018070:	f240 321e 	movw	r2, #798	; 0x31e
 8018074:	4972      	ldr	r1, [pc, #456]	; (8018240 <etharp_output+0x1e8>)
 8018076:	4873      	ldr	r0, [pc, #460]	; (8018244 <etharp_output+0x1ec>)
 8018078:	f002 f94e 	bl	801a318 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <etharp_output+0x38>
 8018082:	4b6e      	ldr	r3, [pc, #440]	; (801823c <etharp_output+0x1e4>)
 8018084:	f240 321f 	movw	r2, #799	; 0x31f
 8018088:	496f      	ldr	r1, [pc, #444]	; (8018248 <etharp_output+0x1f0>)
 801808a:	486e      	ldr	r0, [pc, #440]	; (8018244 <etharp_output+0x1ec>)
 801808c:	f002 f944 	bl	801a318 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d106      	bne.n	80180a4 <etharp_output+0x4c>
 8018096:	4b69      	ldr	r3, [pc, #420]	; (801823c <etharp_output+0x1e4>)
 8018098:	f44f 7248 	mov.w	r2, #800	; 0x320
 801809c:	496b      	ldr	r1, [pc, #428]	; (801824c <etharp_output+0x1f4>)
 801809e:	4869      	ldr	r0, [pc, #420]	; (8018244 <etharp_output+0x1ec>)
 80180a0:	f002 f93a 	bl	801a318 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	68f9      	ldr	r1, [r7, #12]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f000 ff16 	bl	8018edc <ip4_addr_isbroadcast_u32>
 80180b0:	4603      	mov	r3, r0
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d002      	beq.n	80180bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80180b6:	4b66      	ldr	r3, [pc, #408]	; (8018250 <etharp_output+0x1f8>)
 80180b8:	61fb      	str	r3, [r7, #28]
 80180ba:	e0af      	b.n	801821c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180c4:	2be0      	cmp	r3, #224	; 0xe0
 80180c6:	d118      	bne.n	80180fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80180c8:	2301      	movs	r3, #1
 80180ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80180cc:	2300      	movs	r3, #0
 80180ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80180d0:	235e      	movs	r3, #94	; 0x5e
 80180d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	3301      	adds	r3, #1
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	3302      	adds	r3, #2
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	3303      	adds	r3, #3
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80180f2:	f107 0310 	add.w	r3, r7, #16
 80180f6:	61fb      	str	r3, [r7, #28]
 80180f8:	e090      	b.n	801821c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681a      	ldr	r2, [r3, #0]
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	3304      	adds	r3, #4
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	405a      	eors	r2, r3
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	3308      	adds	r3, #8
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	4013      	ands	r3, r2
 801810e:	2b00      	cmp	r3, #0
 8018110:	d012      	beq.n	8018138 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018118:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801811c:	4293      	cmp	r3, r2
 801811e:	d00b      	beq.n	8018138 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	330c      	adds	r3, #12
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d003      	beq.n	8018132 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	330c      	adds	r3, #12
 801812e:	61bb      	str	r3, [r7, #24]
 8018130:	e002      	b.n	8018138 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018132:	f06f 0303 	mvn.w	r3, #3
 8018136:	e07d      	b.n	8018234 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018138:	4b46      	ldr	r3, [pc, #280]	; (8018254 <etharp_output+0x1fc>)
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	4619      	mov	r1, r3
 801813e:	4a46      	ldr	r2, [pc, #280]	; (8018258 <etharp_output+0x200>)
 8018140:	460b      	mov	r3, r1
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	440b      	add	r3, r1
 8018146:	00db      	lsls	r3, r3, #3
 8018148:	4413      	add	r3, r2
 801814a:	3314      	adds	r3, #20
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	2b01      	cmp	r3, #1
 8018150:	d925      	bls.n	801819e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018152:	4b40      	ldr	r3, [pc, #256]	; (8018254 <etharp_output+0x1fc>)
 8018154:	781b      	ldrb	r3, [r3, #0]
 8018156:	4619      	mov	r1, r3
 8018158:	4a3f      	ldr	r2, [pc, #252]	; (8018258 <etharp_output+0x200>)
 801815a:	460b      	mov	r3, r1
 801815c:	005b      	lsls	r3, r3, #1
 801815e:	440b      	add	r3, r1
 8018160:	00db      	lsls	r3, r3, #3
 8018162:	4413      	add	r3, r2
 8018164:	3308      	adds	r3, #8
 8018166:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018168:	68fa      	ldr	r2, [r7, #12]
 801816a:	429a      	cmp	r2, r3
 801816c:	d117      	bne.n	801819e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801816e:	69bb      	ldr	r3, [r7, #24]
 8018170:	681a      	ldr	r2, [r3, #0]
 8018172:	4b38      	ldr	r3, [pc, #224]	; (8018254 <etharp_output+0x1fc>)
 8018174:	781b      	ldrb	r3, [r3, #0]
 8018176:	4618      	mov	r0, r3
 8018178:	4937      	ldr	r1, [pc, #220]	; (8018258 <etharp_output+0x200>)
 801817a:	4603      	mov	r3, r0
 801817c:	005b      	lsls	r3, r3, #1
 801817e:	4403      	add	r3, r0
 8018180:	00db      	lsls	r3, r3, #3
 8018182:	440b      	add	r3, r1
 8018184:	3304      	adds	r3, #4
 8018186:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018188:	429a      	cmp	r2, r3
 801818a:	d108      	bne.n	801819e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801818c:	4b31      	ldr	r3, [pc, #196]	; (8018254 <etharp_output+0x1fc>)
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	461a      	mov	r2, r3
 8018192:	68b9      	ldr	r1, [r7, #8]
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f7ff fec5 	bl	8017f24 <etharp_output_to_arp_index>
 801819a:	4603      	mov	r3, r0
 801819c:	e04a      	b.n	8018234 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801819e:	2300      	movs	r3, #0
 80181a0:	75fb      	strb	r3, [r7, #23]
 80181a2:	e031      	b.n	8018208 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80181a4:	7dfa      	ldrb	r2, [r7, #23]
 80181a6:	492c      	ldr	r1, [pc, #176]	; (8018258 <etharp_output+0x200>)
 80181a8:	4613      	mov	r3, r2
 80181aa:	005b      	lsls	r3, r3, #1
 80181ac:	4413      	add	r3, r2
 80181ae:	00db      	lsls	r3, r3, #3
 80181b0:	440b      	add	r3, r1
 80181b2:	3314      	adds	r3, #20
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	2b01      	cmp	r3, #1
 80181b8:	d923      	bls.n	8018202 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80181ba:	7dfa      	ldrb	r2, [r7, #23]
 80181bc:	4926      	ldr	r1, [pc, #152]	; (8018258 <etharp_output+0x200>)
 80181be:	4613      	mov	r3, r2
 80181c0:	005b      	lsls	r3, r3, #1
 80181c2:	4413      	add	r3, r2
 80181c4:	00db      	lsls	r3, r3, #3
 80181c6:	440b      	add	r3, r1
 80181c8:	3308      	adds	r3, #8
 80181ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	d117      	bne.n	8018202 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	6819      	ldr	r1, [r3, #0]
 80181d6:	7dfa      	ldrb	r2, [r7, #23]
 80181d8:	481f      	ldr	r0, [pc, #124]	; (8018258 <etharp_output+0x200>)
 80181da:	4613      	mov	r3, r2
 80181dc:	005b      	lsls	r3, r3, #1
 80181de:	4413      	add	r3, r2
 80181e0:	00db      	lsls	r3, r3, #3
 80181e2:	4403      	add	r3, r0
 80181e4:	3304      	adds	r3, #4
 80181e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80181e8:	4299      	cmp	r1, r3
 80181ea:	d10a      	bne.n	8018202 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80181ec:	4a19      	ldr	r2, [pc, #100]	; (8018254 <etharp_output+0x1fc>)
 80181ee:	7dfb      	ldrb	r3, [r7, #23]
 80181f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80181f2:	7dfb      	ldrb	r3, [r7, #23]
 80181f4:	461a      	mov	r2, r3
 80181f6:	68b9      	ldr	r1, [r7, #8]
 80181f8:	68f8      	ldr	r0, [r7, #12]
 80181fa:	f7ff fe93 	bl	8017f24 <etharp_output_to_arp_index>
 80181fe:	4603      	mov	r3, r0
 8018200:	e018      	b.n	8018234 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018202:	7dfb      	ldrb	r3, [r7, #23]
 8018204:	3301      	adds	r3, #1
 8018206:	75fb      	strb	r3, [r7, #23]
 8018208:	7dfb      	ldrb	r3, [r7, #23]
 801820a:	2b09      	cmp	r3, #9
 801820c:	d9ca      	bls.n	80181a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801820e:	68ba      	ldr	r2, [r7, #8]
 8018210:	69b9      	ldr	r1, [r7, #24]
 8018212:	68f8      	ldr	r0, [r7, #12]
 8018214:	f000 f822 	bl	801825c <etharp_query>
 8018218:	4603      	mov	r3, r0
 801821a:	e00b      	b.n	8018234 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	69fb      	ldr	r3, [r7, #28]
 801822a:	68b9      	ldr	r1, [r7, #8]
 801822c:	68f8      	ldr	r0, [r7, #12]
 801822e:	f001 fd63 	bl	8019cf8 <ethernet_output>
 8018232:	4603      	mov	r3, r0
}
 8018234:	4618      	mov	r0, r3
 8018236:	3720      	adds	r7, #32
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}
 801823c:	0801f20c 	.word	0x0801f20c
 8018240:	0801f35c 	.word	0x0801f35c
 8018244:	0801f284 	.word	0x0801f284
 8018248:	0801f3ac 	.word	0x0801f3ac
 801824c:	0801f34c 	.word	0x0801f34c
 8018250:	0801fbf0 	.word	0x0801fbf0
 8018254:	2000b600 	.word	0x2000b600
 8018258:	2000b510 	.word	0x2000b510

0801825c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b08c      	sub	sp, #48	; 0x30
 8018260:	af02      	add	r7, sp, #8
 8018262:	60f8      	str	r0, [r7, #12]
 8018264:	60b9      	str	r1, [r7, #8]
 8018266:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	332a      	adds	r3, #42	; 0x2a
 801826c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801826e:	23ff      	movs	r3, #255	; 0xff
 8018270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018274:	2300      	movs	r3, #0
 8018276:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	68f9      	ldr	r1, [r7, #12]
 801827e:	4618      	mov	r0, r3
 8018280:	f000 fe2c 	bl	8018edc <ip4_addr_isbroadcast_u32>
 8018284:	4603      	mov	r3, r0
 8018286:	2b00      	cmp	r3, #0
 8018288:	d10c      	bne.n	80182a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018292:	2be0      	cmp	r3, #224	; 0xe0
 8018294:	d006      	beq.n	80182a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d003      	beq.n	80182a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d102      	bne.n	80182aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80182a4:	f06f 030f 	mvn.w	r3, #15
 80182a8:	e101      	b.n	80184ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80182aa:	68fa      	ldr	r2, [r7, #12]
 80182ac:	2101      	movs	r1, #1
 80182ae:	68b8      	ldr	r0, [r7, #8]
 80182b0:	f7ff fb5c 	bl	801796c <etharp_find_entry>
 80182b4:	4603      	mov	r3, r0
 80182b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80182b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	da02      	bge.n	80182c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80182c0:	8a7b      	ldrh	r3, [r7, #18]
 80182c2:	b25b      	sxtb	r3, r3
 80182c4:	e0f3      	b.n	80184ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80182c6:	8a7b      	ldrh	r3, [r7, #18]
 80182c8:	2b7e      	cmp	r3, #126	; 0x7e
 80182ca:	d906      	bls.n	80182da <etharp_query+0x7e>
 80182cc:	4b7a      	ldr	r3, [pc, #488]	; (80184b8 <etharp_query+0x25c>)
 80182ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80182d2:	497a      	ldr	r1, [pc, #488]	; (80184bc <etharp_query+0x260>)
 80182d4:	487a      	ldr	r0, [pc, #488]	; (80184c0 <etharp_query+0x264>)
 80182d6:	f002 f81f 	bl	801a318 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80182da:	8a7b      	ldrh	r3, [r7, #18]
 80182dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80182de:	7c7a      	ldrb	r2, [r7, #17]
 80182e0:	4978      	ldr	r1, [pc, #480]	; (80184c4 <etharp_query+0x268>)
 80182e2:	4613      	mov	r3, r2
 80182e4:	005b      	lsls	r3, r3, #1
 80182e6:	4413      	add	r3, r2
 80182e8:	00db      	lsls	r3, r3, #3
 80182ea:	440b      	add	r3, r1
 80182ec:	3314      	adds	r3, #20
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d115      	bne.n	8018320 <etharp_query+0xc4>
    is_new_entry = 1;
 80182f4:	2301      	movs	r3, #1
 80182f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80182f8:	7c7a      	ldrb	r2, [r7, #17]
 80182fa:	4972      	ldr	r1, [pc, #456]	; (80184c4 <etharp_query+0x268>)
 80182fc:	4613      	mov	r3, r2
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	440b      	add	r3, r1
 8018306:	3314      	adds	r3, #20
 8018308:	2201      	movs	r2, #1
 801830a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801830c:	7c7a      	ldrb	r2, [r7, #17]
 801830e:	496d      	ldr	r1, [pc, #436]	; (80184c4 <etharp_query+0x268>)
 8018310:	4613      	mov	r3, r2
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	4413      	add	r3, r2
 8018316:	00db      	lsls	r3, r3, #3
 8018318:	440b      	add	r3, r1
 801831a:	3308      	adds	r3, #8
 801831c:	68fa      	ldr	r2, [r7, #12]
 801831e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018320:	7c7a      	ldrb	r2, [r7, #17]
 8018322:	4968      	ldr	r1, [pc, #416]	; (80184c4 <etharp_query+0x268>)
 8018324:	4613      	mov	r3, r2
 8018326:	005b      	lsls	r3, r3, #1
 8018328:	4413      	add	r3, r2
 801832a:	00db      	lsls	r3, r3, #3
 801832c:	440b      	add	r3, r1
 801832e:	3314      	adds	r3, #20
 8018330:	781b      	ldrb	r3, [r3, #0]
 8018332:	2b01      	cmp	r3, #1
 8018334:	d011      	beq.n	801835a <etharp_query+0xfe>
 8018336:	7c7a      	ldrb	r2, [r7, #17]
 8018338:	4962      	ldr	r1, [pc, #392]	; (80184c4 <etharp_query+0x268>)
 801833a:	4613      	mov	r3, r2
 801833c:	005b      	lsls	r3, r3, #1
 801833e:	4413      	add	r3, r2
 8018340:	00db      	lsls	r3, r3, #3
 8018342:	440b      	add	r3, r1
 8018344:	3314      	adds	r3, #20
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	2b01      	cmp	r3, #1
 801834a:	d806      	bhi.n	801835a <etharp_query+0xfe>
 801834c:	4b5a      	ldr	r3, [pc, #360]	; (80184b8 <etharp_query+0x25c>)
 801834e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018352:	495d      	ldr	r1, [pc, #372]	; (80184c8 <etharp_query+0x26c>)
 8018354:	485a      	ldr	r0, [pc, #360]	; (80184c0 <etharp_query+0x264>)
 8018356:	f001 ffdf 	bl	801a318 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801835a:	6a3b      	ldr	r3, [r7, #32]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d102      	bne.n	8018366 <etharp_query+0x10a>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d10c      	bne.n	8018380 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018366:	68b9      	ldr	r1, [r7, #8]
 8018368:	68f8      	ldr	r0, [r7, #12]
 801836a:	f000 f963 	bl	8018634 <etharp_request>
 801836e:	4603      	mov	r3, r0
 8018370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d102      	bne.n	8018380 <etharp_query+0x124>
      return result;
 801837a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801837e:	e096      	b.n	80184ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d106      	bne.n	8018394 <etharp_query+0x138>
 8018386:	4b4c      	ldr	r3, [pc, #304]	; (80184b8 <etharp_query+0x25c>)
 8018388:	f240 32e1 	movw	r2, #993	; 0x3e1
 801838c:	494f      	ldr	r1, [pc, #316]	; (80184cc <etharp_query+0x270>)
 801838e:	484c      	ldr	r0, [pc, #304]	; (80184c0 <etharp_query+0x264>)
 8018390:	f001 ffc2 	bl	801a318 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018394:	7c7a      	ldrb	r2, [r7, #17]
 8018396:	494b      	ldr	r1, [pc, #300]	; (80184c4 <etharp_query+0x268>)
 8018398:	4613      	mov	r3, r2
 801839a:	005b      	lsls	r3, r3, #1
 801839c:	4413      	add	r3, r2
 801839e:	00db      	lsls	r3, r3, #3
 80183a0:	440b      	add	r3, r1
 80183a2:	3314      	adds	r3, #20
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	2b01      	cmp	r3, #1
 80183a8:	d917      	bls.n	80183da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80183aa:	4a49      	ldr	r2, [pc, #292]	; (80184d0 <etharp_query+0x274>)
 80183ac:	7c7b      	ldrb	r3, [r7, #17]
 80183ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80183b0:	7c7a      	ldrb	r2, [r7, #17]
 80183b2:	4613      	mov	r3, r2
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	4413      	add	r3, r2
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	3308      	adds	r3, #8
 80183bc:	4a41      	ldr	r2, [pc, #260]	; (80184c4 <etharp_query+0x268>)
 80183be:	4413      	add	r3, r2
 80183c0:	3304      	adds	r3, #4
 80183c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80183c6:	9200      	str	r2, [sp, #0]
 80183c8:	697a      	ldr	r2, [r7, #20]
 80183ca:	6879      	ldr	r1, [r7, #4]
 80183cc:	68f8      	ldr	r0, [r7, #12]
 80183ce:	f001 fc93 	bl	8019cf8 <ethernet_output>
 80183d2:	4603      	mov	r3, r0
 80183d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80183d8:	e067      	b.n	80184aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80183da:	7c7a      	ldrb	r2, [r7, #17]
 80183dc:	4939      	ldr	r1, [pc, #228]	; (80184c4 <etharp_query+0x268>)
 80183de:	4613      	mov	r3, r2
 80183e0:	005b      	lsls	r3, r3, #1
 80183e2:	4413      	add	r3, r2
 80183e4:	00db      	lsls	r3, r3, #3
 80183e6:	440b      	add	r3, r1
 80183e8:	3314      	adds	r3, #20
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	2b01      	cmp	r3, #1
 80183ee:	d15c      	bne.n	80184aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80183f0:	2300      	movs	r3, #0
 80183f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80183f8:	e01c      	b.n	8018434 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80183fa:	69fb      	ldr	r3, [r7, #28]
 80183fc:	895a      	ldrh	r2, [r3, #10]
 80183fe:	69fb      	ldr	r3, [r7, #28]
 8018400:	891b      	ldrh	r3, [r3, #8]
 8018402:	429a      	cmp	r2, r3
 8018404:	d10a      	bne.n	801841c <etharp_query+0x1c0>
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d006      	beq.n	801841c <etharp_query+0x1c0>
 801840e:	4b2a      	ldr	r3, [pc, #168]	; (80184b8 <etharp_query+0x25c>)
 8018410:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018414:	492f      	ldr	r1, [pc, #188]	; (80184d4 <etharp_query+0x278>)
 8018416:	482a      	ldr	r0, [pc, #168]	; (80184c0 <etharp_query+0x264>)
 8018418:	f001 ff7e 	bl	801a318 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	7b1b      	ldrb	r3, [r3, #12]
 8018420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018424:	2b00      	cmp	r3, #0
 8018426:	d002      	beq.n	801842e <etharp_query+0x1d2>
        copy_needed = 1;
 8018428:	2301      	movs	r3, #1
 801842a:	61bb      	str	r3, [r7, #24]
        break;
 801842c:	e005      	b.n	801843a <etharp_query+0x1de>
      }
      p = p->next;
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018434:	69fb      	ldr	r3, [r7, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d1df      	bne.n	80183fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801843a:	69bb      	ldr	r3, [r7, #24]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d007      	beq.n	8018450 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018446:	200e      	movs	r0, #14
 8018448:	f7f7 fbd0 	bl	800fbec <pbuf_clone>
 801844c:	61f8      	str	r0, [r7, #28]
 801844e:	e004      	b.n	801845a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018454:	69f8      	ldr	r0, [r7, #28]
 8018456:	f7f7 f9fd 	bl	800f854 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801845a:	69fb      	ldr	r3, [r7, #28]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d021      	beq.n	80184a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018460:	7c7a      	ldrb	r2, [r7, #17]
 8018462:	4918      	ldr	r1, [pc, #96]	; (80184c4 <etharp_query+0x268>)
 8018464:	4613      	mov	r3, r2
 8018466:	005b      	lsls	r3, r3, #1
 8018468:	4413      	add	r3, r2
 801846a:	00db      	lsls	r3, r3, #3
 801846c:	440b      	add	r3, r1
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d00a      	beq.n	801848a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018474:	7c7a      	ldrb	r2, [r7, #17]
 8018476:	4913      	ldr	r1, [pc, #76]	; (80184c4 <etharp_query+0x268>)
 8018478:	4613      	mov	r3, r2
 801847a:	005b      	lsls	r3, r3, #1
 801847c:	4413      	add	r3, r2
 801847e:	00db      	lsls	r3, r3, #3
 8018480:	440b      	add	r3, r1
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	4618      	mov	r0, r3
 8018486:	f7f7 f945 	bl	800f714 <pbuf_free>
      }
      arp_table[i].q = p;
 801848a:	7c7a      	ldrb	r2, [r7, #17]
 801848c:	490d      	ldr	r1, [pc, #52]	; (80184c4 <etharp_query+0x268>)
 801848e:	4613      	mov	r3, r2
 8018490:	005b      	lsls	r3, r3, #1
 8018492:	4413      	add	r3, r2
 8018494:	00db      	lsls	r3, r3, #3
 8018496:	440b      	add	r3, r1
 8018498:	69fa      	ldr	r2, [r7, #28]
 801849a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801849c:	2300      	movs	r3, #0
 801849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80184a2:	e002      	b.n	80184aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80184a4:	23ff      	movs	r3, #255	; 0xff
 80184a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80184aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3728      	adds	r7, #40	; 0x28
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	0801f20c 	.word	0x0801f20c
 80184bc:	0801f3b8 	.word	0x0801f3b8
 80184c0:	0801f284 	.word	0x0801f284
 80184c4:	2000b510 	.word	0x2000b510
 80184c8:	0801f3c8 	.word	0x0801f3c8
 80184cc:	0801f3ac 	.word	0x0801f3ac
 80184d0:	2000b600 	.word	0x2000b600
 80184d4:	0801f3f0 	.word	0x0801f3f0

080184d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b08a      	sub	sp, #40	; 0x28
 80184dc:	af02      	add	r7, sp, #8
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	607a      	str	r2, [r7, #4]
 80184e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80184e6:	2300      	movs	r3, #0
 80184e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d106      	bne.n	80184fe <etharp_raw+0x26>
 80184f0:	4b3a      	ldr	r3, [pc, #232]	; (80185dc <etharp_raw+0x104>)
 80184f2:	f240 4257 	movw	r2, #1111	; 0x457
 80184f6:	493a      	ldr	r1, [pc, #232]	; (80185e0 <etharp_raw+0x108>)
 80184f8:	483a      	ldr	r0, [pc, #232]	; (80185e4 <etharp_raw+0x10c>)
 80184fa:	f001 ff0d 	bl	801a318 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80184fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018502:	211c      	movs	r1, #28
 8018504:	200e      	movs	r0, #14
 8018506:	f7f6 fe21 	bl	800f14c <pbuf_alloc>
 801850a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801850c:	69bb      	ldr	r3, [r7, #24]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d102      	bne.n	8018518 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018516:	e05d      	b.n	80185d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018518:	69bb      	ldr	r3, [r7, #24]
 801851a:	895b      	ldrh	r3, [r3, #10]
 801851c:	2b1b      	cmp	r3, #27
 801851e:	d806      	bhi.n	801852e <etharp_raw+0x56>
 8018520:	4b2e      	ldr	r3, [pc, #184]	; (80185dc <etharp_raw+0x104>)
 8018522:	f240 4262 	movw	r2, #1122	; 0x462
 8018526:	4930      	ldr	r1, [pc, #192]	; (80185e8 <etharp_raw+0x110>)
 8018528:	482e      	ldr	r0, [pc, #184]	; (80185e4 <etharp_raw+0x10c>)
 801852a:	f001 fef5 	bl	801a318 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801852e:	69bb      	ldr	r3, [r7, #24]
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018534:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018536:	4618      	mov	r0, r3
 8018538:	f7f5 fda2 	bl	800e080 <lwip_htons>
 801853c:	4603      	mov	r3, r0
 801853e:	461a      	mov	r2, r3
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801854a:	2b06      	cmp	r3, #6
 801854c:	d006      	beq.n	801855c <etharp_raw+0x84>
 801854e:	4b23      	ldr	r3, [pc, #140]	; (80185dc <etharp_raw+0x104>)
 8018550:	f240 4269 	movw	r2, #1129	; 0x469
 8018554:	4925      	ldr	r1, [pc, #148]	; (80185ec <etharp_raw+0x114>)
 8018556:	4823      	ldr	r0, [pc, #140]	; (80185e4 <etharp_raw+0x10c>)
 8018558:	f001 fede 	bl	801a318 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	3308      	adds	r3, #8
 8018560:	2206      	movs	r2, #6
 8018562:	6839      	ldr	r1, [r7, #0]
 8018564:	4618      	mov	r0, r3
 8018566:	f002 f820 	bl	801a5aa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801856a:	697b      	ldr	r3, [r7, #20]
 801856c:	3312      	adds	r3, #18
 801856e:	2206      	movs	r2, #6
 8018570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018572:	4618      	mov	r0, r3
 8018574:	f002 f819 	bl	801a5aa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	330e      	adds	r3, #14
 801857c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801857e:	6812      	ldr	r2, [r2, #0]
 8018580:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018582:	697b      	ldr	r3, [r7, #20]
 8018584:	3318      	adds	r3, #24
 8018586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018588:	6812      	ldr	r2, [r2, #0]
 801858a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	2200      	movs	r2, #0
 8018590:	701a      	strb	r2, [r3, #0]
 8018592:	2200      	movs	r2, #0
 8018594:	f042 0201 	orr.w	r2, r2, #1
 8018598:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	2200      	movs	r2, #0
 801859e:	f042 0208 	orr.w	r2, r2, #8
 80185a2:	709a      	strb	r2, [r3, #2]
 80185a4:	2200      	movs	r2, #0
 80185a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80185a8:	697b      	ldr	r3, [r7, #20]
 80185aa:	2206      	movs	r2, #6
 80185ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	2204      	movs	r2, #4
 80185b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80185b4:	f640 0306 	movw	r3, #2054	; 0x806
 80185b8:	9300      	str	r3, [sp, #0]
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	68ba      	ldr	r2, [r7, #8]
 80185be:	69b9      	ldr	r1, [r7, #24]
 80185c0:	68f8      	ldr	r0, [r7, #12]
 80185c2:	f001 fb99 	bl	8019cf8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80185c6:	69b8      	ldr	r0, [r7, #24]
 80185c8:	f7f7 f8a4 	bl	800f714 <pbuf_free>
  p = NULL;
 80185cc:	2300      	movs	r3, #0
 80185ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80185d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	3720      	adds	r7, #32
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}
 80185dc:	0801f20c 	.word	0x0801f20c
 80185e0:	0801f35c 	.word	0x0801f35c
 80185e4:	0801f284 	.word	0x0801f284
 80185e8:	0801f40c 	.word	0x0801f40c
 80185ec:	0801f440 	.word	0x0801f440

080185f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b088      	sub	sp, #32
 80185f4:	af04      	add	r7, sp, #16
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801860c:	2201      	movs	r2, #1
 801860e:	9203      	str	r2, [sp, #12]
 8018610:	68ba      	ldr	r2, [r7, #8]
 8018612:	9202      	str	r2, [sp, #8]
 8018614:	4a06      	ldr	r2, [pc, #24]	; (8018630 <etharp_request_dst+0x40>)
 8018616:	9201      	str	r2, [sp, #4]
 8018618:	9300      	str	r3, [sp, #0]
 801861a:	4603      	mov	r3, r0
 801861c:	687a      	ldr	r2, [r7, #4]
 801861e:	68f8      	ldr	r0, [r7, #12]
 8018620:	f7ff ff5a 	bl	80184d8 <etharp_raw>
 8018624:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018626:	4618      	mov	r0, r3
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	0801fbf8 	.word	0x0801fbf8

08018634 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
 801863c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801863e:	4a05      	ldr	r2, [pc, #20]	; (8018654 <etharp_request+0x20>)
 8018640:	6839      	ldr	r1, [r7, #0]
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7ff ffd4 	bl	80185f0 <etharp_request_dst>
 8018648:	4603      	mov	r3, r0
}
 801864a:	4618      	mov	r0, r3
 801864c:	3708      	adds	r7, #8
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	0801fbf0 	.word	0x0801fbf0

08018658 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b08e      	sub	sp, #56	; 0x38
 801865c:	af04      	add	r7, sp, #16
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018662:	4b79      	ldr	r3, [pc, #484]	; (8018848 <icmp_input+0x1f0>)
 8018664:	689b      	ldr	r3, [r3, #8]
 8018666:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	f003 030f 	and.w	r3, r3, #15
 8018670:	b2db      	uxtb	r3, r3
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	b2db      	uxtb	r3, r3
 8018676:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801867a:	2b13      	cmp	r3, #19
 801867c:	f240 80cd 	bls.w	801881a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	895b      	ldrh	r3, [r3, #10]
 8018684:	2b03      	cmp	r3, #3
 8018686:	f240 80ca 	bls.w	801881e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	685b      	ldr	r3, [r3, #4]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018694:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018698:	2b00      	cmp	r3, #0
 801869a:	f000 80b7 	beq.w	801880c <icmp_input+0x1b4>
 801869e:	2b08      	cmp	r3, #8
 80186a0:	f040 80b7 	bne.w	8018812 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80186a4:	4b69      	ldr	r3, [pc, #420]	; (801884c <icmp_input+0x1f4>)
 80186a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80186a8:	4b67      	ldr	r3, [pc, #412]	; (8018848 <icmp_input+0x1f0>)
 80186aa:	695b      	ldr	r3, [r3, #20]
 80186ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80186b0:	2be0      	cmp	r3, #224	; 0xe0
 80186b2:	f000 80bb 	beq.w	801882c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80186b6:	4b64      	ldr	r3, [pc, #400]	; (8018848 <icmp_input+0x1f0>)
 80186b8:	695b      	ldr	r3, [r3, #20]
 80186ba:	4a63      	ldr	r2, [pc, #396]	; (8018848 <icmp_input+0x1f0>)
 80186bc:	6812      	ldr	r2, [r2, #0]
 80186be:	4611      	mov	r1, r2
 80186c0:	4618      	mov	r0, r3
 80186c2:	f000 fc0b 	bl	8018edc <ip4_addr_isbroadcast_u32>
 80186c6:	4603      	mov	r3, r0
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	f040 80b1 	bne.w	8018830 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	891b      	ldrh	r3, [r3, #8]
 80186d2:	2b07      	cmp	r3, #7
 80186d4:	f240 80a5 	bls.w	8018822 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80186d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186da:	330e      	adds	r3, #14
 80186dc:	4619      	mov	r1, r3
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f7f6 ff82 	bl	800f5e8 <pbuf_add_header>
 80186e4:	4603      	mov	r3, r0
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d04b      	beq.n	8018782 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	891a      	ldrh	r2, [r3, #8]
 80186ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186f0:	4413      	add	r3, r2
 80186f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	891b      	ldrh	r3, [r3, #8]
 80186f8:	8b7a      	ldrh	r2, [r7, #26]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	f0c0 809a 	bcc.w	8018834 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018700:	8b7b      	ldrh	r3, [r7, #26]
 8018702:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018706:	4619      	mov	r1, r3
 8018708:	200e      	movs	r0, #14
 801870a:	f7f6 fd1f 	bl	800f14c <pbuf_alloc>
 801870e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	2b00      	cmp	r3, #0
 8018714:	f000 8090 	beq.w	8018838 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	895b      	ldrh	r3, [r3, #10]
 801871c:	461a      	mov	r2, r3
 801871e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018720:	3308      	adds	r3, #8
 8018722:	429a      	cmp	r2, r3
 8018724:	d203      	bcs.n	801872e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018726:	6978      	ldr	r0, [r7, #20]
 8018728:	f7f6 fff4 	bl	800f714 <pbuf_free>
          goto icmperr;
 801872c:	e085      	b.n	801883a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	685b      	ldr	r3, [r3, #4]
 8018732:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018736:	4618      	mov	r0, r3
 8018738:	f001 ff37 	bl	801a5aa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801873c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801873e:	4619      	mov	r1, r3
 8018740:	6978      	ldr	r0, [r7, #20]
 8018742:	f7f6 ff61 	bl	800f608 <pbuf_remove_header>
 8018746:	4603      	mov	r3, r0
 8018748:	2b00      	cmp	r3, #0
 801874a:	d009      	beq.n	8018760 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801874c:	4b40      	ldr	r3, [pc, #256]	; (8018850 <icmp_input+0x1f8>)
 801874e:	22b6      	movs	r2, #182	; 0xb6
 8018750:	4940      	ldr	r1, [pc, #256]	; (8018854 <icmp_input+0x1fc>)
 8018752:	4841      	ldr	r0, [pc, #260]	; (8018858 <icmp_input+0x200>)
 8018754:	f001 fde0 	bl	801a318 <iprintf>
          pbuf_free(r);
 8018758:	6978      	ldr	r0, [r7, #20]
 801875a:	f7f6 ffdb 	bl	800f714 <pbuf_free>
          goto icmperr;
 801875e:	e06c      	b.n	801883a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018760:	6879      	ldr	r1, [r7, #4]
 8018762:	6978      	ldr	r0, [r7, #20]
 8018764:	f7f7 f8fe 	bl	800f964 <pbuf_copy>
 8018768:	4603      	mov	r3, r0
 801876a:	2b00      	cmp	r3, #0
 801876c:	d003      	beq.n	8018776 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801876e:	6978      	ldr	r0, [r7, #20]
 8018770:	f7f6 ffd0 	bl	800f714 <pbuf_free>
          goto icmperr;
 8018774:	e061      	b.n	801883a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f7f6 ffcc 	bl	800f714 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	607b      	str	r3, [r7, #4]
 8018780:	e00f      	b.n	80187a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018784:	330e      	adds	r3, #14
 8018786:	4619      	mov	r1, r3
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f7f6 ff3d 	bl	800f608 <pbuf_remove_header>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d006      	beq.n	80187a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018794:	4b2e      	ldr	r3, [pc, #184]	; (8018850 <icmp_input+0x1f8>)
 8018796:	22c7      	movs	r2, #199	; 0xc7
 8018798:	4930      	ldr	r1, [pc, #192]	; (801885c <icmp_input+0x204>)
 801879a:	482f      	ldr	r0, [pc, #188]	; (8018858 <icmp_input+0x200>)
 801879c:	f001 fdbc 	bl	801a318 <iprintf>
          goto icmperr;
 80187a0:	e04b      	b.n	801883a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80187a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187aa:	4619      	mov	r1, r3
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7f6 ff1b 	bl	800f5e8 <pbuf_add_header>
 80187b2:	4603      	mov	r3, r0
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d12b      	bne.n	8018810 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	681a      	ldr	r2, [r3, #0]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80187c6:	4b20      	ldr	r3, [pc, #128]	; (8018848 <icmp_input+0x1f0>)
 80187c8:	691a      	ldr	r2, [r3, #16]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	2200      	movs	r2, #0
 80187d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80187d4:	693b      	ldr	r3, [r7, #16]
 80187d6:	2200      	movs	r2, #0
 80187d8:	709a      	strb	r2, [r3, #2]
 80187da:	2200      	movs	r2, #0
 80187dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	22ff      	movs	r2, #255	; 0xff
 80187e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	2200      	movs	r2, #0
 80187e8:	729a      	strb	r2, [r3, #10]
 80187ea:	2200      	movs	r2, #0
 80187ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	9302      	str	r3, [sp, #8]
 80187f2:	2301      	movs	r3, #1
 80187f4:	9301      	str	r3, [sp, #4]
 80187f6:	2300      	movs	r3, #0
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	23ff      	movs	r3, #255	; 0xff
 80187fc:	2200      	movs	r2, #0
 80187fe:	69f9      	ldr	r1, [r7, #28]
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f000 fa93 	bl	8018d2c <ip4_output_if>
 8018806:	4603      	mov	r3, r0
 8018808:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801880a:	e001      	b.n	8018810 <icmp_input+0x1b8>
      break;
 801880c:	bf00      	nop
 801880e:	e000      	b.n	8018812 <icmp_input+0x1ba>
      break;
 8018810:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f7f6 ff7e 	bl	800f714 <pbuf_free>
  return;
 8018818:	e013      	b.n	8018842 <icmp_input+0x1ea>
    goto lenerr;
 801881a:	bf00      	nop
 801881c:	e002      	b.n	8018824 <icmp_input+0x1cc>
    goto lenerr;
 801881e:	bf00      	nop
 8018820:	e000      	b.n	8018824 <icmp_input+0x1cc>
        goto lenerr;
 8018822:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f7f6 ff75 	bl	800f714 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801882a:	e00a      	b.n	8018842 <icmp_input+0x1ea>
        goto icmperr;
 801882c:	bf00      	nop
 801882e:	e004      	b.n	801883a <icmp_input+0x1e2>
        goto icmperr;
 8018830:	bf00      	nop
 8018832:	e002      	b.n	801883a <icmp_input+0x1e2>
          goto icmperr;
 8018834:	bf00      	nop
 8018836:	e000      	b.n	801883a <icmp_input+0x1e2>
          goto icmperr;
 8018838:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f7f6 ff6a 	bl	800f714 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018840:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018842:	3728      	adds	r7, #40	; 0x28
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	20007eec 	.word	0x20007eec
 801884c:	20007f00 	.word	0x20007f00
 8018850:	0801f484 	.word	0x0801f484
 8018854:	0801f4bc 	.word	0x0801f4bc
 8018858:	0801f4f4 	.word	0x0801f4f4
 801885c:	0801f51c 	.word	0x0801f51c

08018860 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b082      	sub	sp, #8
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
 8018868:	460b      	mov	r3, r1
 801886a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801886c:	78fb      	ldrb	r3, [r7, #3]
 801886e:	461a      	mov	r2, r3
 8018870:	2103      	movs	r1, #3
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f000 f814 	bl	80188a0 <icmp_send_response>
}
 8018878:	bf00      	nop
 801887a:	3708      	adds	r7, #8
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}

08018880 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	460b      	mov	r3, r1
 801888a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801888c:	78fb      	ldrb	r3, [r7, #3]
 801888e:	461a      	mov	r2, r3
 8018890:	210b      	movs	r1, #11
 8018892:	6878      	ldr	r0, [r7, #4]
 8018894:	f000 f804 	bl	80188a0 <icmp_send_response>
}
 8018898:	bf00      	nop
 801889a:	3708      	adds	r7, #8
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b08c      	sub	sp, #48	; 0x30
 80188a4:	af04      	add	r7, sp, #16
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	460b      	mov	r3, r1
 80188aa:	70fb      	strb	r3, [r7, #3]
 80188ac:	4613      	mov	r3, r2
 80188ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80188b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80188b4:	2124      	movs	r1, #36	; 0x24
 80188b6:	2022      	movs	r0, #34	; 0x22
 80188b8:	f7f6 fc48 	bl	800f14c <pbuf_alloc>
 80188bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d04c      	beq.n	801895e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	895b      	ldrh	r3, [r3, #10]
 80188c8:	2b23      	cmp	r3, #35	; 0x23
 80188ca:	d806      	bhi.n	80188da <icmp_send_response+0x3a>
 80188cc:	4b26      	ldr	r3, [pc, #152]	; (8018968 <icmp_send_response+0xc8>)
 80188ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80188d2:	4926      	ldr	r1, [pc, #152]	; (801896c <icmp_send_response+0xcc>)
 80188d4:	4826      	ldr	r0, [pc, #152]	; (8018970 <icmp_send_response+0xd0>)
 80188d6:	f001 fd1f 	bl	801a318 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	685b      	ldr	r3, [r3, #4]
 80188e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80188e6:	697b      	ldr	r3, [r7, #20]
 80188e8:	78fa      	ldrb	r2, [r7, #3]
 80188ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	78ba      	ldrb	r2, [r7, #2]
 80188f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80188f2:	697b      	ldr	r3, [r7, #20]
 80188f4:	2200      	movs	r2, #0
 80188f6:	711a      	strb	r2, [r3, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	2200      	movs	r2, #0
 8018900:	719a      	strb	r2, [r3, #6]
 8018902:	2200      	movs	r2, #0
 8018904:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018906:	69fb      	ldr	r3, [r7, #28]
 8018908:	685b      	ldr	r3, [r3, #4]
 801890a:	f103 0008 	add.w	r0, r3, #8
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	221c      	movs	r2, #28
 8018914:	4619      	mov	r1, r3
 8018916:	f001 fe48 	bl	801a5aa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801891a:	69bb      	ldr	r3, [r7, #24]
 801891c:	68db      	ldr	r3, [r3, #12]
 801891e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018920:	f107 030c 	add.w	r3, r7, #12
 8018924:	4618      	mov	r0, r3
 8018926:	f000 f825 	bl	8018974 <ip4_route>
 801892a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d011      	beq.n	8018956 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018932:	697b      	ldr	r3, [r7, #20]
 8018934:	2200      	movs	r2, #0
 8018936:	709a      	strb	r2, [r3, #2]
 8018938:	2200      	movs	r2, #0
 801893a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801893c:	f107 020c 	add.w	r2, r7, #12
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	9302      	str	r3, [sp, #8]
 8018944:	2301      	movs	r3, #1
 8018946:	9301      	str	r3, [sp, #4]
 8018948:	2300      	movs	r3, #0
 801894a:	9300      	str	r3, [sp, #0]
 801894c:	23ff      	movs	r3, #255	; 0xff
 801894e:	2100      	movs	r1, #0
 8018950:	69f8      	ldr	r0, [r7, #28]
 8018952:	f000 f9eb 	bl	8018d2c <ip4_output_if>
  }
  pbuf_free(q);
 8018956:	69f8      	ldr	r0, [r7, #28]
 8018958:	f7f6 fedc 	bl	800f714 <pbuf_free>
 801895c:	e000      	b.n	8018960 <icmp_send_response+0xc0>
    return;
 801895e:	bf00      	nop
}
 8018960:	3720      	adds	r7, #32
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}
 8018966:	bf00      	nop
 8018968:	0801f484 	.word	0x0801f484
 801896c:	0801f550 	.word	0x0801f550
 8018970:	0801f4f4 	.word	0x0801f4f4

08018974 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018974:	b480      	push	{r7}
 8018976:	b085      	sub	sp, #20
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801897c:	4b33      	ldr	r3, [pc, #204]	; (8018a4c <ip4_route+0xd8>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	60fb      	str	r3, [r7, #12]
 8018982:	e036      	b.n	80189f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801898a:	f003 0301 	and.w	r3, r3, #1
 801898e:	b2db      	uxtb	r3, r3
 8018990:	2b00      	cmp	r3, #0
 8018992:	d02b      	beq.n	80189ec <ip4_route+0x78>
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801899a:	089b      	lsrs	r3, r3, #2
 801899c:	f003 0301 	and.w	r3, r3, #1
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d022      	beq.n	80189ec <ip4_route+0x78>
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	3304      	adds	r3, #4
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d01d      	beq.n	80189ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	3304      	adds	r3, #4
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	405a      	eors	r2, r3
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	3308      	adds	r3, #8
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	4013      	ands	r3, r2
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d101      	bne.n	80189cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	e038      	b.n	8018a3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189d2:	f003 0302 	and.w	r3, r3, #2
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d108      	bne.n	80189ec <ip4_route+0x78>
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	330c      	adds	r3, #12
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d101      	bne.n	80189ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	e028      	b.n	8018a3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	60fb      	str	r3, [r7, #12]
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d1c5      	bne.n	8018984 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80189f8:	4b15      	ldr	r3, [pc, #84]	; (8018a50 <ip4_route+0xdc>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d01a      	beq.n	8018a36 <ip4_route+0xc2>
 8018a00:	4b13      	ldr	r3, [pc, #76]	; (8018a50 <ip4_route+0xdc>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a08:	f003 0301 	and.w	r3, r3, #1
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d012      	beq.n	8018a36 <ip4_route+0xc2>
 8018a10:	4b0f      	ldr	r3, [pc, #60]	; (8018a50 <ip4_route+0xdc>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a18:	f003 0304 	and.w	r3, r3, #4
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d00a      	beq.n	8018a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018a20:	4b0b      	ldr	r3, [pc, #44]	; (8018a50 <ip4_route+0xdc>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	3304      	adds	r3, #4
 8018a26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d004      	beq.n	8018a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	b2db      	uxtb	r3, r3
 8018a32:	2b7f      	cmp	r3, #127	; 0x7f
 8018a34:	d101      	bne.n	8018a3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018a36:	2300      	movs	r3, #0
 8018a38:	e001      	b.n	8018a3e <ip4_route+0xca>
  }

  return netif_default;
 8018a3a:	4b05      	ldr	r3, [pc, #20]	; (8018a50 <ip4_route+0xdc>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3714      	adds	r7, #20
 8018a42:	46bd      	mov	sp, r7
 8018a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a48:	4770      	bx	lr
 8018a4a:	bf00      	nop
 8018a4c:	2000b470 	.word	0x2000b470
 8018a50:	2000b474 	.word	0x2000b474

08018a54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a62:	f003 0301 	and.w	r3, r3, #1
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d016      	beq.n	8018a9a <ip4_input_accept+0x46>
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	3304      	adds	r3, #4
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d011      	beq.n	8018a9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018a76:	4b0b      	ldr	r3, [pc, #44]	; (8018aa4 <ip4_input_accept+0x50>)
 8018a78:	695a      	ldr	r2, [r3, #20]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	3304      	adds	r3, #4
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d008      	beq.n	8018a96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018a84:	4b07      	ldr	r3, [pc, #28]	; (8018aa4 <ip4_input_accept+0x50>)
 8018a86:	695b      	ldr	r3, [r3, #20]
 8018a88:	6879      	ldr	r1, [r7, #4]
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f000 fa26 	bl	8018edc <ip4_addr_isbroadcast_u32>
 8018a90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d001      	beq.n	8018a9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018a96:	2301      	movs	r3, #1
 8018a98:	e000      	b.n	8018a9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018a9a:	2300      	movs	r3, #0
}
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}
 8018aa4:	20007eec 	.word	0x20007eec

08018aa8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b088      	sub	sp, #32
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018abc:	69fb      	ldr	r3, [r7, #28]
 8018abe:	781b      	ldrb	r3, [r3, #0]
 8018ac0:	091b      	lsrs	r3, r3, #4
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	2b04      	cmp	r3, #4
 8018ac6:	d004      	beq.n	8018ad2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7f6 fe23 	bl	800f714 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	e123      	b.n	8018d1a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018ad2:	69fb      	ldr	r3, [r7, #28]
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	f003 030f 	and.w	r3, r3, #15
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	009b      	lsls	r3, r3, #2
 8018ade:	b2db      	uxtb	r3, r3
 8018ae0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018ae2:	69fb      	ldr	r3, [r7, #28]
 8018ae4:	885b      	ldrh	r3, [r3, #2]
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7f5 fac9 	bl	800e080 <lwip_htons>
 8018aee:	4603      	mov	r3, r0
 8018af0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	891b      	ldrh	r3, [r3, #8]
 8018af6:	8a3a      	ldrh	r2, [r7, #16]
 8018af8:	429a      	cmp	r2, r3
 8018afa:	d204      	bcs.n	8018b06 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018afc:	8a3b      	ldrh	r3, [r7, #16]
 8018afe:	4619      	mov	r1, r3
 8018b00:	6878      	ldr	r0, [r7, #4]
 8018b02:	f7f6 fc81 	bl	800f408 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	895b      	ldrh	r3, [r3, #10]
 8018b0a:	8a7a      	ldrh	r2, [r7, #18]
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d807      	bhi.n	8018b20 <ip4_input+0x78>
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	891b      	ldrh	r3, [r3, #8]
 8018b14:	8a3a      	ldrh	r2, [r7, #16]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d802      	bhi.n	8018b20 <ip4_input+0x78>
 8018b1a:	8a7b      	ldrh	r3, [r7, #18]
 8018b1c:	2b13      	cmp	r3, #19
 8018b1e:	d804      	bhi.n	8018b2a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7f6 fdf7 	bl	800f714 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018b26:	2300      	movs	r3, #0
 8018b28:	e0f7      	b.n	8018d1a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018b2a:	69fb      	ldr	r3, [r7, #28]
 8018b2c:	691b      	ldr	r3, [r3, #16]
 8018b2e:	4a7d      	ldr	r2, [pc, #500]	; (8018d24 <ip4_input+0x27c>)
 8018b30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	4a7b      	ldr	r2, [pc, #492]	; (8018d24 <ip4_input+0x27c>)
 8018b38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018b3a:	4b7a      	ldr	r3, [pc, #488]	; (8018d24 <ip4_input+0x27c>)
 8018b3c:	695b      	ldr	r3, [r3, #20]
 8018b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b42:	2be0      	cmp	r3, #224	; 0xe0
 8018b44:	d112      	bne.n	8018b6c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b4c:	f003 0301 	and.w	r3, r3, #1
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d007      	beq.n	8018b66 <ip4_input+0xbe>
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	3304      	adds	r3, #4
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d002      	beq.n	8018b66 <ip4_input+0xbe>
      netif = inp;
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	61bb      	str	r3, [r7, #24]
 8018b64:	e02a      	b.n	8018bbc <ip4_input+0x114>
    } else {
      netif = NULL;
 8018b66:	2300      	movs	r3, #0
 8018b68:	61bb      	str	r3, [r7, #24]
 8018b6a:	e027      	b.n	8018bbc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018b6c:	6838      	ldr	r0, [r7, #0]
 8018b6e:	f7ff ff71 	bl	8018a54 <ip4_input_accept>
 8018b72:	4603      	mov	r3, r0
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d002      	beq.n	8018b7e <ip4_input+0xd6>
      netif = inp;
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	61bb      	str	r3, [r7, #24]
 8018b7c:	e01e      	b.n	8018bbc <ip4_input+0x114>
    } else {
      netif = NULL;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018b82:	4b68      	ldr	r3, [pc, #416]	; (8018d24 <ip4_input+0x27c>)
 8018b84:	695b      	ldr	r3, [r3, #20]
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	2b7f      	cmp	r3, #127	; 0x7f
 8018b8a:	d017      	beq.n	8018bbc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018b8c:	4b66      	ldr	r3, [pc, #408]	; (8018d28 <ip4_input+0x280>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	61bb      	str	r3, [r7, #24]
 8018b92:	e00e      	b.n	8018bb2 <ip4_input+0x10a>
          if (netif == inp) {
 8018b94:	69ba      	ldr	r2, [r7, #24]
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d006      	beq.n	8018baa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018b9c:	69b8      	ldr	r0, [r7, #24]
 8018b9e:	f7ff ff59 	bl	8018a54 <ip4_input_accept>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d108      	bne.n	8018bba <ip4_input+0x112>
 8018ba8:	e000      	b.n	8018bac <ip4_input+0x104>
            continue;
 8018baa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018bac:	69bb      	ldr	r3, [r7, #24]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	61bb      	str	r3, [r7, #24]
 8018bb2:	69bb      	ldr	r3, [r7, #24]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d1ed      	bne.n	8018b94 <ip4_input+0xec>
 8018bb8:	e000      	b.n	8018bbc <ip4_input+0x114>
            break;
 8018bba:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d111      	bne.n	8018be6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018bc2:	69fb      	ldr	r3, [r7, #28]
 8018bc4:	7a5b      	ldrb	r3, [r3, #9]
 8018bc6:	2b11      	cmp	r3, #17
 8018bc8:	d10d      	bne.n	8018be6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018bca:	8a7b      	ldrh	r3, [r7, #18]
 8018bcc:	69fa      	ldr	r2, [r7, #28]
 8018bce:	4413      	add	r3, r2
 8018bd0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	885b      	ldrh	r3, [r3, #2]
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018bdc:	d103      	bne.n	8018be6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d017      	beq.n	8018c1c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018bec:	4b4d      	ldr	r3, [pc, #308]	; (8018d24 <ip4_input+0x27c>)
 8018bee:	691b      	ldr	r3, [r3, #16]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d013      	beq.n	8018c1c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018bf4:	4b4b      	ldr	r3, [pc, #300]	; (8018d24 <ip4_input+0x27c>)
 8018bf6:	691b      	ldr	r3, [r3, #16]
 8018bf8:	6839      	ldr	r1, [r7, #0]
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f000 f96e 	bl	8018edc <ip4_addr_isbroadcast_u32>
 8018c00:	4603      	mov	r3, r0
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d105      	bne.n	8018c12 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018c06:	4b47      	ldr	r3, [pc, #284]	; (8018d24 <ip4_input+0x27c>)
 8018c08:	691b      	ldr	r3, [r3, #16]
 8018c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018c0e:	2be0      	cmp	r3, #224	; 0xe0
 8018c10:	d104      	bne.n	8018c1c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018c12:	6878      	ldr	r0, [r7, #4]
 8018c14:	f7f6 fd7e 	bl	800f714 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	e07e      	b.n	8018d1a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018c1c:	69bb      	ldr	r3, [r7, #24]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d104      	bne.n	8018c2c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018c22:	6878      	ldr	r0, [r7, #4]
 8018c24:	f7f6 fd76 	bl	800f714 <pbuf_free>
    return ERR_OK;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	e076      	b.n	8018d1a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018c2c:	69fb      	ldr	r3, [r7, #28]
 8018c2e:	88db      	ldrh	r3, [r3, #6]
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	461a      	mov	r2, r3
 8018c34:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018c38:	4013      	ands	r3, r2
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d00b      	beq.n	8018c56 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f000 fc92 	bl	8019568 <ip4_reass>
 8018c44:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d101      	bne.n	8018c50 <ip4_input+0x1a8>
      return ERR_OK;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	e064      	b.n	8018d1a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018c56:	4a33      	ldr	r2, [pc, #204]	; (8018d24 <ip4_input+0x27c>)
 8018c58:	69bb      	ldr	r3, [r7, #24]
 8018c5a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018c5c:	4a31      	ldr	r2, [pc, #196]	; (8018d24 <ip4_input+0x27c>)
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018c62:	4a30      	ldr	r2, [pc, #192]	; (8018d24 <ip4_input+0x27c>)
 8018c64:	69fb      	ldr	r3, [r7, #28]
 8018c66:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018c68:	69fb      	ldr	r3, [r7, #28]
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	f003 030f 	and.w	r3, r3, #15
 8018c70:	b2db      	uxtb	r3, r3
 8018c72:	009b      	lsls	r3, r3, #2
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	b29a      	uxth	r2, r3
 8018c78:	4b2a      	ldr	r3, [pc, #168]	; (8018d24 <ip4_input+0x27c>)
 8018c7a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018c7c:	8a7b      	ldrh	r3, [r7, #18]
 8018c7e:	4619      	mov	r1, r3
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f7f6 fcc1 	bl	800f608 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018c86:	69fb      	ldr	r3, [r7, #28]
 8018c88:	7a5b      	ldrb	r3, [r3, #9]
 8018c8a:	2b11      	cmp	r3, #17
 8018c8c:	d006      	beq.n	8018c9c <ip4_input+0x1f4>
 8018c8e:	2b11      	cmp	r3, #17
 8018c90:	dc13      	bgt.n	8018cba <ip4_input+0x212>
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	d00c      	beq.n	8018cb0 <ip4_input+0x208>
 8018c96:	2b06      	cmp	r3, #6
 8018c98:	d005      	beq.n	8018ca6 <ip4_input+0x1fe>
 8018c9a:	e00e      	b.n	8018cba <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018c9c:	6839      	ldr	r1, [r7, #0]
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f7fc fae8 	bl	8015274 <udp_input>
        break;
 8018ca4:	e026      	b.n	8018cf4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018ca6:	6839      	ldr	r1, [r7, #0]
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f7f8 fb6b 	bl	8011384 <tcp_input>
        break;
 8018cae:	e021      	b.n	8018cf4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018cb0:	6839      	ldr	r1, [r7, #0]
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f7ff fcd0 	bl	8018658 <icmp_input>
        break;
 8018cb8:	e01c      	b.n	8018cf4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018cba:	4b1a      	ldr	r3, [pc, #104]	; (8018d24 <ip4_input+0x27c>)
 8018cbc:	695b      	ldr	r3, [r3, #20]
 8018cbe:	69b9      	ldr	r1, [r7, #24]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f000 f90b 	bl	8018edc <ip4_addr_isbroadcast_u32>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d10f      	bne.n	8018cec <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ccc:	4b15      	ldr	r3, [pc, #84]	; (8018d24 <ip4_input+0x27c>)
 8018cce:	695b      	ldr	r3, [r3, #20]
 8018cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018cd4:	2be0      	cmp	r3, #224	; 0xe0
 8018cd6:	d009      	beq.n	8018cec <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018cd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018cdc:	4619      	mov	r1, r3
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f7f6 fd05 	bl	800f6ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018ce4:	2102      	movs	r1, #2
 8018ce6:	6878      	ldr	r0, [r7, #4]
 8018ce8:	f7ff fdba 	bl	8018860 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f7f6 fd11 	bl	800f714 <pbuf_free>
        break;
 8018cf2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018cf4:	4b0b      	ldr	r3, [pc, #44]	; (8018d24 <ip4_input+0x27c>)
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018cfa:	4b0a      	ldr	r3, [pc, #40]	; (8018d24 <ip4_input+0x27c>)
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018d00:	4b08      	ldr	r3, [pc, #32]	; (8018d24 <ip4_input+0x27c>)
 8018d02:	2200      	movs	r2, #0
 8018d04:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018d06:	4b07      	ldr	r3, [pc, #28]	; (8018d24 <ip4_input+0x27c>)
 8018d08:	2200      	movs	r2, #0
 8018d0a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018d0c:	4b05      	ldr	r3, [pc, #20]	; (8018d24 <ip4_input+0x27c>)
 8018d0e:	2200      	movs	r2, #0
 8018d10:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018d12:	4b04      	ldr	r3, [pc, #16]	; (8018d24 <ip4_input+0x27c>)
 8018d14:	2200      	movs	r2, #0
 8018d16:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018d18:	2300      	movs	r3, #0
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3720      	adds	r7, #32
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}
 8018d22:	bf00      	nop
 8018d24:	20007eec 	.word	0x20007eec
 8018d28:	2000b470 	.word	0x2000b470

08018d2c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b08a      	sub	sp, #40	; 0x28
 8018d30:	af04      	add	r7, sp, #16
 8018d32:	60f8      	str	r0, [r7, #12]
 8018d34:	60b9      	str	r1, [r7, #8]
 8018d36:	607a      	str	r2, [r7, #4]
 8018d38:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018d3a:	68bb      	ldr	r3, [r7, #8]
 8018d3c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d009      	beq.n	8018d58 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d003      	beq.n	8018d52 <ip4_output_if+0x26>
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d102      	bne.n	8018d58 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d54:	3304      	adds	r3, #4
 8018d56:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018d58:	78fa      	ldrb	r2, [r7, #3]
 8018d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d5c:	9302      	str	r3, [sp, #8]
 8018d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018d62:	9301      	str	r3, [sp, #4]
 8018d64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	4613      	mov	r3, r2
 8018d6c:	687a      	ldr	r2, [r7, #4]
 8018d6e:	6979      	ldr	r1, [r7, #20]
 8018d70:	68f8      	ldr	r0, [r7, #12]
 8018d72:	f000 f805 	bl	8018d80 <ip4_output_if_src>
 8018d76:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3718      	adds	r7, #24
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b088      	sub	sp, #32
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
 8018d8c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	7b9b      	ldrb	r3, [r3, #14]
 8018d92:	2b01      	cmp	r3, #1
 8018d94:	d006      	beq.n	8018da4 <ip4_output_if_src+0x24>
 8018d96:	4b4b      	ldr	r3, [pc, #300]	; (8018ec4 <ip4_output_if_src+0x144>)
 8018d98:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018d9c:	494a      	ldr	r1, [pc, #296]	; (8018ec8 <ip4_output_if_src+0x148>)
 8018d9e:	484b      	ldr	r0, [pc, #300]	; (8018ecc <ip4_output_if_src+0x14c>)
 8018da0:	f001 faba 	bl	801a318 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d060      	beq.n	8018e6c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018daa:	2314      	movs	r3, #20
 8018dac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018dae:	2114      	movs	r1, #20
 8018db0:	68f8      	ldr	r0, [r7, #12]
 8018db2:	f7f6 fc19 	bl	800f5e8 <pbuf_add_header>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d002      	beq.n	8018dc2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018dbc:	f06f 0301 	mvn.w	r3, #1
 8018dc0:	e07c      	b.n	8018ebc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	685b      	ldr	r3, [r3, #4]
 8018dc6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	895b      	ldrh	r3, [r3, #10]
 8018dcc:	2b13      	cmp	r3, #19
 8018dce:	d806      	bhi.n	8018dde <ip4_output_if_src+0x5e>
 8018dd0:	4b3c      	ldr	r3, [pc, #240]	; (8018ec4 <ip4_output_if_src+0x144>)
 8018dd2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018dd6:	493e      	ldr	r1, [pc, #248]	; (8018ed0 <ip4_output_if_src+0x150>)
 8018dd8:	483c      	ldr	r0, [pc, #240]	; (8018ecc <ip4_output_if_src+0x14c>)
 8018dda:	f001 fa9d 	bl	801a318 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018dde:	69fb      	ldr	r3, [r7, #28]
 8018de0:	78fa      	ldrb	r2, [r7, #3]
 8018de2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018de4:	69fb      	ldr	r3, [r7, #28]
 8018de6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018dea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	69fb      	ldr	r3, [r7, #28]
 8018df2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018df4:	8b7b      	ldrh	r3, [r7, #26]
 8018df6:	089b      	lsrs	r3, r3, #2
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e00:	b2da      	uxtb	r2, r3
 8018e02:	69fb      	ldr	r3, [r7, #28]
 8018e04:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018e06:	69fb      	ldr	r3, [r7, #28]
 8018e08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e0c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	891b      	ldrh	r3, [r3, #8]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7f5 f934 	bl	800e080 <lwip_htons>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	69fb      	ldr	r3, [r7, #28]
 8018e1e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018e20:	69fb      	ldr	r3, [r7, #28]
 8018e22:	2200      	movs	r2, #0
 8018e24:	719a      	strb	r2, [r3, #6]
 8018e26:	2200      	movs	r2, #0
 8018e28:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018e2a:	4b2a      	ldr	r3, [pc, #168]	; (8018ed4 <ip4_output_if_src+0x154>)
 8018e2c:	881b      	ldrh	r3, [r3, #0]
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7f5 f926 	bl	800e080 <lwip_htons>
 8018e34:	4603      	mov	r3, r0
 8018e36:	461a      	mov	r2, r3
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018e3c:	4b25      	ldr	r3, [pc, #148]	; (8018ed4 <ip4_output_if_src+0x154>)
 8018e3e:	881b      	ldrh	r3, [r3, #0]
 8018e40:	3301      	adds	r3, #1
 8018e42:	b29a      	uxth	r2, r3
 8018e44:	4b23      	ldr	r3, [pc, #140]	; (8018ed4 <ip4_output_if_src+0x154>)
 8018e46:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d104      	bne.n	8018e58 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018e4e:	4b22      	ldr	r3, [pc, #136]	; (8018ed8 <ip4_output_if_src+0x158>)
 8018e50:	681a      	ldr	r2, [r3, #0]
 8018e52:	69fb      	ldr	r3, [r7, #28]
 8018e54:	60da      	str	r2, [r3, #12]
 8018e56:	e003      	b.n	8018e60 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018e58:	68bb      	ldr	r3, [r7, #8]
 8018e5a:	681a      	ldr	r2, [r3, #0]
 8018e5c:	69fb      	ldr	r3, [r7, #28]
 8018e5e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018e60:	69fb      	ldr	r3, [r7, #28]
 8018e62:	2200      	movs	r2, #0
 8018e64:	729a      	strb	r2, [r3, #10]
 8018e66:	2200      	movs	r2, #0
 8018e68:	72da      	strb	r2, [r3, #11]
 8018e6a:	e00f      	b.n	8018e8c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	895b      	ldrh	r3, [r3, #10]
 8018e70:	2b13      	cmp	r3, #19
 8018e72:	d802      	bhi.n	8018e7a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018e74:	f06f 0301 	mvn.w	r3, #1
 8018e78:	e020      	b.n	8018ebc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	685b      	ldr	r3, [r3, #4]
 8018e7e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018e80:	69fb      	ldr	r3, [r7, #28]
 8018e82:	691b      	ldr	r3, [r3, #16]
 8018e84:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018e86:	f107 0314 	add.w	r3, r7, #20
 8018e8a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d00c      	beq.n	8018eae <ip4_output_if_src+0x12e>
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	891a      	ldrh	r2, [r3, #8]
 8018e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d906      	bls.n	8018eae <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018ea0:	687a      	ldr	r2, [r7, #4]
 8018ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018ea4:	68f8      	ldr	r0, [r7, #12]
 8018ea6:	f000 fd53 	bl	8019950 <ip4_frag>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	e006      	b.n	8018ebc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb0:	695b      	ldr	r3, [r3, #20]
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	68f9      	ldr	r1, [r7, #12]
 8018eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018eb8:	4798      	blx	r3
 8018eba:	4603      	mov	r3, r0
}
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	3720      	adds	r7, #32
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	0801f57c 	.word	0x0801f57c
 8018ec8:	0801f5b0 	.word	0x0801f5b0
 8018ecc:	0801f5bc 	.word	0x0801f5bc
 8018ed0:	0801f5e4 	.word	0x0801f5e4
 8018ed4:	2000b602 	.word	0x2000b602
 8018ed8:	0801fbe8 	.word	0x0801fbe8

08018edc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018edc:	b480      	push	{r7}
 8018ede:	b085      	sub	sp, #20
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ef0:	d002      	beq.n	8018ef8 <ip4_addr_isbroadcast_u32+0x1c>
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d101      	bne.n	8018efc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018ef8:	2301      	movs	r3, #1
 8018efa:	e02a      	b.n	8018f52 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f02:	f003 0302 	and.w	r3, r3, #2
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d101      	bne.n	8018f0e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	e021      	b.n	8018f52 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018f0e:	683b      	ldr	r3, [r7, #0]
 8018f10:	3304      	adds	r3, #4
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d101      	bne.n	8018f1e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	e019      	b.n	8018f52 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018f1e:	68fa      	ldr	r2, [r7, #12]
 8018f20:	683b      	ldr	r3, [r7, #0]
 8018f22:	3304      	adds	r3, #4
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	405a      	eors	r2, r3
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	3308      	adds	r3, #8
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4013      	ands	r3, r2
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d10d      	bne.n	8018f50 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	3308      	adds	r3, #8
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	43da      	mvns	r2, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	3308      	adds	r3, #8
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d101      	bne.n	8018f50 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018f4c:	2301      	movs	r3, #1
 8018f4e:	e000      	b.n	8018f52 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018f50:	2300      	movs	r3, #0
  }
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	3714      	adds	r7, #20
 8018f56:	46bd      	mov	sp, r7
 8018f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5c:	4770      	bx	lr
	...

08018f60 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018f66:	2300      	movs	r3, #0
 8018f68:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018f6a:	4b12      	ldr	r3, [pc, #72]	; (8018fb4 <ip_reass_tmr+0x54>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018f70:	e018      	b.n	8018fa4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	7fdb      	ldrb	r3, [r3, #31]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00b      	beq.n	8018f92 <ip_reass_tmr+0x32>
      r->timer--;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	7fdb      	ldrb	r3, [r3, #31]
 8018f7e:	3b01      	subs	r3, #1
 8018f80:	b2da      	uxtb	r2, r3
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	60fb      	str	r3, [r7, #12]
 8018f90:	e008      	b.n	8018fa4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018f9c:	68b9      	ldr	r1, [r7, #8]
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f000 f80a 	bl	8018fb8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d1e3      	bne.n	8018f72 <ip_reass_tmr+0x12>
    }
  }
}
 8018faa:	bf00      	nop
 8018fac:	bf00      	nop
 8018fae:	3710      	adds	r7, #16
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}
 8018fb4:	2000b604 	.word	0x2000b604

08018fb8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b088      	sub	sp, #32
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
 8018fc0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018fc6:	683a      	ldr	r2, [r7, #0]
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	429a      	cmp	r2, r3
 8018fcc:	d105      	bne.n	8018fda <ip_reass_free_complete_datagram+0x22>
 8018fce:	4b45      	ldr	r3, [pc, #276]	; (80190e4 <ip_reass_free_complete_datagram+0x12c>)
 8018fd0:	22ab      	movs	r2, #171	; 0xab
 8018fd2:	4945      	ldr	r1, [pc, #276]	; (80190e8 <ip_reass_free_complete_datagram+0x130>)
 8018fd4:	4845      	ldr	r0, [pc, #276]	; (80190ec <ip_reass_free_complete_datagram+0x134>)
 8018fd6:	f001 f99f 	bl	801a318 <iprintf>
  if (prev != NULL) {
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d00a      	beq.n	8018ff6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	687a      	ldr	r2, [r7, #4]
 8018fe6:	429a      	cmp	r2, r3
 8018fe8:	d005      	beq.n	8018ff6 <ip_reass_free_complete_datagram+0x3e>
 8018fea:	4b3e      	ldr	r3, [pc, #248]	; (80190e4 <ip_reass_free_complete_datagram+0x12c>)
 8018fec:	22ad      	movs	r2, #173	; 0xad
 8018fee:	4940      	ldr	r1, [pc, #256]	; (80190f0 <ip_reass_free_complete_datagram+0x138>)
 8018ff0:	483e      	ldr	r0, [pc, #248]	; (80190ec <ip_reass_free_complete_datagram+0x134>)
 8018ff2:	f001 f991 	bl	801a318 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	685b      	ldr	r3, [r3, #4]
 8018ffc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018ffe:	697b      	ldr	r3, [r7, #20]
 8019000:	889b      	ldrh	r3, [r3, #4]
 8019002:	b29b      	uxth	r3, r3
 8019004:	2b00      	cmp	r3, #0
 8019006:	d12a      	bne.n	801905e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	685b      	ldr	r3, [r3, #4]
 801900c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	681a      	ldr	r2, [r3, #0]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019016:	69bb      	ldr	r3, [r7, #24]
 8019018:	6858      	ldr	r0, [r3, #4]
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	3308      	adds	r3, #8
 801901e:	2214      	movs	r2, #20
 8019020:	4619      	mov	r1, r3
 8019022:	f001 fac2 	bl	801a5aa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019026:	2101      	movs	r1, #1
 8019028:	69b8      	ldr	r0, [r7, #24]
 801902a:	f7ff fc29 	bl	8018880 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801902e:	69b8      	ldr	r0, [r7, #24]
 8019030:	f7f6 fbf8 	bl	800f824 <pbuf_clen>
 8019034:	4603      	mov	r3, r0
 8019036:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019038:	8bfa      	ldrh	r2, [r7, #30]
 801903a:	8a7b      	ldrh	r3, [r7, #18]
 801903c:	4413      	add	r3, r2
 801903e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019042:	db05      	blt.n	8019050 <ip_reass_free_complete_datagram+0x98>
 8019044:	4b27      	ldr	r3, [pc, #156]	; (80190e4 <ip_reass_free_complete_datagram+0x12c>)
 8019046:	22bc      	movs	r2, #188	; 0xbc
 8019048:	492a      	ldr	r1, [pc, #168]	; (80190f4 <ip_reass_free_complete_datagram+0x13c>)
 801904a:	4828      	ldr	r0, [pc, #160]	; (80190ec <ip_reass_free_complete_datagram+0x134>)
 801904c:	f001 f964 	bl	801a318 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019050:	8bfa      	ldrh	r2, [r7, #30]
 8019052:	8a7b      	ldrh	r3, [r7, #18]
 8019054:	4413      	add	r3, r2
 8019056:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019058:	69b8      	ldr	r0, [r7, #24]
 801905a:	f7f6 fb5b 	bl	800f714 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019064:	e01f      	b.n	80190a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019066:	69bb      	ldr	r3, [r7, #24]
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801906c:	69bb      	ldr	r3, [r7, #24]
 801906e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019076:	68f8      	ldr	r0, [r7, #12]
 8019078:	f7f6 fbd4 	bl	800f824 <pbuf_clen>
 801907c:	4603      	mov	r3, r0
 801907e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019080:	8bfa      	ldrh	r2, [r7, #30]
 8019082:	8a7b      	ldrh	r3, [r7, #18]
 8019084:	4413      	add	r3, r2
 8019086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801908a:	db05      	blt.n	8019098 <ip_reass_free_complete_datagram+0xe0>
 801908c:	4b15      	ldr	r3, [pc, #84]	; (80190e4 <ip_reass_free_complete_datagram+0x12c>)
 801908e:	22cc      	movs	r2, #204	; 0xcc
 8019090:	4918      	ldr	r1, [pc, #96]	; (80190f4 <ip_reass_free_complete_datagram+0x13c>)
 8019092:	4816      	ldr	r0, [pc, #88]	; (80190ec <ip_reass_free_complete_datagram+0x134>)
 8019094:	f001 f940 	bl	801a318 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019098:	8bfa      	ldrh	r2, [r7, #30]
 801909a:	8a7b      	ldrh	r3, [r7, #18]
 801909c:	4413      	add	r3, r2
 801909e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80190a0:	68f8      	ldr	r0, [r7, #12]
 80190a2:	f7f6 fb37 	bl	800f714 <pbuf_free>
  while (p != NULL) {
 80190a6:	69bb      	ldr	r3, [r7, #24]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d1dc      	bne.n	8019066 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80190ac:	6839      	ldr	r1, [r7, #0]
 80190ae:	6878      	ldr	r0, [r7, #4]
 80190b0:	f000 f8c2 	bl	8019238 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80190b4:	4b10      	ldr	r3, [pc, #64]	; (80190f8 <ip_reass_free_complete_datagram+0x140>)
 80190b6:	881b      	ldrh	r3, [r3, #0]
 80190b8:	8bfa      	ldrh	r2, [r7, #30]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d905      	bls.n	80190ca <ip_reass_free_complete_datagram+0x112>
 80190be:	4b09      	ldr	r3, [pc, #36]	; (80190e4 <ip_reass_free_complete_datagram+0x12c>)
 80190c0:	22d2      	movs	r2, #210	; 0xd2
 80190c2:	490e      	ldr	r1, [pc, #56]	; (80190fc <ip_reass_free_complete_datagram+0x144>)
 80190c4:	4809      	ldr	r0, [pc, #36]	; (80190ec <ip_reass_free_complete_datagram+0x134>)
 80190c6:	f001 f927 	bl	801a318 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80190ca:	4b0b      	ldr	r3, [pc, #44]	; (80190f8 <ip_reass_free_complete_datagram+0x140>)
 80190cc:	881a      	ldrh	r2, [r3, #0]
 80190ce:	8bfb      	ldrh	r3, [r7, #30]
 80190d0:	1ad3      	subs	r3, r2, r3
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	4b08      	ldr	r3, [pc, #32]	; (80190f8 <ip_reass_free_complete_datagram+0x140>)
 80190d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80190d8:	8bfb      	ldrh	r3, [r7, #30]
}
 80190da:	4618      	mov	r0, r3
 80190dc:	3720      	adds	r7, #32
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd80      	pop	{r7, pc}
 80190e2:	bf00      	nop
 80190e4:	0801f614 	.word	0x0801f614
 80190e8:	0801f650 	.word	0x0801f650
 80190ec:	0801f65c 	.word	0x0801f65c
 80190f0:	0801f684 	.word	0x0801f684
 80190f4:	0801f698 	.word	0x0801f698
 80190f8:	2000b608 	.word	0x2000b608
 80190fc:	0801f6b8 	.word	0x0801f6b8

08019100 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b08a      	sub	sp, #40	; 0x28
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801910a:	2300      	movs	r3, #0
 801910c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801910e:	2300      	movs	r3, #0
 8019110:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019112:	2300      	movs	r3, #0
 8019114:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019116:	2300      	movs	r3, #0
 8019118:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801911a:	2300      	movs	r3, #0
 801911c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801911e:	4b28      	ldr	r3, [pc, #160]	; (80191c0 <ip_reass_remove_oldest_datagram+0xc0>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019124:	e030      	b.n	8019188 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019128:	695a      	ldr	r2, [r3, #20]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	68db      	ldr	r3, [r3, #12]
 801912e:	429a      	cmp	r2, r3
 8019130:	d10c      	bne.n	801914c <ip_reass_remove_oldest_datagram+0x4c>
 8019132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019134:	699a      	ldr	r2, [r3, #24]
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	691b      	ldr	r3, [r3, #16]
 801913a:	429a      	cmp	r2, r3
 801913c:	d106      	bne.n	801914c <ip_reass_remove_oldest_datagram+0x4c>
 801913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019140:	899a      	ldrh	r2, [r3, #12]
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	889b      	ldrh	r3, [r3, #4]
 8019146:	b29b      	uxth	r3, r3
 8019148:	429a      	cmp	r2, r3
 801914a:	d014      	beq.n	8019176 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	3301      	adds	r3, #1
 8019150:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019152:	6a3b      	ldr	r3, [r7, #32]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d104      	bne.n	8019162 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801915c:	69fb      	ldr	r3, [r7, #28]
 801915e:	61bb      	str	r3, [r7, #24]
 8019160:	e009      	b.n	8019176 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019164:	7fda      	ldrb	r2, [r3, #31]
 8019166:	6a3b      	ldr	r3, [r7, #32]
 8019168:	7fdb      	ldrb	r3, [r3, #31]
 801916a:	429a      	cmp	r2, r3
 801916c:	d803      	bhi.n	8019176 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019170:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019172:	69fb      	ldr	r3, [r7, #28]
 8019174:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d001      	beq.n	8019182 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019180:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801918a:	2b00      	cmp	r3, #0
 801918c:	d1cb      	bne.n	8019126 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801918e:	6a3b      	ldr	r3, [r7, #32]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d008      	beq.n	80191a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019194:	69b9      	ldr	r1, [r7, #24]
 8019196:	6a38      	ldr	r0, [r7, #32]
 8019198:	f7ff ff0e 	bl	8018fb8 <ip_reass_free_complete_datagram>
 801919c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801919e:	697a      	ldr	r2, [r7, #20]
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	4413      	add	r3, r2
 80191a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80191a6:	697a      	ldr	r2, [r7, #20]
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	da02      	bge.n	80191b4 <ip_reass_remove_oldest_datagram+0xb4>
 80191ae:	693b      	ldr	r3, [r7, #16]
 80191b0:	2b01      	cmp	r3, #1
 80191b2:	dcac      	bgt.n	801910e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80191b4:	697b      	ldr	r3, [r7, #20]
}
 80191b6:	4618      	mov	r0, r3
 80191b8:	3728      	adds	r7, #40	; 0x28
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	2000b604 	.word	0x2000b604

080191c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80191ce:	2004      	movs	r0, #4
 80191d0:	f7f5 fbce 	bl	800e970 <memp_malloc>
 80191d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d110      	bne.n	80191fe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80191dc:	6839      	ldr	r1, [r7, #0]
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	f7ff ff8e 	bl	8019100 <ip_reass_remove_oldest_datagram>
 80191e4:	4602      	mov	r2, r0
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	4293      	cmp	r3, r2
 80191ea:	dc03      	bgt.n	80191f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80191ec:	2004      	movs	r0, #4
 80191ee:	f7f5 fbbf 	bl	800e970 <memp_malloc>
 80191f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d101      	bne.n	80191fe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80191fa:	2300      	movs	r3, #0
 80191fc:	e016      	b.n	801922c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80191fe:	2220      	movs	r2, #32
 8019200:	2100      	movs	r1, #0
 8019202:	68f8      	ldr	r0, [r7, #12]
 8019204:	f001 f90f 	bl	801a426 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	220f      	movs	r2, #15
 801920c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801920e:	4b09      	ldr	r3, [pc, #36]	; (8019234 <ip_reass_enqueue_new_datagram+0x70>)
 8019210:	681a      	ldr	r2, [r3, #0]
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019216:	4a07      	ldr	r2, [pc, #28]	; (8019234 <ip_reass_enqueue_new_datagram+0x70>)
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	3308      	adds	r3, #8
 8019220:	2214      	movs	r2, #20
 8019222:	6879      	ldr	r1, [r7, #4]
 8019224:	4618      	mov	r0, r3
 8019226:	f001 f9c0 	bl	801a5aa <memcpy>
  return ipr;
 801922a:	68fb      	ldr	r3, [r7, #12]
}
 801922c:	4618      	mov	r0, r3
 801922e:	3710      	adds	r7, #16
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}
 8019234:	2000b604 	.word	0x2000b604

08019238 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b082      	sub	sp, #8
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019242:	4b10      	ldr	r3, [pc, #64]	; (8019284 <ip_reass_dequeue_datagram+0x4c>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	429a      	cmp	r2, r3
 801924a:	d104      	bne.n	8019256 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	4a0c      	ldr	r2, [pc, #48]	; (8019284 <ip_reass_dequeue_datagram+0x4c>)
 8019252:	6013      	str	r3, [r2, #0]
 8019254:	e00d      	b.n	8019272 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d106      	bne.n	801926a <ip_reass_dequeue_datagram+0x32>
 801925c:	4b0a      	ldr	r3, [pc, #40]	; (8019288 <ip_reass_dequeue_datagram+0x50>)
 801925e:	f240 1245 	movw	r2, #325	; 0x145
 8019262:	490a      	ldr	r1, [pc, #40]	; (801928c <ip_reass_dequeue_datagram+0x54>)
 8019264:	480a      	ldr	r0, [pc, #40]	; (8019290 <ip_reass_dequeue_datagram+0x58>)
 8019266:	f001 f857 	bl	801a318 <iprintf>
    prev->next = ipr->next;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019272:	6879      	ldr	r1, [r7, #4]
 8019274:	2004      	movs	r0, #4
 8019276:	f7f5 fbeb 	bl	800ea50 <memp_free>
}
 801927a:	bf00      	nop
 801927c:	3708      	adds	r7, #8
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}
 8019282:	bf00      	nop
 8019284:	2000b604 	.word	0x2000b604
 8019288:	0801f614 	.word	0x0801f614
 801928c:	0801f6dc 	.word	0x0801f6dc
 8019290:	0801f65c 	.word	0x0801f65c

08019294 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b08c      	sub	sp, #48	; 0x30
 8019298:	af00      	add	r7, sp, #0
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80192a0:	2300      	movs	r3, #0
 80192a2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80192a4:	2301      	movs	r3, #1
 80192a6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	685b      	ldr	r3, [r3, #4]
 80192ac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80192ae:	69fb      	ldr	r3, [r7, #28]
 80192b0:	885b      	ldrh	r3, [r3, #2]
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7f4 fee3 	bl	800e080 <lwip_htons>
 80192ba:	4603      	mov	r3, r0
 80192bc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80192be:	69fb      	ldr	r3, [r7, #28]
 80192c0:	781b      	ldrb	r3, [r3, #0]
 80192c2:	f003 030f 	and.w	r3, r3, #15
 80192c6:	b2db      	uxtb	r3, r3
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80192cc:	7e7b      	ldrb	r3, [r7, #25]
 80192ce:	b29b      	uxth	r3, r3
 80192d0:	8b7a      	ldrh	r2, [r7, #26]
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d202      	bcs.n	80192dc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80192d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192da:	e135      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80192dc:	7e7b      	ldrb	r3, [r7, #25]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	8b7a      	ldrh	r2, [r7, #26]
 80192e2:	1ad3      	subs	r3, r2, r3
 80192e4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80192e6:	69fb      	ldr	r3, [r7, #28]
 80192e8:	88db      	ldrh	r3, [r3, #6]
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7f4 fec7 	bl	800e080 <lwip_htons>
 80192f2:	4603      	mov	r3, r0
 80192f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	00db      	lsls	r3, r3, #3
 80192fc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	685b      	ldr	r3, [r3, #4]
 8019302:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019306:	2200      	movs	r2, #0
 8019308:	701a      	strb	r2, [r3, #0]
 801930a:	2200      	movs	r2, #0
 801930c:	705a      	strb	r2, [r3, #1]
 801930e:	2200      	movs	r2, #0
 8019310:	709a      	strb	r2, [r3, #2]
 8019312:	2200      	movs	r2, #0
 8019314:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019318:	8afa      	ldrh	r2, [r7, #22]
 801931a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801931c:	8afa      	ldrh	r2, [r7, #22]
 801931e:	8b7b      	ldrh	r3, [r7, #26]
 8019320:	4413      	add	r3, r2
 8019322:	b29a      	uxth	r2, r3
 8019324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019326:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801932a:	88db      	ldrh	r3, [r3, #6]
 801932c:	b29b      	uxth	r3, r3
 801932e:	8afa      	ldrh	r2, [r7, #22]
 8019330:	429a      	cmp	r2, r3
 8019332:	d902      	bls.n	801933a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019338:	e106      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	685b      	ldr	r3, [r3, #4]
 801933e:	627b      	str	r3, [r7, #36]	; 0x24
 8019340:	e068      	b.n	8019414 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019344:	685b      	ldr	r3, [r3, #4]
 8019346:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934a:	889b      	ldrh	r3, [r3, #4]
 801934c:	b29a      	uxth	r2, r3
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	889b      	ldrh	r3, [r3, #4]
 8019352:	b29b      	uxth	r3, r3
 8019354:	429a      	cmp	r2, r3
 8019356:	d235      	bcs.n	80193c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801935c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019360:	2b00      	cmp	r3, #0
 8019362:	d020      	beq.n	80193a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019366:	889b      	ldrh	r3, [r3, #4]
 8019368:	b29a      	uxth	r2, r3
 801936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936c:	88db      	ldrh	r3, [r3, #6]
 801936e:	b29b      	uxth	r3, r3
 8019370:	429a      	cmp	r2, r3
 8019372:	d307      	bcc.n	8019384 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019376:	88db      	ldrh	r3, [r3, #6]
 8019378:	b29a      	uxth	r2, r3
 801937a:	693b      	ldr	r3, [r7, #16]
 801937c:	889b      	ldrh	r3, [r3, #4]
 801937e:	b29b      	uxth	r3, r3
 8019380:	429a      	cmp	r2, r3
 8019382:	d902      	bls.n	801938a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019388:	e0de      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801938c:	68ba      	ldr	r2, [r7, #8]
 801938e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019392:	88db      	ldrh	r3, [r3, #6]
 8019394:	b29a      	uxth	r2, r3
 8019396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019398:	889b      	ldrh	r3, [r3, #4]
 801939a:	b29b      	uxth	r3, r3
 801939c:	429a      	cmp	r2, r3
 801939e:	d03d      	beq.n	801941c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80193a0:	2300      	movs	r3, #0
 80193a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80193a4:	e03a      	b.n	801941c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80193a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a8:	88db      	ldrh	r3, [r3, #6]
 80193aa:	b29a      	uxth	r2, r3
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	889b      	ldrh	r3, [r3, #4]
 80193b0:	b29b      	uxth	r3, r3
 80193b2:	429a      	cmp	r2, r3
 80193b4:	d902      	bls.n	80193bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80193b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193ba:	e0c5      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	68ba      	ldr	r2, [r7, #8]
 80193c0:	605a      	str	r2, [r3, #4]
      break;
 80193c2:	e02b      	b.n	801941c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80193c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c6:	889b      	ldrh	r3, [r3, #4]
 80193c8:	b29a      	uxth	r2, r3
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	889b      	ldrh	r3, [r3, #4]
 80193ce:	b29b      	uxth	r3, r3
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d102      	bne.n	80193da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80193d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193d8:	e0b6      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80193da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193dc:	889b      	ldrh	r3, [r3, #4]
 80193de:	b29a      	uxth	r2, r3
 80193e0:	693b      	ldr	r3, [r7, #16]
 80193e2:	88db      	ldrh	r3, [r3, #6]
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	429a      	cmp	r2, r3
 80193e8:	d202      	bcs.n	80193f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80193ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193ee:	e0ab      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80193f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d009      	beq.n	801940a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80193f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f8:	88db      	ldrh	r3, [r3, #6]
 80193fa:	b29a      	uxth	r2, r3
 80193fc:	693b      	ldr	r3, [r7, #16]
 80193fe:	889b      	ldrh	r3, [r3, #4]
 8019400:	b29b      	uxth	r3, r3
 8019402:	429a      	cmp	r2, r3
 8019404:	d001      	beq.n	801940a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019406:	2300      	movs	r3, #0
 8019408:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801940a:	693b      	ldr	r3, [r7, #16]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019410:	693b      	ldr	r3, [r7, #16]
 8019412:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019416:	2b00      	cmp	r3, #0
 8019418:	d193      	bne.n	8019342 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801941a:	e000      	b.n	801941e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801941c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019420:	2b00      	cmp	r3, #0
 8019422:	d12d      	bne.n	8019480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019426:	2b00      	cmp	r3, #0
 8019428:	d01c      	beq.n	8019464 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942c:	88db      	ldrh	r3, [r3, #6]
 801942e:	b29a      	uxth	r2, r3
 8019430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019432:	889b      	ldrh	r3, [r3, #4]
 8019434:	b29b      	uxth	r3, r3
 8019436:	429a      	cmp	r2, r3
 8019438:	d906      	bls.n	8019448 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801943a:	4b45      	ldr	r3, [pc, #276]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801943c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019440:	4944      	ldr	r1, [pc, #272]	; (8019554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019442:	4845      	ldr	r0, [pc, #276]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019444:	f000 ff68 	bl	801a318 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944a:	68ba      	ldr	r2, [r7, #8]
 801944c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019450:	88db      	ldrh	r3, [r3, #6]
 8019452:	b29a      	uxth	r2, r3
 8019454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019456:	889b      	ldrh	r3, [r3, #4]
 8019458:	b29b      	uxth	r3, r3
 801945a:	429a      	cmp	r2, r3
 801945c:	d010      	beq.n	8019480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801945e:	2300      	movs	r3, #0
 8019460:	623b      	str	r3, [r7, #32]
 8019462:	e00d      	b.n	8019480 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d006      	beq.n	801947a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801946c:	4b38      	ldr	r3, [pc, #224]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801946e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019472:	493a      	ldr	r1, [pc, #232]	; (801955c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019474:	4838      	ldr	r0, [pc, #224]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019476:	f000 ff4f 	bl	801a318 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	68ba      	ldr	r2, [r7, #8]
 801947e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d105      	bne.n	8019492 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	7f9b      	ldrb	r3, [r3, #30]
 801948a:	f003 0301 	and.w	r3, r3, #1
 801948e:	2b00      	cmp	r3, #0
 8019490:	d059      	beq.n	8019546 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019492:	6a3b      	ldr	r3, [r7, #32]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d04f      	beq.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d006      	beq.n	80194ae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	685b      	ldr	r3, [r3, #4]
 80194a6:	889b      	ldrh	r3, [r3, #4]
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d002      	beq.n	80194b4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80194ae:	2300      	movs	r3, #0
 80194b0:	623b      	str	r3, [r7, #32]
 80194b2:	e041      	b.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80194b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80194b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80194be:	e012      	b.n	80194e6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80194c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c2:	685b      	ldr	r3, [r3, #4]
 80194c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80194c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c8:	88db      	ldrh	r3, [r3, #6]
 80194ca:	b29a      	uxth	r2, r3
 80194cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ce:	889b      	ldrh	r3, [r3, #4]
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	429a      	cmp	r2, r3
 80194d4:	d002      	beq.n	80194dc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80194d6:	2300      	movs	r3, #0
 80194d8:	623b      	str	r3, [r7, #32]
            break;
 80194da:	e007      	b.n	80194ec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80194dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194de:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80194e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80194e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d1e9      	bne.n	80194c0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80194ec:	6a3b      	ldr	r3, [r7, #32]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d022      	beq.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	685b      	ldr	r3, [r3, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d106      	bne.n	8019508 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80194fa:	4b15      	ldr	r3, [pc, #84]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80194fc:	f240 12df 	movw	r2, #479	; 0x1df
 8019500:	4917      	ldr	r1, [pc, #92]	; (8019560 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019502:	4815      	ldr	r0, [pc, #84]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019504:	f000 ff08 	bl	801a318 <iprintf>
          LWIP_ASSERT("sanity check",
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019510:	429a      	cmp	r2, r3
 8019512:	d106      	bne.n	8019522 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019514:	4b0e      	ldr	r3, [pc, #56]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019516:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801951a:	4911      	ldr	r1, [pc, #68]	; (8019560 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801951c:	480e      	ldr	r0, [pc, #56]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801951e:	f000 fefb 	bl	801a318 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d006      	beq.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801952a:	4b09      	ldr	r3, [pc, #36]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801952c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019530:	490c      	ldr	r1, [pc, #48]	; (8019564 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019532:	4809      	ldr	r0, [pc, #36]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019534:	f000 fef0 	bl	801a318 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019538:	6a3b      	ldr	r3, [r7, #32]
 801953a:	2b00      	cmp	r3, #0
 801953c:	bf14      	ite	ne
 801953e:	2301      	movne	r3, #1
 8019540:	2300      	moveq	r3, #0
 8019542:	b2db      	uxtb	r3, r3
 8019544:	e000      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019546:	2300      	movs	r3, #0
}
 8019548:	4618      	mov	r0, r3
 801954a:	3730      	adds	r7, #48	; 0x30
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	0801f614 	.word	0x0801f614
 8019554:	0801f6f8 	.word	0x0801f6f8
 8019558:	0801f65c 	.word	0x0801f65c
 801955c:	0801f718 	.word	0x0801f718
 8019560:	0801f750 	.word	0x0801f750
 8019564:	0801f760 	.word	0x0801f760

08019568 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	b08e      	sub	sp, #56	; 0x38
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	685b      	ldr	r3, [r3, #4]
 8019574:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019578:	781b      	ldrb	r3, [r3, #0]
 801957a:	f003 030f 	and.w	r3, r3, #15
 801957e:	b2db      	uxtb	r3, r3
 8019580:	009b      	lsls	r3, r3, #2
 8019582:	b2db      	uxtb	r3, r3
 8019584:	2b14      	cmp	r3, #20
 8019586:	f040 8171 	bne.w	801986c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801958c:	88db      	ldrh	r3, [r3, #6]
 801958e:	b29b      	uxth	r3, r3
 8019590:	4618      	mov	r0, r3
 8019592:	f7f4 fd75 	bl	800e080 <lwip_htons>
 8019596:	4603      	mov	r3, r0
 8019598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801959c:	b29b      	uxth	r3, r3
 801959e:	00db      	lsls	r3, r3, #3
 80195a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a4:	885b      	ldrh	r3, [r3, #2]
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7f4 fd69 	bl	800e080 <lwip_htons>
 80195ae:	4603      	mov	r3, r0
 80195b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80195b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	f003 030f 	and.w	r3, r3, #15
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80195c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80195ca:	429a      	cmp	r2, r3
 80195cc:	f0c0 8150 	bcc.w	8019870 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80195d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80195d8:	1ad3      	subs	r3, r2, r3
 80195da:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f7f6 f921 	bl	800f824 <pbuf_clen>
 80195e2:	4603      	mov	r3, r0
 80195e4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80195e6:	4b8c      	ldr	r3, [pc, #560]	; (8019818 <ip4_reass+0x2b0>)
 80195e8:	881b      	ldrh	r3, [r3, #0]
 80195ea:	461a      	mov	r2, r3
 80195ec:	8c3b      	ldrh	r3, [r7, #32]
 80195ee:	4413      	add	r3, r2
 80195f0:	2b0a      	cmp	r3, #10
 80195f2:	dd10      	ble.n	8019616 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80195f4:	8c3b      	ldrh	r3, [r7, #32]
 80195f6:	4619      	mov	r1, r3
 80195f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195fa:	f7ff fd81 	bl	8019100 <ip_reass_remove_oldest_datagram>
 80195fe:	4603      	mov	r3, r0
 8019600:	2b00      	cmp	r3, #0
 8019602:	f000 8137 	beq.w	8019874 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019606:	4b84      	ldr	r3, [pc, #528]	; (8019818 <ip4_reass+0x2b0>)
 8019608:	881b      	ldrh	r3, [r3, #0]
 801960a:	461a      	mov	r2, r3
 801960c:	8c3b      	ldrh	r3, [r7, #32]
 801960e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019610:	2b0a      	cmp	r3, #10
 8019612:	f300 812f 	bgt.w	8019874 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019616:	4b81      	ldr	r3, [pc, #516]	; (801981c <ip4_reass+0x2b4>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	633b      	str	r3, [r7, #48]	; 0x30
 801961c:	e015      	b.n	801964a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019620:	695a      	ldr	r2, [r3, #20]
 8019622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	429a      	cmp	r2, r3
 8019628:	d10c      	bne.n	8019644 <ip4_reass+0xdc>
 801962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801962c:	699a      	ldr	r2, [r3, #24]
 801962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019630:	691b      	ldr	r3, [r3, #16]
 8019632:	429a      	cmp	r2, r3
 8019634:	d106      	bne.n	8019644 <ip4_reass+0xdc>
 8019636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019638:	899a      	ldrh	r2, [r3, #12]
 801963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963c:	889b      	ldrh	r3, [r3, #4]
 801963e:	b29b      	uxth	r3, r3
 8019640:	429a      	cmp	r2, r3
 8019642:	d006      	beq.n	8019652 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	633b      	str	r3, [r7, #48]	; 0x30
 801964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801964c:	2b00      	cmp	r3, #0
 801964e:	d1e6      	bne.n	801961e <ip4_reass+0xb6>
 8019650:	e000      	b.n	8019654 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019652:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019656:	2b00      	cmp	r3, #0
 8019658:	d109      	bne.n	801966e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801965a:	8c3b      	ldrh	r3, [r7, #32]
 801965c:	4619      	mov	r1, r3
 801965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019660:	f7ff fdb0 	bl	80191c4 <ip_reass_enqueue_new_datagram>
 8019664:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019668:	2b00      	cmp	r3, #0
 801966a:	d11c      	bne.n	80196a6 <ip4_reass+0x13e>
      goto nullreturn;
 801966c:	e105      	b.n	801987a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019670:	88db      	ldrh	r3, [r3, #6]
 8019672:	b29b      	uxth	r3, r3
 8019674:	4618      	mov	r0, r3
 8019676:	f7f4 fd03 	bl	800e080 <lwip_htons>
 801967a:	4603      	mov	r3, r0
 801967c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019680:	2b00      	cmp	r3, #0
 8019682:	d110      	bne.n	80196a6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019686:	89db      	ldrh	r3, [r3, #14]
 8019688:	4618      	mov	r0, r3
 801968a:	f7f4 fcf9 	bl	800e080 <lwip_htons>
 801968e:	4603      	mov	r3, r0
 8019690:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019694:	2b00      	cmp	r3, #0
 8019696:	d006      	beq.n	80196a6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801969a:	3308      	adds	r3, #8
 801969c:	2214      	movs	r2, #20
 801969e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80196a0:	4618      	mov	r0, r3
 80196a2:	f000 ff82 	bl	801a5aa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80196a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a8:	88db      	ldrh	r3, [r3, #6]
 80196aa:	b29b      	uxth	r3, r3
 80196ac:	f003 0320 	and.w	r3, r3, #32
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	bf0c      	ite	eq
 80196b4:	2301      	moveq	r3, #1
 80196b6:	2300      	movne	r3, #0
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d00e      	beq.n	80196e0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80196c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80196c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80196c6:	4413      	add	r3, r2
 80196c8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80196ca:	8b7a      	ldrh	r2, [r7, #26]
 80196cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80196ce:	429a      	cmp	r2, r3
 80196d0:	f0c0 80a0 	bcc.w	8019814 <ip4_reass+0x2ac>
 80196d4:	8b7b      	ldrh	r3, [r7, #26]
 80196d6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80196da:	4293      	cmp	r3, r2
 80196dc:	f200 809a 	bhi.w	8019814 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80196e0:	69fa      	ldr	r2, [r7, #28]
 80196e2:	6879      	ldr	r1, [r7, #4]
 80196e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80196e6:	f7ff fdd5 	bl	8019294 <ip_reass_chain_frag_into_datagram_and_validate>
 80196ea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196f2:	f000 809b 	beq.w	801982c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80196f6:	4b48      	ldr	r3, [pc, #288]	; (8019818 <ip4_reass+0x2b0>)
 80196f8:	881a      	ldrh	r2, [r3, #0]
 80196fa:	8c3b      	ldrh	r3, [r7, #32]
 80196fc:	4413      	add	r3, r2
 80196fe:	b29a      	uxth	r2, r3
 8019700:	4b45      	ldr	r3, [pc, #276]	; (8019818 <ip4_reass+0x2b0>)
 8019702:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019704:	69fb      	ldr	r3, [r7, #28]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d00d      	beq.n	8019726 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801970a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801970c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801970e:	4413      	add	r3, r2
 8019710:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019714:	8a7a      	ldrh	r2, [r7, #18]
 8019716:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801971a:	7f9b      	ldrb	r3, [r3, #30]
 801971c:	f043 0301 	orr.w	r3, r3, #1
 8019720:	b2da      	uxtb	r2, r3
 8019722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019724:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019726:	697b      	ldr	r3, [r7, #20]
 8019728:	2b01      	cmp	r3, #1
 801972a:	d171      	bne.n	8019810 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801972e:	8b9b      	ldrh	r3, [r3, #28]
 8019730:	3314      	adds	r3, #20
 8019732:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019736:	685b      	ldr	r3, [r3, #4]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019740:	685b      	ldr	r3, [r3, #4]
 8019742:	685b      	ldr	r3, [r3, #4]
 8019744:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019748:	3308      	adds	r3, #8
 801974a:	2214      	movs	r2, #20
 801974c:	4619      	mov	r1, r3
 801974e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019750:	f000 ff2b 	bl	801a5aa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019754:	8a3b      	ldrh	r3, [r7, #16]
 8019756:	4618      	mov	r0, r3
 8019758:	f7f4 fc92 	bl	800e080 <lwip_htons>
 801975c:	4603      	mov	r3, r0
 801975e:	461a      	mov	r2, r3
 8019760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019762:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019766:	2200      	movs	r2, #0
 8019768:	719a      	strb	r2, [r3, #6]
 801976a:	2200      	movs	r2, #0
 801976c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019770:	2200      	movs	r2, #0
 8019772:	729a      	strb	r2, [r3, #10]
 8019774:	2200      	movs	r2, #0
 8019776:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801977e:	e00d      	b.n	801979c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019786:	2114      	movs	r1, #20
 8019788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801978a:	f7f5 ff3d 	bl	800f608 <pbuf_remove_header>
      pbuf_cat(p, r);
 801978e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019790:	6878      	ldr	r0, [r7, #4]
 8019792:	f7f6 f881 	bl	800f898 <pbuf_cat>
      r = iprh->next_pbuf;
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801979c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d1ee      	bne.n	8019780 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80197a2:	4b1e      	ldr	r3, [pc, #120]	; (801981c <ip4_reass+0x2b4>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197a8:	429a      	cmp	r2, r3
 80197aa:	d102      	bne.n	80197b2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80197ac:	2300      	movs	r3, #0
 80197ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197b0:	e010      	b.n	80197d4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80197b2:	4b1a      	ldr	r3, [pc, #104]	; (801981c <ip4_reass+0x2b4>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197b8:	e007      	b.n	80197ca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80197ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197c0:	429a      	cmp	r2, r3
 80197c2:	d006      	beq.n	80197d2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80197c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d1f4      	bne.n	80197ba <ip4_reass+0x252>
 80197d0:	e000      	b.n	80197d4 <ip4_reass+0x26c>
          break;
 80197d2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80197d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80197d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197d8:	f7ff fd2e 	bl	8019238 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f7f6 f821 	bl	800f824 <pbuf_clen>
 80197e2:	4603      	mov	r3, r0
 80197e4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80197e6:	4b0c      	ldr	r3, [pc, #48]	; (8019818 <ip4_reass+0x2b0>)
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	8c3a      	ldrh	r2, [r7, #32]
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d906      	bls.n	80197fe <ip4_reass+0x296>
 80197f0:	4b0b      	ldr	r3, [pc, #44]	; (8019820 <ip4_reass+0x2b8>)
 80197f2:	f240 229b 	movw	r2, #667	; 0x29b
 80197f6:	490b      	ldr	r1, [pc, #44]	; (8019824 <ip4_reass+0x2bc>)
 80197f8:	480b      	ldr	r0, [pc, #44]	; (8019828 <ip4_reass+0x2c0>)
 80197fa:	f000 fd8d 	bl	801a318 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80197fe:	4b06      	ldr	r3, [pc, #24]	; (8019818 <ip4_reass+0x2b0>)
 8019800:	881a      	ldrh	r2, [r3, #0]
 8019802:	8c3b      	ldrh	r3, [r7, #32]
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	b29a      	uxth	r2, r3
 8019808:	4b03      	ldr	r3, [pc, #12]	; (8019818 <ip4_reass+0x2b0>)
 801980a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	e038      	b.n	8019882 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019810:	2300      	movs	r3, #0
 8019812:	e036      	b.n	8019882 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019814:	bf00      	nop
 8019816:	e00a      	b.n	801982e <ip4_reass+0x2c6>
 8019818:	2000b608 	.word	0x2000b608
 801981c:	2000b604 	.word	0x2000b604
 8019820:	0801f614 	.word	0x0801f614
 8019824:	0801f784 	.word	0x0801f784
 8019828:	0801f65c 	.word	0x0801f65c
    goto nullreturn_ipr;
 801982c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019830:	2b00      	cmp	r3, #0
 8019832:	d106      	bne.n	8019842 <ip4_reass+0x2da>
 8019834:	4b15      	ldr	r3, [pc, #84]	; (801988c <ip4_reass+0x324>)
 8019836:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801983a:	4915      	ldr	r1, [pc, #84]	; (8019890 <ip4_reass+0x328>)
 801983c:	4815      	ldr	r0, [pc, #84]	; (8019894 <ip4_reass+0x32c>)
 801983e:	f000 fd6b 	bl	801a318 <iprintf>
  if (ipr->p == NULL) {
 8019842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019844:	685b      	ldr	r3, [r3, #4]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d116      	bne.n	8019878 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801984a:	4b13      	ldr	r3, [pc, #76]	; (8019898 <ip4_reass+0x330>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019850:	429a      	cmp	r2, r3
 8019852:	d006      	beq.n	8019862 <ip4_reass+0x2fa>
 8019854:	4b0d      	ldr	r3, [pc, #52]	; (801988c <ip4_reass+0x324>)
 8019856:	f240 22ab 	movw	r2, #683	; 0x2ab
 801985a:	4910      	ldr	r1, [pc, #64]	; (801989c <ip4_reass+0x334>)
 801985c:	480d      	ldr	r0, [pc, #52]	; (8019894 <ip4_reass+0x32c>)
 801985e:	f000 fd5b 	bl	801a318 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019862:	2100      	movs	r1, #0
 8019864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019866:	f7ff fce7 	bl	8019238 <ip_reass_dequeue_datagram>
 801986a:	e006      	b.n	801987a <ip4_reass+0x312>
    goto nullreturn;
 801986c:	bf00      	nop
 801986e:	e004      	b.n	801987a <ip4_reass+0x312>
    goto nullreturn;
 8019870:	bf00      	nop
 8019872:	e002      	b.n	801987a <ip4_reass+0x312>
      goto nullreturn;
 8019874:	bf00      	nop
 8019876:	e000      	b.n	801987a <ip4_reass+0x312>
  }

nullreturn:
 8019878:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801987a:	6878      	ldr	r0, [r7, #4]
 801987c:	f7f5 ff4a 	bl	800f714 <pbuf_free>
  return NULL;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	3738      	adds	r7, #56	; 0x38
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	0801f614 	.word	0x0801f614
 8019890:	0801f7a0 	.word	0x0801f7a0
 8019894:	0801f65c 	.word	0x0801f65c
 8019898:	2000b604 	.word	0x2000b604
 801989c:	0801f7ac 	.word	0x0801f7ac

080198a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80198a4:	2005      	movs	r0, #5
 80198a6:	f7f5 f863 	bl	800e970 <memp_malloc>
 80198aa:	4603      	mov	r3, r0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	bd80      	pop	{r7, pc}

080198b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b082      	sub	sp, #8
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d106      	bne.n	80198cc <ip_frag_free_pbuf_custom_ref+0x1c>
 80198be:	4b07      	ldr	r3, [pc, #28]	; (80198dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80198c0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80198c4:	4906      	ldr	r1, [pc, #24]	; (80198e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80198c6:	4807      	ldr	r0, [pc, #28]	; (80198e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80198c8:	f000 fd26 	bl	801a318 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80198cc:	6879      	ldr	r1, [r7, #4]
 80198ce:	2005      	movs	r0, #5
 80198d0:	f7f5 f8be 	bl	800ea50 <memp_free>
}
 80198d4:	bf00      	nop
 80198d6:	3708      	adds	r7, #8
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}
 80198dc:	0801f614 	.word	0x0801f614
 80198e0:	0801f7cc 	.word	0x0801f7cc
 80198e4:	0801f65c 	.word	0x0801f65c

080198e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b084      	sub	sp, #16
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d106      	bne.n	8019908 <ipfrag_free_pbuf_custom+0x20>
 80198fa:	4b11      	ldr	r3, [pc, #68]	; (8019940 <ipfrag_free_pbuf_custom+0x58>)
 80198fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019900:	4910      	ldr	r1, [pc, #64]	; (8019944 <ipfrag_free_pbuf_custom+0x5c>)
 8019902:	4811      	ldr	r0, [pc, #68]	; (8019948 <ipfrag_free_pbuf_custom+0x60>)
 8019904:	f000 fd08 	bl	801a318 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019908:	68fa      	ldr	r2, [r7, #12]
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	429a      	cmp	r2, r3
 801990e:	d006      	beq.n	801991e <ipfrag_free_pbuf_custom+0x36>
 8019910:	4b0b      	ldr	r3, [pc, #44]	; (8019940 <ipfrag_free_pbuf_custom+0x58>)
 8019912:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019916:	490d      	ldr	r1, [pc, #52]	; (801994c <ipfrag_free_pbuf_custom+0x64>)
 8019918:	480b      	ldr	r0, [pc, #44]	; (8019948 <ipfrag_free_pbuf_custom+0x60>)
 801991a:	f000 fcfd 	bl	801a318 <iprintf>
  if (pcr->original != NULL) {
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	695b      	ldr	r3, [r3, #20]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d004      	beq.n	8019930 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	695b      	ldr	r3, [r3, #20]
 801992a:	4618      	mov	r0, r3
 801992c:	f7f5 fef2 	bl	800f714 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019930:	68f8      	ldr	r0, [r7, #12]
 8019932:	f7ff ffbd 	bl	80198b0 <ip_frag_free_pbuf_custom_ref>
}
 8019936:	bf00      	nop
 8019938:	3710      	adds	r7, #16
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop
 8019940:	0801f614 	.word	0x0801f614
 8019944:	0801f7d8 	.word	0x0801f7d8
 8019948:	0801f65c 	.word	0x0801f65c
 801994c:	0801f7e4 	.word	0x0801f7e4

08019950 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b094      	sub	sp, #80	; 0x50
 8019954:	af02      	add	r7, sp, #8
 8019956:	60f8      	str	r0, [r7, #12]
 8019958:	60b9      	str	r1, [r7, #8]
 801995a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801995c:	2300      	movs	r3, #0
 801995e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019962:	68bb      	ldr	r3, [r7, #8]
 8019964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019966:	3b14      	subs	r3, #20
 8019968:	2b00      	cmp	r3, #0
 801996a:	da00      	bge.n	801996e <ip4_frag+0x1e>
 801996c:	3307      	adds	r3, #7
 801996e:	10db      	asrs	r3, r3, #3
 8019970:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019972:	2314      	movs	r3, #20
 8019974:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	685b      	ldr	r3, [r3, #4]
 801997a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801997c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801997e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	f003 030f 	and.w	r3, r3, #15
 8019988:	b2db      	uxtb	r3, r3
 801998a:	009b      	lsls	r3, r3, #2
 801998c:	b2db      	uxtb	r3, r3
 801998e:	2b14      	cmp	r3, #20
 8019990:	d002      	beq.n	8019998 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019992:	f06f 0305 	mvn.w	r3, #5
 8019996:	e110      	b.n	8019bba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	895b      	ldrh	r3, [r3, #10]
 801999c:	2b13      	cmp	r3, #19
 801999e:	d809      	bhi.n	80199b4 <ip4_frag+0x64>
 80199a0:	4b88      	ldr	r3, [pc, #544]	; (8019bc4 <ip4_frag+0x274>)
 80199a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80199a6:	4988      	ldr	r1, [pc, #544]	; (8019bc8 <ip4_frag+0x278>)
 80199a8:	4888      	ldr	r0, [pc, #544]	; (8019bcc <ip4_frag+0x27c>)
 80199aa:	f000 fcb5 	bl	801a318 <iprintf>
 80199ae:	f06f 0305 	mvn.w	r3, #5
 80199b2:	e102      	b.n	8019bba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80199b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199b6:	88db      	ldrh	r3, [r3, #6]
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7f4 fb60 	bl	800e080 <lwip_htons>
 80199c0:	4603      	mov	r3, r0
 80199c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80199c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80199c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80199ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80199ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80199d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80199d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	891b      	ldrh	r3, [r3, #8]
 80199da:	3b14      	subs	r3, #20
 80199dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80199e0:	e0e1      	b.n	8019ba6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80199e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80199e4:	00db      	lsls	r3, r3, #3
 80199e6:	b29b      	uxth	r3, r3
 80199e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80199ec:	4293      	cmp	r3, r2
 80199ee:	bf28      	it	cs
 80199f0:	4613      	movcs	r3, r2
 80199f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80199f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80199f8:	2114      	movs	r1, #20
 80199fa:	200e      	movs	r0, #14
 80199fc:	f7f5 fba6 	bl	800f14c <pbuf_alloc>
 8019a00:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	f000 80d5 	beq.w	8019bb4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0c:	895b      	ldrh	r3, [r3, #10]
 8019a0e:	2b13      	cmp	r3, #19
 8019a10:	d806      	bhi.n	8019a20 <ip4_frag+0xd0>
 8019a12:	4b6c      	ldr	r3, [pc, #432]	; (8019bc4 <ip4_frag+0x274>)
 8019a14:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019a18:	496d      	ldr	r1, [pc, #436]	; (8019bd0 <ip4_frag+0x280>)
 8019a1a:	486c      	ldr	r0, [pc, #432]	; (8019bcc <ip4_frag+0x27c>)
 8019a1c:	f000 fc7c 	bl	801a318 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a22:	685b      	ldr	r3, [r3, #4]
 8019a24:	2214      	movs	r2, #20
 8019a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f000 fdbe 	bl	801a5aa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019a3a:	e064      	b.n	8019b06 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	895a      	ldrh	r2, [r3, #10]
 8019a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a42:	1ad3      	subs	r3, r2, r3
 8019a44:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	895b      	ldrh	r3, [r3, #10]
 8019a4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019a4c:	429a      	cmp	r2, r3
 8019a4e:	d906      	bls.n	8019a5e <ip4_frag+0x10e>
 8019a50:	4b5c      	ldr	r3, [pc, #368]	; (8019bc4 <ip4_frag+0x274>)
 8019a52:	f240 322d 	movw	r2, #813	; 0x32d
 8019a56:	495f      	ldr	r1, [pc, #380]	; (8019bd4 <ip4_frag+0x284>)
 8019a58:	485c      	ldr	r0, [pc, #368]	; (8019bcc <ip4_frag+0x27c>)
 8019a5a:	f000 fc5d 	bl	801a318 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019a5e:	8bfa      	ldrh	r2, [r7, #30]
 8019a60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019a64:	4293      	cmp	r3, r2
 8019a66:	bf28      	it	cs
 8019a68:	4613      	movcs	r3, r2
 8019a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019a6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d105      	bne.n	8019a82 <ip4_frag+0x132>
        poff = 0;
 8019a76:	2300      	movs	r3, #0
 8019a78:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	60fb      	str	r3, [r7, #12]
        continue;
 8019a80:	e041      	b.n	8019b06 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019a82:	f7ff ff0d 	bl	80198a0 <ip_frag_alloc_pbuf_custom_ref>
 8019a86:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019a88:	69bb      	ldr	r3, [r7, #24]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d103      	bne.n	8019a96 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a90:	f7f5 fe40 	bl	800f714 <pbuf_free>
        goto memerr;
 8019a94:	e08f      	b.n	8019bb6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019a96:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a9e:	4413      	add	r3, r2
 8019aa0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019aa4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019aa8:	9201      	str	r2, [sp, #4]
 8019aaa:	9300      	str	r3, [sp, #0]
 8019aac:	4603      	mov	r3, r0
 8019aae:	2241      	movs	r2, #65	; 0x41
 8019ab0:	2000      	movs	r0, #0
 8019ab2:	f7f5 fc75 	bl	800f3a0 <pbuf_alloced_custom>
 8019ab6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d106      	bne.n	8019acc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019abe:	69b8      	ldr	r0, [r7, #24]
 8019ac0:	f7ff fef6 	bl	80198b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ac6:	f7f5 fe25 	bl	800f714 <pbuf_free>
        goto memerr;
 8019aca:	e074      	b.n	8019bb6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019acc:	68f8      	ldr	r0, [r7, #12]
 8019ace:	f7f5 fec1 	bl	800f854 <pbuf_ref>
      pcr->original = p;
 8019ad2:	69bb      	ldr	r3, [r7, #24]
 8019ad4:	68fa      	ldr	r2, [r7, #12]
 8019ad6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019ad8:	69bb      	ldr	r3, [r7, #24]
 8019ada:	4a3f      	ldr	r2, [pc, #252]	; (8019bd8 <ip4_frag+0x288>)
 8019adc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019ade:	6979      	ldr	r1, [r7, #20]
 8019ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ae2:	f7f5 fed9 	bl	800f898 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019ae6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019aea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019aee:	1ad3      	subs	r3, r2, r3
 8019af0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019af4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d004      	beq.n	8019b06 <ip4_frag+0x1b6>
        poff = 0;
 8019afc:	2300      	movs	r3, #0
 8019afe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019b06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d196      	bne.n	8019a3c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019b0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019b10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019b14:	4413      	add	r3, r2
 8019b16:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b1c:	f1a3 0213 	sub.w	r2, r3, #19
 8019b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b24:	429a      	cmp	r2, r3
 8019b26:	bfcc      	ite	gt
 8019b28:	2301      	movgt	r3, #1
 8019b2a:	2300      	movle	r3, #0
 8019b2c:	b2db      	uxtb	r3, r3
 8019b2e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019b3a:	6a3b      	ldr	r3, [r7, #32]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d002      	beq.n	8019b46 <ip4_frag+0x1f6>
 8019b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d003      	beq.n	8019b4e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019b4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019b4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b50:	4618      	mov	r0, r3
 8019b52:	f7f4 fa95 	bl	800e080 <lwip_htons>
 8019b56:	4603      	mov	r3, r0
 8019b58:	461a      	mov	r2, r3
 8019b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b5c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019b60:	3314      	adds	r3, #20
 8019b62:	b29b      	uxth	r3, r3
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7f4 fa8b 	bl	800e080 <lwip_htons>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	461a      	mov	r2, r3
 8019b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b70:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b74:	2200      	movs	r2, #0
 8019b76:	729a      	strb	r2, [r3, #10]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	695b      	ldr	r3, [r3, #20]
 8019b80:	687a      	ldr	r2, [r7, #4]
 8019b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b84:	68b8      	ldr	r0, [r7, #8]
 8019b86:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b8a:	f7f5 fdc3 	bl	800f714 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019b8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019b92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019b94:	1ad3      	subs	r3, r2, r3
 8019b96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019b9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019ba0:	4413      	add	r3, r2
 8019ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	f47f af19 	bne.w	80199e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	e002      	b.n	8019bba <ip4_frag+0x26a>
      goto memerr;
 8019bb4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3748      	adds	r7, #72	; 0x48
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	0801f614 	.word	0x0801f614
 8019bc8:	0801f7f0 	.word	0x0801f7f0
 8019bcc:	0801f65c 	.word	0x0801f65c
 8019bd0:	0801f80c 	.word	0x0801f80c
 8019bd4:	0801f82c 	.word	0x0801f82c
 8019bd8:	080198e9 	.word	0x080198e9

08019bdc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b086      	sub	sp, #24
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
 8019be4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019be6:	230e      	movs	r3, #14
 8019be8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	895b      	ldrh	r3, [r3, #10]
 8019bee:	2b0e      	cmp	r3, #14
 8019bf0:	d96e      	bls.n	8019cd0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	7bdb      	ldrb	r3, [r3, #15]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d106      	bne.n	8019c08 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019c00:	3301      	adds	r3, #1
 8019c02:	b2da      	uxtb	r2, r3
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	685b      	ldr	r3, [r3, #4]
 8019c0c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	7b1a      	ldrb	r2, [r3, #12]
 8019c12:	7b5b      	ldrb	r3, [r3, #13]
 8019c14:	021b      	lsls	r3, r3, #8
 8019c16:	4313      	orrs	r3, r2
 8019c18:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019c1a:	693b      	ldr	r3, [r7, #16]
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	f003 0301 	and.w	r3, r3, #1
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d023      	beq.n	8019c6e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019c26:	693b      	ldr	r3, [r7, #16]
 8019c28:	781b      	ldrb	r3, [r3, #0]
 8019c2a:	2b01      	cmp	r3, #1
 8019c2c:	d10f      	bne.n	8019c4e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019c2e:	693b      	ldr	r3, [r7, #16]
 8019c30:	785b      	ldrb	r3, [r3, #1]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d11b      	bne.n	8019c6e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019c36:	693b      	ldr	r3, [r7, #16]
 8019c38:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019c3a:	2b5e      	cmp	r3, #94	; 0x5e
 8019c3c:	d117      	bne.n	8019c6e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	7b5b      	ldrb	r3, [r3, #13]
 8019c42:	f043 0310 	orr.w	r3, r3, #16
 8019c46:	b2da      	uxtb	r2, r3
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	735a      	strb	r2, [r3, #13]
 8019c4c:	e00f      	b.n	8019c6e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019c4e:	693b      	ldr	r3, [r7, #16]
 8019c50:	2206      	movs	r2, #6
 8019c52:	4928      	ldr	r1, [pc, #160]	; (8019cf4 <ethernet_input+0x118>)
 8019c54:	4618      	mov	r0, r3
 8019c56:	f000 fbbc 	bl	801a3d2 <memcmp>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d106      	bne.n	8019c6e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	7b5b      	ldrb	r3, [r3, #13]
 8019c64:	f043 0308 	orr.w	r3, r3, #8
 8019c68:	b2da      	uxtb	r2, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019c6e:	89fb      	ldrh	r3, [r7, #14]
 8019c70:	2b08      	cmp	r3, #8
 8019c72:	d003      	beq.n	8019c7c <ethernet_input+0xa0>
 8019c74:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019c78:	d014      	beq.n	8019ca4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019c7a:	e032      	b.n	8019ce2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019c7c:	683b      	ldr	r3, [r7, #0]
 8019c7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c82:	f003 0308 	and.w	r3, r3, #8
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d024      	beq.n	8019cd4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019c8a:	8afb      	ldrh	r3, [r7, #22]
 8019c8c:	4619      	mov	r1, r3
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7f5 fcba 	bl	800f608 <pbuf_remove_header>
 8019c94:	4603      	mov	r3, r0
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d11e      	bne.n	8019cd8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019c9a:	6839      	ldr	r1, [r7, #0]
 8019c9c:	6878      	ldr	r0, [r7, #4]
 8019c9e:	f7fe ff03 	bl	8018aa8 <ip4_input>
      break;
 8019ca2:	e013      	b.n	8019ccc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019caa:	f003 0308 	and.w	r3, r3, #8
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d014      	beq.n	8019cdc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019cb2:	8afb      	ldrh	r3, [r7, #22]
 8019cb4:	4619      	mov	r1, r3
 8019cb6:	6878      	ldr	r0, [r7, #4]
 8019cb8:	f7f5 fca6 	bl	800f608 <pbuf_remove_header>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d10e      	bne.n	8019ce0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019cc2:	6839      	ldr	r1, [r7, #0]
 8019cc4:	6878      	ldr	r0, [r7, #4]
 8019cc6:	f7fe f89f 	bl	8017e08 <etharp_input>
      break;
 8019cca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	e00c      	b.n	8019cea <ethernet_input+0x10e>
    goto free_and_return;
 8019cd0:	bf00      	nop
 8019cd2:	e006      	b.n	8019ce2 <ethernet_input+0x106>
        goto free_and_return;
 8019cd4:	bf00      	nop
 8019cd6:	e004      	b.n	8019ce2 <ethernet_input+0x106>
        goto free_and_return;
 8019cd8:	bf00      	nop
 8019cda:	e002      	b.n	8019ce2 <ethernet_input+0x106>
        goto free_and_return;
 8019cdc:	bf00      	nop
 8019cde:	e000      	b.n	8019ce2 <ethernet_input+0x106>
        goto free_and_return;
 8019ce0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019ce2:	6878      	ldr	r0, [r7, #4]
 8019ce4:	f7f5 fd16 	bl	800f714 <pbuf_free>
  return ERR_OK;
 8019ce8:	2300      	movs	r3, #0
}
 8019cea:	4618      	mov	r0, r3
 8019cec:	3718      	adds	r7, #24
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd80      	pop	{r7, pc}
 8019cf2:	bf00      	nop
 8019cf4:	0801fbf0 	.word	0x0801fbf0

08019cf8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b086      	sub	sp, #24
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	60f8      	str	r0, [r7, #12]
 8019d00:	60b9      	str	r1, [r7, #8]
 8019d02:	607a      	str	r2, [r7, #4]
 8019d04:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019d06:	8c3b      	ldrh	r3, [r7, #32]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7f4 f9b9 	bl	800e080 <lwip_htons>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019d12:	210e      	movs	r1, #14
 8019d14:	68b8      	ldr	r0, [r7, #8]
 8019d16:	f7f5 fc67 	bl	800f5e8 <pbuf_add_header>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d125      	bne.n	8019d6c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	685b      	ldr	r3, [r3, #4]
 8019d24:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019d26:	693b      	ldr	r3, [r7, #16]
 8019d28:	8afa      	ldrh	r2, [r7, #22]
 8019d2a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	2206      	movs	r2, #6
 8019d30:	6839      	ldr	r1, [r7, #0]
 8019d32:	4618      	mov	r0, r3
 8019d34:	f000 fc39 	bl	801a5aa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	3306      	adds	r3, #6
 8019d3c:	2206      	movs	r2, #6
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	4618      	mov	r0, r3
 8019d42:	f000 fc32 	bl	801a5aa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019d4c:	2b06      	cmp	r3, #6
 8019d4e:	d006      	beq.n	8019d5e <ethernet_output+0x66>
 8019d50:	4b0a      	ldr	r3, [pc, #40]	; (8019d7c <ethernet_output+0x84>)
 8019d52:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019d56:	490a      	ldr	r1, [pc, #40]	; (8019d80 <ethernet_output+0x88>)
 8019d58:	480a      	ldr	r0, [pc, #40]	; (8019d84 <ethernet_output+0x8c>)
 8019d5a:	f000 fadd 	bl	801a318 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	699b      	ldr	r3, [r3, #24]
 8019d62:	68b9      	ldr	r1, [r7, #8]
 8019d64:	68f8      	ldr	r0, [r7, #12]
 8019d66:	4798      	blx	r3
 8019d68:	4603      	mov	r3, r0
 8019d6a:	e002      	b.n	8019d72 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019d6c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019d6e:	f06f 0301 	mvn.w	r3, #1
}
 8019d72:	4618      	mov	r0, r3
 8019d74:	3718      	adds	r7, #24
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}
 8019d7a:	bf00      	nop
 8019d7c:	0801f83c 	.word	0x0801f83c
 8019d80:	0801f874 	.word	0x0801f874
 8019d84:	0801f8a8 	.word	0x0801f8a8

08019d88 <__assert_func>:
 8019d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d8a:	4614      	mov	r4, r2
 8019d8c:	461a      	mov	r2, r3
 8019d8e:	4b09      	ldr	r3, [pc, #36]	; (8019db4 <__assert_func+0x2c>)
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	4605      	mov	r5, r0
 8019d94:	68d8      	ldr	r0, [r3, #12]
 8019d96:	b14c      	cbz	r4, 8019dac <__assert_func+0x24>
 8019d98:	4b07      	ldr	r3, [pc, #28]	; (8019db8 <__assert_func+0x30>)
 8019d9a:	9100      	str	r1, [sp, #0]
 8019d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019da0:	4906      	ldr	r1, [pc, #24]	; (8019dbc <__assert_func+0x34>)
 8019da2:	462b      	mov	r3, r5
 8019da4:	f000 fa88 	bl	801a2b8 <fiprintf>
 8019da8:	f000 fc0d 	bl	801a5c6 <abort>
 8019dac:	4b04      	ldr	r3, [pc, #16]	; (8019dc0 <__assert_func+0x38>)
 8019dae:	461c      	mov	r4, r3
 8019db0:	e7f3      	b.n	8019d9a <__assert_func+0x12>
 8019db2:	bf00      	nop
 8019db4:	200000a0 	.word	0x200000a0
 8019db8:	0801fbfe 	.word	0x0801fbfe
 8019dbc:	0801fc0b 	.word	0x0801fc0b
 8019dc0:	0801fc39 	.word	0x0801fc39

08019dc4 <atoi>:
 8019dc4:	220a      	movs	r2, #10
 8019dc6:	2100      	movs	r1, #0
 8019dc8:	f000 b9c8 	b.w	801a15c <strtol>

08019dcc <calloc>:
 8019dcc:	4b02      	ldr	r3, [pc, #8]	; (8019dd8 <calloc+0xc>)
 8019dce:	460a      	mov	r2, r1
 8019dd0:	4601      	mov	r1, r0
 8019dd2:	6818      	ldr	r0, [r3, #0]
 8019dd4:	f000 b802 	b.w	8019ddc <_calloc_r>
 8019dd8:	200000a0 	.word	0x200000a0

08019ddc <_calloc_r>:
 8019ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dde:	fba1 2402 	umull	r2, r4, r1, r2
 8019de2:	b94c      	cbnz	r4, 8019df8 <_calloc_r+0x1c>
 8019de4:	4611      	mov	r1, r2
 8019de6:	9201      	str	r2, [sp, #4]
 8019de8:	f000 f83e 	bl	8019e68 <_malloc_r>
 8019dec:	9a01      	ldr	r2, [sp, #4]
 8019dee:	4605      	mov	r5, r0
 8019df0:	b930      	cbnz	r0, 8019e00 <_calloc_r+0x24>
 8019df2:	4628      	mov	r0, r5
 8019df4:	b003      	add	sp, #12
 8019df6:	bd30      	pop	{r4, r5, pc}
 8019df8:	220c      	movs	r2, #12
 8019dfa:	6002      	str	r2, [r0, #0]
 8019dfc:	2500      	movs	r5, #0
 8019dfe:	e7f8      	b.n	8019df2 <_calloc_r+0x16>
 8019e00:	4621      	mov	r1, r4
 8019e02:	f000 fb10 	bl	801a426 <memset>
 8019e06:	e7f4      	b.n	8019df2 <_calloc_r+0x16>

08019e08 <malloc>:
 8019e08:	4b02      	ldr	r3, [pc, #8]	; (8019e14 <malloc+0xc>)
 8019e0a:	4601      	mov	r1, r0
 8019e0c:	6818      	ldr	r0, [r3, #0]
 8019e0e:	f000 b82b 	b.w	8019e68 <_malloc_r>
 8019e12:	bf00      	nop
 8019e14:	200000a0 	.word	0x200000a0

08019e18 <free>:
 8019e18:	4b02      	ldr	r3, [pc, #8]	; (8019e24 <free+0xc>)
 8019e1a:	4601      	mov	r1, r0
 8019e1c:	6818      	ldr	r0, [r3, #0]
 8019e1e:	f000 bbd9 	b.w	801a5d4 <_free_r>
 8019e22:	bf00      	nop
 8019e24:	200000a0 	.word	0x200000a0

08019e28 <sbrk_aligned>:
 8019e28:	b570      	push	{r4, r5, r6, lr}
 8019e2a:	4e0e      	ldr	r6, [pc, #56]	; (8019e64 <sbrk_aligned+0x3c>)
 8019e2c:	460c      	mov	r4, r1
 8019e2e:	6831      	ldr	r1, [r6, #0]
 8019e30:	4605      	mov	r5, r0
 8019e32:	b911      	cbnz	r1, 8019e3a <sbrk_aligned+0x12>
 8019e34:	f000 fb6a 	bl	801a50c <_sbrk_r>
 8019e38:	6030      	str	r0, [r6, #0]
 8019e3a:	4621      	mov	r1, r4
 8019e3c:	4628      	mov	r0, r5
 8019e3e:	f000 fb65 	bl	801a50c <_sbrk_r>
 8019e42:	1c43      	adds	r3, r0, #1
 8019e44:	d00a      	beq.n	8019e5c <sbrk_aligned+0x34>
 8019e46:	1cc4      	adds	r4, r0, #3
 8019e48:	f024 0403 	bic.w	r4, r4, #3
 8019e4c:	42a0      	cmp	r0, r4
 8019e4e:	d007      	beq.n	8019e60 <sbrk_aligned+0x38>
 8019e50:	1a21      	subs	r1, r4, r0
 8019e52:	4628      	mov	r0, r5
 8019e54:	f000 fb5a 	bl	801a50c <_sbrk_r>
 8019e58:	3001      	adds	r0, #1
 8019e5a:	d101      	bne.n	8019e60 <sbrk_aligned+0x38>
 8019e5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019e60:	4620      	mov	r0, r4
 8019e62:	bd70      	pop	{r4, r5, r6, pc}
 8019e64:	2000b610 	.word	0x2000b610

08019e68 <_malloc_r>:
 8019e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e6c:	1ccd      	adds	r5, r1, #3
 8019e6e:	f025 0503 	bic.w	r5, r5, #3
 8019e72:	3508      	adds	r5, #8
 8019e74:	2d0c      	cmp	r5, #12
 8019e76:	bf38      	it	cc
 8019e78:	250c      	movcc	r5, #12
 8019e7a:	2d00      	cmp	r5, #0
 8019e7c:	4607      	mov	r7, r0
 8019e7e:	db01      	blt.n	8019e84 <_malloc_r+0x1c>
 8019e80:	42a9      	cmp	r1, r5
 8019e82:	d905      	bls.n	8019e90 <_malloc_r+0x28>
 8019e84:	230c      	movs	r3, #12
 8019e86:	603b      	str	r3, [r7, #0]
 8019e88:	2600      	movs	r6, #0
 8019e8a:	4630      	mov	r0, r6
 8019e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019f64 <_malloc_r+0xfc>
 8019e94:	f000 f868 	bl	8019f68 <__malloc_lock>
 8019e98:	f8d8 3000 	ldr.w	r3, [r8]
 8019e9c:	461c      	mov	r4, r3
 8019e9e:	bb5c      	cbnz	r4, 8019ef8 <_malloc_r+0x90>
 8019ea0:	4629      	mov	r1, r5
 8019ea2:	4638      	mov	r0, r7
 8019ea4:	f7ff ffc0 	bl	8019e28 <sbrk_aligned>
 8019ea8:	1c43      	adds	r3, r0, #1
 8019eaa:	4604      	mov	r4, r0
 8019eac:	d155      	bne.n	8019f5a <_malloc_r+0xf2>
 8019eae:	f8d8 4000 	ldr.w	r4, [r8]
 8019eb2:	4626      	mov	r6, r4
 8019eb4:	2e00      	cmp	r6, #0
 8019eb6:	d145      	bne.n	8019f44 <_malloc_r+0xdc>
 8019eb8:	2c00      	cmp	r4, #0
 8019eba:	d048      	beq.n	8019f4e <_malloc_r+0xe6>
 8019ebc:	6823      	ldr	r3, [r4, #0]
 8019ebe:	4631      	mov	r1, r6
 8019ec0:	4638      	mov	r0, r7
 8019ec2:	eb04 0903 	add.w	r9, r4, r3
 8019ec6:	f000 fb21 	bl	801a50c <_sbrk_r>
 8019eca:	4581      	cmp	r9, r0
 8019ecc:	d13f      	bne.n	8019f4e <_malloc_r+0xe6>
 8019ece:	6821      	ldr	r1, [r4, #0]
 8019ed0:	1a6d      	subs	r5, r5, r1
 8019ed2:	4629      	mov	r1, r5
 8019ed4:	4638      	mov	r0, r7
 8019ed6:	f7ff ffa7 	bl	8019e28 <sbrk_aligned>
 8019eda:	3001      	adds	r0, #1
 8019edc:	d037      	beq.n	8019f4e <_malloc_r+0xe6>
 8019ede:	6823      	ldr	r3, [r4, #0]
 8019ee0:	442b      	add	r3, r5
 8019ee2:	6023      	str	r3, [r4, #0]
 8019ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d038      	beq.n	8019f5e <_malloc_r+0xf6>
 8019eec:	685a      	ldr	r2, [r3, #4]
 8019eee:	42a2      	cmp	r2, r4
 8019ef0:	d12b      	bne.n	8019f4a <_malloc_r+0xe2>
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	605a      	str	r2, [r3, #4]
 8019ef6:	e00f      	b.n	8019f18 <_malloc_r+0xb0>
 8019ef8:	6822      	ldr	r2, [r4, #0]
 8019efa:	1b52      	subs	r2, r2, r5
 8019efc:	d41f      	bmi.n	8019f3e <_malloc_r+0xd6>
 8019efe:	2a0b      	cmp	r2, #11
 8019f00:	d917      	bls.n	8019f32 <_malloc_r+0xca>
 8019f02:	1961      	adds	r1, r4, r5
 8019f04:	42a3      	cmp	r3, r4
 8019f06:	6025      	str	r5, [r4, #0]
 8019f08:	bf18      	it	ne
 8019f0a:	6059      	strne	r1, [r3, #4]
 8019f0c:	6863      	ldr	r3, [r4, #4]
 8019f0e:	bf08      	it	eq
 8019f10:	f8c8 1000 	streq.w	r1, [r8]
 8019f14:	5162      	str	r2, [r4, r5]
 8019f16:	604b      	str	r3, [r1, #4]
 8019f18:	4638      	mov	r0, r7
 8019f1a:	f104 060b 	add.w	r6, r4, #11
 8019f1e:	f000 f829 	bl	8019f74 <__malloc_unlock>
 8019f22:	f026 0607 	bic.w	r6, r6, #7
 8019f26:	1d23      	adds	r3, r4, #4
 8019f28:	1af2      	subs	r2, r6, r3
 8019f2a:	d0ae      	beq.n	8019e8a <_malloc_r+0x22>
 8019f2c:	1b9b      	subs	r3, r3, r6
 8019f2e:	50a3      	str	r3, [r4, r2]
 8019f30:	e7ab      	b.n	8019e8a <_malloc_r+0x22>
 8019f32:	42a3      	cmp	r3, r4
 8019f34:	6862      	ldr	r2, [r4, #4]
 8019f36:	d1dd      	bne.n	8019ef4 <_malloc_r+0x8c>
 8019f38:	f8c8 2000 	str.w	r2, [r8]
 8019f3c:	e7ec      	b.n	8019f18 <_malloc_r+0xb0>
 8019f3e:	4623      	mov	r3, r4
 8019f40:	6864      	ldr	r4, [r4, #4]
 8019f42:	e7ac      	b.n	8019e9e <_malloc_r+0x36>
 8019f44:	4634      	mov	r4, r6
 8019f46:	6876      	ldr	r6, [r6, #4]
 8019f48:	e7b4      	b.n	8019eb4 <_malloc_r+0x4c>
 8019f4a:	4613      	mov	r3, r2
 8019f4c:	e7cc      	b.n	8019ee8 <_malloc_r+0x80>
 8019f4e:	230c      	movs	r3, #12
 8019f50:	603b      	str	r3, [r7, #0]
 8019f52:	4638      	mov	r0, r7
 8019f54:	f000 f80e 	bl	8019f74 <__malloc_unlock>
 8019f58:	e797      	b.n	8019e8a <_malloc_r+0x22>
 8019f5a:	6025      	str	r5, [r4, #0]
 8019f5c:	e7dc      	b.n	8019f18 <_malloc_r+0xb0>
 8019f5e:	605b      	str	r3, [r3, #4]
 8019f60:	deff      	udf	#255	; 0xff
 8019f62:	bf00      	nop
 8019f64:	2000b60c 	.word	0x2000b60c

08019f68 <__malloc_lock>:
 8019f68:	4801      	ldr	r0, [pc, #4]	; (8019f70 <__malloc_lock+0x8>)
 8019f6a:	f000 bb1c 	b.w	801a5a6 <__retarget_lock_acquire_recursive>
 8019f6e:	bf00      	nop
 8019f70:	2000b754 	.word	0x2000b754

08019f74 <__malloc_unlock>:
 8019f74:	4801      	ldr	r0, [pc, #4]	; (8019f7c <__malloc_unlock+0x8>)
 8019f76:	f000 bb17 	b.w	801a5a8 <__retarget_lock_release_recursive>
 8019f7a:	bf00      	nop
 8019f7c:	2000b754 	.word	0x2000b754

08019f80 <srand>:
 8019f80:	b538      	push	{r3, r4, r5, lr}
 8019f82:	4b10      	ldr	r3, [pc, #64]	; (8019fc4 <srand+0x44>)
 8019f84:	681d      	ldr	r5, [r3, #0]
 8019f86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019f88:	4604      	mov	r4, r0
 8019f8a:	b9b3      	cbnz	r3, 8019fba <srand+0x3a>
 8019f8c:	2018      	movs	r0, #24
 8019f8e:	f7ff ff3b 	bl	8019e08 <malloc>
 8019f92:	4602      	mov	r2, r0
 8019f94:	6328      	str	r0, [r5, #48]	; 0x30
 8019f96:	b920      	cbnz	r0, 8019fa2 <srand+0x22>
 8019f98:	4b0b      	ldr	r3, [pc, #44]	; (8019fc8 <srand+0x48>)
 8019f9a:	480c      	ldr	r0, [pc, #48]	; (8019fcc <srand+0x4c>)
 8019f9c:	2146      	movs	r1, #70	; 0x46
 8019f9e:	f7ff fef3 	bl	8019d88 <__assert_func>
 8019fa2:	490b      	ldr	r1, [pc, #44]	; (8019fd0 <srand+0x50>)
 8019fa4:	4b0b      	ldr	r3, [pc, #44]	; (8019fd4 <srand+0x54>)
 8019fa6:	e9c0 1300 	strd	r1, r3, [r0]
 8019faa:	4b0b      	ldr	r3, [pc, #44]	; (8019fd8 <srand+0x58>)
 8019fac:	6083      	str	r3, [r0, #8]
 8019fae:	230b      	movs	r3, #11
 8019fb0:	8183      	strh	r3, [r0, #12]
 8019fb2:	2100      	movs	r1, #0
 8019fb4:	2001      	movs	r0, #1
 8019fb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019fba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	611c      	str	r4, [r3, #16]
 8019fc0:	615a      	str	r2, [r3, #20]
 8019fc2:	bd38      	pop	{r3, r4, r5, pc}
 8019fc4:	200000a0 	.word	0x200000a0
 8019fc8:	0801fc3a 	.word	0x0801fc3a
 8019fcc:	0801fc51 	.word	0x0801fc51
 8019fd0:	abcd330e 	.word	0xabcd330e
 8019fd4:	e66d1234 	.word	0xe66d1234
 8019fd8:	0005deec 	.word	0x0005deec

08019fdc <rand>:
 8019fdc:	4b16      	ldr	r3, [pc, #88]	; (801a038 <rand+0x5c>)
 8019fde:	b510      	push	{r4, lr}
 8019fe0:	681c      	ldr	r4, [r3, #0]
 8019fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019fe4:	b9b3      	cbnz	r3, 801a014 <rand+0x38>
 8019fe6:	2018      	movs	r0, #24
 8019fe8:	f7ff ff0e 	bl	8019e08 <malloc>
 8019fec:	4602      	mov	r2, r0
 8019fee:	6320      	str	r0, [r4, #48]	; 0x30
 8019ff0:	b920      	cbnz	r0, 8019ffc <rand+0x20>
 8019ff2:	4b12      	ldr	r3, [pc, #72]	; (801a03c <rand+0x60>)
 8019ff4:	4812      	ldr	r0, [pc, #72]	; (801a040 <rand+0x64>)
 8019ff6:	2152      	movs	r1, #82	; 0x52
 8019ff8:	f7ff fec6 	bl	8019d88 <__assert_func>
 8019ffc:	4911      	ldr	r1, [pc, #68]	; (801a044 <rand+0x68>)
 8019ffe:	4b12      	ldr	r3, [pc, #72]	; (801a048 <rand+0x6c>)
 801a000:	e9c0 1300 	strd	r1, r3, [r0]
 801a004:	4b11      	ldr	r3, [pc, #68]	; (801a04c <rand+0x70>)
 801a006:	6083      	str	r3, [r0, #8]
 801a008:	230b      	movs	r3, #11
 801a00a:	8183      	strh	r3, [r0, #12]
 801a00c:	2100      	movs	r1, #0
 801a00e:	2001      	movs	r0, #1
 801a010:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a014:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a016:	480e      	ldr	r0, [pc, #56]	; (801a050 <rand+0x74>)
 801a018:	690b      	ldr	r3, [r1, #16]
 801a01a:	694c      	ldr	r4, [r1, #20]
 801a01c:	4a0d      	ldr	r2, [pc, #52]	; (801a054 <rand+0x78>)
 801a01e:	4358      	muls	r0, r3
 801a020:	fb02 0004 	mla	r0, r2, r4, r0
 801a024:	fba3 3202 	umull	r3, r2, r3, r2
 801a028:	3301      	adds	r3, #1
 801a02a:	eb40 0002 	adc.w	r0, r0, r2
 801a02e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a032:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a036:	bd10      	pop	{r4, pc}
 801a038:	200000a0 	.word	0x200000a0
 801a03c:	0801fc3a 	.word	0x0801fc3a
 801a040:	0801fc51 	.word	0x0801fc51
 801a044:	abcd330e 	.word	0xabcd330e
 801a048:	e66d1234 	.word	0xe66d1234
 801a04c:	0005deec 	.word	0x0005deec
 801a050:	5851f42d 	.word	0x5851f42d
 801a054:	4c957f2d 	.word	0x4c957f2d

0801a058 <_strtol_l.constprop.0>:
 801a058:	2b01      	cmp	r3, #1
 801a05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a05e:	d001      	beq.n	801a064 <_strtol_l.constprop.0+0xc>
 801a060:	2b24      	cmp	r3, #36	; 0x24
 801a062:	d906      	bls.n	801a072 <_strtol_l.constprop.0+0x1a>
 801a064:	f000 fa74 	bl	801a550 <__errno>
 801a068:	2316      	movs	r3, #22
 801a06a:	6003      	str	r3, [r0, #0]
 801a06c:	2000      	movs	r0, #0
 801a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a158 <_strtol_l.constprop.0+0x100>
 801a076:	460d      	mov	r5, r1
 801a078:	462e      	mov	r6, r5
 801a07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a07e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a082:	f017 0708 	ands.w	r7, r7, #8
 801a086:	d1f7      	bne.n	801a078 <_strtol_l.constprop.0+0x20>
 801a088:	2c2d      	cmp	r4, #45	; 0x2d
 801a08a:	d132      	bne.n	801a0f2 <_strtol_l.constprop.0+0x9a>
 801a08c:	782c      	ldrb	r4, [r5, #0]
 801a08e:	2701      	movs	r7, #1
 801a090:	1cb5      	adds	r5, r6, #2
 801a092:	2b00      	cmp	r3, #0
 801a094:	d05b      	beq.n	801a14e <_strtol_l.constprop.0+0xf6>
 801a096:	2b10      	cmp	r3, #16
 801a098:	d109      	bne.n	801a0ae <_strtol_l.constprop.0+0x56>
 801a09a:	2c30      	cmp	r4, #48	; 0x30
 801a09c:	d107      	bne.n	801a0ae <_strtol_l.constprop.0+0x56>
 801a09e:	782c      	ldrb	r4, [r5, #0]
 801a0a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a0a4:	2c58      	cmp	r4, #88	; 0x58
 801a0a6:	d14d      	bne.n	801a144 <_strtol_l.constprop.0+0xec>
 801a0a8:	786c      	ldrb	r4, [r5, #1]
 801a0aa:	2310      	movs	r3, #16
 801a0ac:	3502      	adds	r5, #2
 801a0ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a0b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801a0b6:	f04f 0e00 	mov.w	lr, #0
 801a0ba:	fbb8 f9f3 	udiv	r9, r8, r3
 801a0be:	4676      	mov	r6, lr
 801a0c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801a0c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a0c8:	f1bc 0f09 	cmp.w	ip, #9
 801a0cc:	d816      	bhi.n	801a0fc <_strtol_l.constprop.0+0xa4>
 801a0ce:	4664      	mov	r4, ip
 801a0d0:	42a3      	cmp	r3, r4
 801a0d2:	dd24      	ble.n	801a11e <_strtol_l.constprop.0+0xc6>
 801a0d4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801a0d8:	d008      	beq.n	801a0ec <_strtol_l.constprop.0+0x94>
 801a0da:	45b1      	cmp	r9, r6
 801a0dc:	d31c      	bcc.n	801a118 <_strtol_l.constprop.0+0xc0>
 801a0de:	d101      	bne.n	801a0e4 <_strtol_l.constprop.0+0x8c>
 801a0e0:	45a2      	cmp	sl, r4
 801a0e2:	db19      	blt.n	801a118 <_strtol_l.constprop.0+0xc0>
 801a0e4:	fb06 4603 	mla	r6, r6, r3, r4
 801a0e8:	f04f 0e01 	mov.w	lr, #1
 801a0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a0f0:	e7e8      	b.n	801a0c4 <_strtol_l.constprop.0+0x6c>
 801a0f2:	2c2b      	cmp	r4, #43	; 0x2b
 801a0f4:	bf04      	itt	eq
 801a0f6:	782c      	ldrbeq	r4, [r5, #0]
 801a0f8:	1cb5      	addeq	r5, r6, #2
 801a0fa:	e7ca      	b.n	801a092 <_strtol_l.constprop.0+0x3a>
 801a0fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a100:	f1bc 0f19 	cmp.w	ip, #25
 801a104:	d801      	bhi.n	801a10a <_strtol_l.constprop.0+0xb2>
 801a106:	3c37      	subs	r4, #55	; 0x37
 801a108:	e7e2      	b.n	801a0d0 <_strtol_l.constprop.0+0x78>
 801a10a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a10e:	f1bc 0f19 	cmp.w	ip, #25
 801a112:	d804      	bhi.n	801a11e <_strtol_l.constprop.0+0xc6>
 801a114:	3c57      	subs	r4, #87	; 0x57
 801a116:	e7db      	b.n	801a0d0 <_strtol_l.constprop.0+0x78>
 801a118:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801a11c:	e7e6      	b.n	801a0ec <_strtol_l.constprop.0+0x94>
 801a11e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801a122:	d105      	bne.n	801a130 <_strtol_l.constprop.0+0xd8>
 801a124:	2322      	movs	r3, #34	; 0x22
 801a126:	6003      	str	r3, [r0, #0]
 801a128:	4646      	mov	r6, r8
 801a12a:	b942      	cbnz	r2, 801a13e <_strtol_l.constprop.0+0xe6>
 801a12c:	4630      	mov	r0, r6
 801a12e:	e79e      	b.n	801a06e <_strtol_l.constprop.0+0x16>
 801a130:	b107      	cbz	r7, 801a134 <_strtol_l.constprop.0+0xdc>
 801a132:	4276      	negs	r6, r6
 801a134:	2a00      	cmp	r2, #0
 801a136:	d0f9      	beq.n	801a12c <_strtol_l.constprop.0+0xd4>
 801a138:	f1be 0f00 	cmp.w	lr, #0
 801a13c:	d000      	beq.n	801a140 <_strtol_l.constprop.0+0xe8>
 801a13e:	1e69      	subs	r1, r5, #1
 801a140:	6011      	str	r1, [r2, #0]
 801a142:	e7f3      	b.n	801a12c <_strtol_l.constprop.0+0xd4>
 801a144:	2430      	movs	r4, #48	; 0x30
 801a146:	2b00      	cmp	r3, #0
 801a148:	d1b1      	bne.n	801a0ae <_strtol_l.constprop.0+0x56>
 801a14a:	2308      	movs	r3, #8
 801a14c:	e7af      	b.n	801a0ae <_strtol_l.constprop.0+0x56>
 801a14e:	2c30      	cmp	r4, #48	; 0x30
 801a150:	d0a5      	beq.n	801a09e <_strtol_l.constprop.0+0x46>
 801a152:	230a      	movs	r3, #10
 801a154:	e7ab      	b.n	801a0ae <_strtol_l.constprop.0+0x56>
 801a156:	bf00      	nop
 801a158:	0801fcaa 	.word	0x0801fcaa

0801a15c <strtol>:
 801a15c:	4613      	mov	r3, r2
 801a15e:	460a      	mov	r2, r1
 801a160:	4601      	mov	r1, r0
 801a162:	4802      	ldr	r0, [pc, #8]	; (801a16c <strtol+0x10>)
 801a164:	6800      	ldr	r0, [r0, #0]
 801a166:	f7ff bf77 	b.w	801a058 <_strtol_l.constprop.0>
 801a16a:	bf00      	nop
 801a16c:	200000a0 	.word	0x200000a0

0801a170 <std>:
 801a170:	2300      	movs	r3, #0
 801a172:	b510      	push	{r4, lr}
 801a174:	4604      	mov	r4, r0
 801a176:	e9c0 3300 	strd	r3, r3, [r0]
 801a17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a17e:	6083      	str	r3, [r0, #8]
 801a180:	8181      	strh	r1, [r0, #12]
 801a182:	6643      	str	r3, [r0, #100]	; 0x64
 801a184:	81c2      	strh	r2, [r0, #14]
 801a186:	6183      	str	r3, [r0, #24]
 801a188:	4619      	mov	r1, r3
 801a18a:	2208      	movs	r2, #8
 801a18c:	305c      	adds	r0, #92	; 0x5c
 801a18e:	f000 f94a 	bl	801a426 <memset>
 801a192:	4b0d      	ldr	r3, [pc, #52]	; (801a1c8 <std+0x58>)
 801a194:	6263      	str	r3, [r4, #36]	; 0x24
 801a196:	4b0d      	ldr	r3, [pc, #52]	; (801a1cc <std+0x5c>)
 801a198:	62a3      	str	r3, [r4, #40]	; 0x28
 801a19a:	4b0d      	ldr	r3, [pc, #52]	; (801a1d0 <std+0x60>)
 801a19c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a19e:	4b0d      	ldr	r3, [pc, #52]	; (801a1d4 <std+0x64>)
 801a1a0:	6323      	str	r3, [r4, #48]	; 0x30
 801a1a2:	4b0d      	ldr	r3, [pc, #52]	; (801a1d8 <std+0x68>)
 801a1a4:	6224      	str	r4, [r4, #32]
 801a1a6:	429c      	cmp	r4, r3
 801a1a8:	d006      	beq.n	801a1b8 <std+0x48>
 801a1aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a1ae:	4294      	cmp	r4, r2
 801a1b0:	d002      	beq.n	801a1b8 <std+0x48>
 801a1b2:	33d0      	adds	r3, #208	; 0xd0
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	d105      	bne.n	801a1c4 <std+0x54>
 801a1b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1c0:	f000 b9f0 	b.w	801a5a4 <__retarget_lock_init_recursive>
 801a1c4:	bd10      	pop	{r4, pc}
 801a1c6:	bf00      	nop
 801a1c8:	0801a34d 	.word	0x0801a34d
 801a1cc:	0801a36f 	.word	0x0801a36f
 801a1d0:	0801a3a7 	.word	0x0801a3a7
 801a1d4:	0801a3cb 	.word	0x0801a3cb
 801a1d8:	2000b614 	.word	0x2000b614

0801a1dc <stdio_exit_handler>:
 801a1dc:	4a02      	ldr	r2, [pc, #8]	; (801a1e8 <stdio_exit_handler+0xc>)
 801a1de:	4903      	ldr	r1, [pc, #12]	; (801a1ec <stdio_exit_handler+0x10>)
 801a1e0:	4803      	ldr	r0, [pc, #12]	; (801a1f0 <stdio_exit_handler+0x14>)
 801a1e2:	f000 b87b 	b.w	801a2dc <_fwalk_sglue>
 801a1e6:	bf00      	nop
 801a1e8:	20000048 	.word	0x20000048
 801a1ec:	0801ad21 	.word	0x0801ad21
 801a1f0:	20000054 	.word	0x20000054

0801a1f4 <cleanup_stdio>:
 801a1f4:	6841      	ldr	r1, [r0, #4]
 801a1f6:	4b0c      	ldr	r3, [pc, #48]	; (801a228 <cleanup_stdio+0x34>)
 801a1f8:	4299      	cmp	r1, r3
 801a1fa:	b510      	push	{r4, lr}
 801a1fc:	4604      	mov	r4, r0
 801a1fe:	d001      	beq.n	801a204 <cleanup_stdio+0x10>
 801a200:	f000 fd8e 	bl	801ad20 <_fflush_r>
 801a204:	68a1      	ldr	r1, [r4, #8]
 801a206:	4b09      	ldr	r3, [pc, #36]	; (801a22c <cleanup_stdio+0x38>)
 801a208:	4299      	cmp	r1, r3
 801a20a:	d002      	beq.n	801a212 <cleanup_stdio+0x1e>
 801a20c:	4620      	mov	r0, r4
 801a20e:	f000 fd87 	bl	801ad20 <_fflush_r>
 801a212:	68e1      	ldr	r1, [r4, #12]
 801a214:	4b06      	ldr	r3, [pc, #24]	; (801a230 <cleanup_stdio+0x3c>)
 801a216:	4299      	cmp	r1, r3
 801a218:	d004      	beq.n	801a224 <cleanup_stdio+0x30>
 801a21a:	4620      	mov	r0, r4
 801a21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a220:	f000 bd7e 	b.w	801ad20 <_fflush_r>
 801a224:	bd10      	pop	{r4, pc}
 801a226:	bf00      	nop
 801a228:	2000b614 	.word	0x2000b614
 801a22c:	2000b67c 	.word	0x2000b67c
 801a230:	2000b6e4 	.word	0x2000b6e4

0801a234 <global_stdio_init.part.0>:
 801a234:	b510      	push	{r4, lr}
 801a236:	4b0b      	ldr	r3, [pc, #44]	; (801a264 <global_stdio_init.part.0+0x30>)
 801a238:	4c0b      	ldr	r4, [pc, #44]	; (801a268 <global_stdio_init.part.0+0x34>)
 801a23a:	4a0c      	ldr	r2, [pc, #48]	; (801a26c <global_stdio_init.part.0+0x38>)
 801a23c:	601a      	str	r2, [r3, #0]
 801a23e:	4620      	mov	r0, r4
 801a240:	2200      	movs	r2, #0
 801a242:	2104      	movs	r1, #4
 801a244:	f7ff ff94 	bl	801a170 <std>
 801a248:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a24c:	2201      	movs	r2, #1
 801a24e:	2109      	movs	r1, #9
 801a250:	f7ff ff8e 	bl	801a170 <std>
 801a254:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a258:	2202      	movs	r2, #2
 801a25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a25e:	2112      	movs	r1, #18
 801a260:	f7ff bf86 	b.w	801a170 <std>
 801a264:	2000b74c 	.word	0x2000b74c
 801a268:	2000b614 	.word	0x2000b614
 801a26c:	0801a1dd 	.word	0x0801a1dd

0801a270 <__sfp_lock_acquire>:
 801a270:	4801      	ldr	r0, [pc, #4]	; (801a278 <__sfp_lock_acquire+0x8>)
 801a272:	f000 b998 	b.w	801a5a6 <__retarget_lock_acquire_recursive>
 801a276:	bf00      	nop
 801a278:	2000b755 	.word	0x2000b755

0801a27c <__sfp_lock_release>:
 801a27c:	4801      	ldr	r0, [pc, #4]	; (801a284 <__sfp_lock_release+0x8>)
 801a27e:	f000 b993 	b.w	801a5a8 <__retarget_lock_release_recursive>
 801a282:	bf00      	nop
 801a284:	2000b755 	.word	0x2000b755

0801a288 <__sinit>:
 801a288:	b510      	push	{r4, lr}
 801a28a:	4604      	mov	r4, r0
 801a28c:	f7ff fff0 	bl	801a270 <__sfp_lock_acquire>
 801a290:	6a23      	ldr	r3, [r4, #32]
 801a292:	b11b      	cbz	r3, 801a29c <__sinit+0x14>
 801a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a298:	f7ff bff0 	b.w	801a27c <__sfp_lock_release>
 801a29c:	4b04      	ldr	r3, [pc, #16]	; (801a2b0 <__sinit+0x28>)
 801a29e:	6223      	str	r3, [r4, #32]
 801a2a0:	4b04      	ldr	r3, [pc, #16]	; (801a2b4 <__sinit+0x2c>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d1f5      	bne.n	801a294 <__sinit+0xc>
 801a2a8:	f7ff ffc4 	bl	801a234 <global_stdio_init.part.0>
 801a2ac:	e7f2      	b.n	801a294 <__sinit+0xc>
 801a2ae:	bf00      	nop
 801a2b0:	0801a1f5 	.word	0x0801a1f5
 801a2b4:	2000b74c 	.word	0x2000b74c

0801a2b8 <fiprintf>:
 801a2b8:	b40e      	push	{r1, r2, r3}
 801a2ba:	b503      	push	{r0, r1, lr}
 801a2bc:	4601      	mov	r1, r0
 801a2be:	ab03      	add	r3, sp, #12
 801a2c0:	4805      	ldr	r0, [pc, #20]	; (801a2d8 <fiprintf+0x20>)
 801a2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2c6:	6800      	ldr	r0, [r0, #0]
 801a2c8:	9301      	str	r3, [sp, #4]
 801a2ca:	f000 f9f9 	bl	801a6c0 <_vfiprintf_r>
 801a2ce:	b002      	add	sp, #8
 801a2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2d4:	b003      	add	sp, #12
 801a2d6:	4770      	bx	lr
 801a2d8:	200000a0 	.word	0x200000a0

0801a2dc <_fwalk_sglue>:
 801a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2e0:	4607      	mov	r7, r0
 801a2e2:	4688      	mov	r8, r1
 801a2e4:	4614      	mov	r4, r2
 801a2e6:	2600      	movs	r6, #0
 801a2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a2ec:	f1b9 0901 	subs.w	r9, r9, #1
 801a2f0:	d505      	bpl.n	801a2fe <_fwalk_sglue+0x22>
 801a2f2:	6824      	ldr	r4, [r4, #0]
 801a2f4:	2c00      	cmp	r4, #0
 801a2f6:	d1f7      	bne.n	801a2e8 <_fwalk_sglue+0xc>
 801a2f8:	4630      	mov	r0, r6
 801a2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	2b01      	cmp	r3, #1
 801a302:	d907      	bls.n	801a314 <_fwalk_sglue+0x38>
 801a304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a308:	3301      	adds	r3, #1
 801a30a:	d003      	beq.n	801a314 <_fwalk_sglue+0x38>
 801a30c:	4629      	mov	r1, r5
 801a30e:	4638      	mov	r0, r7
 801a310:	47c0      	blx	r8
 801a312:	4306      	orrs	r6, r0
 801a314:	3568      	adds	r5, #104	; 0x68
 801a316:	e7e9      	b.n	801a2ec <_fwalk_sglue+0x10>

0801a318 <iprintf>:
 801a318:	b40f      	push	{r0, r1, r2, r3}
 801a31a:	b507      	push	{r0, r1, r2, lr}
 801a31c:	4906      	ldr	r1, [pc, #24]	; (801a338 <iprintf+0x20>)
 801a31e:	ab04      	add	r3, sp, #16
 801a320:	6808      	ldr	r0, [r1, #0]
 801a322:	f853 2b04 	ldr.w	r2, [r3], #4
 801a326:	6881      	ldr	r1, [r0, #8]
 801a328:	9301      	str	r3, [sp, #4]
 801a32a:	f000 f9c9 	bl	801a6c0 <_vfiprintf_r>
 801a32e:	b003      	add	sp, #12
 801a330:	f85d eb04 	ldr.w	lr, [sp], #4
 801a334:	b004      	add	sp, #16
 801a336:	4770      	bx	lr
 801a338:	200000a0 	.word	0x200000a0

0801a33c <putchar>:
 801a33c:	4b02      	ldr	r3, [pc, #8]	; (801a348 <putchar+0xc>)
 801a33e:	4601      	mov	r1, r0
 801a340:	6818      	ldr	r0, [r3, #0]
 801a342:	6882      	ldr	r2, [r0, #8]
 801a344:	f000 bd14 	b.w	801ad70 <_putc_r>
 801a348:	200000a0 	.word	0x200000a0

0801a34c <__sread>:
 801a34c:	b510      	push	{r4, lr}
 801a34e:	460c      	mov	r4, r1
 801a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a354:	f000 f8c8 	bl	801a4e8 <_read_r>
 801a358:	2800      	cmp	r0, #0
 801a35a:	bfab      	itete	ge
 801a35c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a35e:	89a3      	ldrhlt	r3, [r4, #12]
 801a360:	181b      	addge	r3, r3, r0
 801a362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a366:	bfac      	ite	ge
 801a368:	6563      	strge	r3, [r4, #84]	; 0x54
 801a36a:	81a3      	strhlt	r3, [r4, #12]
 801a36c:	bd10      	pop	{r4, pc}

0801a36e <__swrite>:
 801a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a372:	461f      	mov	r7, r3
 801a374:	898b      	ldrh	r3, [r1, #12]
 801a376:	05db      	lsls	r3, r3, #23
 801a378:	4605      	mov	r5, r0
 801a37a:	460c      	mov	r4, r1
 801a37c:	4616      	mov	r6, r2
 801a37e:	d505      	bpl.n	801a38c <__swrite+0x1e>
 801a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a384:	2302      	movs	r3, #2
 801a386:	2200      	movs	r2, #0
 801a388:	f000 f89c 	bl	801a4c4 <_lseek_r>
 801a38c:	89a3      	ldrh	r3, [r4, #12]
 801a38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a396:	81a3      	strh	r3, [r4, #12]
 801a398:	4632      	mov	r2, r6
 801a39a:	463b      	mov	r3, r7
 801a39c:	4628      	mov	r0, r5
 801a39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3a2:	f000 b8c3 	b.w	801a52c <_write_r>

0801a3a6 <__sseek>:
 801a3a6:	b510      	push	{r4, lr}
 801a3a8:	460c      	mov	r4, r1
 801a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ae:	f000 f889 	bl	801a4c4 <_lseek_r>
 801a3b2:	1c43      	adds	r3, r0, #1
 801a3b4:	89a3      	ldrh	r3, [r4, #12]
 801a3b6:	bf15      	itete	ne
 801a3b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a3ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a3be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a3c2:	81a3      	strheq	r3, [r4, #12]
 801a3c4:	bf18      	it	ne
 801a3c6:	81a3      	strhne	r3, [r4, #12]
 801a3c8:	bd10      	pop	{r4, pc}

0801a3ca <__sclose>:
 801a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ce:	f000 b869 	b.w	801a4a4 <_close_r>

0801a3d2 <memcmp>:
 801a3d2:	b510      	push	{r4, lr}
 801a3d4:	3901      	subs	r1, #1
 801a3d6:	4402      	add	r2, r0
 801a3d8:	4290      	cmp	r0, r2
 801a3da:	d101      	bne.n	801a3e0 <memcmp+0xe>
 801a3dc:	2000      	movs	r0, #0
 801a3de:	e005      	b.n	801a3ec <memcmp+0x1a>
 801a3e0:	7803      	ldrb	r3, [r0, #0]
 801a3e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a3e6:	42a3      	cmp	r3, r4
 801a3e8:	d001      	beq.n	801a3ee <memcmp+0x1c>
 801a3ea:	1b18      	subs	r0, r3, r4
 801a3ec:	bd10      	pop	{r4, pc}
 801a3ee:	3001      	adds	r0, #1
 801a3f0:	e7f2      	b.n	801a3d8 <memcmp+0x6>

0801a3f2 <memmove>:
 801a3f2:	4288      	cmp	r0, r1
 801a3f4:	b510      	push	{r4, lr}
 801a3f6:	eb01 0402 	add.w	r4, r1, r2
 801a3fa:	d902      	bls.n	801a402 <memmove+0x10>
 801a3fc:	4284      	cmp	r4, r0
 801a3fe:	4623      	mov	r3, r4
 801a400:	d807      	bhi.n	801a412 <memmove+0x20>
 801a402:	1e43      	subs	r3, r0, #1
 801a404:	42a1      	cmp	r1, r4
 801a406:	d008      	beq.n	801a41a <memmove+0x28>
 801a408:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a40c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a410:	e7f8      	b.n	801a404 <memmove+0x12>
 801a412:	4402      	add	r2, r0
 801a414:	4601      	mov	r1, r0
 801a416:	428a      	cmp	r2, r1
 801a418:	d100      	bne.n	801a41c <memmove+0x2a>
 801a41a:	bd10      	pop	{r4, pc}
 801a41c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a420:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a424:	e7f7      	b.n	801a416 <memmove+0x24>

0801a426 <memset>:
 801a426:	4402      	add	r2, r0
 801a428:	4603      	mov	r3, r0
 801a42a:	4293      	cmp	r3, r2
 801a42c:	d100      	bne.n	801a430 <memset+0xa>
 801a42e:	4770      	bx	lr
 801a430:	f803 1b01 	strb.w	r1, [r3], #1
 801a434:	e7f9      	b.n	801a42a <memset+0x4>

0801a436 <strchr>:
 801a436:	b2c9      	uxtb	r1, r1
 801a438:	4603      	mov	r3, r0
 801a43a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a43e:	b11a      	cbz	r2, 801a448 <strchr+0x12>
 801a440:	428a      	cmp	r2, r1
 801a442:	d1f9      	bne.n	801a438 <strchr+0x2>
 801a444:	4618      	mov	r0, r3
 801a446:	4770      	bx	lr
 801a448:	2900      	cmp	r1, #0
 801a44a:	bf18      	it	ne
 801a44c:	2300      	movne	r3, #0
 801a44e:	e7f9      	b.n	801a444 <strchr+0xe>

0801a450 <strncmp>:
 801a450:	b510      	push	{r4, lr}
 801a452:	b16a      	cbz	r2, 801a470 <strncmp+0x20>
 801a454:	3901      	subs	r1, #1
 801a456:	1884      	adds	r4, r0, r2
 801a458:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a45c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a460:	429a      	cmp	r2, r3
 801a462:	d103      	bne.n	801a46c <strncmp+0x1c>
 801a464:	42a0      	cmp	r0, r4
 801a466:	d001      	beq.n	801a46c <strncmp+0x1c>
 801a468:	2a00      	cmp	r2, #0
 801a46a:	d1f5      	bne.n	801a458 <strncmp+0x8>
 801a46c:	1ad0      	subs	r0, r2, r3
 801a46e:	bd10      	pop	{r4, pc}
 801a470:	4610      	mov	r0, r2
 801a472:	e7fc      	b.n	801a46e <strncmp+0x1e>

0801a474 <strrchr>:
 801a474:	b513      	push	{r0, r1, r4, lr}
 801a476:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801a47a:	4603      	mov	r3, r0
 801a47c:	d110      	bne.n	801a4a0 <strrchr+0x2c>
 801a47e:	b002      	add	sp, #8
 801a480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a484:	f7ff bfd7 	b.w	801a436 <strchr>
 801a488:	1c43      	adds	r3, r0, #1
 801a48a:	4604      	mov	r4, r0
 801a48c:	4618      	mov	r0, r3
 801a48e:	9101      	str	r1, [sp, #4]
 801a490:	f7ff ffd1 	bl	801a436 <strchr>
 801a494:	9901      	ldr	r1, [sp, #4]
 801a496:	2800      	cmp	r0, #0
 801a498:	d1f6      	bne.n	801a488 <strrchr+0x14>
 801a49a:	4620      	mov	r0, r4
 801a49c:	b002      	add	sp, #8
 801a49e:	bd10      	pop	{r4, pc}
 801a4a0:	2400      	movs	r4, #0
 801a4a2:	e7f3      	b.n	801a48c <strrchr+0x18>

0801a4a4 <_close_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	4d06      	ldr	r5, [pc, #24]	; (801a4c0 <_close_r+0x1c>)
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	4608      	mov	r0, r1
 801a4ae:	602b      	str	r3, [r5, #0]
 801a4b0:	f7ef fc45 	bl	8009d3e <_close>
 801a4b4:	1c43      	adds	r3, r0, #1
 801a4b6:	d102      	bne.n	801a4be <_close_r+0x1a>
 801a4b8:	682b      	ldr	r3, [r5, #0]
 801a4ba:	b103      	cbz	r3, 801a4be <_close_r+0x1a>
 801a4bc:	6023      	str	r3, [r4, #0]
 801a4be:	bd38      	pop	{r3, r4, r5, pc}
 801a4c0:	2000b750 	.word	0x2000b750

0801a4c4 <_lseek_r>:
 801a4c4:	b538      	push	{r3, r4, r5, lr}
 801a4c6:	4d07      	ldr	r5, [pc, #28]	; (801a4e4 <_lseek_r+0x20>)
 801a4c8:	4604      	mov	r4, r0
 801a4ca:	4608      	mov	r0, r1
 801a4cc:	4611      	mov	r1, r2
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	602a      	str	r2, [r5, #0]
 801a4d2:	461a      	mov	r2, r3
 801a4d4:	f7ef fc5a 	bl	8009d8c <_lseek>
 801a4d8:	1c43      	adds	r3, r0, #1
 801a4da:	d102      	bne.n	801a4e2 <_lseek_r+0x1e>
 801a4dc:	682b      	ldr	r3, [r5, #0]
 801a4de:	b103      	cbz	r3, 801a4e2 <_lseek_r+0x1e>
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	bd38      	pop	{r3, r4, r5, pc}
 801a4e4:	2000b750 	.word	0x2000b750

0801a4e8 <_read_r>:
 801a4e8:	b538      	push	{r3, r4, r5, lr}
 801a4ea:	4d07      	ldr	r5, [pc, #28]	; (801a508 <_read_r+0x20>)
 801a4ec:	4604      	mov	r4, r0
 801a4ee:	4608      	mov	r0, r1
 801a4f0:	4611      	mov	r1, r2
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	602a      	str	r2, [r5, #0]
 801a4f6:	461a      	mov	r2, r3
 801a4f8:	f7ef fc04 	bl	8009d04 <_read>
 801a4fc:	1c43      	adds	r3, r0, #1
 801a4fe:	d102      	bne.n	801a506 <_read_r+0x1e>
 801a500:	682b      	ldr	r3, [r5, #0]
 801a502:	b103      	cbz	r3, 801a506 <_read_r+0x1e>
 801a504:	6023      	str	r3, [r4, #0]
 801a506:	bd38      	pop	{r3, r4, r5, pc}
 801a508:	2000b750 	.word	0x2000b750

0801a50c <_sbrk_r>:
 801a50c:	b538      	push	{r3, r4, r5, lr}
 801a50e:	4d06      	ldr	r5, [pc, #24]	; (801a528 <_sbrk_r+0x1c>)
 801a510:	2300      	movs	r3, #0
 801a512:	4604      	mov	r4, r0
 801a514:	4608      	mov	r0, r1
 801a516:	602b      	str	r3, [r5, #0]
 801a518:	f7ef fc46 	bl	8009da8 <_sbrk>
 801a51c:	1c43      	adds	r3, r0, #1
 801a51e:	d102      	bne.n	801a526 <_sbrk_r+0x1a>
 801a520:	682b      	ldr	r3, [r5, #0]
 801a522:	b103      	cbz	r3, 801a526 <_sbrk_r+0x1a>
 801a524:	6023      	str	r3, [r4, #0]
 801a526:	bd38      	pop	{r3, r4, r5, pc}
 801a528:	2000b750 	.word	0x2000b750

0801a52c <_write_r>:
 801a52c:	b538      	push	{r3, r4, r5, lr}
 801a52e:	4d07      	ldr	r5, [pc, #28]	; (801a54c <_write_r+0x20>)
 801a530:	4604      	mov	r4, r0
 801a532:	4608      	mov	r0, r1
 801a534:	4611      	mov	r1, r2
 801a536:	2200      	movs	r2, #0
 801a538:	602a      	str	r2, [r5, #0]
 801a53a:	461a      	mov	r2, r3
 801a53c:	f7e6 fcda 	bl	8000ef4 <_write>
 801a540:	1c43      	adds	r3, r0, #1
 801a542:	d102      	bne.n	801a54a <_write_r+0x1e>
 801a544:	682b      	ldr	r3, [r5, #0]
 801a546:	b103      	cbz	r3, 801a54a <_write_r+0x1e>
 801a548:	6023      	str	r3, [r4, #0]
 801a54a:	bd38      	pop	{r3, r4, r5, pc}
 801a54c:	2000b750 	.word	0x2000b750

0801a550 <__errno>:
 801a550:	4b01      	ldr	r3, [pc, #4]	; (801a558 <__errno+0x8>)
 801a552:	6818      	ldr	r0, [r3, #0]
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	200000a0 	.word	0x200000a0

0801a55c <__libc_init_array>:
 801a55c:	b570      	push	{r4, r5, r6, lr}
 801a55e:	4d0d      	ldr	r5, [pc, #52]	; (801a594 <__libc_init_array+0x38>)
 801a560:	4c0d      	ldr	r4, [pc, #52]	; (801a598 <__libc_init_array+0x3c>)
 801a562:	1b64      	subs	r4, r4, r5
 801a564:	10a4      	asrs	r4, r4, #2
 801a566:	2600      	movs	r6, #0
 801a568:	42a6      	cmp	r6, r4
 801a56a:	d109      	bne.n	801a580 <__libc_init_array+0x24>
 801a56c:	4d0b      	ldr	r5, [pc, #44]	; (801a59c <__libc_init_array+0x40>)
 801a56e:	4c0c      	ldr	r4, [pc, #48]	; (801a5a0 <__libc_init_array+0x44>)
 801a570:	f000 fd90 	bl	801b094 <_init>
 801a574:	1b64      	subs	r4, r4, r5
 801a576:	10a4      	asrs	r4, r4, #2
 801a578:	2600      	movs	r6, #0
 801a57a:	42a6      	cmp	r6, r4
 801a57c:	d105      	bne.n	801a58a <__libc_init_array+0x2e>
 801a57e:	bd70      	pop	{r4, r5, r6, pc}
 801a580:	f855 3b04 	ldr.w	r3, [r5], #4
 801a584:	4798      	blx	r3
 801a586:	3601      	adds	r6, #1
 801a588:	e7ee      	b.n	801a568 <__libc_init_array+0xc>
 801a58a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a58e:	4798      	blx	r3
 801a590:	3601      	adds	r6, #1
 801a592:	e7f2      	b.n	801a57a <__libc_init_array+0x1e>
 801a594:	0801fde8 	.word	0x0801fde8
 801a598:	0801fde8 	.word	0x0801fde8
 801a59c:	0801fde8 	.word	0x0801fde8
 801a5a0:	0801fdec 	.word	0x0801fdec

0801a5a4 <__retarget_lock_init_recursive>:
 801a5a4:	4770      	bx	lr

0801a5a6 <__retarget_lock_acquire_recursive>:
 801a5a6:	4770      	bx	lr

0801a5a8 <__retarget_lock_release_recursive>:
 801a5a8:	4770      	bx	lr

0801a5aa <memcpy>:
 801a5aa:	440a      	add	r2, r1
 801a5ac:	4291      	cmp	r1, r2
 801a5ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a5b2:	d100      	bne.n	801a5b6 <memcpy+0xc>
 801a5b4:	4770      	bx	lr
 801a5b6:	b510      	push	{r4, lr}
 801a5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5c0:	4291      	cmp	r1, r2
 801a5c2:	d1f9      	bne.n	801a5b8 <memcpy+0xe>
 801a5c4:	bd10      	pop	{r4, pc}

0801a5c6 <abort>:
 801a5c6:	b508      	push	{r3, lr}
 801a5c8:	2006      	movs	r0, #6
 801a5ca:	f000 fcc3 	bl	801af54 <raise>
 801a5ce:	2001      	movs	r0, #1
 801a5d0:	f7ef fb8e 	bl	8009cf0 <_exit>

0801a5d4 <_free_r>:
 801a5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5d6:	2900      	cmp	r1, #0
 801a5d8:	d044      	beq.n	801a664 <_free_r+0x90>
 801a5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5de:	9001      	str	r0, [sp, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f1a1 0404 	sub.w	r4, r1, #4
 801a5e6:	bfb8      	it	lt
 801a5e8:	18e4      	addlt	r4, r4, r3
 801a5ea:	f7ff fcbd 	bl	8019f68 <__malloc_lock>
 801a5ee:	4a1e      	ldr	r2, [pc, #120]	; (801a668 <_free_r+0x94>)
 801a5f0:	9801      	ldr	r0, [sp, #4]
 801a5f2:	6813      	ldr	r3, [r2, #0]
 801a5f4:	b933      	cbnz	r3, 801a604 <_free_r+0x30>
 801a5f6:	6063      	str	r3, [r4, #4]
 801a5f8:	6014      	str	r4, [r2, #0]
 801a5fa:	b003      	add	sp, #12
 801a5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a600:	f7ff bcb8 	b.w	8019f74 <__malloc_unlock>
 801a604:	42a3      	cmp	r3, r4
 801a606:	d908      	bls.n	801a61a <_free_r+0x46>
 801a608:	6825      	ldr	r5, [r4, #0]
 801a60a:	1961      	adds	r1, r4, r5
 801a60c:	428b      	cmp	r3, r1
 801a60e:	bf01      	itttt	eq
 801a610:	6819      	ldreq	r1, [r3, #0]
 801a612:	685b      	ldreq	r3, [r3, #4]
 801a614:	1949      	addeq	r1, r1, r5
 801a616:	6021      	streq	r1, [r4, #0]
 801a618:	e7ed      	b.n	801a5f6 <_free_r+0x22>
 801a61a:	461a      	mov	r2, r3
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	b10b      	cbz	r3, 801a624 <_free_r+0x50>
 801a620:	42a3      	cmp	r3, r4
 801a622:	d9fa      	bls.n	801a61a <_free_r+0x46>
 801a624:	6811      	ldr	r1, [r2, #0]
 801a626:	1855      	adds	r5, r2, r1
 801a628:	42a5      	cmp	r5, r4
 801a62a:	d10b      	bne.n	801a644 <_free_r+0x70>
 801a62c:	6824      	ldr	r4, [r4, #0]
 801a62e:	4421      	add	r1, r4
 801a630:	1854      	adds	r4, r2, r1
 801a632:	42a3      	cmp	r3, r4
 801a634:	6011      	str	r1, [r2, #0]
 801a636:	d1e0      	bne.n	801a5fa <_free_r+0x26>
 801a638:	681c      	ldr	r4, [r3, #0]
 801a63a:	685b      	ldr	r3, [r3, #4]
 801a63c:	6053      	str	r3, [r2, #4]
 801a63e:	440c      	add	r4, r1
 801a640:	6014      	str	r4, [r2, #0]
 801a642:	e7da      	b.n	801a5fa <_free_r+0x26>
 801a644:	d902      	bls.n	801a64c <_free_r+0x78>
 801a646:	230c      	movs	r3, #12
 801a648:	6003      	str	r3, [r0, #0]
 801a64a:	e7d6      	b.n	801a5fa <_free_r+0x26>
 801a64c:	6825      	ldr	r5, [r4, #0]
 801a64e:	1961      	adds	r1, r4, r5
 801a650:	428b      	cmp	r3, r1
 801a652:	bf04      	itt	eq
 801a654:	6819      	ldreq	r1, [r3, #0]
 801a656:	685b      	ldreq	r3, [r3, #4]
 801a658:	6063      	str	r3, [r4, #4]
 801a65a:	bf04      	itt	eq
 801a65c:	1949      	addeq	r1, r1, r5
 801a65e:	6021      	streq	r1, [r4, #0]
 801a660:	6054      	str	r4, [r2, #4]
 801a662:	e7ca      	b.n	801a5fa <_free_r+0x26>
 801a664:	b003      	add	sp, #12
 801a666:	bd30      	pop	{r4, r5, pc}
 801a668:	2000b60c 	.word	0x2000b60c

0801a66c <__sfputc_r>:
 801a66c:	6893      	ldr	r3, [r2, #8]
 801a66e:	3b01      	subs	r3, #1
 801a670:	2b00      	cmp	r3, #0
 801a672:	b410      	push	{r4}
 801a674:	6093      	str	r3, [r2, #8]
 801a676:	da08      	bge.n	801a68a <__sfputc_r+0x1e>
 801a678:	6994      	ldr	r4, [r2, #24]
 801a67a:	42a3      	cmp	r3, r4
 801a67c:	db01      	blt.n	801a682 <__sfputc_r+0x16>
 801a67e:	290a      	cmp	r1, #10
 801a680:	d103      	bne.n	801a68a <__sfputc_r+0x1e>
 801a682:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a686:	f000 bba7 	b.w	801add8 <__swbuf_r>
 801a68a:	6813      	ldr	r3, [r2, #0]
 801a68c:	1c58      	adds	r0, r3, #1
 801a68e:	6010      	str	r0, [r2, #0]
 801a690:	7019      	strb	r1, [r3, #0]
 801a692:	4608      	mov	r0, r1
 801a694:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a698:	4770      	bx	lr

0801a69a <__sfputs_r>:
 801a69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a69c:	4606      	mov	r6, r0
 801a69e:	460f      	mov	r7, r1
 801a6a0:	4614      	mov	r4, r2
 801a6a2:	18d5      	adds	r5, r2, r3
 801a6a4:	42ac      	cmp	r4, r5
 801a6a6:	d101      	bne.n	801a6ac <__sfputs_r+0x12>
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	e007      	b.n	801a6bc <__sfputs_r+0x22>
 801a6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6b0:	463a      	mov	r2, r7
 801a6b2:	4630      	mov	r0, r6
 801a6b4:	f7ff ffda 	bl	801a66c <__sfputc_r>
 801a6b8:	1c43      	adds	r3, r0, #1
 801a6ba:	d1f3      	bne.n	801a6a4 <__sfputs_r+0xa>
 801a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a6c0 <_vfiprintf_r>:
 801a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c4:	460d      	mov	r5, r1
 801a6c6:	b09d      	sub	sp, #116	; 0x74
 801a6c8:	4614      	mov	r4, r2
 801a6ca:	4698      	mov	r8, r3
 801a6cc:	4606      	mov	r6, r0
 801a6ce:	b118      	cbz	r0, 801a6d8 <_vfiprintf_r+0x18>
 801a6d0:	6a03      	ldr	r3, [r0, #32]
 801a6d2:	b90b      	cbnz	r3, 801a6d8 <_vfiprintf_r+0x18>
 801a6d4:	f7ff fdd8 	bl	801a288 <__sinit>
 801a6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a6da:	07d9      	lsls	r1, r3, #31
 801a6dc:	d405      	bmi.n	801a6ea <_vfiprintf_r+0x2a>
 801a6de:	89ab      	ldrh	r3, [r5, #12]
 801a6e0:	059a      	lsls	r2, r3, #22
 801a6e2:	d402      	bmi.n	801a6ea <_vfiprintf_r+0x2a>
 801a6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a6e6:	f7ff ff5e 	bl	801a5a6 <__retarget_lock_acquire_recursive>
 801a6ea:	89ab      	ldrh	r3, [r5, #12]
 801a6ec:	071b      	lsls	r3, r3, #28
 801a6ee:	d501      	bpl.n	801a6f4 <_vfiprintf_r+0x34>
 801a6f0:	692b      	ldr	r3, [r5, #16]
 801a6f2:	b99b      	cbnz	r3, 801a71c <_vfiprintf_r+0x5c>
 801a6f4:	4629      	mov	r1, r5
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	f000 fbac 	bl	801ae54 <__swsetup_r>
 801a6fc:	b170      	cbz	r0, 801a71c <_vfiprintf_r+0x5c>
 801a6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a700:	07dc      	lsls	r4, r3, #31
 801a702:	d504      	bpl.n	801a70e <_vfiprintf_r+0x4e>
 801a704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a708:	b01d      	add	sp, #116	; 0x74
 801a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70e:	89ab      	ldrh	r3, [r5, #12]
 801a710:	0598      	lsls	r0, r3, #22
 801a712:	d4f7      	bmi.n	801a704 <_vfiprintf_r+0x44>
 801a714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a716:	f7ff ff47 	bl	801a5a8 <__retarget_lock_release_recursive>
 801a71a:	e7f3      	b.n	801a704 <_vfiprintf_r+0x44>
 801a71c:	2300      	movs	r3, #0
 801a71e:	9309      	str	r3, [sp, #36]	; 0x24
 801a720:	2320      	movs	r3, #32
 801a722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a726:	f8cd 800c 	str.w	r8, [sp, #12]
 801a72a:	2330      	movs	r3, #48	; 0x30
 801a72c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a8e0 <_vfiprintf_r+0x220>
 801a730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a734:	f04f 0901 	mov.w	r9, #1
 801a738:	4623      	mov	r3, r4
 801a73a:	469a      	mov	sl, r3
 801a73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a740:	b10a      	cbz	r2, 801a746 <_vfiprintf_r+0x86>
 801a742:	2a25      	cmp	r2, #37	; 0x25
 801a744:	d1f9      	bne.n	801a73a <_vfiprintf_r+0x7a>
 801a746:	ebba 0b04 	subs.w	fp, sl, r4
 801a74a:	d00b      	beq.n	801a764 <_vfiprintf_r+0xa4>
 801a74c:	465b      	mov	r3, fp
 801a74e:	4622      	mov	r2, r4
 801a750:	4629      	mov	r1, r5
 801a752:	4630      	mov	r0, r6
 801a754:	f7ff ffa1 	bl	801a69a <__sfputs_r>
 801a758:	3001      	adds	r0, #1
 801a75a:	f000 80a9 	beq.w	801a8b0 <_vfiprintf_r+0x1f0>
 801a75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a760:	445a      	add	r2, fp
 801a762:	9209      	str	r2, [sp, #36]	; 0x24
 801a764:	f89a 3000 	ldrb.w	r3, [sl]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	f000 80a1 	beq.w	801a8b0 <_vfiprintf_r+0x1f0>
 801a76e:	2300      	movs	r3, #0
 801a770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a778:	f10a 0a01 	add.w	sl, sl, #1
 801a77c:	9304      	str	r3, [sp, #16]
 801a77e:	9307      	str	r3, [sp, #28]
 801a780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a784:	931a      	str	r3, [sp, #104]	; 0x68
 801a786:	4654      	mov	r4, sl
 801a788:	2205      	movs	r2, #5
 801a78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a78e:	4854      	ldr	r0, [pc, #336]	; (801a8e0 <_vfiprintf_r+0x220>)
 801a790:	f7e5 fd3e 	bl	8000210 <memchr>
 801a794:	9a04      	ldr	r2, [sp, #16]
 801a796:	b9d8      	cbnz	r0, 801a7d0 <_vfiprintf_r+0x110>
 801a798:	06d1      	lsls	r1, r2, #27
 801a79a:	bf44      	itt	mi
 801a79c:	2320      	movmi	r3, #32
 801a79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7a2:	0713      	lsls	r3, r2, #28
 801a7a4:	bf44      	itt	mi
 801a7a6:	232b      	movmi	r3, #43	; 0x2b
 801a7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7ac:	f89a 3000 	ldrb.w	r3, [sl]
 801a7b0:	2b2a      	cmp	r3, #42	; 0x2a
 801a7b2:	d015      	beq.n	801a7e0 <_vfiprintf_r+0x120>
 801a7b4:	9a07      	ldr	r2, [sp, #28]
 801a7b6:	4654      	mov	r4, sl
 801a7b8:	2000      	movs	r0, #0
 801a7ba:	f04f 0c0a 	mov.w	ip, #10
 801a7be:	4621      	mov	r1, r4
 801a7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a7c4:	3b30      	subs	r3, #48	; 0x30
 801a7c6:	2b09      	cmp	r3, #9
 801a7c8:	d94d      	bls.n	801a866 <_vfiprintf_r+0x1a6>
 801a7ca:	b1b0      	cbz	r0, 801a7fa <_vfiprintf_r+0x13a>
 801a7cc:	9207      	str	r2, [sp, #28]
 801a7ce:	e014      	b.n	801a7fa <_vfiprintf_r+0x13a>
 801a7d0:	eba0 0308 	sub.w	r3, r0, r8
 801a7d4:	fa09 f303 	lsl.w	r3, r9, r3
 801a7d8:	4313      	orrs	r3, r2
 801a7da:	9304      	str	r3, [sp, #16]
 801a7dc:	46a2      	mov	sl, r4
 801a7de:	e7d2      	b.n	801a786 <_vfiprintf_r+0xc6>
 801a7e0:	9b03      	ldr	r3, [sp, #12]
 801a7e2:	1d19      	adds	r1, r3, #4
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	9103      	str	r1, [sp, #12]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	bfbb      	ittet	lt
 801a7ec:	425b      	neglt	r3, r3
 801a7ee:	f042 0202 	orrlt.w	r2, r2, #2
 801a7f2:	9307      	strge	r3, [sp, #28]
 801a7f4:	9307      	strlt	r3, [sp, #28]
 801a7f6:	bfb8      	it	lt
 801a7f8:	9204      	strlt	r2, [sp, #16]
 801a7fa:	7823      	ldrb	r3, [r4, #0]
 801a7fc:	2b2e      	cmp	r3, #46	; 0x2e
 801a7fe:	d10c      	bne.n	801a81a <_vfiprintf_r+0x15a>
 801a800:	7863      	ldrb	r3, [r4, #1]
 801a802:	2b2a      	cmp	r3, #42	; 0x2a
 801a804:	d134      	bne.n	801a870 <_vfiprintf_r+0x1b0>
 801a806:	9b03      	ldr	r3, [sp, #12]
 801a808:	1d1a      	adds	r2, r3, #4
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	9203      	str	r2, [sp, #12]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	bfb8      	it	lt
 801a812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a816:	3402      	adds	r4, #2
 801a818:	9305      	str	r3, [sp, #20]
 801a81a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a8f0 <_vfiprintf_r+0x230>
 801a81e:	7821      	ldrb	r1, [r4, #0]
 801a820:	2203      	movs	r2, #3
 801a822:	4650      	mov	r0, sl
 801a824:	f7e5 fcf4 	bl	8000210 <memchr>
 801a828:	b138      	cbz	r0, 801a83a <_vfiprintf_r+0x17a>
 801a82a:	9b04      	ldr	r3, [sp, #16]
 801a82c:	eba0 000a 	sub.w	r0, r0, sl
 801a830:	2240      	movs	r2, #64	; 0x40
 801a832:	4082      	lsls	r2, r0
 801a834:	4313      	orrs	r3, r2
 801a836:	3401      	adds	r4, #1
 801a838:	9304      	str	r3, [sp, #16]
 801a83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a83e:	4829      	ldr	r0, [pc, #164]	; (801a8e4 <_vfiprintf_r+0x224>)
 801a840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a844:	2206      	movs	r2, #6
 801a846:	f7e5 fce3 	bl	8000210 <memchr>
 801a84a:	2800      	cmp	r0, #0
 801a84c:	d03f      	beq.n	801a8ce <_vfiprintf_r+0x20e>
 801a84e:	4b26      	ldr	r3, [pc, #152]	; (801a8e8 <_vfiprintf_r+0x228>)
 801a850:	bb1b      	cbnz	r3, 801a89a <_vfiprintf_r+0x1da>
 801a852:	9b03      	ldr	r3, [sp, #12]
 801a854:	3307      	adds	r3, #7
 801a856:	f023 0307 	bic.w	r3, r3, #7
 801a85a:	3308      	adds	r3, #8
 801a85c:	9303      	str	r3, [sp, #12]
 801a85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a860:	443b      	add	r3, r7
 801a862:	9309      	str	r3, [sp, #36]	; 0x24
 801a864:	e768      	b.n	801a738 <_vfiprintf_r+0x78>
 801a866:	fb0c 3202 	mla	r2, ip, r2, r3
 801a86a:	460c      	mov	r4, r1
 801a86c:	2001      	movs	r0, #1
 801a86e:	e7a6      	b.n	801a7be <_vfiprintf_r+0xfe>
 801a870:	2300      	movs	r3, #0
 801a872:	3401      	adds	r4, #1
 801a874:	9305      	str	r3, [sp, #20]
 801a876:	4619      	mov	r1, r3
 801a878:	f04f 0c0a 	mov.w	ip, #10
 801a87c:	4620      	mov	r0, r4
 801a87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a882:	3a30      	subs	r2, #48	; 0x30
 801a884:	2a09      	cmp	r2, #9
 801a886:	d903      	bls.n	801a890 <_vfiprintf_r+0x1d0>
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d0c6      	beq.n	801a81a <_vfiprintf_r+0x15a>
 801a88c:	9105      	str	r1, [sp, #20]
 801a88e:	e7c4      	b.n	801a81a <_vfiprintf_r+0x15a>
 801a890:	fb0c 2101 	mla	r1, ip, r1, r2
 801a894:	4604      	mov	r4, r0
 801a896:	2301      	movs	r3, #1
 801a898:	e7f0      	b.n	801a87c <_vfiprintf_r+0x1bc>
 801a89a:	ab03      	add	r3, sp, #12
 801a89c:	9300      	str	r3, [sp, #0]
 801a89e:	462a      	mov	r2, r5
 801a8a0:	4b12      	ldr	r3, [pc, #72]	; (801a8ec <_vfiprintf_r+0x22c>)
 801a8a2:	a904      	add	r1, sp, #16
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f3af 8000 	nop.w
 801a8aa:	4607      	mov	r7, r0
 801a8ac:	1c78      	adds	r0, r7, #1
 801a8ae:	d1d6      	bne.n	801a85e <_vfiprintf_r+0x19e>
 801a8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a8b2:	07d9      	lsls	r1, r3, #31
 801a8b4:	d405      	bmi.n	801a8c2 <_vfiprintf_r+0x202>
 801a8b6:	89ab      	ldrh	r3, [r5, #12]
 801a8b8:	059a      	lsls	r2, r3, #22
 801a8ba:	d402      	bmi.n	801a8c2 <_vfiprintf_r+0x202>
 801a8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a8be:	f7ff fe73 	bl	801a5a8 <__retarget_lock_release_recursive>
 801a8c2:	89ab      	ldrh	r3, [r5, #12]
 801a8c4:	065b      	lsls	r3, r3, #25
 801a8c6:	f53f af1d 	bmi.w	801a704 <_vfiprintf_r+0x44>
 801a8ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a8cc:	e71c      	b.n	801a708 <_vfiprintf_r+0x48>
 801a8ce:	ab03      	add	r3, sp, #12
 801a8d0:	9300      	str	r3, [sp, #0]
 801a8d2:	462a      	mov	r2, r5
 801a8d4:	4b05      	ldr	r3, [pc, #20]	; (801a8ec <_vfiprintf_r+0x22c>)
 801a8d6:	a904      	add	r1, sp, #16
 801a8d8:	4630      	mov	r0, r6
 801a8da:	f000 f879 	bl	801a9d0 <_printf_i>
 801a8de:	e7e4      	b.n	801a8aa <_vfiprintf_r+0x1ea>
 801a8e0:	0801fdaa 	.word	0x0801fdaa
 801a8e4:	0801fdb4 	.word	0x0801fdb4
 801a8e8:	00000000 	.word	0x00000000
 801a8ec:	0801a69b 	.word	0x0801a69b
 801a8f0:	0801fdb0 	.word	0x0801fdb0

0801a8f4 <_printf_common>:
 801a8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f8:	4616      	mov	r6, r2
 801a8fa:	4699      	mov	r9, r3
 801a8fc:	688a      	ldr	r2, [r1, #8]
 801a8fe:	690b      	ldr	r3, [r1, #16]
 801a900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a904:	4293      	cmp	r3, r2
 801a906:	bfb8      	it	lt
 801a908:	4613      	movlt	r3, r2
 801a90a:	6033      	str	r3, [r6, #0]
 801a90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a910:	4607      	mov	r7, r0
 801a912:	460c      	mov	r4, r1
 801a914:	b10a      	cbz	r2, 801a91a <_printf_common+0x26>
 801a916:	3301      	adds	r3, #1
 801a918:	6033      	str	r3, [r6, #0]
 801a91a:	6823      	ldr	r3, [r4, #0]
 801a91c:	0699      	lsls	r1, r3, #26
 801a91e:	bf42      	ittt	mi
 801a920:	6833      	ldrmi	r3, [r6, #0]
 801a922:	3302      	addmi	r3, #2
 801a924:	6033      	strmi	r3, [r6, #0]
 801a926:	6825      	ldr	r5, [r4, #0]
 801a928:	f015 0506 	ands.w	r5, r5, #6
 801a92c:	d106      	bne.n	801a93c <_printf_common+0x48>
 801a92e:	f104 0a19 	add.w	sl, r4, #25
 801a932:	68e3      	ldr	r3, [r4, #12]
 801a934:	6832      	ldr	r2, [r6, #0]
 801a936:	1a9b      	subs	r3, r3, r2
 801a938:	42ab      	cmp	r3, r5
 801a93a:	dc26      	bgt.n	801a98a <_printf_common+0x96>
 801a93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a940:	1e13      	subs	r3, r2, #0
 801a942:	6822      	ldr	r2, [r4, #0]
 801a944:	bf18      	it	ne
 801a946:	2301      	movne	r3, #1
 801a948:	0692      	lsls	r2, r2, #26
 801a94a:	d42b      	bmi.n	801a9a4 <_printf_common+0xb0>
 801a94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a950:	4649      	mov	r1, r9
 801a952:	4638      	mov	r0, r7
 801a954:	47c0      	blx	r8
 801a956:	3001      	adds	r0, #1
 801a958:	d01e      	beq.n	801a998 <_printf_common+0xa4>
 801a95a:	6823      	ldr	r3, [r4, #0]
 801a95c:	6922      	ldr	r2, [r4, #16]
 801a95e:	f003 0306 	and.w	r3, r3, #6
 801a962:	2b04      	cmp	r3, #4
 801a964:	bf02      	ittt	eq
 801a966:	68e5      	ldreq	r5, [r4, #12]
 801a968:	6833      	ldreq	r3, [r6, #0]
 801a96a:	1aed      	subeq	r5, r5, r3
 801a96c:	68a3      	ldr	r3, [r4, #8]
 801a96e:	bf0c      	ite	eq
 801a970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a974:	2500      	movne	r5, #0
 801a976:	4293      	cmp	r3, r2
 801a978:	bfc4      	itt	gt
 801a97a:	1a9b      	subgt	r3, r3, r2
 801a97c:	18ed      	addgt	r5, r5, r3
 801a97e:	2600      	movs	r6, #0
 801a980:	341a      	adds	r4, #26
 801a982:	42b5      	cmp	r5, r6
 801a984:	d11a      	bne.n	801a9bc <_printf_common+0xc8>
 801a986:	2000      	movs	r0, #0
 801a988:	e008      	b.n	801a99c <_printf_common+0xa8>
 801a98a:	2301      	movs	r3, #1
 801a98c:	4652      	mov	r2, sl
 801a98e:	4649      	mov	r1, r9
 801a990:	4638      	mov	r0, r7
 801a992:	47c0      	blx	r8
 801a994:	3001      	adds	r0, #1
 801a996:	d103      	bne.n	801a9a0 <_printf_common+0xac>
 801a998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9a0:	3501      	adds	r5, #1
 801a9a2:	e7c6      	b.n	801a932 <_printf_common+0x3e>
 801a9a4:	18e1      	adds	r1, r4, r3
 801a9a6:	1c5a      	adds	r2, r3, #1
 801a9a8:	2030      	movs	r0, #48	; 0x30
 801a9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a9ae:	4422      	add	r2, r4
 801a9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a9b8:	3302      	adds	r3, #2
 801a9ba:	e7c7      	b.n	801a94c <_printf_common+0x58>
 801a9bc:	2301      	movs	r3, #1
 801a9be:	4622      	mov	r2, r4
 801a9c0:	4649      	mov	r1, r9
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	47c0      	blx	r8
 801a9c6:	3001      	adds	r0, #1
 801a9c8:	d0e6      	beq.n	801a998 <_printf_common+0xa4>
 801a9ca:	3601      	adds	r6, #1
 801a9cc:	e7d9      	b.n	801a982 <_printf_common+0x8e>
	...

0801a9d0 <_printf_i>:
 801a9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d4:	7e0f      	ldrb	r7, [r1, #24]
 801a9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a9d8:	2f78      	cmp	r7, #120	; 0x78
 801a9da:	4691      	mov	r9, r2
 801a9dc:	4680      	mov	r8, r0
 801a9de:	460c      	mov	r4, r1
 801a9e0:	469a      	mov	sl, r3
 801a9e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a9e6:	d807      	bhi.n	801a9f8 <_printf_i+0x28>
 801a9e8:	2f62      	cmp	r7, #98	; 0x62
 801a9ea:	d80a      	bhi.n	801aa02 <_printf_i+0x32>
 801a9ec:	2f00      	cmp	r7, #0
 801a9ee:	f000 80d4 	beq.w	801ab9a <_printf_i+0x1ca>
 801a9f2:	2f58      	cmp	r7, #88	; 0x58
 801a9f4:	f000 80c0 	beq.w	801ab78 <_printf_i+0x1a8>
 801a9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa00:	e03a      	b.n	801aa78 <_printf_i+0xa8>
 801aa02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa06:	2b15      	cmp	r3, #21
 801aa08:	d8f6      	bhi.n	801a9f8 <_printf_i+0x28>
 801aa0a:	a101      	add	r1, pc, #4	; (adr r1, 801aa10 <_printf_i+0x40>)
 801aa0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa10:	0801aa69 	.word	0x0801aa69
 801aa14:	0801aa7d 	.word	0x0801aa7d
 801aa18:	0801a9f9 	.word	0x0801a9f9
 801aa1c:	0801a9f9 	.word	0x0801a9f9
 801aa20:	0801a9f9 	.word	0x0801a9f9
 801aa24:	0801a9f9 	.word	0x0801a9f9
 801aa28:	0801aa7d 	.word	0x0801aa7d
 801aa2c:	0801a9f9 	.word	0x0801a9f9
 801aa30:	0801a9f9 	.word	0x0801a9f9
 801aa34:	0801a9f9 	.word	0x0801a9f9
 801aa38:	0801a9f9 	.word	0x0801a9f9
 801aa3c:	0801ab81 	.word	0x0801ab81
 801aa40:	0801aaa9 	.word	0x0801aaa9
 801aa44:	0801ab3b 	.word	0x0801ab3b
 801aa48:	0801a9f9 	.word	0x0801a9f9
 801aa4c:	0801a9f9 	.word	0x0801a9f9
 801aa50:	0801aba3 	.word	0x0801aba3
 801aa54:	0801a9f9 	.word	0x0801a9f9
 801aa58:	0801aaa9 	.word	0x0801aaa9
 801aa5c:	0801a9f9 	.word	0x0801a9f9
 801aa60:	0801a9f9 	.word	0x0801a9f9
 801aa64:	0801ab43 	.word	0x0801ab43
 801aa68:	682b      	ldr	r3, [r5, #0]
 801aa6a:	1d1a      	adds	r2, r3, #4
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	602a      	str	r2, [r5, #0]
 801aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa78:	2301      	movs	r3, #1
 801aa7a:	e09f      	b.n	801abbc <_printf_i+0x1ec>
 801aa7c:	6820      	ldr	r0, [r4, #0]
 801aa7e:	682b      	ldr	r3, [r5, #0]
 801aa80:	0607      	lsls	r7, r0, #24
 801aa82:	f103 0104 	add.w	r1, r3, #4
 801aa86:	6029      	str	r1, [r5, #0]
 801aa88:	d501      	bpl.n	801aa8e <_printf_i+0xbe>
 801aa8a:	681e      	ldr	r6, [r3, #0]
 801aa8c:	e003      	b.n	801aa96 <_printf_i+0xc6>
 801aa8e:	0646      	lsls	r6, r0, #25
 801aa90:	d5fb      	bpl.n	801aa8a <_printf_i+0xba>
 801aa92:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aa96:	2e00      	cmp	r6, #0
 801aa98:	da03      	bge.n	801aaa2 <_printf_i+0xd2>
 801aa9a:	232d      	movs	r3, #45	; 0x2d
 801aa9c:	4276      	negs	r6, r6
 801aa9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aaa2:	485a      	ldr	r0, [pc, #360]	; (801ac0c <_printf_i+0x23c>)
 801aaa4:	230a      	movs	r3, #10
 801aaa6:	e012      	b.n	801aace <_printf_i+0xfe>
 801aaa8:	682b      	ldr	r3, [r5, #0]
 801aaaa:	6820      	ldr	r0, [r4, #0]
 801aaac:	1d19      	adds	r1, r3, #4
 801aaae:	6029      	str	r1, [r5, #0]
 801aab0:	0605      	lsls	r5, r0, #24
 801aab2:	d501      	bpl.n	801aab8 <_printf_i+0xe8>
 801aab4:	681e      	ldr	r6, [r3, #0]
 801aab6:	e002      	b.n	801aabe <_printf_i+0xee>
 801aab8:	0641      	lsls	r1, r0, #25
 801aaba:	d5fb      	bpl.n	801aab4 <_printf_i+0xe4>
 801aabc:	881e      	ldrh	r6, [r3, #0]
 801aabe:	4853      	ldr	r0, [pc, #332]	; (801ac0c <_printf_i+0x23c>)
 801aac0:	2f6f      	cmp	r7, #111	; 0x6f
 801aac2:	bf0c      	ite	eq
 801aac4:	2308      	moveq	r3, #8
 801aac6:	230a      	movne	r3, #10
 801aac8:	2100      	movs	r1, #0
 801aaca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aace:	6865      	ldr	r5, [r4, #4]
 801aad0:	60a5      	str	r5, [r4, #8]
 801aad2:	2d00      	cmp	r5, #0
 801aad4:	bfa2      	ittt	ge
 801aad6:	6821      	ldrge	r1, [r4, #0]
 801aad8:	f021 0104 	bicge.w	r1, r1, #4
 801aadc:	6021      	strge	r1, [r4, #0]
 801aade:	b90e      	cbnz	r6, 801aae4 <_printf_i+0x114>
 801aae0:	2d00      	cmp	r5, #0
 801aae2:	d04b      	beq.n	801ab7c <_printf_i+0x1ac>
 801aae4:	4615      	mov	r5, r2
 801aae6:	fbb6 f1f3 	udiv	r1, r6, r3
 801aaea:	fb03 6711 	mls	r7, r3, r1, r6
 801aaee:	5dc7      	ldrb	r7, [r0, r7]
 801aaf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aaf4:	4637      	mov	r7, r6
 801aaf6:	42bb      	cmp	r3, r7
 801aaf8:	460e      	mov	r6, r1
 801aafa:	d9f4      	bls.n	801aae6 <_printf_i+0x116>
 801aafc:	2b08      	cmp	r3, #8
 801aafe:	d10b      	bne.n	801ab18 <_printf_i+0x148>
 801ab00:	6823      	ldr	r3, [r4, #0]
 801ab02:	07de      	lsls	r6, r3, #31
 801ab04:	d508      	bpl.n	801ab18 <_printf_i+0x148>
 801ab06:	6923      	ldr	r3, [r4, #16]
 801ab08:	6861      	ldr	r1, [r4, #4]
 801ab0a:	4299      	cmp	r1, r3
 801ab0c:	bfde      	ittt	le
 801ab0e:	2330      	movle	r3, #48	; 0x30
 801ab10:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ab14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ab18:	1b52      	subs	r2, r2, r5
 801ab1a:	6122      	str	r2, [r4, #16]
 801ab1c:	f8cd a000 	str.w	sl, [sp]
 801ab20:	464b      	mov	r3, r9
 801ab22:	aa03      	add	r2, sp, #12
 801ab24:	4621      	mov	r1, r4
 801ab26:	4640      	mov	r0, r8
 801ab28:	f7ff fee4 	bl	801a8f4 <_printf_common>
 801ab2c:	3001      	adds	r0, #1
 801ab2e:	d14a      	bne.n	801abc6 <_printf_i+0x1f6>
 801ab30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab34:	b004      	add	sp, #16
 801ab36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab3a:	6823      	ldr	r3, [r4, #0]
 801ab3c:	f043 0320 	orr.w	r3, r3, #32
 801ab40:	6023      	str	r3, [r4, #0]
 801ab42:	4833      	ldr	r0, [pc, #204]	; (801ac10 <_printf_i+0x240>)
 801ab44:	2778      	movs	r7, #120	; 0x78
 801ab46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ab4a:	6823      	ldr	r3, [r4, #0]
 801ab4c:	6829      	ldr	r1, [r5, #0]
 801ab4e:	061f      	lsls	r7, r3, #24
 801ab50:	f851 6b04 	ldr.w	r6, [r1], #4
 801ab54:	d402      	bmi.n	801ab5c <_printf_i+0x18c>
 801ab56:	065f      	lsls	r7, r3, #25
 801ab58:	bf48      	it	mi
 801ab5a:	b2b6      	uxthmi	r6, r6
 801ab5c:	07df      	lsls	r7, r3, #31
 801ab5e:	bf48      	it	mi
 801ab60:	f043 0320 	orrmi.w	r3, r3, #32
 801ab64:	6029      	str	r1, [r5, #0]
 801ab66:	bf48      	it	mi
 801ab68:	6023      	strmi	r3, [r4, #0]
 801ab6a:	b91e      	cbnz	r6, 801ab74 <_printf_i+0x1a4>
 801ab6c:	6823      	ldr	r3, [r4, #0]
 801ab6e:	f023 0320 	bic.w	r3, r3, #32
 801ab72:	6023      	str	r3, [r4, #0]
 801ab74:	2310      	movs	r3, #16
 801ab76:	e7a7      	b.n	801aac8 <_printf_i+0xf8>
 801ab78:	4824      	ldr	r0, [pc, #144]	; (801ac0c <_printf_i+0x23c>)
 801ab7a:	e7e4      	b.n	801ab46 <_printf_i+0x176>
 801ab7c:	4615      	mov	r5, r2
 801ab7e:	e7bd      	b.n	801aafc <_printf_i+0x12c>
 801ab80:	682b      	ldr	r3, [r5, #0]
 801ab82:	6826      	ldr	r6, [r4, #0]
 801ab84:	6961      	ldr	r1, [r4, #20]
 801ab86:	1d18      	adds	r0, r3, #4
 801ab88:	6028      	str	r0, [r5, #0]
 801ab8a:	0635      	lsls	r5, r6, #24
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	d501      	bpl.n	801ab94 <_printf_i+0x1c4>
 801ab90:	6019      	str	r1, [r3, #0]
 801ab92:	e002      	b.n	801ab9a <_printf_i+0x1ca>
 801ab94:	0670      	lsls	r0, r6, #25
 801ab96:	d5fb      	bpl.n	801ab90 <_printf_i+0x1c0>
 801ab98:	8019      	strh	r1, [r3, #0]
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	6123      	str	r3, [r4, #16]
 801ab9e:	4615      	mov	r5, r2
 801aba0:	e7bc      	b.n	801ab1c <_printf_i+0x14c>
 801aba2:	682b      	ldr	r3, [r5, #0]
 801aba4:	1d1a      	adds	r2, r3, #4
 801aba6:	602a      	str	r2, [r5, #0]
 801aba8:	681d      	ldr	r5, [r3, #0]
 801abaa:	6862      	ldr	r2, [r4, #4]
 801abac:	2100      	movs	r1, #0
 801abae:	4628      	mov	r0, r5
 801abb0:	f7e5 fb2e 	bl	8000210 <memchr>
 801abb4:	b108      	cbz	r0, 801abba <_printf_i+0x1ea>
 801abb6:	1b40      	subs	r0, r0, r5
 801abb8:	6060      	str	r0, [r4, #4]
 801abba:	6863      	ldr	r3, [r4, #4]
 801abbc:	6123      	str	r3, [r4, #16]
 801abbe:	2300      	movs	r3, #0
 801abc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abc4:	e7aa      	b.n	801ab1c <_printf_i+0x14c>
 801abc6:	6923      	ldr	r3, [r4, #16]
 801abc8:	462a      	mov	r2, r5
 801abca:	4649      	mov	r1, r9
 801abcc:	4640      	mov	r0, r8
 801abce:	47d0      	blx	sl
 801abd0:	3001      	adds	r0, #1
 801abd2:	d0ad      	beq.n	801ab30 <_printf_i+0x160>
 801abd4:	6823      	ldr	r3, [r4, #0]
 801abd6:	079b      	lsls	r3, r3, #30
 801abd8:	d413      	bmi.n	801ac02 <_printf_i+0x232>
 801abda:	68e0      	ldr	r0, [r4, #12]
 801abdc:	9b03      	ldr	r3, [sp, #12]
 801abde:	4298      	cmp	r0, r3
 801abe0:	bfb8      	it	lt
 801abe2:	4618      	movlt	r0, r3
 801abe4:	e7a6      	b.n	801ab34 <_printf_i+0x164>
 801abe6:	2301      	movs	r3, #1
 801abe8:	4632      	mov	r2, r6
 801abea:	4649      	mov	r1, r9
 801abec:	4640      	mov	r0, r8
 801abee:	47d0      	blx	sl
 801abf0:	3001      	adds	r0, #1
 801abf2:	d09d      	beq.n	801ab30 <_printf_i+0x160>
 801abf4:	3501      	adds	r5, #1
 801abf6:	68e3      	ldr	r3, [r4, #12]
 801abf8:	9903      	ldr	r1, [sp, #12]
 801abfa:	1a5b      	subs	r3, r3, r1
 801abfc:	42ab      	cmp	r3, r5
 801abfe:	dcf2      	bgt.n	801abe6 <_printf_i+0x216>
 801ac00:	e7eb      	b.n	801abda <_printf_i+0x20a>
 801ac02:	2500      	movs	r5, #0
 801ac04:	f104 0619 	add.w	r6, r4, #25
 801ac08:	e7f5      	b.n	801abf6 <_printf_i+0x226>
 801ac0a:	bf00      	nop
 801ac0c:	0801fdbb 	.word	0x0801fdbb
 801ac10:	0801fdcc 	.word	0x0801fdcc

0801ac14 <__sflush_r>:
 801ac14:	898a      	ldrh	r2, [r1, #12]
 801ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac1a:	4605      	mov	r5, r0
 801ac1c:	0710      	lsls	r0, r2, #28
 801ac1e:	460c      	mov	r4, r1
 801ac20:	d458      	bmi.n	801acd4 <__sflush_r+0xc0>
 801ac22:	684b      	ldr	r3, [r1, #4]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	dc05      	bgt.n	801ac34 <__sflush_r+0x20>
 801ac28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	dc02      	bgt.n	801ac34 <__sflush_r+0x20>
 801ac2e:	2000      	movs	r0, #0
 801ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac36:	2e00      	cmp	r6, #0
 801ac38:	d0f9      	beq.n	801ac2e <__sflush_r+0x1a>
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ac40:	682f      	ldr	r7, [r5, #0]
 801ac42:	6a21      	ldr	r1, [r4, #32]
 801ac44:	602b      	str	r3, [r5, #0]
 801ac46:	d032      	beq.n	801acae <__sflush_r+0x9a>
 801ac48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ac4a:	89a3      	ldrh	r3, [r4, #12]
 801ac4c:	075a      	lsls	r2, r3, #29
 801ac4e:	d505      	bpl.n	801ac5c <__sflush_r+0x48>
 801ac50:	6863      	ldr	r3, [r4, #4]
 801ac52:	1ac0      	subs	r0, r0, r3
 801ac54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac56:	b10b      	cbz	r3, 801ac5c <__sflush_r+0x48>
 801ac58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac5a:	1ac0      	subs	r0, r0, r3
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	4602      	mov	r2, r0
 801ac60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac62:	6a21      	ldr	r1, [r4, #32]
 801ac64:	4628      	mov	r0, r5
 801ac66:	47b0      	blx	r6
 801ac68:	1c43      	adds	r3, r0, #1
 801ac6a:	89a3      	ldrh	r3, [r4, #12]
 801ac6c:	d106      	bne.n	801ac7c <__sflush_r+0x68>
 801ac6e:	6829      	ldr	r1, [r5, #0]
 801ac70:	291d      	cmp	r1, #29
 801ac72:	d82b      	bhi.n	801accc <__sflush_r+0xb8>
 801ac74:	4a29      	ldr	r2, [pc, #164]	; (801ad1c <__sflush_r+0x108>)
 801ac76:	410a      	asrs	r2, r1
 801ac78:	07d6      	lsls	r6, r2, #31
 801ac7a:	d427      	bmi.n	801accc <__sflush_r+0xb8>
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	6062      	str	r2, [r4, #4]
 801ac80:	04d9      	lsls	r1, r3, #19
 801ac82:	6922      	ldr	r2, [r4, #16]
 801ac84:	6022      	str	r2, [r4, #0]
 801ac86:	d504      	bpl.n	801ac92 <__sflush_r+0x7e>
 801ac88:	1c42      	adds	r2, r0, #1
 801ac8a:	d101      	bne.n	801ac90 <__sflush_r+0x7c>
 801ac8c:	682b      	ldr	r3, [r5, #0]
 801ac8e:	b903      	cbnz	r3, 801ac92 <__sflush_r+0x7e>
 801ac90:	6560      	str	r0, [r4, #84]	; 0x54
 801ac92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac94:	602f      	str	r7, [r5, #0]
 801ac96:	2900      	cmp	r1, #0
 801ac98:	d0c9      	beq.n	801ac2e <__sflush_r+0x1a>
 801ac9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac9e:	4299      	cmp	r1, r3
 801aca0:	d002      	beq.n	801aca8 <__sflush_r+0x94>
 801aca2:	4628      	mov	r0, r5
 801aca4:	f7ff fc96 	bl	801a5d4 <_free_r>
 801aca8:	2000      	movs	r0, #0
 801acaa:	6360      	str	r0, [r4, #52]	; 0x34
 801acac:	e7c0      	b.n	801ac30 <__sflush_r+0x1c>
 801acae:	2301      	movs	r3, #1
 801acb0:	4628      	mov	r0, r5
 801acb2:	47b0      	blx	r6
 801acb4:	1c41      	adds	r1, r0, #1
 801acb6:	d1c8      	bne.n	801ac4a <__sflush_r+0x36>
 801acb8:	682b      	ldr	r3, [r5, #0]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d0c5      	beq.n	801ac4a <__sflush_r+0x36>
 801acbe:	2b1d      	cmp	r3, #29
 801acc0:	d001      	beq.n	801acc6 <__sflush_r+0xb2>
 801acc2:	2b16      	cmp	r3, #22
 801acc4:	d101      	bne.n	801acca <__sflush_r+0xb6>
 801acc6:	602f      	str	r7, [r5, #0]
 801acc8:	e7b1      	b.n	801ac2e <__sflush_r+0x1a>
 801acca:	89a3      	ldrh	r3, [r4, #12]
 801accc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acd0:	81a3      	strh	r3, [r4, #12]
 801acd2:	e7ad      	b.n	801ac30 <__sflush_r+0x1c>
 801acd4:	690f      	ldr	r7, [r1, #16]
 801acd6:	2f00      	cmp	r7, #0
 801acd8:	d0a9      	beq.n	801ac2e <__sflush_r+0x1a>
 801acda:	0793      	lsls	r3, r2, #30
 801acdc:	680e      	ldr	r6, [r1, #0]
 801acde:	bf08      	it	eq
 801ace0:	694b      	ldreq	r3, [r1, #20]
 801ace2:	600f      	str	r7, [r1, #0]
 801ace4:	bf18      	it	ne
 801ace6:	2300      	movne	r3, #0
 801ace8:	eba6 0807 	sub.w	r8, r6, r7
 801acec:	608b      	str	r3, [r1, #8]
 801acee:	f1b8 0f00 	cmp.w	r8, #0
 801acf2:	dd9c      	ble.n	801ac2e <__sflush_r+0x1a>
 801acf4:	6a21      	ldr	r1, [r4, #32]
 801acf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801acf8:	4643      	mov	r3, r8
 801acfa:	463a      	mov	r2, r7
 801acfc:	4628      	mov	r0, r5
 801acfe:	47b0      	blx	r6
 801ad00:	2800      	cmp	r0, #0
 801ad02:	dc06      	bgt.n	801ad12 <__sflush_r+0xfe>
 801ad04:	89a3      	ldrh	r3, [r4, #12]
 801ad06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad0a:	81a3      	strh	r3, [r4, #12]
 801ad0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad10:	e78e      	b.n	801ac30 <__sflush_r+0x1c>
 801ad12:	4407      	add	r7, r0
 801ad14:	eba8 0800 	sub.w	r8, r8, r0
 801ad18:	e7e9      	b.n	801acee <__sflush_r+0xda>
 801ad1a:	bf00      	nop
 801ad1c:	dfbffffe 	.word	0xdfbffffe

0801ad20 <_fflush_r>:
 801ad20:	b538      	push	{r3, r4, r5, lr}
 801ad22:	690b      	ldr	r3, [r1, #16]
 801ad24:	4605      	mov	r5, r0
 801ad26:	460c      	mov	r4, r1
 801ad28:	b913      	cbnz	r3, 801ad30 <_fflush_r+0x10>
 801ad2a:	2500      	movs	r5, #0
 801ad2c:	4628      	mov	r0, r5
 801ad2e:	bd38      	pop	{r3, r4, r5, pc}
 801ad30:	b118      	cbz	r0, 801ad3a <_fflush_r+0x1a>
 801ad32:	6a03      	ldr	r3, [r0, #32]
 801ad34:	b90b      	cbnz	r3, 801ad3a <_fflush_r+0x1a>
 801ad36:	f7ff faa7 	bl	801a288 <__sinit>
 801ad3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d0f3      	beq.n	801ad2a <_fflush_r+0xa>
 801ad42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ad44:	07d0      	lsls	r0, r2, #31
 801ad46:	d404      	bmi.n	801ad52 <_fflush_r+0x32>
 801ad48:	0599      	lsls	r1, r3, #22
 801ad4a:	d402      	bmi.n	801ad52 <_fflush_r+0x32>
 801ad4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad4e:	f7ff fc2a 	bl	801a5a6 <__retarget_lock_acquire_recursive>
 801ad52:	4628      	mov	r0, r5
 801ad54:	4621      	mov	r1, r4
 801ad56:	f7ff ff5d 	bl	801ac14 <__sflush_r>
 801ad5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad5c:	07da      	lsls	r2, r3, #31
 801ad5e:	4605      	mov	r5, r0
 801ad60:	d4e4      	bmi.n	801ad2c <_fflush_r+0xc>
 801ad62:	89a3      	ldrh	r3, [r4, #12]
 801ad64:	059b      	lsls	r3, r3, #22
 801ad66:	d4e1      	bmi.n	801ad2c <_fflush_r+0xc>
 801ad68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad6a:	f7ff fc1d 	bl	801a5a8 <__retarget_lock_release_recursive>
 801ad6e:	e7dd      	b.n	801ad2c <_fflush_r+0xc>

0801ad70 <_putc_r>:
 801ad70:	b570      	push	{r4, r5, r6, lr}
 801ad72:	460d      	mov	r5, r1
 801ad74:	4614      	mov	r4, r2
 801ad76:	4606      	mov	r6, r0
 801ad78:	b118      	cbz	r0, 801ad82 <_putc_r+0x12>
 801ad7a:	6a03      	ldr	r3, [r0, #32]
 801ad7c:	b90b      	cbnz	r3, 801ad82 <_putc_r+0x12>
 801ad7e:	f7ff fa83 	bl	801a288 <__sinit>
 801ad82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad84:	07d8      	lsls	r0, r3, #31
 801ad86:	d405      	bmi.n	801ad94 <_putc_r+0x24>
 801ad88:	89a3      	ldrh	r3, [r4, #12]
 801ad8a:	0599      	lsls	r1, r3, #22
 801ad8c:	d402      	bmi.n	801ad94 <_putc_r+0x24>
 801ad8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad90:	f7ff fc09 	bl	801a5a6 <__retarget_lock_acquire_recursive>
 801ad94:	68a3      	ldr	r3, [r4, #8]
 801ad96:	3b01      	subs	r3, #1
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	60a3      	str	r3, [r4, #8]
 801ad9c:	da05      	bge.n	801adaa <_putc_r+0x3a>
 801ad9e:	69a2      	ldr	r2, [r4, #24]
 801ada0:	4293      	cmp	r3, r2
 801ada2:	db12      	blt.n	801adca <_putc_r+0x5a>
 801ada4:	b2eb      	uxtb	r3, r5
 801ada6:	2b0a      	cmp	r3, #10
 801ada8:	d00f      	beq.n	801adca <_putc_r+0x5a>
 801adaa:	6823      	ldr	r3, [r4, #0]
 801adac:	1c5a      	adds	r2, r3, #1
 801adae:	6022      	str	r2, [r4, #0]
 801adb0:	701d      	strb	r5, [r3, #0]
 801adb2:	b2ed      	uxtb	r5, r5
 801adb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801adb6:	07da      	lsls	r2, r3, #31
 801adb8:	d405      	bmi.n	801adc6 <_putc_r+0x56>
 801adba:	89a3      	ldrh	r3, [r4, #12]
 801adbc:	059b      	lsls	r3, r3, #22
 801adbe:	d402      	bmi.n	801adc6 <_putc_r+0x56>
 801adc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801adc2:	f7ff fbf1 	bl	801a5a8 <__retarget_lock_release_recursive>
 801adc6:	4628      	mov	r0, r5
 801adc8:	bd70      	pop	{r4, r5, r6, pc}
 801adca:	4629      	mov	r1, r5
 801adcc:	4622      	mov	r2, r4
 801adce:	4630      	mov	r0, r6
 801add0:	f000 f802 	bl	801add8 <__swbuf_r>
 801add4:	4605      	mov	r5, r0
 801add6:	e7ed      	b.n	801adb4 <_putc_r+0x44>

0801add8 <__swbuf_r>:
 801add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adda:	460e      	mov	r6, r1
 801addc:	4614      	mov	r4, r2
 801adde:	4605      	mov	r5, r0
 801ade0:	b118      	cbz	r0, 801adea <__swbuf_r+0x12>
 801ade2:	6a03      	ldr	r3, [r0, #32]
 801ade4:	b90b      	cbnz	r3, 801adea <__swbuf_r+0x12>
 801ade6:	f7ff fa4f 	bl	801a288 <__sinit>
 801adea:	69a3      	ldr	r3, [r4, #24]
 801adec:	60a3      	str	r3, [r4, #8]
 801adee:	89a3      	ldrh	r3, [r4, #12]
 801adf0:	071a      	lsls	r2, r3, #28
 801adf2:	d525      	bpl.n	801ae40 <__swbuf_r+0x68>
 801adf4:	6923      	ldr	r3, [r4, #16]
 801adf6:	b31b      	cbz	r3, 801ae40 <__swbuf_r+0x68>
 801adf8:	6823      	ldr	r3, [r4, #0]
 801adfa:	6922      	ldr	r2, [r4, #16]
 801adfc:	1a98      	subs	r0, r3, r2
 801adfe:	6963      	ldr	r3, [r4, #20]
 801ae00:	b2f6      	uxtb	r6, r6
 801ae02:	4283      	cmp	r3, r0
 801ae04:	4637      	mov	r7, r6
 801ae06:	dc04      	bgt.n	801ae12 <__swbuf_r+0x3a>
 801ae08:	4621      	mov	r1, r4
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	f7ff ff88 	bl	801ad20 <_fflush_r>
 801ae10:	b9e0      	cbnz	r0, 801ae4c <__swbuf_r+0x74>
 801ae12:	68a3      	ldr	r3, [r4, #8]
 801ae14:	3b01      	subs	r3, #1
 801ae16:	60a3      	str	r3, [r4, #8]
 801ae18:	6823      	ldr	r3, [r4, #0]
 801ae1a:	1c5a      	adds	r2, r3, #1
 801ae1c:	6022      	str	r2, [r4, #0]
 801ae1e:	701e      	strb	r6, [r3, #0]
 801ae20:	6962      	ldr	r2, [r4, #20]
 801ae22:	1c43      	adds	r3, r0, #1
 801ae24:	429a      	cmp	r2, r3
 801ae26:	d004      	beq.n	801ae32 <__swbuf_r+0x5a>
 801ae28:	89a3      	ldrh	r3, [r4, #12]
 801ae2a:	07db      	lsls	r3, r3, #31
 801ae2c:	d506      	bpl.n	801ae3c <__swbuf_r+0x64>
 801ae2e:	2e0a      	cmp	r6, #10
 801ae30:	d104      	bne.n	801ae3c <__swbuf_r+0x64>
 801ae32:	4621      	mov	r1, r4
 801ae34:	4628      	mov	r0, r5
 801ae36:	f7ff ff73 	bl	801ad20 <_fflush_r>
 801ae3a:	b938      	cbnz	r0, 801ae4c <__swbuf_r+0x74>
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae40:	4621      	mov	r1, r4
 801ae42:	4628      	mov	r0, r5
 801ae44:	f000 f806 	bl	801ae54 <__swsetup_r>
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	d0d5      	beq.n	801adf8 <__swbuf_r+0x20>
 801ae4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ae50:	e7f4      	b.n	801ae3c <__swbuf_r+0x64>
	...

0801ae54 <__swsetup_r>:
 801ae54:	b538      	push	{r3, r4, r5, lr}
 801ae56:	4b2a      	ldr	r3, [pc, #168]	; (801af00 <__swsetup_r+0xac>)
 801ae58:	4605      	mov	r5, r0
 801ae5a:	6818      	ldr	r0, [r3, #0]
 801ae5c:	460c      	mov	r4, r1
 801ae5e:	b118      	cbz	r0, 801ae68 <__swsetup_r+0x14>
 801ae60:	6a03      	ldr	r3, [r0, #32]
 801ae62:	b90b      	cbnz	r3, 801ae68 <__swsetup_r+0x14>
 801ae64:	f7ff fa10 	bl	801a288 <__sinit>
 801ae68:	89a3      	ldrh	r3, [r4, #12]
 801ae6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae6e:	0718      	lsls	r0, r3, #28
 801ae70:	d422      	bmi.n	801aeb8 <__swsetup_r+0x64>
 801ae72:	06d9      	lsls	r1, r3, #27
 801ae74:	d407      	bmi.n	801ae86 <__swsetup_r+0x32>
 801ae76:	2309      	movs	r3, #9
 801ae78:	602b      	str	r3, [r5, #0]
 801ae7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ae7e:	81a3      	strh	r3, [r4, #12]
 801ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae84:	e034      	b.n	801aef0 <__swsetup_r+0x9c>
 801ae86:	0758      	lsls	r0, r3, #29
 801ae88:	d512      	bpl.n	801aeb0 <__swsetup_r+0x5c>
 801ae8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae8c:	b141      	cbz	r1, 801aea0 <__swsetup_r+0x4c>
 801ae8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae92:	4299      	cmp	r1, r3
 801ae94:	d002      	beq.n	801ae9c <__swsetup_r+0x48>
 801ae96:	4628      	mov	r0, r5
 801ae98:	f7ff fb9c 	bl	801a5d4 <_free_r>
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	6363      	str	r3, [r4, #52]	; 0x34
 801aea0:	89a3      	ldrh	r3, [r4, #12]
 801aea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aea6:	81a3      	strh	r3, [r4, #12]
 801aea8:	2300      	movs	r3, #0
 801aeaa:	6063      	str	r3, [r4, #4]
 801aeac:	6923      	ldr	r3, [r4, #16]
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	89a3      	ldrh	r3, [r4, #12]
 801aeb2:	f043 0308 	orr.w	r3, r3, #8
 801aeb6:	81a3      	strh	r3, [r4, #12]
 801aeb8:	6923      	ldr	r3, [r4, #16]
 801aeba:	b94b      	cbnz	r3, 801aed0 <__swsetup_r+0x7c>
 801aebc:	89a3      	ldrh	r3, [r4, #12]
 801aebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aec6:	d003      	beq.n	801aed0 <__swsetup_r+0x7c>
 801aec8:	4621      	mov	r1, r4
 801aeca:	4628      	mov	r0, r5
 801aecc:	f000 f884 	bl	801afd8 <__smakebuf_r>
 801aed0:	89a0      	ldrh	r0, [r4, #12]
 801aed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aed6:	f010 0301 	ands.w	r3, r0, #1
 801aeda:	d00a      	beq.n	801aef2 <__swsetup_r+0x9e>
 801aedc:	2300      	movs	r3, #0
 801aede:	60a3      	str	r3, [r4, #8]
 801aee0:	6963      	ldr	r3, [r4, #20]
 801aee2:	425b      	negs	r3, r3
 801aee4:	61a3      	str	r3, [r4, #24]
 801aee6:	6923      	ldr	r3, [r4, #16]
 801aee8:	b943      	cbnz	r3, 801aefc <__swsetup_r+0xa8>
 801aeea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801aeee:	d1c4      	bne.n	801ae7a <__swsetup_r+0x26>
 801aef0:	bd38      	pop	{r3, r4, r5, pc}
 801aef2:	0781      	lsls	r1, r0, #30
 801aef4:	bf58      	it	pl
 801aef6:	6963      	ldrpl	r3, [r4, #20]
 801aef8:	60a3      	str	r3, [r4, #8]
 801aefa:	e7f4      	b.n	801aee6 <__swsetup_r+0x92>
 801aefc:	2000      	movs	r0, #0
 801aefe:	e7f7      	b.n	801aef0 <__swsetup_r+0x9c>
 801af00:	200000a0 	.word	0x200000a0

0801af04 <_raise_r>:
 801af04:	291f      	cmp	r1, #31
 801af06:	b538      	push	{r3, r4, r5, lr}
 801af08:	4604      	mov	r4, r0
 801af0a:	460d      	mov	r5, r1
 801af0c:	d904      	bls.n	801af18 <_raise_r+0x14>
 801af0e:	2316      	movs	r3, #22
 801af10:	6003      	str	r3, [r0, #0]
 801af12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af16:	bd38      	pop	{r3, r4, r5, pc}
 801af18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801af1a:	b112      	cbz	r2, 801af22 <_raise_r+0x1e>
 801af1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801af20:	b94b      	cbnz	r3, 801af36 <_raise_r+0x32>
 801af22:	4620      	mov	r0, r4
 801af24:	f000 f830 	bl	801af88 <_getpid_r>
 801af28:	462a      	mov	r2, r5
 801af2a:	4601      	mov	r1, r0
 801af2c:	4620      	mov	r0, r4
 801af2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af32:	f000 b817 	b.w	801af64 <_kill_r>
 801af36:	2b01      	cmp	r3, #1
 801af38:	d00a      	beq.n	801af50 <_raise_r+0x4c>
 801af3a:	1c59      	adds	r1, r3, #1
 801af3c:	d103      	bne.n	801af46 <_raise_r+0x42>
 801af3e:	2316      	movs	r3, #22
 801af40:	6003      	str	r3, [r0, #0]
 801af42:	2001      	movs	r0, #1
 801af44:	e7e7      	b.n	801af16 <_raise_r+0x12>
 801af46:	2400      	movs	r4, #0
 801af48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801af4c:	4628      	mov	r0, r5
 801af4e:	4798      	blx	r3
 801af50:	2000      	movs	r0, #0
 801af52:	e7e0      	b.n	801af16 <_raise_r+0x12>

0801af54 <raise>:
 801af54:	4b02      	ldr	r3, [pc, #8]	; (801af60 <raise+0xc>)
 801af56:	4601      	mov	r1, r0
 801af58:	6818      	ldr	r0, [r3, #0]
 801af5a:	f7ff bfd3 	b.w	801af04 <_raise_r>
 801af5e:	bf00      	nop
 801af60:	200000a0 	.word	0x200000a0

0801af64 <_kill_r>:
 801af64:	b538      	push	{r3, r4, r5, lr}
 801af66:	4d07      	ldr	r5, [pc, #28]	; (801af84 <_kill_r+0x20>)
 801af68:	2300      	movs	r3, #0
 801af6a:	4604      	mov	r4, r0
 801af6c:	4608      	mov	r0, r1
 801af6e:	4611      	mov	r1, r2
 801af70:	602b      	str	r3, [r5, #0]
 801af72:	f7ee feab 	bl	8009ccc <_kill>
 801af76:	1c43      	adds	r3, r0, #1
 801af78:	d102      	bne.n	801af80 <_kill_r+0x1c>
 801af7a:	682b      	ldr	r3, [r5, #0]
 801af7c:	b103      	cbz	r3, 801af80 <_kill_r+0x1c>
 801af7e:	6023      	str	r3, [r4, #0]
 801af80:	bd38      	pop	{r3, r4, r5, pc}
 801af82:	bf00      	nop
 801af84:	2000b750 	.word	0x2000b750

0801af88 <_getpid_r>:
 801af88:	f7ee be98 	b.w	8009cbc <_getpid>

0801af8c <__swhatbuf_r>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	460c      	mov	r4, r1
 801af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af94:	2900      	cmp	r1, #0
 801af96:	b096      	sub	sp, #88	; 0x58
 801af98:	4615      	mov	r5, r2
 801af9a:	461e      	mov	r6, r3
 801af9c:	da0d      	bge.n	801afba <__swhatbuf_r+0x2e>
 801af9e:	89a3      	ldrh	r3, [r4, #12]
 801afa0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801afa4:	f04f 0100 	mov.w	r1, #0
 801afa8:	bf0c      	ite	eq
 801afaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801afae:	2340      	movne	r3, #64	; 0x40
 801afb0:	2000      	movs	r0, #0
 801afb2:	6031      	str	r1, [r6, #0]
 801afb4:	602b      	str	r3, [r5, #0]
 801afb6:	b016      	add	sp, #88	; 0x58
 801afb8:	bd70      	pop	{r4, r5, r6, pc}
 801afba:	466a      	mov	r2, sp
 801afbc:	f000 f848 	bl	801b050 <_fstat_r>
 801afc0:	2800      	cmp	r0, #0
 801afc2:	dbec      	blt.n	801af9e <__swhatbuf_r+0x12>
 801afc4:	9901      	ldr	r1, [sp, #4]
 801afc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801afca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801afce:	4259      	negs	r1, r3
 801afd0:	4159      	adcs	r1, r3
 801afd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801afd6:	e7eb      	b.n	801afb0 <__swhatbuf_r+0x24>

0801afd8 <__smakebuf_r>:
 801afd8:	898b      	ldrh	r3, [r1, #12]
 801afda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801afdc:	079d      	lsls	r5, r3, #30
 801afde:	4606      	mov	r6, r0
 801afe0:	460c      	mov	r4, r1
 801afe2:	d507      	bpl.n	801aff4 <__smakebuf_r+0x1c>
 801afe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801afe8:	6023      	str	r3, [r4, #0]
 801afea:	6123      	str	r3, [r4, #16]
 801afec:	2301      	movs	r3, #1
 801afee:	6163      	str	r3, [r4, #20]
 801aff0:	b002      	add	sp, #8
 801aff2:	bd70      	pop	{r4, r5, r6, pc}
 801aff4:	ab01      	add	r3, sp, #4
 801aff6:	466a      	mov	r2, sp
 801aff8:	f7ff ffc8 	bl	801af8c <__swhatbuf_r>
 801affc:	9900      	ldr	r1, [sp, #0]
 801affe:	4605      	mov	r5, r0
 801b000:	4630      	mov	r0, r6
 801b002:	f7fe ff31 	bl	8019e68 <_malloc_r>
 801b006:	b948      	cbnz	r0, 801b01c <__smakebuf_r+0x44>
 801b008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b00c:	059a      	lsls	r2, r3, #22
 801b00e:	d4ef      	bmi.n	801aff0 <__smakebuf_r+0x18>
 801b010:	f023 0303 	bic.w	r3, r3, #3
 801b014:	f043 0302 	orr.w	r3, r3, #2
 801b018:	81a3      	strh	r3, [r4, #12]
 801b01a:	e7e3      	b.n	801afe4 <__smakebuf_r+0xc>
 801b01c:	89a3      	ldrh	r3, [r4, #12]
 801b01e:	6020      	str	r0, [r4, #0]
 801b020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b024:	81a3      	strh	r3, [r4, #12]
 801b026:	9b00      	ldr	r3, [sp, #0]
 801b028:	6163      	str	r3, [r4, #20]
 801b02a:	9b01      	ldr	r3, [sp, #4]
 801b02c:	6120      	str	r0, [r4, #16]
 801b02e:	b15b      	cbz	r3, 801b048 <__smakebuf_r+0x70>
 801b030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b034:	4630      	mov	r0, r6
 801b036:	f000 f81d 	bl	801b074 <_isatty_r>
 801b03a:	b128      	cbz	r0, 801b048 <__smakebuf_r+0x70>
 801b03c:	89a3      	ldrh	r3, [r4, #12]
 801b03e:	f023 0303 	bic.w	r3, r3, #3
 801b042:	f043 0301 	orr.w	r3, r3, #1
 801b046:	81a3      	strh	r3, [r4, #12]
 801b048:	89a3      	ldrh	r3, [r4, #12]
 801b04a:	431d      	orrs	r5, r3
 801b04c:	81a5      	strh	r5, [r4, #12]
 801b04e:	e7cf      	b.n	801aff0 <__smakebuf_r+0x18>

0801b050 <_fstat_r>:
 801b050:	b538      	push	{r3, r4, r5, lr}
 801b052:	4d07      	ldr	r5, [pc, #28]	; (801b070 <_fstat_r+0x20>)
 801b054:	2300      	movs	r3, #0
 801b056:	4604      	mov	r4, r0
 801b058:	4608      	mov	r0, r1
 801b05a:	4611      	mov	r1, r2
 801b05c:	602b      	str	r3, [r5, #0]
 801b05e:	f7ee fe7a 	bl	8009d56 <_fstat>
 801b062:	1c43      	adds	r3, r0, #1
 801b064:	d102      	bne.n	801b06c <_fstat_r+0x1c>
 801b066:	682b      	ldr	r3, [r5, #0]
 801b068:	b103      	cbz	r3, 801b06c <_fstat_r+0x1c>
 801b06a:	6023      	str	r3, [r4, #0]
 801b06c:	bd38      	pop	{r3, r4, r5, pc}
 801b06e:	bf00      	nop
 801b070:	2000b750 	.word	0x2000b750

0801b074 <_isatty_r>:
 801b074:	b538      	push	{r3, r4, r5, lr}
 801b076:	4d06      	ldr	r5, [pc, #24]	; (801b090 <_isatty_r+0x1c>)
 801b078:	2300      	movs	r3, #0
 801b07a:	4604      	mov	r4, r0
 801b07c:	4608      	mov	r0, r1
 801b07e:	602b      	str	r3, [r5, #0]
 801b080:	f7ee fe79 	bl	8009d76 <_isatty>
 801b084:	1c43      	adds	r3, r0, #1
 801b086:	d102      	bne.n	801b08e <_isatty_r+0x1a>
 801b088:	682b      	ldr	r3, [r5, #0]
 801b08a:	b103      	cbz	r3, 801b08e <_isatty_r+0x1a>
 801b08c:	6023      	str	r3, [r4, #0]
 801b08e:	bd38      	pop	{r3, r4, r5, pc}
 801b090:	2000b750 	.word	0x2000b750

0801b094 <_init>:
 801b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b096:	bf00      	nop
 801b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b09a:	bc08      	pop	{r3}
 801b09c:	469e      	mov	lr, r3
 801b09e:	4770      	bx	lr

0801b0a0 <_fini>:
 801b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0a2:	bf00      	nop
 801b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0a6:	bc08      	pop	{r3}
 801b0a8:	469e      	mov	lr, r3
 801b0aa:	4770      	bx	lr
