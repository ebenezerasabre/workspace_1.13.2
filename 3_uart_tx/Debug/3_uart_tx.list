
3_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000578  08000580  00010580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000578  08000578  00010580  2**0
                  CONTENTS
  4 .ARM          00000000  08000578  08000578  00010580  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000578  08000580  00010580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000578  08000578  00010578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000580  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000580  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004b3  00000000  00000000  000105eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020f  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00010cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006b  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000117f7  00000000  00000000  00010dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007da  00000000  00000000  000225b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00063536  00000000  00000000  00022d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000174  00000000  00000000  000862c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00086438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000560 	.word	0x08000560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000560 	.word	0x08000560

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <pa0_adc_init>:
// find pin adc is connected to: find adc. look for additional functions in table
// Pin assignment and description

//using ADC_IN0, PA0

void pa0_adc_init(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <pa0_adc_init+0x90>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <pa0_adc_init+0x90>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]

	// set mode of PA0 to analog
	GPIOA_MODER_R |= (1UL<0);
 8000230:	23a0      	movs	r3, #160	; 0xa0
 8000232:	05da      	lsls	r2, r3, #23
 8000234:	23a0      	movs	r3, #160	; 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<1);
 800023c:	23a0      	movs	r3, #160	; 0xa0
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	23a0      	movs	r3, #160	; 0xa0
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2102      	movs	r1, #2
 8000248:	430a      	orrs	r2, r1
 800024a:	601a      	str	r2, [r3, #0]

	// set mode of PA1 to analog
	GPIOA_MODER_R |= (1UL<2);
 800024c:	23a0      	movs	r3, #160	; 0xa0
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	23a0      	movs	r3, #160	; 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2101      	movs	r1, #1
 8000258:	430a      	orrs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<3);
 800025c:	23a0      	movs	r3, #160	; 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	23a0      	movs	r3, #160	; 0xa0
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2108      	movs	r1, #8
 8000268:	430a      	orrs	r2, r1
 800026a:	601a      	str	r2, [r3, #0]

	// enable clock access to adc module
	RCC_APBENR2_R 	|= ADCEN;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <pa0_adc_init+0x94>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <pa0_adc_init+0x94>)
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0349      	lsls	r1, r1, #13
 8000276:	430a      	orrs	r2, r1
 8000278:	601a      	str	r2, [r3, #0]
//	Analog-to-digital converter (ADC)
	/*Following guide*/


	// data resolution
	ADC_CFGR1_R &= ~(1U<<3);
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <pa0_adc_init+0x98>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <pa0_adc_init+0x98>)
 8000280:	2108      	movs	r1, #8
 8000282:	438a      	bics	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
	ADC_CFGR1_R |= (1U<<4);
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <pa0_adc_init+0x98>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <pa0_adc_init+0x98>)
 800028c:	2110      	movs	r1, #16
 800028e:	430a      	orrs	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
	// conversion sequence length

//	ADC_CFGR1_R &= ~ADC_CHSELRMOD;  //~(1U<<21); //ADC_CHSELRMOD;

//	ADC_CHSELR_R |= (1U<<0); // CH1 pa0
	ADC_CHSELR_R |= (1U<<1); // CH1 pa1
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <pa0_adc_init+0x9c>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <pa0_adc_init+0x9c>)
 8000298:	2102      	movs	r1, #2
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]


	//enable adc module
	ADC_CR_R |= ADC_ADEN;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <pa0_adc_init+0xa0>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <pa0_adc_init+0xa0>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]

}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40021034 	.word	0x40021034
 80002b4:	40021040 	.word	0x40021040
 80002b8:	4001240c 	.word	0x4001240c
 80002bc:	40012428 	.word	0x40012428
 80002c0:	40012408 	.word	0x40012408

080002c4 <adc_cnvrsn>:
	while(!(ADC_ISR_R & ADC_ISR_EOC)){}
	return ADC_DR_R;
}


void adc_cnvrsn(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	// Continuous conversion mode
	ADC_CFGR1_R |= (1U<<13);
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <adc_cnvrsn+0x24>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <adc_cnvrsn+0x24>)
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	0189      	lsls	r1, r1, #6
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]

	// conversion sequence start
	ADC_CR_R |= ADC_ADSTART;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <adc_cnvrsn+0x28>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <adc_cnvrsn+0x28>)
 80002dc:	2104      	movs	r1, #4
 80002de:	430a      	orrs	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	4001240c 	.word	0x4001240c
 80002ec:	40012408 	.word	0x40012408

080002f0 <main>:
char key; //character received from uart
int count = 0;
int sensor_value; // for adc

int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

	 pa0_adc_init();
 80002f4:	f7ff ff94 	bl	8000220 <pa0_adc_init>



	RCC->IOPENR |= GPIOA_EN;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0x48>)
 80002fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <main+0x48>)
 80002fe:	2101      	movs	r1, #1
 8000300:	430a      	orrs	r2, r1
 8000302:	635a      	str	r2, [r3, #52]	; 0x34
	// SET GPIOA5 as output pin
	GPIOA->MODER |= (1U<<10);
 8000304:	23a0      	movs	r3, #160	; 0xa0
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	23a0      	movs	r3, #160	; 0xa0
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	00c9      	lsls	r1, r1, #3
 8000312:	430a      	orrs	r2, r1
 8000314:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000316:	23a0      	movs	r3, #160	; 0xa0
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	23a0      	movs	r3, #160	; 0xa0
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	4906      	ldr	r1, [pc, #24]	; (800033c <main+0x4c>)
 8000322:	400a      	ands	r2, r1
 8000324:	601a      	str	r2, [r3, #0]

	usart2_tx_init();
 8000326:	f000 f80b 	bl	8000340 <usart2_tx_init>

	adc_cnvrsn();
 800032a:	f7ff ffcb 	bl	80002c4 <adc_cnvrsn>
//		sensor_value = adc_read();
//
//		printf("sensor value: %d\n", sensor_value);

//*
		 usart2_write('Y');
 800032e:	2059      	movs	r0, #89	; 0x59
 8000330:	f000 f8b2 	bl	8000498 <usart2_write>
 8000334:	e7fb      	b.n	800032e <main+0x3e>
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	40021000 	.word	0x40021000
 800033c:	fffff7ff 	.word	0xfffff7ff

08000340 <usart2_tx_init>:

	}
}


void usart2_tx_init(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	/* configure uart gpio pins */

	/*Enable clock access to gpioa*/
	RCC->IOPENR |= GPIOA_EN;
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <usart2_tx_init+0x108>)
 8000346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000348:	4b3f      	ldr	r3, [pc, #252]	; (8000448 <usart2_tx_init+0x108>)
 800034a:	2101      	movs	r1, #1
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34

	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &= ~(1U<<4);
 8000350:	23a0      	movs	r3, #160	; 0xa0
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	23a0      	movs	r3, #160	; 0xa0
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	2110      	movs	r1, #16
 800035c:	438a      	bics	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 8000360:	23a0      	movs	r3, #160	; 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	23a0      	movs	r3, #160	; 0xa0
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2120      	movs	r1, #32
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]


	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<6);
 8000370:	23a0      	movs	r3, #160	; 0xa0
 8000372:	05db      	lsls	r3, r3, #23
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	23a0      	movs	r3, #160	; 0xa0
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	438a      	bics	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<7);
 8000380:	23a0      	movs	r3, #160	; 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]


	/* Set PA2 alternate function type to UART_TX (AF1)*/
	//alternate function mapping in data sheet to get whieh AF at PA2
	//	GPIOx_AFRL	0001: AF1 AFSEL8-11
	GPIOA->AFR[0]  |= (1U<<8);
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	6a1a      	ldr	r2, [r3, #32]
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	0049      	lsls	r1, r1, #1
 800039e:	430a      	orrs	r2, r1
 80003a0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]  &= ~(1U<<9);
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	6a1a      	ldr	r2, [r3, #32]
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	4927      	ldr	r1, [pc, #156]	; (800044c <usart2_tx_init+0x10c>)
 80003ae:	400a      	ands	r2, r1
 80003b0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]  &= ~(1U<<10);
 80003b2:	23a0      	movs	r3, #160	; 0xa0
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	6a1a      	ldr	r2, [r3, #32]
 80003b8:	23a0      	movs	r3, #160	; 0xa0
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	4924      	ldr	r1, [pc, #144]	; (8000450 <usart2_tx_init+0x110>)
 80003be:	400a      	ands	r2, r1
 80003c0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]  &= ~(1U<<11);
 80003c2:	23a0      	movs	r3, #160	; 0xa0
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	6a1a      	ldr	r2, [r3, #32]
 80003c8:	23a0      	movs	r3, #160	; 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	4921      	ldr	r1, [pc, #132]	; (8000454 <usart2_tx_init+0x114>)
 80003ce:	400a      	ands	r2, r1
 80003d0:	621a      	str	r2, [r3, #32]

	/*Set PA3 alternate function type to UART_RX (AF1)*/
	// GPIOx_AFRL	0001: AF1 AFSEL12-15
	GPIOA->AFR[1]  |= (1U<<12);
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003d8:	23a0      	movs	r3, #160	; 0xa0
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0149      	lsls	r1, r1, #5
 80003e0:	430a      	orrs	r2, r1
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1]  &= ~(1U<<13);
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ea:	23a0      	movs	r3, #160	; 0xa0
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	491a      	ldr	r1, [pc, #104]	; (8000458 <usart2_tx_init+0x118>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1]  &= ~(1U<<14);
 80003f4:	23a0      	movs	r3, #160	; 0xa0
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003fa:	23a0      	movs	r3, #160	; 0xa0
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	4917      	ldr	r1, [pc, #92]	; (800045c <usart2_tx_init+0x11c>)
 8000400:	400a      	ands	r2, r1
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1]  &= ~(1U<<15);
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	4914      	ldr	r1, [pc, #80]	; (8000460 <usart2_tx_init+0x120>)
 8000410:	400a      	ands	r2, r1
 8000412:	625a      	str	r2, [r3, #36]	; 0x24


	// enable clock access to usart2 peripheral
	RCC->APBENR1 |= USART2_EN;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <usart2_tx_init+0x108>)
 8000416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <usart2_tx_init+0x108>)
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	0289      	lsls	r1, r1, #10
 800041e:	430a      	orrs	r2, r1
 8000420:	63da      	str	r2, [r3, #60]	; 0x3c

	// configure usart2 baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000422:	23e1      	movs	r3, #225	; 0xe1
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	490f      	ldr	r1, [pc, #60]	; (8000464 <usart2_tx_init+0x124>)
 8000428:	480f      	ldr	r0, [pc, #60]	; (8000468 <usart2_tx_init+0x128>)
 800042a:	001a      	movs	r2, r3
 800042c:	f000 f81e 	bl	800046c <uart_set_baudrate>

	//enable usart tx and rx transfer directions
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <usart2_tx_init+0x128>)
 8000432:	220c      	movs	r2, #12
 8000434:	601a      	str	r2, [r3, #0]

	// enable usart module
	USART2->CR1 |= CR1_UE;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <usart2_tx_init+0x128>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <usart2_tx_init+0x128>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	601a      	str	r2, [r3, #0]

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	fffffdff 	.word	0xfffffdff
 8000450:	fffffbff 	.word	0xfffffbff
 8000454:	fffff7ff 	.word	0xfffff7ff
 8000458:	ffffdfff 	.word	0xffffdfff
 800045c:	ffffbfff 	.word	0xffffbfff
 8000460:	ffff7fff 	.word	0xffff7fff
 8000464:	00f42400 	.word	0x00f42400
 8000468:	40004400 	.word	0x40004400

0800046c <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periph_clk, uint32_t baud_rate){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	USARTx->BRR = ((periph_clk + (baud_rate/2U)) / baud_rate);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	085a      	lsrs	r2, r3, #1
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	18d3      	adds	r3, r2, r3
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff fe40 	bl	8000108 <__udivsi3>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	60da      	str	r2, [r3, #12]
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b004      	add	sp, #16
 8000496:	bd80      	pop	{r7, pc}

08000498 <usart2_write>:

void usart2_write(int ch){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while(!(USART2->ISR & ISR_TXE))
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <usart2_write+0x28>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	4013      	ands	r3, r2
 80004aa:	d0fa      	beq.n	80004a2 <usart2_write+0xa>
		;

	// write to transmit_data_register
	USART2->TDR = (ch & 0xFF);
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <usart2_write+0x28>)
 80004b0:	21ff      	movs	r1, #255	; 0xff
 80004b2:	400a      	ands	r2, r1
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40004400 	.word	0x40004400

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	e000      	b.n	80004cc <Reset_Handler+0x8>
 80004ca:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 f811 	bl	8000518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fefb 	bl	80002f0 <main>

080004fa <LoopForever>:

LoopForever:
  b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000508:	08000580 	.word	0x08000580
  ldr r2, =_sbss
 800050c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000510:	2000001c 	.word	0x2000001c

08000514 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_COMP_IRQHandler>
	...

08000518 <__libc_init_array>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2600      	movs	r6, #0
 800051c:	4c0c      	ldr	r4, [pc, #48]	; (8000550 <__libc_init_array+0x38>)
 800051e:	4d0d      	ldr	r5, [pc, #52]	; (8000554 <__libc_init_array+0x3c>)
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	10a4      	asrs	r4, r4, #2
 8000524:	42a6      	cmp	r6, r4
 8000526:	d109      	bne.n	800053c <__libc_init_array+0x24>
 8000528:	2600      	movs	r6, #0
 800052a:	f000 f819 	bl	8000560 <_init>
 800052e:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <__libc_init_array+0x40>)
 8000530:	4d0a      	ldr	r5, [pc, #40]	; (800055c <__libc_init_array+0x44>)
 8000532:	1b64      	subs	r4, r4, r5
 8000534:	10a4      	asrs	r4, r4, #2
 8000536:	42a6      	cmp	r6, r4
 8000538:	d105      	bne.n	8000546 <__libc_init_array+0x2e>
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	00b3      	lsls	r3, r6, #2
 800053e:	58eb      	ldr	r3, [r5, r3]
 8000540:	4798      	blx	r3
 8000542:	3601      	adds	r6, #1
 8000544:	e7ee      	b.n	8000524 <__libc_init_array+0xc>
 8000546:	00b3      	lsls	r3, r6, #2
 8000548:	58eb      	ldr	r3, [r5, r3]
 800054a:	4798      	blx	r3
 800054c:	3601      	adds	r6, #1
 800054e:	e7f2      	b.n	8000536 <__libc_init_array+0x1e>
 8000550:	08000578 	.word	0x08000578
 8000554:	08000578 	.word	0x08000578
 8000558:	0800057c 	.word	0x0800057c
 800055c:	08000578 	.word	0x08000578

08000560 <_init>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr

0800056c <_fini>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr
