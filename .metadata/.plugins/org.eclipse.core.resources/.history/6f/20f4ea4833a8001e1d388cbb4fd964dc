/*
 * uart.c
 *
 *  Created on: Nov 16, 2023
 *      Author: ebenezer
 */
#include "uart.h"


/** Enable bits **/
#define USART2EN    (1U<<17)
#define UE          (1U<<0)
#define RE          (1U<<2)
#define TE          (1U<<3)
#define TXE         (1U<<7)
#define RXNE        (1U<<5) 


#define SYS_FREQ		16000000
#define APB1_CLK		SYS_FREQ
#define UART_BAUDRATE 	115200


void usart_init(void){

    // enable clock access to usart2
    RCC_APBENR1 |= USART2EN;

    // set usart gpins to analog in gpio.c

    // set usart pins alternate functions
    // using usart2, set alternate function (search alternate function mapping in datasheet )
    // usart2_tx AF1  PA2, usart2_rx AF1 PA3

    // configure baudrate
    uart_set_baudrate(APB1_CLK, UART_BAUDRATE);

    // enable usart tx and rx transfer functions
    USART2_CR1 |= TE;
    USART2_CR1 |= RE;

    // enable usart module
    USART2_CR1 |= UE;
}

void usart_write(int ch){
    // make sure transmit data register is not empty
    while(!(USART2_ISR & TXE))
        ;
    // write charater to data register
    USART2_TDR = (ch & 0xFF); 
}

char usart_read(void){
    // make usre receive data register is not empty
    while(!(USART2_ISR & RXNE))
        ;
    // return data read
    return USART2_RDR; 
}

void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
	// to set baudrate
	//peripheral clock, 16MHz
	// usart_brr registers
    USART2_BRR = ((periph_clk + (baudrate/2U)) / baudrate);
}





