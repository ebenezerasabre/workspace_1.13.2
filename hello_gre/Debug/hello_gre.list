
hello_gre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800478c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  080047e8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080047e8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfc8  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e0f  00000000  00000000  0002d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000862  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c756  00000000  00000000  000301e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccb8  00000000  00000000  0004c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba42e  00000000  00000000  000595f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b54  00000000  00000000  00113a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00116574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080046a0 	.word	0x080046a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080046a0 	.word	0x080046a0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t modeSelection = 0;
uint8_t pData[3] = {1,2,3};
char msg[] = "Hello world\n";

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if(GPIO_Pin == USER_BUTTON_Pin){
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	019b      	lsls	r3, r3, #6
 8000654:	429a      	cmp	r2, r3
 8000656:	d10c      	bne.n	8000672 <HAL_GPIO_EXTI_Falling_Callback+0x32>
	  modeSelection +=1;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000662:	701a      	strb	r2, [r3, #0]
	  if(modeSelection > 2) modeSelection = 0;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d902      	bls.n	8000672 <HAL_GPIO_EXTI_Falling_Callback+0x32>
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]

  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000170 	.word	0x20000170

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fb37 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f847 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f95b 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f90b 	bl	80008ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000696:	f000 f89f 	bl	80007d8 <MX_ADC1_Init>
		//HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout);
		//HAL_UART_Transmit(&huart2, (const uint8_t*) msg, 13, 100);
		//HAL_UART_Transmit(&huart2, (const uint8_t*)pData, 12, 100);

	  // Test: Set GPIO pin high
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	00d9      	lsls	r1, r3, #3
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2201      	movs	r2, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fc45 	bl	8001f34 <HAL_GPIO_WritePin>

	  // Get ADC value
	  HAL_ADC_Start(&hadc1);
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <main+0x90>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 feab 	bl	8001408 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006b2:	2301      	movs	r3, #1
 80006b4:	425a      	negs	r2, r3
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <main+0x90>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fef2 	bl	80014a4 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <main+0x90>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 ff82 	bl	80015cc <HAL_ADC_GetValue>
 80006c8:	0002      	movs	r2, r0
 80006ca:	240e      	movs	r4, #14
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	801a      	strh	r2, [r3, #0]

	  // Test: Set GPIO pin low
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	00d9      	lsls	r1, r3, #3
 80006d4:	23a0      	movs	r3, #160	; 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fc2a 	bl	8001f34 <HAL_GPIO_WritePin>

	  // convert to string and print
	  sprintf(msg, "%hu\r\n", raw);
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	490b      	ldr	r1, [pc, #44]	; (8000714 <main+0x94>)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fb33 	bl	8003d54 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd07 	bl	8000104 <strlen>
 80006f6:	0003      	movs	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	2301      	movs	r3, #1
 80006fc:	425b      	negs	r3, r3
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <main+0x98>)
 8000702:	f002 fc51 	bl	8002fa8 <HAL_UART_Transmit>

	  HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fb7c 	bl	8000e04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800070c:	e7c5      	b.n	800069a <main+0x1a>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000078 	.word	0x20000078
 8000714:	080046b8 	.word	0x080046b8
 8000718:	200000dc 	.word	0x200000dc

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b095      	sub	sp, #84	; 0x54
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	2414      	movs	r4, #20
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	233c      	movs	r3, #60	; 0x3c
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 fb31 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	2310      	movs	r3, #16
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f003 fb2a 	bl	8003d94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	0018      	movs	r0, r3
 8000746:	f001 fc47 	bl	8001fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	0052      	lsls	r2, r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000758:	0021      	movs	r1, r4
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2202      	movs	r2, #2
 800076a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2208      	movs	r2, #8
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	0292      	lsls	r2, r2, #10
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	0492      	lsls	r2, r2, #18
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0592      	lsls	r2, r2, #22
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	187b      	adds	r3, r7, r1
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fc69 	bl	8002070 <HAL_RCC_OscConfig>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007a2:	f000 f94f 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2202      	movs	r2, #2
 80007b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2102      	movs	r1, #2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 ffb4 	bl	8002730 <HAL_RCC_ClockConfig>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007cc:	f000 f93a 	bl	8000a44 <Error_Handler>
  }
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b015      	add	sp, #84	; 0x54
 80007d6:	bd90      	pop	{r4, r7, pc}

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	0018      	movs	r0, r3
 80007e2:	230c      	movs	r3, #12
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f003 fad4 	bl	8003d94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ec:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_ADC1_Init+0xcc>)
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <MX_ADC1_Init+0xd0>)
 80007f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_ADC1_Init+0xcc>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	05d2      	lsls	r2, r2, #23
 80007f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_ADC1_Init+0xcc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800080e:	2204      	movs	r2, #4
 8000810:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000814:	2200      	movs	r2, #0
 8000816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800081a:	2200      	movs	r2, #0
 800081c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000820:	2200      	movs	r2, #0
 8000822:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000826:	2201      	movs	r2, #1
 8000828:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800082c:	2220      	movs	r2, #32
 800082e:	2100      	movs	r1, #0
 8000830:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000840:	222c      	movs	r2, #44	; 0x2c
 8000842:	2100      	movs	r1, #0
 8000844:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000854:	2200      	movs	r2, #0
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800085a:	223c      	movs	r2, #60	; 0x3c
 800085c:	2100      	movs	r1, #0
 800085e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000862:	2200      	movs	r2, #0
 8000864:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_ADC1_Init+0xcc>)
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fc25 	bl	80010b8 <HAL_ADC_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000872:	f000 f8e7 	bl	8000a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_ADC1_Init+0xcc>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fea8 	bl	80015e4 <HAL_ADC_ConfigChannel>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000898:	f000 f8d4 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000078 	.word	0x20000078
 80008a8:	40012400 	.word	0x40012400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008b2:	4a24      	ldr	r2, [pc, #144]	; (8000944 <MX_USART2_UART_Init+0x98>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008b8:	22e1      	movs	r2, #225	; 0xe1
 80008ba:	0252      	lsls	r2, r2, #9
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fb00 	bl	8002efc <HAL_UART_Init>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f8a0 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x94>)
 8000906:	2100      	movs	r1, #0
 8000908:	0018      	movs	r0, r3
 800090a:	f003 f943 	bl	8003b94 <HAL_UARTEx_SetTxFifoThreshold>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f897 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_USART2_UART_Init+0x94>)
 8000918:	2100      	movs	r1, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f003 f97a 	bl	8003c14 <HAL_UARTEx_SetRxFifoThreshold>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f88e 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x94>)
 800092a:	0018      	movs	r0, r3
 800092c:	f003 f8f8 	bl	8003b20 <HAL_UARTEx_DisableFifoMode>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f886 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200000dc 	.word	0x200000dc
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	240c      	movs	r4, #12
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 fa1b 	bl	8003d94 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <MX_GPIO_Init+0xf4>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_GPIO_Init+0xf4>)
 800097c:	2120      	movs	r1, #32
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2220      	movs	r2, #32
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_GPIO_Init+0xf4>)
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fac0 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0192      	lsls	r2, r2, #6
 80009ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2284      	movs	r2, #132	; 0x84
 80009c0:	0392      	lsls	r2, r2, #14
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_GPIO_Init+0xf8>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f001 f943 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2220      	movs	r2, #32
 80009da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2201      	movs	r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2202      	movs	r2, #2
 80009ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009ee:	193a      	adds	r2, r7, r4
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 f930 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	00d2      	lsls	r2, r2, #3
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2288      	movs	r2, #136	; 0x88
 8000a0a:	0352      	lsls	r2, r2, #13
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f91d 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2101      	movs	r1, #1
 8000a26:	2007      	movs	r0, #7
 8000a28:	f001 f8e6 	bl	8001bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a2c:	2007      	movs	r0, #7
 8000a2e:	f001 f8f8 	bl	8001c22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b009      	add	sp, #36	; 0x24
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	50000800 	.word	0x50000800

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0549      	lsls	r1, r1, #21
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	055b      	lsls	r3, r3, #21
 8000a84:	4013      	ands	r3, r2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b08b      	sub	sp, #44	; 0x2c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2414      	movs	r4, #20
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f003 f972 	bl	8003d94 <memset>
  if(hadc->Instance==ADC1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <HAL_ADC_MspInit+0x80>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d129      	bne.n	8000b0e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0349      	lsls	r1, r1, #13
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	035b      	lsls	r3, r3, #13
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_ADC_MspInit+0x84>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2203      	movs	r2, #3
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	193a      	adds	r2, r7, r4
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f8a7 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b00b      	add	sp, #44	; 0x2c
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40012400 	.word	0x40012400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b09d      	sub	sp, #116	; 0x74
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	235c      	movs	r3, #92	; 0x5c
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f003 f92e 	bl	8003d94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	2410      	movs	r4, #16
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	234c      	movs	r3, #76	; 0x4c
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f003 f926 	bl	8003d94 <memset>
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d13e      	bne.n	8000bd0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2202      	movs	r2, #2
 8000b56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 ff8f 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff ff6b 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ba2:	215c      	movs	r1, #92	; 0x5c
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	187a      	adds	r2, r7, r1
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 f846 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b01d      	add	sp, #116	; 0x74
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8e2 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 f9aa 	bl	8001f70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f9a5 	bl	8001f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f003 f8a2 	bl	8003da4 <__errno>
 8000c60:	0003      	movs	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	425b      	negs	r3, r3
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d2      	adds	r2, r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b006      	add	sp, #24
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20024000 	.word	0x20024000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000174 	.word	0x20000174
 8000c94:	200002c8 	.word	0x200002c8

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff fff6 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f003 f86d 	bl	8003db0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cd6:	f7ff fcd3 	bl	8000680 <main>

08000cda <LoopForever>:

LoopForever:
  b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ce8:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000cec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cf0:	200002c4 	.word	0x200002c4

08000cf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_COMP_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Init+0x3c>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0049      	lsls	r1, r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f810 	bl	8000d38 <HAL_InitTick>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe94 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d02b      	beq.n	8000da8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0x8c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	23fa      	movs	r3, #250	; 0xfa
 8000d5c:	0098      	lsls	r0, r3, #2
 8000d5e:	f7ff f9e3 	bl	8000128 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff f9de 	bl	8000128 <__udivsi3>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 ff67 	bl	8001c42 <HAL_SYSTICK_Config>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d112      	bne.n	8000d9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80a      	bhi.n	8000d94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 ff36 	bl	8001bf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_InitTick+0x90>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00d      	b.n	8000db0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e008      	b.n	8000db0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b005      	add	sp, #20
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000178 	.word	0x20000178

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000178 	.word	0x20000178

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff fff0 	bl	8000df0 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	f7ff ffe0 	bl	8000df0 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008

08000e4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	fe3fffff 	.word	0xfe3fffff

08000e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	23e0      	movs	r3, #224	; 0xe0
 8000e82:	045b      	lsls	r3, r3, #17
 8000e84:	4013      	ands	r3, r2
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	43d2      	mvns	r2, r2
 8000eac:	401a      	ands	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4099      	lsls	r1, r3
 8000eb8:	000b      	movs	r3, r1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	2104      	movs	r1, #4
 8000eda:	400a      	ands	r2, r1
 8000edc:	2107      	movs	r1, #7
 8000ede:	4091      	lsls	r1, r2
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	0013      	movs	r3, r2
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4013      	ands	r3, r2
 8000f08:	d101      	bne.n	8000f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	211f      	movs	r1, #31
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0e9b      	lsrs	r3, r3, #26
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	4019      	ands	r1, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	201f      	movs	r0, #31
 8000f44:	4003      	ands	r3, r0
 8000f46:	4099      	lsls	r1, r3
 8000f48:	000b      	movs	r3, r1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b004      	add	sp, #16
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	0b5b      	lsrs	r3, r3, #13
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	0352      	lsls	r2, r2, #13
 8000f8c:	0b52      	lsrs	r2, r2, #13
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	401a      	ands	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	07ffff00 	.word	0x07ffff00

08000fd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <LL_ADC_EnableInternalRegulator+0x24>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	0552      	lsls	r2, r2, #21
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	6fffffe8 	.word	0x6fffffe8

08001000 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	401a      	ands	r2, r3
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	055b      	lsls	r3, r3, #21
 8001016:	429a      	cmp	r2, r3
 8001018:	d101      	bne.n	800101e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800101e:	2300      	movs	r3, #0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <LL_ADC_Enable+0x20>)
 8001036:	4013      	ands	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}
 8001048:	7fffffe8 	.word	0x7fffffe8

0800104c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <LL_ADC_IsEnabled+0x18>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_ADC_IsEnabled+0x1a>
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <LL_ADC_REG_StartConversion+0x20>)
 800107e:	4013      	ands	r3, r2
 8001080:	2204      	movs	r2, #4
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	7fffffe8 	.word	0x7fffffe8

08001094 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2204      	movs	r2, #4
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d101      	bne.n	80010ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	231f      	movs	r3, #31
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e17f      	b.n	80013de <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10a      	bne.n	80010fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fcd5 	bl	8000a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2254      	movs	r2, #84	; 0x54
 80010f8:	2100      	movs	r1, #0
 80010fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ff7d 	bl	8001000 <LL_ADC_IsInternalRegulatorEnabled>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d115      	bne.n	8001136 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff62 	bl	8000fd8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001114:	4bb4      	ldr	r3, [pc, #720]	; (80013e8 <HAL_ADC_Init+0x330>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	49b4      	ldr	r1, [pc, #720]	; (80013ec <HAL_ADC_Init+0x334>)
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff f804 	bl	8000128 <__udivsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	3301      	adds	r3, #1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001128:	e002      	b.n	8001130 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff60 	bl	8001000 <LL_ADC_IsInternalRegulatorEnabled>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d10f      	bne.n	8001164 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	2210      	movs	r2, #16
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	2201      	movs	r2, #1
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800115c:	231f      	movs	r3, #31
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff93 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800116e:	0003      	movs	r3, r0
 8001170:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	2210      	movs	r2, #16
 8001178:	4013      	ands	r3, r2
 800117a:	d000      	beq.n	800117e <HAL_ADC_Init+0xc6>
 800117c:	e122      	b.n	80013c4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d000      	beq.n	8001186 <HAL_ADC_Init+0xce>
 8001184:	e11e      	b.n	80013c4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a99      	ldr	r2, [pc, #612]	; (80013f0 <HAL_ADC_Init+0x338>)
 800118c:	4013      	ands	r3, r2
 800118e:	2202      	movs	r2, #2
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff ff56 	bl	800104c <LL_ADC_IsEnabled>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d000      	beq.n	80011a6 <HAL_ADC_Init+0xee>
 80011a4:	e0ad      	b.n	8001302 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7e1b      	ldrb	r3, [r3, #24]
 80011ae:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7e5b      	ldrb	r3, [r3, #25]
 80011b6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7e9b      	ldrb	r3, [r3, #26]
 80011be:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <HAL_ADC_Init+0x118>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_Init+0x11a>
 80011d0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011d2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011d8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da04      	bge.n	80011ec <HAL_ADC_Init+0x134>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	085b      	lsrs	r3, r3, #1
 80011ea:	e001      	b.n	80011f0 <HAL_ADC_Init+0x138>
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80011f0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	212c      	movs	r1, #44	; 0x2c
 80011f6:	5c5b      	ldrb	r3, [r3, r1]
 80011f8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011fa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2220      	movs	r2, #32
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d115      	bne.n	8001238 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7e9b      	ldrb	r3, [r3, #26]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	0252      	lsls	r2, r2, #9
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	e00b      	b.n	8001238 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	2220      	movs	r2, #32
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2201      	movs	r2, #1
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001244:	23e0      	movs	r3, #224	; 0xe0
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800124e:	4313      	orrs	r3, r2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_ADC_Init+0x33c>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	0f9b      	lsrs	r3, r3, #30
 8001272:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001278:	4313      	orrs	r3, r2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	223c      	movs	r2, #60	; 0x3c
 8001284:	5c9b      	ldrb	r3, [r3, r2]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d111      	bne.n	80012ae <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	0f9b      	lsrs	r3, r3, #30
 8001290:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001296:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800129c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80012a2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	2201      	movs	r2, #1
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_ADC_Init+0x340>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	061b      	lsls	r3, r3, #24
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d018      	beq.n	8001302 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	05db      	lsls	r3, r3, #23
 80012d8:	429a      	cmp	r2, r3
 80012da:	d012      	beq.n	8001302 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	061b      	lsls	r3, r3, #24
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d00c      	beq.n	8001302 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012e8:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_ADC_Init+0x344>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_ADC_Init+0x348>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	23f0      	movs	r3, #240	; 0xf0
 80012f8:	039b      	lsls	r3, r3, #14
 80012fa:	401a      	ands	r2, r3
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_ADC_Init+0x344>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	001a      	movs	r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	f7ff fdbe 	bl	8000e8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131a:	493a      	ldr	r1, [pc, #232]	; (8001404 <HAL_ADC_Init+0x34c>)
 800131c:	001a      	movs	r2, r3
 800131e:	f7ff fdb6 	bl	8000e8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2110      	movs	r1, #16
 8001336:	4249      	negs	r1, r1
 8001338:	430a      	orrs	r2, r1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
 800133c:	e018      	b.n	8001370 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	039b      	lsls	r3, r3, #14
 8001346:	429a      	cmp	r2, r3
 8001348:	d112      	bne.n	8001370 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	3b01      	subs	r3, #1
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	221c      	movs	r2, #28
 800135a:	4013      	ands	r3, r2
 800135c:	2210      	movs	r2, #16
 800135e:	4252      	negs	r2, r2
 8001360:	409a      	lsls	r2, r3
 8001362:	0011      	movs	r1, r2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2100      	movs	r1, #0
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fda6 	bl	8000ec8 <LL_ADC_GetSamplingTimeCommonChannels>
 800137c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001382:	429a      	cmp	r2, r3
 8001384:	d10b      	bne.n	800139e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	2203      	movs	r2, #3
 8001392:	4393      	bics	r3, r2
 8001394:	2201      	movs	r2, #1
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800139c:	e01c      	b.n	80013d8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	2212      	movs	r2, #18
 80013a4:	4393      	bics	r3, r2
 80013a6:	2210      	movs	r2, #16
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	2201      	movs	r2, #1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013ba:	231f      	movs	r3, #31
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013c2:	e009      	b.n	80013d8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	2210      	movs	r2, #16
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013d0:	231f      	movs	r3, #31
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013d8:	231f      	movs	r3, #31
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	781b      	ldrb	r3, [r3, #0]
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b008      	add	sp, #32
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000000 	.word	0x20000000
 80013ec:	00030d40 	.word	0x00030d40
 80013f0:	fffffefd 	.word	0xfffffefd
 80013f4:	fffe0201 	.word	0xfffe0201
 80013f8:	1ffffc02 	.word	0x1ffffc02
 80013fc:	40012708 	.word	0x40012708
 8001400:	ffc3ffff 	.word	0xffc3ffff
 8001404:	07ffff04 	.word	0x07ffff04

08001408 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fe3d 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d135      	bne.n	800148a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2254      	movs	r2, #84	; 0x54
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_Start+0x24>
 8001428:	2302      	movs	r3, #2
 800142a:	e035      	b.n	8001498 <HAL_ADC_Start+0x90>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2254      	movs	r2, #84	; 0x54
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001434:	250f      	movs	r5, #15
 8001436:	197c      	adds	r4, r7, r5
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0018      	movs	r0, r3
 800143c:	f000 faaa 	bl	8001994 <ADC_Enable>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001444:	197b      	adds	r3, r7, r5
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d119      	bne.n	8001480 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_ADC_Start+0x98>)
 8001452:	4013      	ands	r3, r2
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	0052      	lsls	r2, r2, #1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	221c      	movs	r2, #28
 800146a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2254      	movs	r2, #84	; 0x54
 8001470:	2100      	movs	r1, #0
 8001472:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff fdf9 	bl	8001070 <LL_ADC_REG_StartConversion>
 800147e:	e008      	b.n	8001492 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2254      	movs	r2, #84	; 0x54
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]
 8001488:	e003      	b.n	8001492 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800148a:	230f      	movs	r3, #15
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b004      	add	sp, #16
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	fffff0fe 	.word	0xfffff0fe

080014a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d102      	bne.n	80014bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80014b6:	2308      	movs	r3, #8
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e00f      	b.n	80014dc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	2220      	movs	r2, #32
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e072      	b.n	80015be <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80014d8:	2304      	movs	r3, #4
 80014da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014dc:	f7ff fc88 	bl	8000df0 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80014e4:	e01f      	b.n	8001526 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	d01c      	beq.n	8001526 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80014ec:	f7ff fc80 	bl	8000df0 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d302      	bcc.n	8001502 <HAL_ADC_PollForConversion+0x5e>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d111      	bne.n	8001526 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	2204      	movs	r2, #4
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2254      	movs	r2, #84	; 0x54
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e04b      	b.n	80015be <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	d0d9      	beq.n	80014e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fcd6 	bl	8000ef6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d02e      	beq.n	80015ac <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e9b      	ldrb	r3, [r3, #26]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	2b08      	cmp	r3, #8
 8001562:	d123      	bne.n	80015ac <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fd93 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d110      	bne.n	8001594 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	210c      	movs	r1, #12
 800157e:	438a      	bics	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_ADC_PollForConversion+0x124>)
 8001588:	4013      	ands	r3, r2
 800158a:	2201      	movs	r2, #1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	659a      	str	r2, [r3, #88]	; 0x58
 8001592:	e00b      	b.n	80015ac <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	2220      	movs	r2, #32
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	2201      	movs	r2, #1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e1b      	ldrb	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	220c      	movs	r2, #12
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	fffffefe 	.word	0xfffffefe

080015cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ee:	2317      	movs	r3, #23
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2254      	movs	r2, #84	; 0x54
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x24>
 8001604:	2302      	movs	r3, #2
 8001606:	e1c0      	b.n	800198a <HAL_ADC_ConfigChannel+0x3a6>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2254      	movs	r2, #84	; 0x54
 800160c:	2101      	movs	r1, #1
 800160e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fd3d 	bl	8001094 <LL_ADC_REG_IsConversionOngoing>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d000      	beq.n	8001620 <HAL_ADC_ConfigChannel+0x3c>
 800161e:	e1a3      	b.n	8001968 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d100      	bne.n	800162a <HAL_ADC_ConfigChannel+0x46>
 8001628:	e143      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	429a      	cmp	r2, r3
 8001634:	d004      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800163a:	4ac1      	ldr	r2, [pc, #772]	; (8001940 <HAL_ADC_ConfigChannel+0x35c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0019      	movs	r1, r3
 800164a:	0010      	movs	r0, r2
 800164c:	f7ff fc84 	bl	8000f58 <LL_ADC_REG_SetSequencerChAdd>
 8001650:	e0c9      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	211f      	movs	r1, #31
 800165c:	400b      	ands	r3, r1
 800165e:	210f      	movs	r1, #15
 8001660:	4099      	lsls	r1, r3
 8001662:	000b      	movs	r3, r1
 8001664:	43db      	mvns	r3, r3
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	035b      	lsls	r3, r3, #13
 8001670:	0b5b      	lsrs	r3, r3, #13
 8001672:	d105      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x9c>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	221f      	movs	r2, #31
 800167c:	4013      	ands	r3, r2
 800167e:	e098      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	4013      	ands	r3, r2
 8001688:	d000      	beq.n	800168c <HAL_ADC_ConfigChannel+0xa8>
 800168a:	e091      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x1cc>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d000      	beq.n	8001698 <HAL_ADC_ConfigChannel+0xb4>
 8001696:	e089      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1c8>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0xc0>
 80016a2:	e081      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1c4>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2208      	movs	r2, #8
 80016aa:	4013      	ands	r3, r2
 80016ac:	d000      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0xcc>
 80016ae:	e079      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1c0>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	4013      	ands	r3, r2
 80016b8:	d000      	beq.n	80016bc <HAL_ADC_ConfigChannel+0xd8>
 80016ba:	e071      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1bc>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2220      	movs	r2, #32
 80016c2:	4013      	ands	r3, r2
 80016c4:	d000      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0xe4>
 80016c6:	e069      	b.n	800179c <HAL_ADC_ConfigChannel+0x1b8>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	4013      	ands	r3, r2
 80016d0:	d000      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0xf0>
 80016d2:	e061      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1b4>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	4013      	ands	r3, r2
 80016dc:	d000      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0xfc>
 80016de:	e059      	b.n	8001794 <HAL_ADC_ConfigChannel+0x1b0>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d151      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1ac>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d149      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1a8>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4013      	ands	r3, r2
 8001702:	d141      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1a4>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d139      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1a0>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	015b      	lsls	r3, r3, #5
 8001718:	4013      	ands	r3, r2
 800171a:	d131      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x19c>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	4013      	ands	r3, r2
 8001726:	d129      	bne.n	800177c <HAL_ADC_ConfigChannel+0x198>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	4013      	ands	r3, r2
 8001732:	d121      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x194>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4013      	ands	r3, r2
 800173e:	d119      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x190>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	4013      	ands	r3, r2
 800174a:	d111      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x18c>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d109      	bne.n	800176c <HAL_ADC_ConfigChannel+0x188>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	02db      	lsls	r3, r3, #11
 8001760:	4013      	ands	r3, r2
 8001762:	d001      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x184>
 8001764:	2312      	movs	r3, #18
 8001766:	e024      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001768:	2300      	movs	r3, #0
 800176a:	e022      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 800176c:	2311      	movs	r3, #17
 800176e:	e020      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001770:	2310      	movs	r3, #16
 8001772:	e01e      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001774:	230f      	movs	r3, #15
 8001776:	e01c      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001778:	230e      	movs	r3, #14
 800177a:	e01a      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 800177c:	230d      	movs	r3, #13
 800177e:	e018      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001780:	230c      	movs	r3, #12
 8001782:	e016      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001784:	230b      	movs	r3, #11
 8001786:	e014      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001788:	230a      	movs	r3, #10
 800178a:	e012      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 800178c:	2309      	movs	r3, #9
 800178e:	e010      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001790:	2308      	movs	r3, #8
 8001792:	e00e      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001794:	2307      	movs	r3, #7
 8001796:	e00c      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 8001798:	2306      	movs	r3, #6
 800179a:	e00a      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 800179c:	2305      	movs	r3, #5
 800179e:	e008      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e006      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a4:	2303      	movs	r3, #3
 80017a6:	e004      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b0:	2300      	movs	r3, #0
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	6852      	ldr	r2, [r2, #4]
 80017b6:	201f      	movs	r0, #31
 80017b8:	4002      	ands	r2, r0
 80017ba:	4093      	lsls	r3, r2
 80017bc:	000a      	movs	r2, r1
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d808      	bhi.n	80017e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	001a      	movs	r2, r3
 80017e2:	f7ff fb99 	bl	8000f18 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	001a      	movs	r2, r3
 80017f4:	f7ff fbd4 	bl	8000fa0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db00      	blt.n	8001802 <HAL_ADC_ConfigChannel+0x21e>
 8001800:	e0bc      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fb35 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 800180a:	0003      	movs	r3, r0
 800180c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_ADC_ConfigChannel+0x364>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d122      	bne.n	800185e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001820:	d11d      	bne.n	800185e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	0412      	lsls	r2, r2, #16
 8001828:	4313      	orrs	r3, r2
 800182a:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 800182c:	0019      	movs	r1, r3
 800182e:	0010      	movs	r0, r2
 8001830:	f7ff fb0c 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001834:	4b45      	ldr	r3, [pc, #276]	; (800194c <HAL_ADC_ConfigChannel+0x368>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4945      	ldr	r1, [pc, #276]	; (8001950 <HAL_ADC_ConfigChannel+0x36c>)
 800183a:	0018      	movs	r0, r3
 800183c:	f7fe fc74 	bl	8000128 <__udivsi3>
 8001840:	0003      	movs	r3, r0
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	0013      	movs	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	189b      	adds	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800184e:	e002      	b.n	8001856 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3b01      	subs	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800185c:	e08e      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a3c      	ldr	r2, [pc, #240]	; (8001954 <HAL_ADC_ConfigChannel+0x370>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d10e      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	045b      	lsls	r3, r3, #17
 800186e:	4013      	ands	r3, r2
 8001870:	d109      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0452      	lsls	r2, r2, #17
 8001878:	4313      	orrs	r3, r2
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 800187c:	0019      	movs	r1, r3
 800187e:	0010      	movs	r0, r2
 8001880:	f7ff fae4 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001884:	e07a      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_ADC_ConfigChannel+0x374>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d000      	beq.n	8001892 <HAL_ADC_ConfigChannel+0x2ae>
 8001890:	e074      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	03db      	lsls	r3, r3, #15
 8001898:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800189a:	d000      	beq.n	800189e <HAL_ADC_ConfigChannel+0x2ba>
 800189c:	e06e      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	03d2      	lsls	r2, r2, #15
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 80018a8:	0019      	movs	r1, r3
 80018aa:	0010      	movs	r0, r2
 80018ac:	f7ff face 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 80018b0:	e064      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d004      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_ADC_ConfigChannel+0x35c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d107      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f7ff fb51 	bl	8000f7a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da4d      	bge.n	800197c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff fac6 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 80018e8:	0003      	movs	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_ADC_ConfigChannel+0x364>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_ADC_ConfigChannel+0x378>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 80018fe:	0019      	movs	r1, r3
 8001900:	0010      	movs	r0, r2
 8001902:	f7ff faa3 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001906:	e039      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_ADC_ConfigChannel+0x370>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <HAL_ADC_ConfigChannel+0x37c>)
 8001916:	4013      	ands	r3, r2
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 800191a:	0019      	movs	r1, r3
 800191c:	0010      	movs	r0, r2
 800191e:	f7ff fa95 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 8001922:	e02b      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_ADC_ConfigChannel+0x374>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d126      	bne.n	800197c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_ADC_ConfigChannel+0x380>)
 8001932:	4013      	ands	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_ADC_ConfigChannel+0x360>)
 8001936:	0019      	movs	r1, r3
 8001938:	0010      	movs	r0, r2
 800193a:	f7ff fa87 	bl	8000e4c <LL_ADC_SetCommonPathInternalCh>
 800193e:	e01d      	b.n	800197c <HAL_ADC_ConfigChannel+0x398>
 8001940:	80000004 	.word	0x80000004
 8001944:	40012708 	.word	0x40012708
 8001948:	b0001000 	.word	0xb0001000
 800194c:	20000000 	.word	0x20000000
 8001950:	00030d40 	.word	0x00030d40
 8001954:	b8004000 	.word	0xb8004000
 8001958:	b4002000 	.word	0xb4002000
 800195c:	ff7fffff 	.word	0xff7fffff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	2220      	movs	r2, #32
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001974:	2317      	movs	r3, #23
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2254      	movs	r2, #84	; 0x54
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001984:	2317      	movs	r3, #23
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	781b      	ldrb	r3, [r3, #0]
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)

08001994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fb51 	bl	800104c <LL_ADC_IsEnabled>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d000      	beq.n	80019b0 <ADC_Enable+0x1c>
 80019ae:	e069      	b.n	8001a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4a36      	ldr	r2, [pc, #216]	; (8001a90 <ADC_Enable+0xfc>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	2210      	movs	r2, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2201      	movs	r2, #1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e056      	b.n	8001a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff fb23 	bl	8001028 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <ADC_Enable+0x100>)
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fa45 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 80019ea:	0002      	movs	r2, r0
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	4013      	ands	r3, r2
 80019f2:	d00f      	beq.n	8001a14 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <ADC_Enable+0x104>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4928      	ldr	r1, [pc, #160]	; (8001a9c <ADC_Enable+0x108>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe fb94 	bl	8000128 <__udivsi3>
 8001a00:	0003      	movs	r3, r0
 8001a02:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001a04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a06:	e002      	b.n	8001a0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f9      	bne.n	8001a08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e5b      	ldrb	r3, [r3, #25]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d033      	beq.n	8001a84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f9e8 	bl	8000df0 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a24:	e027      	b.n	8001a76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff fb0e 	bl	800104c <LL_ADC_IsEnabled>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d104      	bne.n	8001a3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff faf5 	bl	8001028 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a3e:	f7ff f9d7 	bl	8000df0 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d914      	bls.n	8001a76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d00d      	beq.n	8001a76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	2210      	movs	r2, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e007      	b.n	8001a86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d1d0      	bne.n	8001a26 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	80000017 	.word	0x80000017
 8001a94:	40012708 	.word	0x40012708
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	00030d40 	.word	0x00030d40

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab2:	d809      	bhi.n	8001ac8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	231f      	movs	r3, #31
 8001abc:	401a      	ands	r2, r3
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_EnableIRQ+0x30>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4091      	lsls	r1, r2
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	0002      	movs	r2, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	d828      	bhi.n	8001b3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <__NVIC_SetPriority+0xd4>)
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	33c0      	adds	r3, #192	; 0xc0
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	589b      	ldr	r3, [r3, r2]
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	0011      	movs	r1, r2
 8001b00:	2203      	movs	r2, #3
 8001b02:	400a      	ands	r2, r1
 8001b04:	00d2      	lsls	r2, r2, #3
 8001b06:	21ff      	movs	r1, #255	; 0xff
 8001b08:	4091      	lsls	r1, r2
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	401a      	ands	r2, r3
 8001b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	401a      	ands	r2, r3
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	2303      	movs	r3, #3
 8001b22:	4003      	ands	r3, r0
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b28:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <__NVIC_SetPriority+0xd4>)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	430a      	orrs	r2, r1
 8001b34:	33c0      	adds	r3, #192	; 0xc0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b3a:	e031      	b.n	8001ba0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <__NVIC_SetPriority+0xd8>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	0019      	movs	r1, r3
 8001b44:	230f      	movs	r3, #15
 8001b46:	400b      	ands	r3, r1
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3306      	adds	r3, #6
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1dfa      	adds	r2, r7, #7
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	400a      	ands	r2, r1
 8001b60:	00d2      	lsls	r2, r2, #3
 8001b62:	21ff      	movs	r1, #255	; 0xff
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	401a      	ands	r2, r3
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	4003      	ands	r3, r0
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <__NVIC_SetPriority+0xd8>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	4023      	ands	r3, r4
 8001b90:	3b08      	subs	r3, #8
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	430a      	orrs	r2, r1
 8001b96:	3306      	adds	r3, #6
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	18c3      	adds	r3, r0, r3
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b003      	add	sp, #12
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	045b      	lsls	r3, r3, #17
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d301      	bcc.n	8001bc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e010      	b.n	8001bea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <SysTick_Config+0x44>)
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff7c 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x44>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x44>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	210f      	movs	r1, #15
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	0002      	movs	r2, r0
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff ffaf 	bl	8001bb0 <SysTick_Config>
 8001c52:	0003      	movs	r3, r0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	e14d      	b.n	8001f08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d100      	bne.n	8001c84 <HAL_GPIO_Init+0x28>
 8001c82:	e13e      	b.n	8001f02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_GPIO_Init+0x40>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	0013      	movs	r3, r2
 8001cac:	43da      	mvns	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	2201      	movs	r2, #1
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	58d3      	ldr	r3, [r2, r3]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2207      	movs	r2, #7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	43da      	mvns	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2107      	movs	r1, #7
 8001d72:	400b      	ands	r3, r1
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	6939      	ldr	r1, [r7, #16]
 8001d8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2203      	movs	r2, #3
 8001dac:	401a      	ands	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_GPIO_Init+0x174>
 8001dce:	e098      	b.n	8001f02 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001dd0:	4a53      	ldr	r2, [pc, #332]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	589b      	ldr	r3, [r3, r2]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4013      	ands	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	220f      	movs	r2, #15
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	23a0      	movs	r3, #160	; 0xa0
 8001df8:	05db      	lsls	r3, r3, #23
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x1d6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_GPIO_Init+0x2c8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x1d2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <HAL_GPIO_Init+0x2cc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x1ce>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_GPIO_Init+0x2d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x1ca>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x1c6>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x1d8>
 8001e32:	2300      	movs	r3, #0
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	2103      	movs	r1, #3
 8001e38:	400a      	ands	r2, r1
 8001e3a:	00d2      	lsls	r2, r2, #3
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e44:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	035b      	lsls	r3, r3, #13
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	039b      	lsls	r3, r3, #14
 8001e94:	4013      	ands	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	2384      	movs	r3, #132	; 0x84
 8001eaa:	58d3      	ldr	r3, [r2, r3]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ecc:	4914      	ldr	r1, [pc, #80]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001ece:	2284      	movs	r2, #132	; 0x84
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	58d3      	ldr	r3, [r2, r3]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efa:	4909      	ldr	r1, [pc, #36]	; (8001f20 <HAL_GPIO_Init+0x2c4>)
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	40da      	lsrs	r2, r3
 8001f10:	1e13      	subs	r3, r2, #0
 8001f12:	d000      	beq.n	8001f16 <HAL_GPIO_Init+0x2ba>
 8001f14:	e6aa      	b.n	8001c6c <HAL_GPIO_Init+0x10>
  }
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b006      	add	sp, #24
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021800 	.word	0x40021800
 8001f24:	50000400 	.word	0x50000400
 8001f28:	50000800 	.word	0x50000800
 8001f2c:	50000c00 	.word	0x50000c00
 8001f30:	50001000 	.word	0x50001000

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	1cbb      	adds	r3, r7, #2
 8001f42:	1c02      	adds	r2, r0, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	1c7b      	adds	r3, r7, #1
 8001f48:	1c0a      	adds	r2, r1, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	1c7b      	adds	r3, r7, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f54:	1cbb      	adds	r3, r7, #2
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5e:	1cbb      	adds	r3, r7, #2
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b002      	add	sp, #8
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	1dbb      	adds	r3, r7, #6
 8001f7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	1dba      	adds	r2, r7, #6
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	4013      	ands	r3, r2
 8001f86:	d008      	beq.n	8001f9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001f8a:	1dba      	adds	r2, r7, #6
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f815 	bl	8001fc4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	1dba      	adds	r2, r7, #6
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d008      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001fa8:	1dba      	adds	r2, r7, #6
 8001faa:	8812      	ldrh	r2, [r2, #0]
 8001fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7fe fb44 	bl	8000640 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021800 	.word	0x40021800

08001fc4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0002      	movs	r2, r0
 8001fcc:	1dbb      	adds	r3, r7, #6
 8001fce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d11f      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	0013      	movs	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	189b      	adds	r3, r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4912      	ldr	r1, [pc, #72]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800200a:	0018      	movs	r0, r3
 800200c:	f7fe f88c 	bl	8000128 <__udivsi3>
 8002010:	0003      	movs	r3, r0
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002016:	e008      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3b01      	subs	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e001      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e009      	b.n	800203e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	401a      	ands	r2, r3
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	429a      	cmp	r2, r3
 800203a:	d0ed      	beq.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40007000 	.word	0x40007000
 800204c:	fffff9ff 	.word	0xfffff9ff
 8002050:	20000000 	.word	0x20000000
 8002054:	000f4240 	.word	0x000f4240

08002058 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <LL_RCC_GetAPB1Prescaler+0x14>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	23e0      	movs	r3, #224	; 0xe0
 8002062:	01db      	lsls	r3, r3, #7
 8002064:	4013      	ands	r3, r2
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f000 fb50 	bl	8002724 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d100      	bne.n	8002090 <HAL_RCC_OscConfig+0x20>
 800208e:	e07c      	b.n	800218a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	4bc3      	ldr	r3, [pc, #780]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2238      	movs	r2, #56	; 0x38
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209a:	4bc1      	ldr	r3, [pc, #772]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2203      	movs	r2, #3
 80020a0:	4013      	ands	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0x40>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d002      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4bba      	ldr	r3, [pc, #744]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	4013      	ands	r3, r2
 80020c0:	d062      	beq.n	8002188 <HAL_RCC_OscConfig+0x118>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15e      	bne.n	8002188 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e32a      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_OscConfig+0x7a>
 80020da:	4bb1      	ldr	r3, [pc, #708]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4bb0      	ldr	r3, [pc, #704]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0249      	lsls	r1, r1, #9
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e020      	b.n	800212c <HAL_RCC_OscConfig+0xbc>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	23a0      	movs	r3, #160	; 0xa0
 80020f0:	02db      	lsls	r3, r3, #11
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10e      	bne.n	8002114 <HAL_RCC_OscConfig+0xa4>
 80020f6:	4baa      	ldr	r3, [pc, #680]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4ba9      	ldr	r3, [pc, #676]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	02c9      	lsls	r1, r1, #11
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4ba6      	ldr	r3, [pc, #664]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4ba5      	ldr	r3, [pc, #660]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0249      	lsls	r1, r1, #9
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002114:	4ba2      	ldr	r3, [pc, #648]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4ba1      	ldr	r3, [pc, #644]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800211a:	49a2      	ldr	r1, [pc, #648]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800211c:	400a      	ands	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4b9f      	ldr	r3, [pc, #636]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b9e      	ldr	r3, [pc, #632]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002126:	49a0      	ldr	r1, [pc, #640]	; (80023a8 <HAL_RCC_OscConfig+0x338>)
 8002128:	400a      	ands	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d014      	beq.n	800215e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe fe5c 	bl	8000df0 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fe57 	bl	8000df0 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e2e9      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b93      	ldr	r3, [pc, #588]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0xce>
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fe47 	bl	8000df0 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fe42 	bl	8000df0 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e2d4      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0xf8>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x126>
 8002194:	e099      	b.n	80022ca <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2238      	movs	r2, #56	; 0x38
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a0:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0x146>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d135      	bne.n	8002228 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021bc:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4013      	ands	r3, r2
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_OscConfig+0x164>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e2a7      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a74      	ldr	r2, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x33c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0adb      	lsrs	r3, r3, #11
 800220a:	2207      	movs	r2, #7
 800220c:	4013      	ands	r3, r2
 800220e:	4a69      	ldr	r2, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x344>)
 8002210:	40da      	lsrs	r2, r3
 8002212:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <HAL_RCC_OscConfig+0x348>)
 8002214:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002216:	4b69      	ldr	r3, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x34c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0018      	movs	r0, r3
 800221c:	f7fe fd8c 	bl	8000d38 <HAL_InitTick>
 8002220:	1e03      	subs	r3, r0, #0
 8002222:	d051      	beq.n	80022c8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e27d      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d030      	beq.n	8002292 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002230:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5e      	ldr	r2, [pc, #376]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	0049      	lsls	r1, r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fdcd 	bl	8000df0 <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe fdc8 	bl	8000df0 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e25a      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4013      	ands	r3, r2
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <HAL_RCC_OscConfig+0x33c>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e01b      	b.n	80022ca <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002298:	4949      	ldr	r1, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x350>)
 800229a:	400a      	ands	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fda7 	bl	8000df0 <HAL_GetTick>
 80022a2:	0003      	movs	r3, r0
 80022a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe fda2 	bl	8000df0 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e234      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4013      	ands	r3, r2
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x238>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2208      	movs	r2, #8
 80022d0:	4013      	ands	r3, r2
 80022d2:	d047      	beq.n	8002364 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2238      	movs	r2, #56	; 0x38
 80022da:	4013      	ands	r3, r2
 80022dc:	2b18      	cmp	r3, #24
 80022de:	d10a      	bne.n	80022f6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d03c      	beq.n	8002364 <HAL_RCC_OscConfig+0x2f4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d138      	bne.n	8002364 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e216      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fd71 	bl	8000df0 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fd6c 	bl	8000df0 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1fe      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x2a4>
 8002330:	e018      	b.n	8002364 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002338:	2101      	movs	r1, #1
 800233a:	438a      	bics	r2, r1
 800233c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe fd57 	bl	8000df0 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fd52 	bl	8000df0 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1e4      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d1f1      	bne.n	8002348 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2204      	movs	r2, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_RCC_OscConfig+0x300>
 800236e:	e0c7      	b.n	8002500 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002370:	231f      	movs	r3, #31
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	; 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	2b20      	cmp	r3, #32
 8002382:	d11f      	bne.n	80023c4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x330>)
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_RCC_OscConfig+0x320>
 800238e:	e0b7      	b.n	8002500 <HAL_RCC_OscConfig+0x490>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d000      	beq.n	800239a <HAL_RCC_OscConfig+0x32a>
 8002398:	e0b2      	b.n	8002500 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c2      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	fffeffff 	.word	0xfffeffff
 80023a8:	fffbffff 	.word	0xfffbffff
 80023ac:	ffff80ff 	.word	0xffff80ff
 80023b0:	ffffc7ff 	.word	0xffffc7ff
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004
 80023c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c4:	4bb5      	ldr	r3, [pc, #724]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80023c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	4013      	ands	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x364>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x366>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4bb0      	ldr	r3, [pc, #704]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80023dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023de:	4baf      	ldr	r3, [pc, #700]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0549      	lsls	r1, r1, #21
 80023e4:	430a      	orrs	r2, r1
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023e8:	4bac      	ldr	r3, [pc, #688]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80023ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4ba8      	ldr	r3, [pc, #672]	; (80026a0 <HAL_RCC_OscConfig+0x630>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4013      	ands	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240a:	4ba5      	ldr	r3, [pc, #660]	; (80026a0 <HAL_RCC_OscConfig+0x630>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba4      	ldr	r3, [pc, #656]	; (80026a0 <HAL_RCC_OscConfig+0x630>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0049      	lsls	r1, r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002418:	f7fe fcea 	bl	8000df0 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fce5 	bl	8000df0 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e177      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	4b9a      	ldr	r3, [pc, #616]	; (80026a0 <HAL_RCC_OscConfig+0x630>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e6>
 8002448:	4b94      	ldr	r3, [pc, #592]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800244a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800244c:	4b93      	ldr	r3, [pc, #588]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800244e:	2101      	movs	r1, #1
 8002450:	430a      	orrs	r2, r1
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x420>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x408>
 800245e:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002462:	4b8e      	ldr	r3, [pc, #568]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002464:	2104      	movs	r1, #4
 8002466:	430a      	orrs	r2, r1
 8002468:	65da      	str	r2, [r3, #92]	; 0x5c
 800246a:	4b8c      	ldr	r3, [pc, #560]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800246c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800246e:	4b8b      	ldr	r3, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	65da      	str	r2, [r3, #92]	; 0x5c
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x420>
 8002478:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800247a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800247c:	4b87      	ldr	r3, [pc, #540]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800247e:	2101      	movs	r1, #1
 8002480:	438a      	bics	r2, r1
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
 8002484:	4b85      	ldr	r3, [pc, #532]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002488:	4b84      	ldr	r3, [pc, #528]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fcaa 	bl	8000df0 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fca5 	bl	8000df0 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a7d      	ldr	r2, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x634>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e136      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x432>
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fc95 	bl	8000df0 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7fe fc90 	bl	8000df0 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	4a73      	ldr	r2, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x634>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e121      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e0:	4b6e      	ldr	r3, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b69      	ldr	r3, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80024f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80024fa:	496b      	ldr	r1, [pc, #428]	; (80026a8 <HAL_RCC_OscConfig+0x638>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2220      	movs	r2, #32
 8002506:	4013      	ands	r3, r2
 8002508:	d039      	beq.n	800257e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01b      	beq.n	800254a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002512:	4b62      	ldr	r3, [pc, #392]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	03c9      	lsls	r1, r1, #15
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fc66 	bl	8000df0 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252a:	f7fe fc61 	bl	8000df0 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0f3      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800253c:	4b57      	ldr	r3, [pc, #348]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	4013      	ands	r3, r2
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x4ba>
 8002548:	e019      	b.n	800257e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002550:	4956      	ldr	r1, [pc, #344]	; (80026ac <HAL_RCC_OscConfig+0x63c>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fc4b 	bl	8000df0 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002560:	f7fe fc46 	bl	8000df0 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0d8      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x518>
 8002586:	e0cc      	b.n	8002722 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b44      	ldr	r3, [pc, #272]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2238      	movs	r2, #56	; 0x38
 800258e:	4013      	ands	r3, r2
 8002590:	2b10      	cmp	r3, #16
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x526>
 8002594:	e07b      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d156      	bne.n	800264c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80025a4:	4942      	ldr	r1, [pc, #264]	; (80026b0 <HAL_RCC_OscConfig+0x640>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fc21 	bl	8000df0 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fc1c 	bl	8000df0 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0ae      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	049b      	lsls	r3, r3, #18
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x644>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	431a      	orrs	r2, r3
 8002600:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002602:	430a      	orrs	r2, r1
 8002604:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0449      	lsls	r1, r1, #17
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	0549      	lsls	r1, r1, #21
 800261e:	430a      	orrs	r2, r1
 8002620:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fbe5 	bl	8000df0 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fbe0 	bl	8000df0 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e072      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	049b      	lsls	r3, r3, #18
 8002646:	4013      	ands	r3, r2
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x5bc>
 800264a:	e06a      	b.n	8002722 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002652:	4917      	ldr	r1, [pc, #92]	; (80026b0 <HAL_RCC_OscConfig+0x640>)
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fbca 	bl	8000df0 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fbc5 	bl	8000df0 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e057      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	049b      	lsls	r3, r3, #18
 800267c:	4013      	ands	r3, r2
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002686:	490c      	ldr	r1, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x648>)
 8002688:	400a      	ands	r2, r1
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	e049      	b.n	8002722 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e044      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	efffffff 	.word	0xefffffff
 80026ac:	ffbfffff 	.word	0xffbfffff
 80026b0:	feffffff 	.word	0xfeffffff
 80026b4:	11c1808c 	.word	0x11c1808c
 80026b8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x6bc>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2203      	movs	r2, #3
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d126      	bne.n	800271e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2270      	movs	r2, #112	; 0x70
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11f      	bne.n	800271e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	23fe      	movs	r3, #254	; 0xfe
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d116      	bne.n	800271e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	23f8      	movs	r3, #248	; 0xf8
 80026f4:	039b      	lsls	r3, r3, #14
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d10e      	bne.n	800271e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	23e0      	movs	r3, #224	; 0xe0
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	0f5b      	lsrs	r3, r3, #29
 8002714:	075a      	lsls	r2, r3, #29
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b008      	add	sp, #32
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e9      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2207      	movs	r2, #7
 800274a:	4013      	ands	r3, r2
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d91e      	bls.n	8002790 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2207      	movs	r2, #7
 8002758:	4393      	bics	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002764:	f7fe fb44 	bl	8000df0 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800276c:	e009      	b.n	8002782 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7fe fb3f 	bl	8000df0 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0ca      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2204      	movs	r2, #4
 80027a0:	4013      	ands	r3, r2
 80027a2:	d006      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027a4:	4b60      	ldr	r3, [pc, #384]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027aa:	21e0      	movs	r1, #224	; 0xe0
 80027ac:	01c9      	lsls	r1, r1, #7
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a5d      	ldr	r2, [pc, #372]	; (800292c <HAL_RCC_ClockConfig+0x1fc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d057      	beq.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	4013      	ands	r3, r2
 80027e2:	d12b      	bne.n	800283c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e097      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f0:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	049b      	lsls	r3, r3, #18
 80027f8:	4013      	ands	r3, r2
 80027fa:	d11f      	bne.n	800283c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e08b      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002808:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4013      	ands	r3, r2
 8002812:	d113      	bne.n	800283c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e07f      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d106      	bne.n	800282e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	2202      	movs	r2, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d108      	bne.n	800283c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e074      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e06d      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2207      	movs	r2, #7
 8002842:	4393      	bics	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe face 	bl	8000df0 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002858:	e009      	b.n	800286e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285a:	f7fe fac9 	bl	8000df0 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e054      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2238      	movs	r2, #56	; 0x38
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	429a      	cmp	r2, r3
 800287e:	d1ec      	bne.n	800285a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d21e      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2207      	movs	r2, #7
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a0:	f7fe faa6 	bl	8000df0 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028a8:	e009      	b.n	80028be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7fe faa1 	bl	8000df0 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e02c      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2207      	movs	r2, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2204      	movs	r2, #4
 80028d2:	4013      	ands	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_RCC_ClockConfig+0x200>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028ea:	f000 f829 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028ee:	0001      	movs	r1, r0
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	220f      	movs	r2, #15
 80028f8:	401a      	ands	r2, r3
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x204>)
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	58d3      	ldr	r3, [r2, r3]
 8002900:	221f      	movs	r2, #31
 8002902:	4013      	ands	r3, r2
 8002904:	000a      	movs	r2, r1
 8002906:	40da      	lsrs	r2, r3
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x208>)
 800290a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x20c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe fa11 	bl	8000d38 <HAL_InitTick>
 8002916:	0003      	movs	r3, r0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40022000 	.word	0x40022000
 8002924:	00001388 	.word	0x00001388
 8002928:	40021000 	.word	0x40021000
 800292c:	fffff0ff 	.word	0xfffff0ff
 8002930:	ffff8fff 	.word	0xffff8fff
 8002934:	080046c0 	.word	0x080046c0
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2238      	movs	r2, #56	; 0x38
 800294c:	4013      	ands	r3, r2
 800294e:	d10f      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0adb      	lsrs	r3, r3, #11
 8002956:	2207      	movs	r2, #7
 8002958:	4013      	ands	r3, r2
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	0013      	movs	r3, r2
 8002960:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	4835      	ldr	r0, [pc, #212]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002966:	f7fd fbdf 	bl	8000128 <__udivsi3>
 800296a:	0003      	movs	r3, r0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e05d      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2238      	movs	r2, #56	; 0x38
 8002976:	4013      	ands	r3, r2
 8002978:	2b08      	cmp	r3, #8
 800297a:	d102      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x100>)
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e054      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2238      	movs	r2, #56	; 0x38
 8002988:	4013      	ands	r3, r2
 800298a:	2b10      	cmp	r3, #16
 800298c:	d138      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800298e:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2203      	movs	r2, #3
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	2207      	movs	r2, #7
 80029a0:	4013      	ands	r3, r2
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4824      	ldr	r0, [pc, #144]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x100>)
 80029b0:	f7fd fbba 	bl	8000128 <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	0019      	movs	r1, r3
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	227f      	movs	r2, #127	; 0x7f
 80029c0:	4013      	ands	r3, r2
 80029c2:	434b      	muls	r3, r1
 80029c4:	617b      	str	r3, [r7, #20]
        break;
 80029c6:	e00d      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	481c      	ldr	r0, [pc, #112]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 80029cc:	f7fd fbac 	bl	8000128 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	0019      	movs	r1, r3
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	227f      	movs	r2, #127	; 0x7f
 80029dc:	4013      	ands	r3, r2
 80029de:	434b      	muls	r3, r1
 80029e0:	617b      	str	r3, [r7, #20]
        break;
 80029e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0f5b      	lsrs	r3, r3, #29
 80029ea:	2207      	movs	r2, #7
 80029ec:	4013      	ands	r3, r2
 80029ee:	3301      	adds	r3, #1
 80029f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	6978      	ldr	r0, [r7, #20]
 80029f6:	f7fd fb97 	bl	8000128 <__udivsi3>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e015      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2238      	movs	r2, #56	; 0x38
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d103      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2238      	movs	r2, #56	; 0x38
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b18      	cmp	r3, #24
 8002a1e:	d103      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a20:	23fa      	movs	r3, #250	; 0xfa
 8002a22:	01db      	lsls	r3, r3, #7
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e001      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a2c:	693b      	ldr	r3, [r7, #16]
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a5c:	f7ff fff2 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a60:	0004      	movs	r4, r0
 8002a62:	f7ff faf9 	bl	8002058 <LL_RCC_GetAPB1Prescaler>
 8002a66:	0003      	movs	r3, r0
 8002a68:	0b1a      	lsrs	r2, r3, #12
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	58d3      	ldr	r3, [r2, r3]
 8002a70:	221f      	movs	r2, #31
 8002a72:	4013      	ands	r3, r2
 8002a74:	40dc      	lsrs	r4, r3
 8002a76:	0023      	movs	r3, r4
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	08004700 	.word	0x08004700

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a8c:	2313      	movs	r3, #19
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a94:	2312      	movs	r3, #18
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002aa8:	e0ad      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2011      	movs	r0, #17
 8002aac:	183b      	adds	r3, r7, r0
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	055b      	lsls	r3, r3, #21
 8002aba:	4013      	ands	r3, r2
 8002abc:	d110      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	0549      	lsls	r1, r1, #21
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae0:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0049      	lsls	r1, r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aee:	f7fe f97f 	bl	8000df0 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af6:	e00b      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe f97a 	bl	8000df0 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d904      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b06:	2313      	movs	r3, #19
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	701a      	strb	r2, [r3, #0]
        break;
 8002b0e:	e005      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0ed      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b1c:	2313      	movs	r3, #19
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d15e      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d019      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d014      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	0249      	lsls	r1, r1, #9
 8002b56:	430a      	orrs	r2, r1
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b60:	491e      	ldr	r1, [pc, #120]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	d016      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe f93c 	bl	8000df0 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7c:	e00c      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe f937 	bl	8000df0 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d904      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b8e:	2313      	movs	r3, #19
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2203      	movs	r2, #3
 8002b94:	701a      	strb	r2, [r3, #0]
            break;
 8002b96:	e004      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0ed      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ba2:	2313      	movs	r3, #19
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bc0:	e016      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bc2:	2312      	movs	r3, #18
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2213      	movs	r2, #19
 8002bc8:	18ba      	adds	r2, r7, r2
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e00f      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	fffffcff 	.word	0xfffffcff
 8002bdc:	fffeffff 	.word	0xfffeffff
 8002be0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	2312      	movs	r3, #18
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2213      	movs	r2, #19
 8002bea:	18ba      	adds	r2, r7, r2
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf0:	2311      	movs	r3, #17
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4bb6      	ldr	r3, [pc, #728]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfe:	4bb5      	ldr	r3, [pc, #724]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c00:	49b5      	ldr	r1, [pc, #724]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	2203      	movs	r2, #3
 8002c16:	4393      	bics	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4bad      	ldr	r3, [pc, #692]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c2e:	4ba9      	ldr	r3, [pc, #676]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	220c      	movs	r2, #12
 8002c34:	4393      	bics	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4ba5      	ldr	r3, [pc, #660]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2204      	movs	r2, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4c:	4ba1      	ldr	r3, [pc, #644]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	2230      	movs	r2, #48	; 0x30
 8002c52:	4393      	bics	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	4b9e      	ldr	r3, [pc, #632]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	4013      	ands	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c6a:	4b9a      	ldr	r3, [pc, #616]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	4a9b      	ldr	r2, [pc, #620]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b96      	ldr	r3, [pc, #600]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	4013      	ands	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002c8a:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	4a94      	ldr	r2, [pc, #592]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	4a8d      	ldr	r2, [pc, #564]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb8:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cca:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	4a86      	ldr	r2, [pc, #536]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	4b7e      	ldr	r3, [pc, #504]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	4a7f      	ldr	r2, [pc, #508]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	4013      	ands	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	4a79      	ldr	r2, [pc, #484]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	4b6f      	ldr	r3, [pc, #444]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	01db      	lsls	r3, r3, #7
 8002d22:	4013      	ands	r3, r2
 8002d24:	d015      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d26:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	0899      	lsrs	r1, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	05db      	lsls	r3, r3, #23
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d106      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0249      	lsls	r1, r1, #9
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	4393      	bics	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	039b      	lsls	r3, r3, #14
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d016      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	03db      	lsls	r3, r3, #15
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d9e:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0449      	lsls	r1, r1, #17
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	03db      	lsls	r3, r3, #15
 8002db4:	4013      	ands	r3, r2
 8002db6:	d016      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	4a4e      	ldr	r2, [pc, #312]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc6:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	045b      	lsls	r3, r3, #17
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	0449      	lsls	r1, r1, #17
 8002de2:	430a      	orrs	r2, r1
 8002de4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d014      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	2203      	movs	r2, #3
 8002df8:	4393      	bics	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0249      	lsls	r1, r1, #9
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	019b      	lsls	r3, r3, #6
 8002e24:	4013      	ands	r3, r2
 8002e26:	d014      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d106      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	0249      	lsls	r1, r1, #9
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	045b      	lsls	r3, r3, #17
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0449      	lsls	r1, r1, #17
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	049b      	lsls	r3, r3, #18
 8002e94:	4013      	ands	r3, r2
 8002e96:	d016      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	0449      	lsls	r1, r1, #17
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b006      	add	sp, #24
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	efffffff 	.word	0xefffffff
 8002edc:	fffff3ff 	.word	0xfffff3ff
 8002ee0:	fffffcff 	.word	0xfffffcff
 8002ee4:	fff3ffff 	.word	0xfff3ffff
 8002ee8:	ffcfffff 	.word	0xffcfffff
 8002eec:	ffffcfff 	.word	0xffffcfff
 8002ef0:	ffff3fff 	.word	0xffff3fff
 8002ef4:	ffbfffff 	.word	0xffbfffff
 8002ef8:	feffffff 	.word	0xfeffffff

08002efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e046      	b.n	8002f9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2288      	movs	r2, #136	; 0x88
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2284      	movs	r2, #132	; 0x84
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd fdfc 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2288      	movs	r2, #136	; 0x88
 8002f2c:	2124      	movs	r1, #36	; 0x24
 8002f2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f8cc 	bl	80030e0 <UART_SetConfig>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e024      	b.n	8002f9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fc15 	bl	800378c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_UART_Init+0xa8>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	212a      	movs	r1, #42	; 0x2a
 8002f7e:	438a      	bics	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fcad 	bl	80038f4 <UART_CheckIdleState>
 8002f9a:	0003      	movs	r3, r0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	ffffb7ff 	.word	0xffffb7ff

08002fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2288      	movs	r2, #136	; 0x88
 8002fbc:	589b      	ldr	r3, [r3, r2]
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d000      	beq.n	8002fc4 <HAL_UART_Transmit+0x1c>
 8002fc2:	e088      	b.n	80030d6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_UART_Transmit+0x2a>
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e080      	b.n	80030d8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	015b      	lsls	r3, r3, #5
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d109      	bne.n	8002ff6 <HAL_UART_Transmit+0x4e>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e070      	b.n	80030d8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2290      	movs	r2, #144	; 0x90
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2288      	movs	r2, #136	; 0x88
 8003002:	2121      	movs	r1, #33	; 0x21
 8003004:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fd fef3 	bl	8000df0 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1dba      	adds	r2, r7, #6
 8003012:	2154      	movs	r1, #84	; 0x54
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1dba      	adds	r2, r7, #6
 800301c:	2156      	movs	r1, #86	; 0x56
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	429a      	cmp	r2, r3
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x98>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003048:	e02c      	b.n	80030a4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	0013      	movs	r3, r2
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	f000 fc9a 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e039      	b.n	80030d8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	001a      	movs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	05d2      	lsls	r2, r2, #23
 8003076:	0dd2      	lsrs	r2, r2, #23
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2256      	movs	r2, #86	; 0x56
 8003096:	5a9b      	ldrh	r3, [r3, r2]
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b299      	uxth	r1, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2256      	movs	r2, #86	; 0x56
 80030a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2256      	movs	r2, #86	; 0x56
 80030a8:	5a9b      	ldrh	r3, [r3, r2]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1cc      	bne.n	800304a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	0013      	movs	r3, r2
 80030ba:	2200      	movs	r2, #0
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	f000 fc67 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e006      	b.n	80030d8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2288      	movs	r2, #136	; 0x88
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b008      	add	sp, #32
 80030de:	bd80      	pop	{r7, pc}

080030e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b090      	sub	sp, #64	; 0x40
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e8:	231a      	movs	r3, #26
 80030ea:	2220      	movs	r2, #32
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	431a      	orrs	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4313      	orrs	r3, r2
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4ac1      	ldr	r2, [pc, #772]	; (8003418 <UART_SetConfig+0x338>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	430b      	orrs	r3, r1
 8003120:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4abc      	ldr	r2, [pc, #752]	; (800341c <UART_SetConfig+0x33c>)
 800312a:	4013      	ands	r3, r2
 800312c:	0018      	movs	r0, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	68d9      	ldr	r1, [r3, #12]
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	0003      	movs	r3, r0
 8003138:	430b      	orrs	r3, r1
 800313a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4ab6      	ldr	r2, [pc, #728]	; (8003420 <UART_SetConfig+0x340>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <UART_SetConfig+0x80>
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4ab4      	ldr	r2, [pc, #720]	; (8003424 <UART_SetConfig+0x344>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800315c:	4313      	orrs	r3, r2
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4ab0      	ldr	r2, [pc, #704]	; (8003428 <UART_SetConfig+0x348>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	430b      	orrs	r3, r1
 8003174:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	220f      	movs	r2, #15
 800317e:	4393      	bics	r3, r2
 8003180:	0018      	movs	r0, r3
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	0003      	movs	r3, r0
 800318c:	430b      	orrs	r3, r1
 800318e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4aa5      	ldr	r2, [pc, #660]	; (800342c <UART_SetConfig+0x34c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d131      	bne.n	80031fe <UART_SetConfig+0x11e>
 800319a:	4ba5      	ldr	r3, [pc, #660]	; (8003430 <UART_SetConfig+0x350>)
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d01d      	beq.n	80031e2 <UART_SetConfig+0x102>
 80031a6:	d823      	bhi.n	80031f0 <UART_SetConfig+0x110>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d00c      	beq.n	80031c6 <UART_SetConfig+0xe6>
 80031ac:	d820      	bhi.n	80031f0 <UART_SetConfig+0x110>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <UART_SetConfig+0xd8>
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d00e      	beq.n	80031d4 <UART_SetConfig+0xf4>
 80031b6:	e01b      	b.n	80031f0 <UART_SetConfig+0x110>
 80031b8:	231b      	movs	r3, #27
 80031ba:	2220      	movs	r2, #32
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e154      	b.n	8003470 <UART_SetConfig+0x390>
 80031c6:	231b      	movs	r3, #27
 80031c8:	2220      	movs	r2, #32
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e14d      	b.n	8003470 <UART_SetConfig+0x390>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2204      	movs	r2, #4
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e146      	b.n	8003470 <UART_SetConfig+0x390>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2208      	movs	r2, #8
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e13f      	b.n	8003470 <UART_SetConfig+0x390>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2210      	movs	r2, #16
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e138      	b.n	8003470 <UART_SetConfig+0x390>
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a8c      	ldr	r2, [pc, #560]	; (8003434 <UART_SetConfig+0x354>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d131      	bne.n	800326c <UART_SetConfig+0x18c>
 8003208:	4b89      	ldr	r3, [pc, #548]	; (8003430 <UART_SetConfig+0x350>)
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	220c      	movs	r2, #12
 800320e:	4013      	ands	r3, r2
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d01d      	beq.n	8003250 <UART_SetConfig+0x170>
 8003214:	d823      	bhi.n	800325e <UART_SetConfig+0x17e>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d00c      	beq.n	8003234 <UART_SetConfig+0x154>
 800321a:	d820      	bhi.n	800325e <UART_SetConfig+0x17e>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <UART_SetConfig+0x146>
 8003220:	2b04      	cmp	r3, #4
 8003222:	d00e      	beq.n	8003242 <UART_SetConfig+0x162>
 8003224:	e01b      	b.n	800325e <UART_SetConfig+0x17e>
 8003226:	231b      	movs	r3, #27
 8003228:	2220      	movs	r2, #32
 800322a:	189b      	adds	r3, r3, r2
 800322c:	19db      	adds	r3, r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e11d      	b.n	8003470 <UART_SetConfig+0x390>
 8003234:	231b      	movs	r3, #27
 8003236:	2220      	movs	r2, #32
 8003238:	189b      	adds	r3, r3, r2
 800323a:	19db      	adds	r3, r3, r7
 800323c:	2202      	movs	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e116      	b.n	8003470 <UART_SetConfig+0x390>
 8003242:	231b      	movs	r3, #27
 8003244:	2220      	movs	r2, #32
 8003246:	189b      	adds	r3, r3, r2
 8003248:	19db      	adds	r3, r3, r7
 800324a:	2204      	movs	r2, #4
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e10f      	b.n	8003470 <UART_SetConfig+0x390>
 8003250:	231b      	movs	r3, #27
 8003252:	2220      	movs	r2, #32
 8003254:	189b      	adds	r3, r3, r2
 8003256:	19db      	adds	r3, r3, r7
 8003258:	2208      	movs	r2, #8
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e108      	b.n	8003470 <UART_SetConfig+0x390>
 800325e:	231b      	movs	r3, #27
 8003260:	2220      	movs	r2, #32
 8003262:	189b      	adds	r3, r3, r2
 8003264:	19db      	adds	r3, r3, r7
 8003266:	2210      	movs	r2, #16
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e101      	b.n	8003470 <UART_SetConfig+0x390>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a71      	ldr	r2, [pc, #452]	; (8003438 <UART_SetConfig+0x358>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d131      	bne.n	80032da <UART_SetConfig+0x1fa>
 8003276:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <UART_SetConfig+0x350>)
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	2230      	movs	r2, #48	; 0x30
 800327c:	4013      	ands	r3, r2
 800327e:	2b30      	cmp	r3, #48	; 0x30
 8003280:	d01d      	beq.n	80032be <UART_SetConfig+0x1de>
 8003282:	d823      	bhi.n	80032cc <UART_SetConfig+0x1ec>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d00c      	beq.n	80032a2 <UART_SetConfig+0x1c2>
 8003288:	d820      	bhi.n	80032cc <UART_SetConfig+0x1ec>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <UART_SetConfig+0x1b4>
 800328e:	2b10      	cmp	r3, #16
 8003290:	d00e      	beq.n	80032b0 <UART_SetConfig+0x1d0>
 8003292:	e01b      	b.n	80032cc <UART_SetConfig+0x1ec>
 8003294:	231b      	movs	r3, #27
 8003296:	2220      	movs	r2, #32
 8003298:	189b      	adds	r3, r3, r2
 800329a:	19db      	adds	r3, r3, r7
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e0e6      	b.n	8003470 <UART_SetConfig+0x390>
 80032a2:	231b      	movs	r3, #27
 80032a4:	2220      	movs	r2, #32
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	19db      	adds	r3, r3, r7
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e0df      	b.n	8003470 <UART_SetConfig+0x390>
 80032b0:	231b      	movs	r3, #27
 80032b2:	2220      	movs	r2, #32
 80032b4:	189b      	adds	r3, r3, r2
 80032b6:	19db      	adds	r3, r3, r7
 80032b8:	2204      	movs	r2, #4
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e0d8      	b.n	8003470 <UART_SetConfig+0x390>
 80032be:	231b      	movs	r3, #27
 80032c0:	2220      	movs	r2, #32
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	19db      	adds	r3, r3, r7
 80032c6:	2208      	movs	r2, #8
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e0d1      	b.n	8003470 <UART_SetConfig+0x390>
 80032cc:	231b      	movs	r3, #27
 80032ce:	2220      	movs	r2, #32
 80032d0:	189b      	adds	r3, r3, r2
 80032d2:	19db      	adds	r3, r3, r7
 80032d4:	2210      	movs	r2, #16
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e0ca      	b.n	8003470 <UART_SetConfig+0x390>
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a57      	ldr	r2, [pc, #348]	; (800343c <UART_SetConfig+0x35c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d106      	bne.n	80032f2 <UART_SetConfig+0x212>
 80032e4:	231b      	movs	r3, #27
 80032e6:	2220      	movs	r2, #32
 80032e8:	189b      	adds	r3, r3, r2
 80032ea:	19db      	adds	r3, r3, r7
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e0be      	b.n	8003470 <UART_SetConfig+0x390>
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a52      	ldr	r2, [pc, #328]	; (8003440 <UART_SetConfig+0x360>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d106      	bne.n	800330a <UART_SetConfig+0x22a>
 80032fc:	231b      	movs	r3, #27
 80032fe:	2220      	movs	r2, #32
 8003300:	189b      	adds	r3, r3, r2
 8003302:	19db      	adds	r3, r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e0b2      	b.n	8003470 <UART_SetConfig+0x390>
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <UART_SetConfig+0x364>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d106      	bne.n	8003322 <UART_SetConfig+0x242>
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e0a6      	b.n	8003470 <UART_SetConfig+0x390>
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3e      	ldr	r2, [pc, #248]	; (8003420 <UART_SetConfig+0x340>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d13e      	bne.n	80033aa <UART_SetConfig+0x2ca>
 800332c:	4b40      	ldr	r3, [pc, #256]	; (8003430 <UART_SetConfig+0x350>)
 800332e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003330:	23c0      	movs	r3, #192	; 0xc0
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4013      	ands	r3, r2
 8003336:	22c0      	movs	r2, #192	; 0xc0
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <UART_SetConfig+0x2ae>
 800333e:	22c0      	movs	r2, #192	; 0xc0
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	4293      	cmp	r3, r2
 8003344:	d82a      	bhi.n	800339c <UART_SetConfig+0x2bc>
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	4293      	cmp	r3, r2
 800334c:	d011      	beq.n	8003372 <UART_SetConfig+0x292>
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	4293      	cmp	r3, r2
 8003354:	d822      	bhi.n	800339c <UART_SetConfig+0x2bc>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <UART_SetConfig+0x284>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <UART_SetConfig+0x2a0>
 8003362:	e01b      	b.n	800339c <UART_SetConfig+0x2bc>
 8003364:	231b      	movs	r3, #27
 8003366:	2220      	movs	r2, #32
 8003368:	189b      	adds	r3, r3, r2
 800336a:	19db      	adds	r3, r3, r7
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e07e      	b.n	8003470 <UART_SetConfig+0x390>
 8003372:	231b      	movs	r3, #27
 8003374:	2220      	movs	r2, #32
 8003376:	189b      	adds	r3, r3, r2
 8003378:	19db      	adds	r3, r3, r7
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e077      	b.n	8003470 <UART_SetConfig+0x390>
 8003380:	231b      	movs	r3, #27
 8003382:	2220      	movs	r2, #32
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2204      	movs	r2, #4
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e070      	b.n	8003470 <UART_SetConfig+0x390>
 800338e:	231b      	movs	r3, #27
 8003390:	2220      	movs	r2, #32
 8003392:	189b      	adds	r3, r3, r2
 8003394:	19db      	adds	r3, r3, r7
 8003396:	2208      	movs	r2, #8
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e069      	b.n	8003470 <UART_SetConfig+0x390>
 800339c:	231b      	movs	r3, #27
 800339e:	2220      	movs	r2, #32
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	2210      	movs	r2, #16
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e062      	b.n	8003470 <UART_SetConfig+0x390>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <UART_SetConfig+0x344>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d157      	bne.n	8003464 <UART_SetConfig+0x384>
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <UART_SetConfig+0x350>)
 80033b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	22c0      	movs	r2, #192	; 0xc0
 80033c0:	0092      	lsls	r2, r2, #2
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <UART_SetConfig+0x368>
 80033c6:	22c0      	movs	r2, #192	; 0xc0
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d843      	bhi.n	8003456 <UART_SetConfig+0x376>
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d011      	beq.n	80033fa <UART_SetConfig+0x31a>
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	4293      	cmp	r3, r2
 80033dc:	d83b      	bhi.n	8003456 <UART_SetConfig+0x376>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <UART_SetConfig+0x30c>
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	0052      	lsls	r2, r2, #1
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <UART_SetConfig+0x328>
 80033ea:	e034      	b.n	8003456 <UART_SetConfig+0x376>
 80033ec:	231b      	movs	r3, #27
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e03a      	b.n	8003470 <UART_SetConfig+0x390>
 80033fa:	231b      	movs	r3, #27
 80033fc:	2220      	movs	r2, #32
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e033      	b.n	8003470 <UART_SetConfig+0x390>
 8003408:	231b      	movs	r3, #27
 800340a:	2220      	movs	r2, #32
 800340c:	189b      	adds	r3, r3, r2
 800340e:	19db      	adds	r3, r3, r7
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e02c      	b.n	8003470 <UART_SetConfig+0x390>
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	cfff69f3 	.word	0xcfff69f3
 800341c:	ffffcfff 	.word	0xffffcfff
 8003420:	40008000 	.word	0x40008000
 8003424:	40008400 	.word	0x40008400
 8003428:	11fff4ff 	.word	0x11fff4ff
 800342c:	40013800 	.word	0x40013800
 8003430:	40021000 	.word	0x40021000
 8003434:	40004400 	.word	0x40004400
 8003438:	40004800 	.word	0x40004800
 800343c:	40004c00 	.word	0x40004c00
 8003440:	40005000 	.word	0x40005000
 8003444:	40013c00 	.word	0x40013c00
 8003448:	231b      	movs	r3, #27
 800344a:	2220      	movs	r2, #32
 800344c:	189b      	adds	r3, r3, r2
 800344e:	19db      	adds	r3, r3, r7
 8003450:	2208      	movs	r2, #8
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e00c      	b.n	8003470 <UART_SetConfig+0x390>
 8003456:	231b      	movs	r3, #27
 8003458:	2220      	movs	r2, #32
 800345a:	189b      	adds	r3, r3, r2
 800345c:	19db      	adds	r3, r3, r7
 800345e:	2210      	movs	r2, #16
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e005      	b.n	8003470 <UART_SetConfig+0x390>
 8003464:	231b      	movs	r3, #27
 8003466:	2220      	movs	r2, #32
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	2210      	movs	r2, #16
 800346e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4ac1      	ldr	r2, [pc, #772]	; (800377c <UART_SetConfig+0x69c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d005      	beq.n	8003486 <UART_SetConfig+0x3a6>
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4ac0      	ldr	r2, [pc, #768]	; (8003780 <UART_SetConfig+0x6a0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d000      	beq.n	8003486 <UART_SetConfig+0x3a6>
 8003484:	e093      	b.n	80035ae <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003486:	231b      	movs	r3, #27
 8003488:	2220      	movs	r2, #32
 800348a:	189b      	adds	r3, r3, r2
 800348c:	19db      	adds	r3, r3, r7
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d015      	beq.n	80034c0 <UART_SetConfig+0x3e0>
 8003494:	dc18      	bgt.n	80034c8 <UART_SetConfig+0x3e8>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00d      	beq.n	80034b6 <UART_SetConfig+0x3d6>
 800349a:	dc15      	bgt.n	80034c8 <UART_SetConfig+0x3e8>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <UART_SetConfig+0x3c6>
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d005      	beq.n	80034b0 <UART_SetConfig+0x3d0>
 80034a4:	e010      	b.n	80034c8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a6:	f7ff fad7 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 80034aa:	0003      	movs	r3, r0
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ae:	e014      	b.n	80034da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b0:	4bb4      	ldr	r3, [pc, #720]	; (8003784 <UART_SetConfig+0x6a4>)
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b4:	e011      	b.n	80034da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7ff fa43 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80034ba:	0003      	movs	r3, r0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034be:	e00c      	b.n	80034da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c6:	e008      	b.n	80034da <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034cc:	231a      	movs	r3, #26
 80034ce:	2220      	movs	r2, #32
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
        break;
 80034d8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d100      	bne.n	80034e2 <UART_SetConfig+0x402>
 80034e0:	e135      	b.n	800374e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e6:	4ba8      	ldr	r3, [pc, #672]	; (8003788 <UART_SetConfig+0x6a8>)
 80034e8:	0052      	lsls	r2, r2, #1
 80034ea:	5ad3      	ldrh	r3, [r2, r3]
 80034ec:	0019      	movs	r1, r3
 80034ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034f0:	f7fc fe1a 	bl	8000128 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	0013      	movs	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	189b      	adds	r3, r3, r2
 8003502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003504:	429a      	cmp	r2, r3
 8003506:	d305      	bcc.n	8003514 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800350e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003510:	429a      	cmp	r2, r3
 8003512:	d906      	bls.n	8003522 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003514:	231a      	movs	r3, #26
 8003516:	2220      	movs	r2, #32
 8003518:	189b      	adds	r3, r3, r2
 800351a:	19db      	adds	r3, r3, r7
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e044      	b.n	80035ac <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352e:	4b96      	ldr	r3, [pc, #600]	; (8003788 <UART_SetConfig+0x6a8>)
 8003530:	0052      	lsls	r2, r2, #1
 8003532:	5ad3      	ldrh	r3, [r2, r3]
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	69b8      	ldr	r0, [r7, #24]
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	f7fc ff67 	bl	8000414 <__aeabi_uldivmod>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	0e11      	lsrs	r1, r2, #24
 800354c:	021d      	lsls	r5, r3, #8
 800354e:	430d      	orrs	r5, r1
 8003550:	0214      	lsls	r4, r2, #8
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	1900      	adds	r0, r0, r4
 8003564:	4169      	adcs	r1, r5
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f7fc ff4e 	bl	8000414 <__aeabi_uldivmod>
 8003578:	0002      	movs	r2, r0
 800357a:	000b      	movs	r3, r1
 800357c:	0013      	movs	r3, r2
 800357e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	429a      	cmp	r2, r3
 8003588:	d309      	bcc.n	800359e <UART_SetConfig+0x4be>
 800358a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	035b      	lsls	r3, r3, #13
 8003590:	429a      	cmp	r2, r3
 8003592:	d204      	bcs.n	800359e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e006      	b.n	80035ac <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800359e:	231a      	movs	r3, #26
 80035a0:	2220      	movs	r2, #32
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	19db      	adds	r3, r3, r7
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80035aa:	e0d0      	b.n	800374e <UART_SetConfig+0x66e>
 80035ac:	e0cf      	b.n	800374e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d000      	beq.n	80035bc <UART_SetConfig+0x4dc>
 80035ba:	e070      	b.n	800369e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80035bc:	231b      	movs	r3, #27
 80035be:	2220      	movs	r2, #32
 80035c0:	189b      	adds	r3, r3, r2
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d015      	beq.n	80035f6 <UART_SetConfig+0x516>
 80035ca:	dc18      	bgt.n	80035fe <UART_SetConfig+0x51e>
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00d      	beq.n	80035ec <UART_SetConfig+0x50c>
 80035d0:	dc15      	bgt.n	80035fe <UART_SetConfig+0x51e>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x4fc>
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d005      	beq.n	80035e6 <UART_SetConfig+0x506>
 80035da:	e010      	b.n	80035fe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7ff fa3c 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 80035e0:	0003      	movs	r3, r0
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035e4:	e014      	b.n	8003610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e6:	4b67      	ldr	r3, [pc, #412]	; (8003784 <UART_SetConfig+0x6a4>)
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ea:	e011      	b.n	8003610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ec:	f7ff f9a8 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80035f0:	0003      	movs	r3, r0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f4:	e00c      	b.n	8003610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035fc:	e008      	b.n	8003610 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003602:	231a      	movs	r3, #26
 8003604:	2220      	movs	r2, #32
 8003606:	189b      	adds	r3, r3, r2
 8003608:	19db      	adds	r3, r3, r7
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
        break;
 800360e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <UART_SetConfig+0x538>
 8003616:	e09a      	b.n	800374e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800361c:	4b5a      	ldr	r3, [pc, #360]	; (8003788 <UART_SetConfig+0x6a8>)
 800361e:	0052      	lsls	r2, r2, #1
 8003620:	5ad3      	ldrh	r3, [r2, r3]
 8003622:	0019      	movs	r1, r3
 8003624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003626:	f7fc fd7f 	bl	8000128 <__udivsi3>
 800362a:	0003      	movs	r3, r0
 800362c:	005a      	lsls	r2, r3, #1
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	18d2      	adds	r2, r2, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0019      	movs	r1, r3
 800363c:	0010      	movs	r0, r2
 800363e:	f7fc fd73 	bl	8000128 <__udivsi3>
 8003642:	0003      	movs	r3, r0
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2b0f      	cmp	r3, #15
 800364a:	d921      	bls.n	8003690 <UART_SetConfig+0x5b0>
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	025b      	lsls	r3, r3, #9
 8003652:	429a      	cmp	r2, r3
 8003654:	d21c      	bcs.n	8003690 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	b29a      	uxth	r2, r3
 800365a:	200e      	movs	r0, #14
 800365c:	2420      	movs	r4, #32
 800365e:	1903      	adds	r3, r0, r4
 8003660:	19db      	adds	r3, r3, r7
 8003662:	210f      	movs	r1, #15
 8003664:	438a      	bics	r2, r1
 8003666:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	2207      	movs	r2, #7
 8003670:	4013      	ands	r3, r2
 8003672:	b299      	uxth	r1, r3
 8003674:	1903      	adds	r3, r0, r4
 8003676:	19db      	adds	r3, r3, r7
 8003678:	1902      	adds	r2, r0, r4
 800367a:	19d2      	adds	r2, r2, r7
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1902      	adds	r2, r0, r4
 8003688:	19d2      	adds	r2, r2, r7
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e05e      	b.n	800374e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003690:	231a      	movs	r3, #26
 8003692:	2220      	movs	r2, #32
 8003694:	189b      	adds	r3, r3, r2
 8003696:	19db      	adds	r3, r3, r7
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e057      	b.n	800374e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800369e:	231b      	movs	r3, #27
 80036a0:	2220      	movs	r2, #32
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	19db      	adds	r3, r3, r7
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d015      	beq.n	80036d8 <UART_SetConfig+0x5f8>
 80036ac:	dc18      	bgt.n	80036e0 <UART_SetConfig+0x600>
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00d      	beq.n	80036ce <UART_SetConfig+0x5ee>
 80036b2:	dc15      	bgt.n	80036e0 <UART_SetConfig+0x600>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <UART_SetConfig+0x5de>
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d005      	beq.n	80036c8 <UART_SetConfig+0x5e8>
 80036bc:	e010      	b.n	80036e0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036be:	f7ff f9cb 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 80036c2:	0003      	movs	r3, r0
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036c6:	e014      	b.n	80036f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <UART_SetConfig+0x6a4>)
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036cc:	e011      	b.n	80036f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7ff f937 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80036d2:	0003      	movs	r3, r0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036d6:	e00c      	b.n	80036f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036de:	e008      	b.n	80036f2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036e4:	231a      	movs	r3, #26
 80036e6:	2220      	movs	r2, #32
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
        break;
 80036f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02a      	beq.n	800374e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <UART_SetConfig+0x6a8>)
 80036fe:	0052      	lsls	r2, r2, #1
 8003700:	5ad3      	ldrh	r3, [r2, r3]
 8003702:	0019      	movs	r1, r3
 8003704:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003706:	f7fc fd0f 	bl	8000128 <__udivsi3>
 800370a:	0003      	movs	r3, r0
 800370c:	001a      	movs	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	18d2      	adds	r2, r2, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f7fc fd03 	bl	8000128 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d90a      	bls.n	8003742 <UART_SetConfig+0x662>
 800372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	025b      	lsls	r3, r3, #9
 8003732:	429a      	cmp	r2, r3
 8003734:	d205      	bcs.n	8003742 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	b29a      	uxth	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
 8003740:	e005      	b.n	800374e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003742:	231a      	movs	r3, #26
 8003744:	2220      	movs	r2, #32
 8003746:	189b      	adds	r3, r3, r2
 8003748:	19db      	adds	r3, r3, r7
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	226a      	movs	r2, #106	; 0x6a
 8003752:	2101      	movs	r1, #1
 8003754:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	2268      	movs	r2, #104	; 0x68
 800375a:	2101      	movs	r1, #1
 800375c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	2200      	movs	r2, #0
 8003762:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	2200      	movs	r2, #0
 8003768:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800376a:	231a      	movs	r3, #26
 800376c:	2220      	movs	r2, #32
 800376e:	189b      	adds	r3, r3, r2
 8003770:	19db      	adds	r3, r3, r7
 8003772:	781b      	ldrb	r3, [r3, #0]
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b010      	add	sp, #64	; 0x40
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	40008000 	.word	0x40008000
 8003780:	40008400 	.word	0x40008400
 8003784:	00f42400 	.word	0x00f42400
 8003788:	08004720 	.word	0x08004720

0800378c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d00b      	beq.n	80037b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <UART_AdvFeatureConfig+0x144>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d00b      	beq.n	80037d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a43      	ldr	r2, [pc, #268]	; (80038d4 <UART_AdvFeatureConfig+0x148>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d00b      	beq.n	80037fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <UART_AdvFeatureConfig+0x14c>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	2208      	movs	r2, #8
 8003800:	4013      	ands	r3, r2
 8003802:	d00b      	beq.n	800381c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a34      	ldr	r2, [pc, #208]	; (80038dc <UART_AdvFeatureConfig+0x150>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2210      	movs	r2, #16
 8003822:	4013      	ands	r3, r2
 8003824:	d00b      	beq.n	800383e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <UART_AdvFeatureConfig+0x154>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	d00b      	beq.n	8003860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <UART_AdvFeatureConfig+0x158>)
 8003850:	4013      	ands	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	4013      	ands	r3, r2
 8003868:	d01d      	beq.n	80038a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <UART_AdvFeatureConfig+0x15c>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	035b      	lsls	r3, r3, #13
 800388a:	429a      	cmp	r2, r3
 800388c:	d10b      	bne.n	80038a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <UART_AdvFeatureConfig+0x160>)
 8003896:	4013      	ands	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	4013      	ands	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <UART_AdvFeatureConfig+0x164>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	fffdffff 	.word	0xfffdffff
 80038d4:	fffeffff 	.word	0xfffeffff
 80038d8:	fffbffff 	.word	0xfffbffff
 80038dc:	ffff7fff 	.word	0xffff7fff
 80038e0:	ffffefff 	.word	0xffffefff
 80038e4:	ffffdfff 	.word	0xffffdfff
 80038e8:	ffefffff 	.word	0xffefffff
 80038ec:	ff9fffff 	.word	0xff9fffff
 80038f0:	fff7ffff 	.word	0xfff7ffff

080038f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2290      	movs	r2, #144	; 0x90
 8003900:	2100      	movs	r1, #0
 8003902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003904:	f7fd fa74 	bl	8000df0 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2208      	movs	r2, #8
 8003914:	4013      	ands	r3, r2
 8003916:	2b08      	cmp	r3, #8
 8003918:	d10c      	bne.n	8003934 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	0391      	lsls	r1, r2, #14
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <UART_CheckIdleState+0x98>)
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	f000 f832 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 800392c:	1e03      	subs	r3, r0, #0
 800392e:	d001      	beq.n	8003934 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e026      	b.n	8003982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	2b04      	cmp	r3, #4
 8003940:	d10c      	bne.n	800395c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	03d1      	lsls	r1, r2, #15
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <UART_CheckIdleState+0x98>)
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	f000 f81e 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e012      	b.n	8003982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2288      	movs	r2, #136	; 0x88
 8003960:	2120      	movs	r1, #32
 8003962:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	228c      	movs	r2, #140	; 0x8c
 8003968:	2120      	movs	r1, #32
 800396a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2284      	movs	r2, #132	; 0x84
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	01ffffff 	.word	0x01ffffff

08003990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b094      	sub	sp, #80	; 0x50
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	e0a7      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a4:	3301      	adds	r3, #1
 80039a6:	d100      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80039a8:	e0a3      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fd fa21 	bl	8000df0 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13f      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	494e      	ldr	r1, [pc, #312]	; (8003b1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	f383 8810 	msr	PRIMASK, r3
}
 80039f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
 80039fc:	2301      	movs	r3, #1
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	438a      	bics	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2288      	movs	r2, #136	; 0x88
 8003a28:	2120      	movs	r1, #32
 8003a2a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	228c      	movs	r2, #140	; 0x8c
 8003a30:	2120      	movs	r1, #32
 8003a32:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2284      	movs	r2, #132	; 0x84
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e069      	b.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2204      	movs	r2, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d052      	beq.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	401a      	ands	r2, r3
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d148      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6e:	613b      	str	r3, [r7, #16]
  return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f383 8810 	msr	PRIMASK, r3
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4924      	ldr	r1, [pc, #144]	; (8003b1c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	438a      	bics	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2288      	movs	r2, #136	; 0x88
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	228c      	movs	r2, #140	; 0x8c
 8003ada:	2120      	movs	r1, #32
 8003adc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2290      	movs	r2, #144	; 0x90
 8003ae2:	2120      	movs	r1, #32
 8003ae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2284      	movs	r2, #132	; 0x84
 8003aea:	2100      	movs	r1, #0
 8003aec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e010      	b.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	425a      	negs	r2, r3
 8003b02:	4153      	adcs	r3, r2
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	001a      	movs	r2, r3
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d100      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x182>
 8003b10:	e747      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b014      	add	sp, #80	; 0x50
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	fffffe5f 	.word	0xfffffe5f

08003b20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2284      	movs	r2, #132	; 0x84
 8003b2c:	5c9b      	ldrb	r3, [r3, r2]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e027      	b.n	8003b86 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2284      	movs	r2, #132	; 0x84
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2288      	movs	r2, #136	; 0x88
 8003b42:	2124      	movs	r1, #36	; 0x24
 8003b44:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2288      	movs	r2, #136	; 0x88
 8003b78:	2120      	movs	r1, #32
 8003b7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2284      	movs	r2, #132	; 0x84
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	dfffffff 	.word	0xdfffffff

08003b94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2284      	movs	r2, #132	; 0x84
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e02e      	b.n	8003c0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2284      	movs	r2, #132	; 0x84
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2288      	movs	r2, #136	; 0x88
 8003bb8:	2124      	movs	r1, #36	; 0x24
 8003bba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	08d9      	lsrs	r1, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f854 	bl	8003c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2288      	movs	r2, #136	; 0x88
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2284      	movs	r2, #132	; 0x84
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2284      	movs	r2, #132	; 0x84
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e02f      	b.n	8003c8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2284      	movs	r2, #132	; 0x84
 8003c30:	2101      	movs	r1, #1
 8003c32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2288      	movs	r2, #136	; 0x88
 8003c38:	2124      	movs	r1, #36	; 0x24
 8003c3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	438a      	bics	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 f813 	bl	8003c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2288      	movs	r2, #136	; 0x88
 8003c7e:	2120      	movs	r1, #32
 8003c80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2284      	movs	r2, #132	; 0x84
 8003c86:	2100      	movs	r1, #0
 8003c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b004      	add	sp, #16
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f1ffffff 	.word	0xf1ffffff

08003c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d108      	bne.n	8003cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	226a      	movs	r2, #106	; 0x6a
 8003cac:	2101      	movs	r1, #1
 8003cae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2268      	movs	r2, #104	; 0x68
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cb8:	e043      	b.n	8003d42 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cba:	260f      	movs	r6, #15
 8003cbc:	19bb      	adds	r3, r7, r6
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cc2:	200e      	movs	r0, #14
 8003cc4:	183b      	adds	r3, r7, r0
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	0e5b      	lsrs	r3, r3, #25
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	240d      	movs	r4, #13
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2107      	movs	r1, #7
 8003cda:	400a      	ands	r2, r1
 8003cdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	0f5b      	lsrs	r3, r3, #29
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	250c      	movs	r5, #12
 8003cea:	197b      	adds	r3, r7, r5
 8003cec:	2107      	movs	r1, #7
 8003cee:	400a      	ands	r2, r1
 8003cf0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cf2:	183b      	adds	r3, r7, r0
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	197a      	adds	r2, r7, r5
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	4914      	ldr	r1, [pc, #80]	; (8003d4c <UARTEx_SetNbDataToProcess+0xb4>)
 8003cfc:	5c8a      	ldrb	r2, [r1, r2]
 8003cfe:	435a      	muls	r2, r3
 8003d00:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d02:	197b      	adds	r3, r7, r5
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	f7fc fa96 	bl	800023c <__divsi3>
 8003d10:	0003      	movs	r3, r0
 8003d12:	b299      	uxth	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	226a      	movs	r2, #106	; 0x6a
 8003d18:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d1a:	19bb      	adds	r3, r7, r6
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	193a      	adds	r2, r7, r4
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	490a      	ldr	r1, [pc, #40]	; (8003d4c <UARTEx_SetNbDataToProcess+0xb4>)
 8003d24:	5c8a      	ldrb	r2, [r1, r2]
 8003d26:	435a      	muls	r2, r3
 8003d28:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d2a:	193b      	adds	r3, r7, r4
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d32:	0019      	movs	r1, r3
 8003d34:	f7fc fa82 	bl	800023c <__divsi3>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	b299      	uxth	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2268      	movs	r2, #104	; 0x68
 8003d40:	5299      	strh	r1, [r3, r2]
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b005      	add	sp, #20
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	08004738 	.word	0x08004738
 8003d50:	08004740 	.word	0x08004740

08003d54 <siprintf>:
 8003d54:	b40e      	push	{r1, r2, r3}
 8003d56:	b500      	push	{lr}
 8003d58:	490b      	ldr	r1, [pc, #44]	; (8003d88 <siprintf+0x34>)
 8003d5a:	b09c      	sub	sp, #112	; 0x70
 8003d5c:	ab1d      	add	r3, sp, #116	; 0x74
 8003d5e:	9002      	str	r0, [sp, #8]
 8003d60:	9006      	str	r0, [sp, #24]
 8003d62:	9107      	str	r1, [sp, #28]
 8003d64:	9104      	str	r1, [sp, #16]
 8003d66:	4809      	ldr	r0, [pc, #36]	; (8003d8c <siprintf+0x38>)
 8003d68:	4909      	ldr	r1, [pc, #36]	; (8003d90 <siprintf+0x3c>)
 8003d6a:	cb04      	ldmia	r3!, {r2}
 8003d6c:	9105      	str	r1, [sp, #20]
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	a902      	add	r1, sp, #8
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	f000 f9a2 	bl	80040bc <_svfiprintf_r>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	b01c      	add	sp, #112	; 0x70
 8003d80:	bc08      	pop	{r3}
 8003d82:	b003      	add	sp, #12
 8003d84:	4718      	bx	r3
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	7fffffff 	.word	0x7fffffff
 8003d8c:	20000058 	.word	0x20000058
 8003d90:	ffff0208 	.word	0xffff0208

08003d94 <memset>:
 8003d94:	0003      	movs	r3, r0
 8003d96:	1882      	adds	r2, r0, r2
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <__errno>:
 8003da4:	4b01      	ldr	r3, [pc, #4]	; (8003dac <__errno+0x8>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	4770      	bx	lr
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000058 	.word	0x20000058

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2600      	movs	r6, #0
 8003db4:	4c0c      	ldr	r4, [pc, #48]	; (8003de8 <__libc_init_array+0x38>)
 8003db6:	4d0d      	ldr	r5, [pc, #52]	; (8003dec <__libc_init_array+0x3c>)
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a6      	cmp	r6, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	f000 fc6d 	bl	80046a0 <_init>
 8003dc6:	4c0a      	ldr	r4, [pc, #40]	; (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4d0a      	ldr	r5, [pc, #40]	; (8003df4 <__libc_init_array+0x44>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a6      	cmp	r6, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	00b3      	lsls	r3, r6, #2
 8003dd6:	58eb      	ldr	r3, [r5, r3]
 8003dd8:	4798      	blx	r3
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	00b3      	lsls	r3, r6, #2
 8003de0:	58eb      	ldr	r3, [r5, r3]
 8003de2:	4798      	blx	r3
 8003de4:	3601      	adds	r6, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	08004784 	.word	0x08004784
 8003dec:	08004784 	.word	0x08004784
 8003df0:	08004788 	.word	0x08004788
 8003df4:	08004784 	.word	0x08004784

08003df8 <__retarget_lock_acquire_recursive>:
 8003df8:	4770      	bx	lr

08003dfa <__retarget_lock_release_recursive>:
 8003dfa:	4770      	bx	lr

08003dfc <_free_r>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	0005      	movs	r5, r0
 8003e00:	2900      	cmp	r1, #0
 8003e02:	d010      	beq.n	8003e26 <_free_r+0x2a>
 8003e04:	1f0c      	subs	r4, r1, #4
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da00      	bge.n	8003e0e <_free_r+0x12>
 8003e0c:	18e4      	adds	r4, r4, r3
 8003e0e:	0028      	movs	r0, r5
 8003e10:	f000 f8e2 	bl	8003fd8 <__malloc_lock>
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <_free_r+0x90>)
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <_free_r+0x2c>
 8003e1c:	6063      	str	r3, [r4, #4]
 8003e1e:	6014      	str	r4, [r2, #0]
 8003e20:	0028      	movs	r0, r5
 8003e22:	f000 f8e1 	bl	8003fe8 <__malloc_unlock>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d908      	bls.n	8003e3e <_free_r+0x42>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	1821      	adds	r1, r4, r0
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d1f3      	bne.n	8003e1c <_free_r+0x20>
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1809      	adds	r1, r1, r0
 8003e3a:	6021      	str	r1, [r4, #0]
 8003e3c:	e7ee      	b.n	8003e1c <_free_r+0x20>
 8003e3e:	001a      	movs	r2, r3
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <_free_r+0x4e>
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	d9f9      	bls.n	8003e3e <_free_r+0x42>
 8003e4a:	6811      	ldr	r1, [r2, #0]
 8003e4c:	1850      	adds	r0, r2, r1
 8003e4e:	42a0      	cmp	r0, r4
 8003e50:	d10b      	bne.n	8003e6a <_free_r+0x6e>
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	1809      	adds	r1, r1, r0
 8003e56:	1850      	adds	r0, r2, r1
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	4283      	cmp	r3, r0
 8003e5c:	d1e0      	bne.n	8003e20 <_free_r+0x24>
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	1841      	adds	r1, r0, r1
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	6053      	str	r3, [r2, #4]
 8003e68:	e7da      	b.n	8003e20 <_free_r+0x24>
 8003e6a:	42a0      	cmp	r0, r4
 8003e6c:	d902      	bls.n	8003e74 <_free_r+0x78>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	e7d5      	b.n	8003e20 <_free_r+0x24>
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	1821      	adds	r1, r4, r0
 8003e78:	428b      	cmp	r3, r1
 8003e7a:	d103      	bne.n	8003e84 <_free_r+0x88>
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	1809      	adds	r1, r1, r0
 8003e82:	6021      	str	r1, [r4, #0]
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	6054      	str	r4, [r2, #4]
 8003e88:	e7ca      	b.n	8003e20 <_free_r+0x24>
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	200002bc 	.word	0x200002bc

08003e90 <sbrk_aligned>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4e0f      	ldr	r6, [pc, #60]	; (8003ed0 <sbrk_aligned+0x40>)
 8003e94:	000d      	movs	r5, r1
 8003e96:	6831      	ldr	r1, [r6, #0]
 8003e98:	0004      	movs	r4, r0
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	d102      	bne.n	8003ea4 <sbrk_aligned+0x14>
 8003e9e:	f000 fba1 	bl	80045e4 <_sbrk_r>
 8003ea2:	6030      	str	r0, [r6, #0]
 8003ea4:	0029      	movs	r1, r5
 8003ea6:	0020      	movs	r0, r4
 8003ea8:	f000 fb9c 	bl	80045e4 <_sbrk_r>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d00a      	beq.n	8003ec6 <sbrk_aligned+0x36>
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	1cc5      	adds	r5, r0, #3
 8003eb4:	439d      	bics	r5, r3
 8003eb6:	42a8      	cmp	r0, r5
 8003eb8:	d007      	beq.n	8003eca <sbrk_aligned+0x3a>
 8003eba:	1a29      	subs	r1, r5, r0
 8003ebc:	0020      	movs	r0, r4
 8003ebe:	f000 fb91 	bl	80045e4 <_sbrk_r>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d101      	bne.n	8003eca <sbrk_aligned+0x3a>
 8003ec6:	2501      	movs	r5, #1
 8003ec8:	426d      	negs	r5, r5
 8003eca:	0028      	movs	r0, r5
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	200002c0 	.word	0x200002c0

08003ed4 <_malloc_r>:
 8003ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	1ccb      	adds	r3, r1, #3
 8003eda:	4393      	bics	r3, r2
 8003edc:	3308      	adds	r3, #8
 8003ede:	0006      	movs	r6, r0
 8003ee0:	001f      	movs	r7, r3
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d238      	bcs.n	8003f58 <_malloc_r+0x84>
 8003ee6:	270c      	movs	r7, #12
 8003ee8:	42b9      	cmp	r1, r7
 8003eea:	d837      	bhi.n	8003f5c <_malloc_r+0x88>
 8003eec:	0030      	movs	r0, r6
 8003eee:	f000 f873 	bl	8003fd8 <__malloc_lock>
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <_malloc_r+0x100>)
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	001c      	movs	r4, r3
 8003efa:	2c00      	cmp	r4, #0
 8003efc:	d133      	bne.n	8003f66 <_malloc_r+0x92>
 8003efe:	0039      	movs	r1, r7
 8003f00:	0030      	movs	r0, r6
 8003f02:	f7ff ffc5 	bl	8003e90 <sbrk_aligned>
 8003f06:	0004      	movs	r4, r0
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d15e      	bne.n	8003fca <_malloc_r+0xf6>
 8003f0c:	9b00      	ldr	r3, [sp, #0]
 8003f0e:	681c      	ldr	r4, [r3, #0]
 8003f10:	0025      	movs	r5, r4
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	d14e      	bne.n	8003fb4 <_malloc_r+0xe0>
 8003f16:	2c00      	cmp	r4, #0
 8003f18:	d051      	beq.n	8003fbe <_malloc_r+0xea>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0029      	movs	r1, r5
 8003f1e:	18e3      	adds	r3, r4, r3
 8003f20:	0030      	movs	r0, r6
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	f000 fb5e 	bl	80045e4 <_sbrk_r>
 8003f28:	9b01      	ldr	r3, [sp, #4]
 8003f2a:	4283      	cmp	r3, r0
 8003f2c:	d147      	bne.n	8003fbe <_malloc_r+0xea>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0030      	movs	r0, r6
 8003f32:	1aff      	subs	r7, r7, r3
 8003f34:	0039      	movs	r1, r7
 8003f36:	f7ff ffab 	bl	8003e90 <sbrk_aligned>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d03f      	beq.n	8003fbe <_malloc_r+0xea>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	9b00      	ldr	r3, [sp, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d040      	beq.n	8003fce <_malloc_r+0xfa>
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	42a2      	cmp	r2, r4
 8003f50:	d133      	bne.n	8003fba <_malloc_r+0xe6>
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	e014      	b.n	8003f82 <_malloc_r+0xae>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dac5      	bge.n	8003ee8 <_malloc_r+0x14>
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	2500      	movs	r5, #0
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	0028      	movs	r0, r5
 8003f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	1bc9      	subs	r1, r1, r7
 8003f6a:	d420      	bmi.n	8003fae <_malloc_r+0xda>
 8003f6c:	290b      	cmp	r1, #11
 8003f6e:	d918      	bls.n	8003fa2 <_malloc_r+0xce>
 8003f70:	19e2      	adds	r2, r4, r7
 8003f72:	6027      	str	r7, [r4, #0]
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	d112      	bne.n	8003f9e <_malloc_r+0xca>
 8003f78:	9b00      	ldr	r3, [sp, #0]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	6011      	str	r1, [r2, #0]
 8003f80:	6053      	str	r3, [r2, #4]
 8003f82:	0030      	movs	r0, r6
 8003f84:	0025      	movs	r5, r4
 8003f86:	f000 f82f 	bl	8003fe8 <__malloc_unlock>
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	350b      	adds	r5, #11
 8003f8e:	1d23      	adds	r3, r4, #4
 8003f90:	4395      	bics	r5, r2
 8003f92:	1aea      	subs	r2, r5, r3
 8003f94:	429d      	cmp	r5, r3
 8003f96:	d0e4      	beq.n	8003f62 <_malloc_r+0x8e>
 8003f98:	1b5b      	subs	r3, r3, r5
 8003f9a:	50a3      	str	r3, [r4, r2]
 8003f9c:	e7e1      	b.n	8003f62 <_malloc_r+0x8e>
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	e7ec      	b.n	8003f7c <_malloc_r+0xa8>
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d1d5      	bne.n	8003f54 <_malloc_r+0x80>
 8003fa8:	9b00      	ldr	r3, [sp, #0]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e7e9      	b.n	8003f82 <_malloc_r+0xae>
 8003fae:	0023      	movs	r3, r4
 8003fb0:	6864      	ldr	r4, [r4, #4]
 8003fb2:	e7a2      	b.n	8003efa <_malloc_r+0x26>
 8003fb4:	002c      	movs	r4, r5
 8003fb6:	686d      	ldr	r5, [r5, #4]
 8003fb8:	e7ab      	b.n	8003f12 <_malloc_r+0x3e>
 8003fba:	0013      	movs	r3, r2
 8003fbc:	e7c4      	b.n	8003f48 <_malloc_r+0x74>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	0030      	movs	r0, r6
 8003fc2:	6033      	str	r3, [r6, #0]
 8003fc4:	f000 f810 	bl	8003fe8 <__malloc_unlock>
 8003fc8:	e7cb      	b.n	8003f62 <_malloc_r+0x8e>
 8003fca:	6027      	str	r7, [r4, #0]
 8003fcc:	e7d9      	b.n	8003f82 <_malloc_r+0xae>
 8003fce:	605b      	str	r3, [r3, #4]
 8003fd0:	deff      	udf	#255	; 0xff
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	200002bc 	.word	0x200002bc

08003fd8 <__malloc_lock>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <__malloc_lock+0xc>)
 8003fdc:	f7ff ff0c 	bl	8003df8 <__retarget_lock_acquire_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	200002b8 	.word	0x200002b8

08003fe8 <__malloc_unlock>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <__malloc_unlock+0xc>)
 8003fec:	f7ff ff05 	bl	8003dfa <__retarget_lock_release_recursive>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	200002b8 	.word	0x200002b8

08003ff8 <__ssputs_r>:
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	9203      	str	r2, [sp, #12]
 8004000:	688e      	ldr	r6, [r1, #8]
 8004002:	9a01      	ldr	r2, [sp, #4]
 8004004:	0007      	movs	r7, r0
 8004006:	000c      	movs	r4, r1
 8004008:	680b      	ldr	r3, [r1, #0]
 800400a:	4296      	cmp	r6, r2
 800400c:	d831      	bhi.n	8004072 <__ssputs_r+0x7a>
 800400e:	898a      	ldrh	r2, [r1, #12]
 8004010:	2190      	movs	r1, #144	; 0x90
 8004012:	00c9      	lsls	r1, r1, #3
 8004014:	420a      	tst	r2, r1
 8004016:	d029      	beq.n	800406c <__ssputs_r+0x74>
 8004018:	2003      	movs	r0, #3
 800401a:	6921      	ldr	r1, [r4, #16]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	9302      	str	r3, [sp, #8]
 8004020:	6963      	ldr	r3, [r4, #20]
 8004022:	4343      	muls	r3, r0
 8004024:	0fdd      	lsrs	r5, r3, #31
 8004026:	18ed      	adds	r5, r5, r3
 8004028:	9b01      	ldr	r3, [sp, #4]
 800402a:	9802      	ldr	r0, [sp, #8]
 800402c:	3301      	adds	r3, #1
 800402e:	181b      	adds	r3, r3, r0
 8004030:	106d      	asrs	r5, r5, #1
 8004032:	42ab      	cmp	r3, r5
 8004034:	d900      	bls.n	8004038 <__ssputs_r+0x40>
 8004036:	001d      	movs	r5, r3
 8004038:	0552      	lsls	r2, r2, #21
 800403a:	d529      	bpl.n	8004090 <__ssputs_r+0x98>
 800403c:	0029      	movs	r1, r5
 800403e:	0038      	movs	r0, r7
 8004040:	f7ff ff48 	bl	8003ed4 <_malloc_r>
 8004044:	1e06      	subs	r6, r0, #0
 8004046:	d02d      	beq.n	80040a4 <__ssputs_r+0xac>
 8004048:	9a02      	ldr	r2, [sp, #8]
 800404a:	6921      	ldr	r1, [r4, #16]
 800404c:	f000 fae7 	bl	800461e <memcpy>
 8004050:	89a2      	ldrh	r2, [r4, #12]
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <__ssputs_r+0xc0>)
 8004054:	401a      	ands	r2, r3
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	4313      	orrs	r3, r2
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	9b02      	ldr	r3, [sp, #8]
 800405e:	6126      	str	r6, [r4, #16]
 8004060:	18f6      	adds	r6, r6, r3
 8004062:	6026      	str	r6, [r4, #0]
 8004064:	6165      	str	r5, [r4, #20]
 8004066:	9e01      	ldr	r6, [sp, #4]
 8004068:	1aed      	subs	r5, r5, r3
 800406a:	60a5      	str	r5, [r4, #8]
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	429e      	cmp	r6, r3
 8004070:	d900      	bls.n	8004074 <__ssputs_r+0x7c>
 8004072:	9e01      	ldr	r6, [sp, #4]
 8004074:	0032      	movs	r2, r6
 8004076:	9903      	ldr	r1, [sp, #12]
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	f000 fa9f 	bl	80045bc <memmove>
 800407e:	2000      	movs	r0, #0
 8004080:	68a3      	ldr	r3, [r4, #8]
 8004082:	1b9b      	subs	r3, r3, r6
 8004084:	60a3      	str	r3, [r4, #8]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	199b      	adds	r3, r3, r6
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	b005      	add	sp, #20
 800408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004090:	002a      	movs	r2, r5
 8004092:	0038      	movs	r0, r7
 8004094:	f000 facc 	bl	8004630 <_realloc_r>
 8004098:	1e06      	subs	r6, r0, #0
 800409a:	d1df      	bne.n	800405c <__ssputs_r+0x64>
 800409c:	0038      	movs	r0, r7
 800409e:	6921      	ldr	r1, [r4, #16]
 80040a0:	f7ff feac 	bl	8003dfc <_free_r>
 80040a4:	230c      	movs	r3, #12
 80040a6:	2001      	movs	r0, #1
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	89a2      	ldrh	r2, [r4, #12]
 80040ac:	3334      	adds	r3, #52	; 0x34
 80040ae:	4313      	orrs	r3, r2
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	4240      	negs	r0, r0
 80040b4:	e7ea      	b.n	800408c <__ssputs_r+0x94>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	fffffb7f 	.word	0xfffffb7f

080040bc <_svfiprintf_r>:
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040be:	b0a1      	sub	sp, #132	; 0x84
 80040c0:	9003      	str	r0, [sp, #12]
 80040c2:	001d      	movs	r5, r3
 80040c4:	898b      	ldrh	r3, [r1, #12]
 80040c6:	000f      	movs	r7, r1
 80040c8:	0016      	movs	r6, r2
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	d511      	bpl.n	80040f2 <_svfiprintf_r+0x36>
 80040ce:	690b      	ldr	r3, [r1, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10e      	bne.n	80040f2 <_svfiprintf_r+0x36>
 80040d4:	2140      	movs	r1, #64	; 0x40
 80040d6:	f7ff fefd 	bl	8003ed4 <_malloc_r>
 80040da:	6038      	str	r0, [r7, #0]
 80040dc:	6138      	str	r0, [r7, #16]
 80040de:	2800      	cmp	r0, #0
 80040e0:	d105      	bne.n	80040ee <_svfiprintf_r+0x32>
 80040e2:	230c      	movs	r3, #12
 80040e4:	9a03      	ldr	r2, [sp, #12]
 80040e6:	3801      	subs	r0, #1
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	b021      	add	sp, #132	; 0x84
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	2300      	movs	r3, #0
 80040f4:	ac08      	add	r4, sp, #32
 80040f6:	6163      	str	r3, [r4, #20]
 80040f8:	3320      	adds	r3, #32
 80040fa:	7663      	strb	r3, [r4, #25]
 80040fc:	3310      	adds	r3, #16
 80040fe:	76a3      	strb	r3, [r4, #26]
 8004100:	9507      	str	r5, [sp, #28]
 8004102:	0035      	movs	r5, r6
 8004104:	782b      	ldrb	r3, [r5, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <_svfiprintf_r+0x52>
 800410a:	2b25      	cmp	r3, #37	; 0x25
 800410c:	d148      	bne.n	80041a0 <_svfiprintf_r+0xe4>
 800410e:	1bab      	subs	r3, r5, r6
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	42b5      	cmp	r5, r6
 8004114:	d00b      	beq.n	800412e <_svfiprintf_r+0x72>
 8004116:	0032      	movs	r2, r6
 8004118:	0039      	movs	r1, r7
 800411a:	9803      	ldr	r0, [sp, #12]
 800411c:	f7ff ff6c 	bl	8003ff8 <__ssputs_r>
 8004120:	3001      	adds	r0, #1
 8004122:	d100      	bne.n	8004126 <_svfiprintf_r+0x6a>
 8004124:	e0af      	b.n	8004286 <_svfiprintf_r+0x1ca>
 8004126:	6963      	ldr	r3, [r4, #20]
 8004128:	9a05      	ldr	r2, [sp, #20]
 800412a:	189b      	adds	r3, r3, r2
 800412c:	6163      	str	r3, [r4, #20]
 800412e:	782b      	ldrb	r3, [r5, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <_svfiprintf_r+0x7a>
 8004134:	e0a7      	b.n	8004286 <_svfiprintf_r+0x1ca>
 8004136:	2201      	movs	r2, #1
 8004138:	2300      	movs	r3, #0
 800413a:	4252      	negs	r2, r2
 800413c:	6062      	str	r2, [r4, #4]
 800413e:	a904      	add	r1, sp, #16
 8004140:	3254      	adds	r2, #84	; 0x54
 8004142:	1852      	adds	r2, r2, r1
 8004144:	1c6e      	adds	r6, r5, #1
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	60e3      	str	r3, [r4, #12]
 800414a:	60a3      	str	r3, [r4, #8]
 800414c:	7013      	strb	r3, [r2, #0]
 800414e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <_svfiprintf_r+0x1ec>)
 8004152:	2205      	movs	r2, #5
 8004154:	0018      	movs	r0, r3
 8004156:	7831      	ldrb	r1, [r6, #0]
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	f000 fa55 	bl	8004608 <memchr>
 800415e:	1c75      	adds	r5, r6, #1
 8004160:	2800      	cmp	r0, #0
 8004162:	d11f      	bne.n	80041a4 <_svfiprintf_r+0xe8>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	06d3      	lsls	r3, r2, #27
 8004168:	d504      	bpl.n	8004174 <_svfiprintf_r+0xb8>
 800416a:	2353      	movs	r3, #83	; 0x53
 800416c:	a904      	add	r1, sp, #16
 800416e:	185b      	adds	r3, r3, r1
 8004170:	2120      	movs	r1, #32
 8004172:	7019      	strb	r1, [r3, #0]
 8004174:	0713      	lsls	r3, r2, #28
 8004176:	d504      	bpl.n	8004182 <_svfiprintf_r+0xc6>
 8004178:	2353      	movs	r3, #83	; 0x53
 800417a:	a904      	add	r1, sp, #16
 800417c:	185b      	adds	r3, r3, r1
 800417e:	212b      	movs	r1, #43	; 0x2b
 8004180:	7019      	strb	r1, [r3, #0]
 8004182:	7833      	ldrb	r3, [r6, #0]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d016      	beq.n	80041b6 <_svfiprintf_r+0xfa>
 8004188:	0035      	movs	r5, r6
 800418a:	2100      	movs	r1, #0
 800418c:	200a      	movs	r0, #10
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	782a      	ldrb	r2, [r5, #0]
 8004192:	1c6e      	adds	r6, r5, #1
 8004194:	3a30      	subs	r2, #48	; 0x30
 8004196:	2a09      	cmp	r2, #9
 8004198:	d94e      	bls.n	8004238 <_svfiprintf_r+0x17c>
 800419a:	2900      	cmp	r1, #0
 800419c:	d111      	bne.n	80041c2 <_svfiprintf_r+0x106>
 800419e:	e017      	b.n	80041d0 <_svfiprintf_r+0x114>
 80041a0:	3501      	adds	r5, #1
 80041a2:	e7af      	b.n	8004104 <_svfiprintf_r+0x48>
 80041a4:	9b05      	ldr	r3, [sp, #20]
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	1ac0      	subs	r0, r0, r3
 80041aa:	2301      	movs	r3, #1
 80041ac:	4083      	lsls	r3, r0
 80041ae:	4313      	orrs	r3, r2
 80041b0:	002e      	movs	r6, r5
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	e7cc      	b.n	8004150 <_svfiprintf_r+0x94>
 80041b6:	9b07      	ldr	r3, [sp, #28]
 80041b8:	1d19      	adds	r1, r3, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	9107      	str	r1, [sp, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db01      	blt.n	80041c6 <_svfiprintf_r+0x10a>
 80041c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c4:	e004      	b.n	80041d0 <_svfiprintf_r+0x114>
 80041c6:	425b      	negs	r3, r3
 80041c8:	60e3      	str	r3, [r4, #12]
 80041ca:	2302      	movs	r3, #2
 80041cc:	4313      	orrs	r3, r2
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	782b      	ldrb	r3, [r5, #0]
 80041d2:	2b2e      	cmp	r3, #46	; 0x2e
 80041d4:	d10a      	bne.n	80041ec <_svfiprintf_r+0x130>
 80041d6:	786b      	ldrb	r3, [r5, #1]
 80041d8:	2b2a      	cmp	r3, #42	; 0x2a
 80041da:	d135      	bne.n	8004248 <_svfiprintf_r+0x18c>
 80041dc:	9b07      	ldr	r3, [sp, #28]
 80041de:	3502      	adds	r5, #2
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	9207      	str	r2, [sp, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	db2b      	blt.n	8004242 <_svfiprintf_r+0x186>
 80041ea:	9309      	str	r3, [sp, #36]	; 0x24
 80041ec:	4e2f      	ldr	r6, [pc, #188]	; (80042ac <_svfiprintf_r+0x1f0>)
 80041ee:	2203      	movs	r2, #3
 80041f0:	0030      	movs	r0, r6
 80041f2:	7829      	ldrb	r1, [r5, #0]
 80041f4:	f000 fa08 	bl	8004608 <memchr>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d006      	beq.n	800420a <_svfiprintf_r+0x14e>
 80041fc:	2340      	movs	r3, #64	; 0x40
 80041fe:	1b80      	subs	r0, r0, r6
 8004200:	4083      	lsls	r3, r0
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	3501      	adds	r5, #1
 8004206:	4313      	orrs	r3, r2
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	7829      	ldrb	r1, [r5, #0]
 800420c:	2206      	movs	r2, #6
 800420e:	4828      	ldr	r0, [pc, #160]	; (80042b0 <_svfiprintf_r+0x1f4>)
 8004210:	1c6e      	adds	r6, r5, #1
 8004212:	7621      	strb	r1, [r4, #24]
 8004214:	f000 f9f8 	bl	8004608 <memchr>
 8004218:	2800      	cmp	r0, #0
 800421a:	d03c      	beq.n	8004296 <_svfiprintf_r+0x1da>
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <_svfiprintf_r+0x1f8>)
 800421e:	2b00      	cmp	r3, #0
 8004220:	d125      	bne.n	800426e <_svfiprintf_r+0x1b2>
 8004222:	2207      	movs	r2, #7
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	3307      	adds	r3, #7
 8004228:	4393      	bics	r3, r2
 800422a:	3308      	adds	r3, #8
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	6963      	ldr	r3, [r4, #20]
 8004230:	9a04      	ldr	r2, [sp, #16]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	6163      	str	r3, [r4, #20]
 8004236:	e764      	b.n	8004102 <_svfiprintf_r+0x46>
 8004238:	4343      	muls	r3, r0
 800423a:	0035      	movs	r5, r6
 800423c:	2101      	movs	r1, #1
 800423e:	189b      	adds	r3, r3, r2
 8004240:	e7a6      	b.n	8004190 <_svfiprintf_r+0xd4>
 8004242:	2301      	movs	r3, #1
 8004244:	425b      	negs	r3, r3
 8004246:	e7d0      	b.n	80041ea <_svfiprintf_r+0x12e>
 8004248:	2300      	movs	r3, #0
 800424a:	200a      	movs	r0, #10
 800424c:	001a      	movs	r2, r3
 800424e:	3501      	adds	r5, #1
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	7829      	ldrb	r1, [r5, #0]
 8004254:	1c6e      	adds	r6, r5, #1
 8004256:	3930      	subs	r1, #48	; 0x30
 8004258:	2909      	cmp	r1, #9
 800425a:	d903      	bls.n	8004264 <_svfiprintf_r+0x1a8>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0c5      	beq.n	80041ec <_svfiprintf_r+0x130>
 8004260:	9209      	str	r2, [sp, #36]	; 0x24
 8004262:	e7c3      	b.n	80041ec <_svfiprintf_r+0x130>
 8004264:	4342      	muls	r2, r0
 8004266:	0035      	movs	r5, r6
 8004268:	2301      	movs	r3, #1
 800426a:	1852      	adds	r2, r2, r1
 800426c:	e7f1      	b.n	8004252 <_svfiprintf_r+0x196>
 800426e:	aa07      	add	r2, sp, #28
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	0021      	movs	r1, r4
 8004274:	003a      	movs	r2, r7
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <_svfiprintf_r+0x1fc>)
 8004278:	9803      	ldr	r0, [sp, #12]
 800427a:	e000      	b.n	800427e <_svfiprintf_r+0x1c2>
 800427c:	bf00      	nop
 800427e:	9004      	str	r0, [sp, #16]
 8004280:	9b04      	ldr	r3, [sp, #16]
 8004282:	3301      	adds	r3, #1
 8004284:	d1d3      	bne.n	800422e <_svfiprintf_r+0x172>
 8004286:	89bb      	ldrh	r3, [r7, #12]
 8004288:	980d      	ldr	r0, [sp, #52]	; 0x34
 800428a:	065b      	lsls	r3, r3, #25
 800428c:	d400      	bmi.n	8004290 <_svfiprintf_r+0x1d4>
 800428e:	e72c      	b.n	80040ea <_svfiprintf_r+0x2e>
 8004290:	2001      	movs	r0, #1
 8004292:	4240      	negs	r0, r0
 8004294:	e729      	b.n	80040ea <_svfiprintf_r+0x2e>
 8004296:	aa07      	add	r2, sp, #28
 8004298:	9200      	str	r2, [sp, #0]
 800429a:	0021      	movs	r1, r4
 800429c:	003a      	movs	r2, r7
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <_svfiprintf_r+0x1fc>)
 80042a0:	9803      	ldr	r0, [sp, #12]
 80042a2:	f000 f87b 	bl	800439c <_printf_i>
 80042a6:	e7ea      	b.n	800427e <_svfiprintf_r+0x1c2>
 80042a8:	08004748 	.word	0x08004748
 80042ac:	0800474e 	.word	0x0800474e
 80042b0:	08004752 	.word	0x08004752
 80042b4:	00000000 	.word	0x00000000
 80042b8:	08003ff9 	.word	0x08003ff9

080042bc <_printf_common>:
 80042bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042be:	0016      	movs	r6, r2
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	688a      	ldr	r2, [r1, #8]
 80042c4:	690b      	ldr	r3, [r1, #16]
 80042c6:	000c      	movs	r4, r1
 80042c8:	9000      	str	r0, [sp, #0]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	da00      	bge.n	80042d0 <_printf_common+0x14>
 80042ce:	0013      	movs	r3, r2
 80042d0:	0022      	movs	r2, r4
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	3243      	adds	r2, #67	; 0x43
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d001      	beq.n	80042e0 <_printf_common+0x24>
 80042dc:	3301      	adds	r3, #1
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	d502      	bpl.n	80042ec <_printf_common+0x30>
 80042e6:	6833      	ldr	r3, [r6, #0]
 80042e8:	3302      	adds	r3, #2
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	2306      	movs	r3, #6
 80042f0:	0015      	movs	r5, r2
 80042f2:	401d      	ands	r5, r3
 80042f4:	421a      	tst	r2, r3
 80042f6:	d027      	beq.n	8004348 <_printf_common+0x8c>
 80042f8:	0023      	movs	r3, r4
 80042fa:	3343      	adds	r3, #67	; 0x43
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	4193      	sbcs	r3, r2
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d430      	bmi.n	800436a <_printf_common+0xae>
 8004308:	0022      	movs	r2, r4
 800430a:	9901      	ldr	r1, [sp, #4]
 800430c:	9800      	ldr	r0, [sp, #0]
 800430e:	9d08      	ldr	r5, [sp, #32]
 8004310:	3243      	adds	r2, #67	; 0x43
 8004312:	47a8      	blx	r5
 8004314:	3001      	adds	r0, #1
 8004316:	d025      	beq.n	8004364 <_printf_common+0xa8>
 8004318:	2206      	movs	r2, #6
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	2500      	movs	r5, #0
 800431e:	4013      	ands	r3, r2
 8004320:	2b04      	cmp	r3, #4
 8004322:	d105      	bne.n	8004330 <_printf_common+0x74>
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	68e5      	ldr	r5, [r4, #12]
 8004328:	1aed      	subs	r5, r5, r3
 800432a:	43eb      	mvns	r3, r5
 800432c:	17db      	asrs	r3, r3, #31
 800432e:	401d      	ands	r5, r3
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	6922      	ldr	r2, [r4, #16]
 8004334:	4293      	cmp	r3, r2
 8004336:	dd01      	ble.n	800433c <_printf_common+0x80>
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	18ed      	adds	r5, r5, r3
 800433c:	2600      	movs	r6, #0
 800433e:	42b5      	cmp	r5, r6
 8004340:	d120      	bne.n	8004384 <_printf_common+0xc8>
 8004342:	2000      	movs	r0, #0
 8004344:	e010      	b.n	8004368 <_printf_common+0xac>
 8004346:	3501      	adds	r5, #1
 8004348:	68e3      	ldr	r3, [r4, #12]
 800434a:	6832      	ldr	r2, [r6, #0]
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	42ab      	cmp	r3, r5
 8004350:	ddd2      	ble.n	80042f8 <_printf_common+0x3c>
 8004352:	0022      	movs	r2, r4
 8004354:	2301      	movs	r3, #1
 8004356:	9901      	ldr	r1, [sp, #4]
 8004358:	9800      	ldr	r0, [sp, #0]
 800435a:	9f08      	ldr	r7, [sp, #32]
 800435c:	3219      	adds	r2, #25
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	d1f0      	bne.n	8004346 <_printf_common+0x8a>
 8004364:	2001      	movs	r0, #1
 8004366:	4240      	negs	r0, r0
 8004368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800436a:	2030      	movs	r0, #48	; 0x30
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	3143      	adds	r1, #67	; 0x43
 8004370:	7008      	strb	r0, [r1, #0]
 8004372:	0021      	movs	r1, r4
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	3145      	adds	r1, #69	; 0x45
 8004378:	7809      	ldrb	r1, [r1, #0]
 800437a:	18a2      	adds	r2, r4, r2
 800437c:	3243      	adds	r2, #67	; 0x43
 800437e:	3302      	adds	r3, #2
 8004380:	7011      	strb	r1, [r2, #0]
 8004382:	e7c1      	b.n	8004308 <_printf_common+0x4c>
 8004384:	0022      	movs	r2, r4
 8004386:	2301      	movs	r3, #1
 8004388:	9901      	ldr	r1, [sp, #4]
 800438a:	9800      	ldr	r0, [sp, #0]
 800438c:	9f08      	ldr	r7, [sp, #32]
 800438e:	321a      	adds	r2, #26
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	d0e6      	beq.n	8004364 <_printf_common+0xa8>
 8004396:	3601      	adds	r6, #1
 8004398:	e7d1      	b.n	800433e <_printf_common+0x82>
	...

0800439c <_printf_i>:
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b08b      	sub	sp, #44	; 0x2c
 80043a0:	9206      	str	r2, [sp, #24]
 80043a2:	000a      	movs	r2, r1
 80043a4:	3243      	adds	r2, #67	; 0x43
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	9005      	str	r0, [sp, #20]
 80043aa:	9204      	str	r2, [sp, #16]
 80043ac:	7e0a      	ldrb	r2, [r1, #24]
 80043ae:	000c      	movs	r4, r1
 80043b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043b2:	2a78      	cmp	r2, #120	; 0x78
 80043b4:	d809      	bhi.n	80043ca <_printf_i+0x2e>
 80043b6:	2a62      	cmp	r2, #98	; 0x62
 80043b8:	d80b      	bhi.n	80043d2 <_printf_i+0x36>
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d100      	bne.n	80043c0 <_printf_i+0x24>
 80043be:	e0be      	b.n	800453e <_printf_i+0x1a2>
 80043c0:	497c      	ldr	r1, [pc, #496]	; (80045b4 <_printf_i+0x218>)
 80043c2:	9103      	str	r1, [sp, #12]
 80043c4:	2a58      	cmp	r2, #88	; 0x58
 80043c6:	d100      	bne.n	80043ca <_printf_i+0x2e>
 80043c8:	e093      	b.n	80044f2 <_printf_i+0x156>
 80043ca:	0026      	movs	r6, r4
 80043cc:	3642      	adds	r6, #66	; 0x42
 80043ce:	7032      	strb	r2, [r6, #0]
 80043d0:	e022      	b.n	8004418 <_printf_i+0x7c>
 80043d2:	0010      	movs	r0, r2
 80043d4:	3863      	subs	r0, #99	; 0x63
 80043d6:	2815      	cmp	r0, #21
 80043d8:	d8f7      	bhi.n	80043ca <_printf_i+0x2e>
 80043da:	f7fb fe9b 	bl	8000114 <__gnu_thumb1_case_shi>
 80043de:	0016      	.short	0x0016
 80043e0:	fff6001f 	.word	0xfff6001f
 80043e4:	fff6fff6 	.word	0xfff6fff6
 80043e8:	001ffff6 	.word	0x001ffff6
 80043ec:	fff6fff6 	.word	0xfff6fff6
 80043f0:	fff6fff6 	.word	0xfff6fff6
 80043f4:	003600a3 	.word	0x003600a3
 80043f8:	fff60083 	.word	0xfff60083
 80043fc:	00b4fff6 	.word	0x00b4fff6
 8004400:	0036fff6 	.word	0x0036fff6
 8004404:	fff6fff6 	.word	0xfff6fff6
 8004408:	0087      	.short	0x0087
 800440a:	0026      	movs	r6, r4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	3642      	adds	r6, #66	; 0x42
 8004410:	1d11      	adds	r1, r2, #4
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	7033      	strb	r3, [r6, #0]
 8004418:	2301      	movs	r3, #1
 800441a:	e0a2      	b.n	8004562 <_printf_i+0x1c6>
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	6809      	ldr	r1, [r1, #0]
 8004420:	1d02      	adds	r2, r0, #4
 8004422:	060d      	lsls	r5, r1, #24
 8004424:	d50b      	bpl.n	800443e <_printf_i+0xa2>
 8004426:	6805      	ldr	r5, [r0, #0]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	2d00      	cmp	r5, #0
 800442c:	da03      	bge.n	8004436 <_printf_i+0x9a>
 800442e:	232d      	movs	r3, #45	; 0x2d
 8004430:	9a04      	ldr	r2, [sp, #16]
 8004432:	426d      	negs	r5, r5
 8004434:	7013      	strb	r3, [r2, #0]
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <_printf_i+0x218>)
 8004438:	270a      	movs	r7, #10
 800443a:	9303      	str	r3, [sp, #12]
 800443c:	e01b      	b.n	8004476 <_printf_i+0xda>
 800443e:	6805      	ldr	r5, [r0, #0]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	0649      	lsls	r1, r1, #25
 8004444:	d5f1      	bpl.n	800442a <_printf_i+0x8e>
 8004446:	b22d      	sxth	r5, r5
 8004448:	e7ef      	b.n	800442a <_printf_i+0x8e>
 800444a:	680d      	ldr	r5, [r1, #0]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	1d08      	adds	r0, r1, #4
 8004450:	6018      	str	r0, [r3, #0]
 8004452:	062e      	lsls	r6, r5, #24
 8004454:	d501      	bpl.n	800445a <_printf_i+0xbe>
 8004456:	680d      	ldr	r5, [r1, #0]
 8004458:	e003      	b.n	8004462 <_printf_i+0xc6>
 800445a:	066d      	lsls	r5, r5, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0xba>
 800445e:	680d      	ldr	r5, [r1, #0]
 8004460:	b2ad      	uxth	r5, r5
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <_printf_i+0x218>)
 8004464:	2708      	movs	r7, #8
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	2a6f      	cmp	r2, #111	; 0x6f
 800446a:	d000      	beq.n	800446e <_printf_i+0xd2>
 800446c:	3702      	adds	r7, #2
 800446e:	0023      	movs	r3, r4
 8004470:	2200      	movs	r2, #0
 8004472:	3343      	adds	r3, #67	; 0x43
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	6863      	ldr	r3, [r4, #4]
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db03      	blt.n	8004486 <_printf_i+0xea>
 800447e:	2104      	movs	r1, #4
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	438a      	bics	r2, r1
 8004484:	6022      	str	r2, [r4, #0]
 8004486:	2d00      	cmp	r5, #0
 8004488:	d102      	bne.n	8004490 <_printf_i+0xf4>
 800448a:	9e04      	ldr	r6, [sp, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <_printf_i+0x10e>
 8004490:	9e04      	ldr	r6, [sp, #16]
 8004492:	0028      	movs	r0, r5
 8004494:	0039      	movs	r1, r7
 8004496:	f7fb fecd 	bl	8000234 <__aeabi_uidivmod>
 800449a:	9b03      	ldr	r3, [sp, #12]
 800449c:	3e01      	subs	r6, #1
 800449e:	5c5b      	ldrb	r3, [r3, r1]
 80044a0:	7033      	strb	r3, [r6, #0]
 80044a2:	002b      	movs	r3, r5
 80044a4:	0005      	movs	r5, r0
 80044a6:	429f      	cmp	r7, r3
 80044a8:	d9f3      	bls.n	8004492 <_printf_i+0xf6>
 80044aa:	2f08      	cmp	r7, #8
 80044ac:	d109      	bne.n	80044c2 <_printf_i+0x126>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	07db      	lsls	r3, r3, #31
 80044b2:	d506      	bpl.n	80044c2 <_printf_i+0x126>
 80044b4:	6862      	ldr	r2, [r4, #4]
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	dc02      	bgt.n	80044c2 <_printf_i+0x126>
 80044bc:	2330      	movs	r3, #48	; 0x30
 80044be:	3e01      	subs	r6, #1
 80044c0:	7033      	strb	r3, [r6, #0]
 80044c2:	9b04      	ldr	r3, [sp, #16]
 80044c4:	1b9b      	subs	r3, r3, r6
 80044c6:	6123      	str	r3, [r4, #16]
 80044c8:	9b07      	ldr	r3, [sp, #28]
 80044ca:	0021      	movs	r1, r4
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	9805      	ldr	r0, [sp, #20]
 80044d0:	9b06      	ldr	r3, [sp, #24]
 80044d2:	aa09      	add	r2, sp, #36	; 0x24
 80044d4:	f7ff fef2 	bl	80042bc <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	d147      	bne.n	800456c <_printf_i+0x1d0>
 80044dc:	2001      	movs	r0, #1
 80044de:	4240      	negs	r0, r0
 80044e0:	b00b      	add	sp, #44	; 0x2c
 80044e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e4:	2220      	movs	r2, #32
 80044e6:	6809      	ldr	r1, [r1, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	2278      	movs	r2, #120	; 0x78
 80044ee:	4932      	ldr	r1, [pc, #200]	; (80045b8 <_printf_i+0x21c>)
 80044f0:	9103      	str	r1, [sp, #12]
 80044f2:	0021      	movs	r1, r4
 80044f4:	3145      	adds	r1, #69	; 0x45
 80044f6:	700a      	strb	r2, [r1, #0]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	c920      	ldmia	r1!, {r5}
 80044fe:	0610      	lsls	r0, r2, #24
 8004500:	d402      	bmi.n	8004508 <_printf_i+0x16c>
 8004502:	0650      	lsls	r0, r2, #25
 8004504:	d500      	bpl.n	8004508 <_printf_i+0x16c>
 8004506:	b2ad      	uxth	r5, r5
 8004508:	6019      	str	r1, [r3, #0]
 800450a:	07d3      	lsls	r3, r2, #31
 800450c:	d502      	bpl.n	8004514 <_printf_i+0x178>
 800450e:	2320      	movs	r3, #32
 8004510:	4313      	orrs	r3, r2
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	2710      	movs	r7, #16
 8004516:	2d00      	cmp	r5, #0
 8004518:	d1a9      	bne.n	800446e <_printf_i+0xd2>
 800451a:	2220      	movs	r2, #32
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	4393      	bics	r3, r2
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	e7a4      	b.n	800446e <_printf_i+0xd2>
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	680d      	ldr	r5, [r1, #0]
 8004528:	1d10      	adds	r0, r2, #4
 800452a:	6949      	ldr	r1, [r1, #20]
 800452c:	6018      	str	r0, [r3, #0]
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	062e      	lsls	r6, r5, #24
 8004532:	d501      	bpl.n	8004538 <_printf_i+0x19c>
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	e002      	b.n	800453e <_printf_i+0x1a2>
 8004538:	066d      	lsls	r5, r5, #25
 800453a:	d5fb      	bpl.n	8004534 <_printf_i+0x198>
 800453c:	8019      	strh	r1, [r3, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	9e04      	ldr	r6, [sp, #16]
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	e7c0      	b.n	80044c8 <_printf_i+0x12c>
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	1d11      	adds	r1, r2, #4
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	6816      	ldr	r6, [r2, #0]
 800454e:	2100      	movs	r1, #0
 8004550:	0030      	movs	r0, r6
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	f000 f858 	bl	8004608 <memchr>
 8004558:	2800      	cmp	r0, #0
 800455a:	d001      	beq.n	8004560 <_printf_i+0x1c4>
 800455c:	1b80      	subs	r0, r0, r6
 800455e:	6060      	str	r0, [r4, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2300      	movs	r3, #0
 8004566:	9a04      	ldr	r2, [sp, #16]
 8004568:	7013      	strb	r3, [r2, #0]
 800456a:	e7ad      	b.n	80044c8 <_printf_i+0x12c>
 800456c:	0032      	movs	r2, r6
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	9906      	ldr	r1, [sp, #24]
 8004572:	9805      	ldr	r0, [sp, #20]
 8004574:	9d07      	ldr	r5, [sp, #28]
 8004576:	47a8      	blx	r5
 8004578:	3001      	adds	r0, #1
 800457a:	d0af      	beq.n	80044dc <_printf_i+0x140>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	d415      	bmi.n	80045ae <_printf_i+0x212>
 8004582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004584:	68e0      	ldr	r0, [r4, #12]
 8004586:	4298      	cmp	r0, r3
 8004588:	daaa      	bge.n	80044e0 <_printf_i+0x144>
 800458a:	0018      	movs	r0, r3
 800458c:	e7a8      	b.n	80044e0 <_printf_i+0x144>
 800458e:	0022      	movs	r2, r4
 8004590:	2301      	movs	r3, #1
 8004592:	9906      	ldr	r1, [sp, #24]
 8004594:	9805      	ldr	r0, [sp, #20]
 8004596:	9e07      	ldr	r6, [sp, #28]
 8004598:	3219      	adds	r2, #25
 800459a:	47b0      	blx	r6
 800459c:	3001      	adds	r0, #1
 800459e:	d09d      	beq.n	80044dc <_printf_i+0x140>
 80045a0:	3501      	adds	r5, #1
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	42ab      	cmp	r3, r5
 80045aa:	dcf0      	bgt.n	800458e <_printf_i+0x1f2>
 80045ac:	e7e9      	b.n	8004582 <_printf_i+0x1e6>
 80045ae:	2500      	movs	r5, #0
 80045b0:	e7f7      	b.n	80045a2 <_printf_i+0x206>
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	08004759 	.word	0x08004759
 80045b8:	0800476a 	.word	0x0800476a

080045bc <memmove>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	4288      	cmp	r0, r1
 80045c0:	d902      	bls.n	80045c8 <memmove+0xc>
 80045c2:	188b      	adds	r3, r1, r2
 80045c4:	4298      	cmp	r0, r3
 80045c6:	d303      	bcc.n	80045d0 <memmove+0x14>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e007      	b.n	80045dc <memmove+0x20>
 80045cc:	5c8b      	ldrb	r3, [r1, r2]
 80045ce:	5483      	strb	r3, [r0, r2]
 80045d0:	3a01      	subs	r2, #1
 80045d2:	d2fb      	bcs.n	80045cc <memmove+0x10>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	5ccc      	ldrb	r4, [r1, r3]
 80045d8:	54c4      	strb	r4, [r0, r3]
 80045da:	3301      	adds	r3, #1
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1fa      	bne.n	80045d6 <memmove+0x1a>
 80045e0:	e7f8      	b.n	80045d4 <memmove+0x18>
	...

080045e4 <_sbrk_r>:
 80045e4:	2300      	movs	r3, #0
 80045e6:	b570      	push	{r4, r5, r6, lr}
 80045e8:	4d06      	ldr	r5, [pc, #24]	; (8004604 <_sbrk_r+0x20>)
 80045ea:	0004      	movs	r4, r0
 80045ec:	0008      	movs	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fc fb1c 	bl	8000c2c <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d103      	bne.n	8004600 <_sbrk_r+0x1c>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d000      	beq.n	8004600 <_sbrk_r+0x1c>
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	bd70      	pop	{r4, r5, r6, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	200002b4 	.word	0x200002b4

08004608 <memchr>:
 8004608:	b2c9      	uxtb	r1, r1
 800460a:	1882      	adds	r2, r0, r2
 800460c:	4290      	cmp	r0, r2
 800460e:	d101      	bne.n	8004614 <memchr+0xc>
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr
 8004614:	7803      	ldrb	r3, [r0, #0]
 8004616:	428b      	cmp	r3, r1
 8004618:	d0fb      	beq.n	8004612 <memchr+0xa>
 800461a:	3001      	adds	r0, #1
 800461c:	e7f6      	b.n	800460c <memchr+0x4>

0800461e <memcpy>:
 800461e:	2300      	movs	r3, #0
 8004620:	b510      	push	{r4, lr}
 8004622:	429a      	cmp	r2, r3
 8004624:	d100      	bne.n	8004628 <memcpy+0xa>
 8004626:	bd10      	pop	{r4, pc}
 8004628:	5ccc      	ldrb	r4, [r1, r3]
 800462a:	54c4      	strb	r4, [r0, r3]
 800462c:	3301      	adds	r3, #1
 800462e:	e7f8      	b.n	8004622 <memcpy+0x4>

08004630 <_realloc_r>:
 8004630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004632:	0007      	movs	r7, r0
 8004634:	000e      	movs	r6, r1
 8004636:	0014      	movs	r4, r2
 8004638:	2900      	cmp	r1, #0
 800463a:	d105      	bne.n	8004648 <_realloc_r+0x18>
 800463c:	0011      	movs	r1, r2
 800463e:	f7ff fc49 	bl	8003ed4 <_malloc_r>
 8004642:	0005      	movs	r5, r0
 8004644:	0028      	movs	r0, r5
 8004646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004648:	2a00      	cmp	r2, #0
 800464a:	d103      	bne.n	8004654 <_realloc_r+0x24>
 800464c:	f7ff fbd6 	bl	8003dfc <_free_r>
 8004650:	0025      	movs	r5, r4
 8004652:	e7f7      	b.n	8004644 <_realloc_r+0x14>
 8004654:	f000 f81b 	bl	800468e <_malloc_usable_size_r>
 8004658:	9001      	str	r0, [sp, #4]
 800465a:	4284      	cmp	r4, r0
 800465c:	d803      	bhi.n	8004666 <_realloc_r+0x36>
 800465e:	0035      	movs	r5, r6
 8004660:	0843      	lsrs	r3, r0, #1
 8004662:	42a3      	cmp	r3, r4
 8004664:	d3ee      	bcc.n	8004644 <_realloc_r+0x14>
 8004666:	0021      	movs	r1, r4
 8004668:	0038      	movs	r0, r7
 800466a:	f7ff fc33 	bl	8003ed4 <_malloc_r>
 800466e:	1e05      	subs	r5, r0, #0
 8004670:	d0e8      	beq.n	8004644 <_realloc_r+0x14>
 8004672:	9b01      	ldr	r3, [sp, #4]
 8004674:	0022      	movs	r2, r4
 8004676:	429c      	cmp	r4, r3
 8004678:	d900      	bls.n	800467c <_realloc_r+0x4c>
 800467a:	001a      	movs	r2, r3
 800467c:	0031      	movs	r1, r6
 800467e:	0028      	movs	r0, r5
 8004680:	f7ff ffcd 	bl	800461e <memcpy>
 8004684:	0031      	movs	r1, r6
 8004686:	0038      	movs	r0, r7
 8004688:	f7ff fbb8 	bl	8003dfc <_free_r>
 800468c:	e7da      	b.n	8004644 <_realloc_r+0x14>

0800468e <_malloc_usable_size_r>:
 800468e:	1f0b      	subs	r3, r1, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	1f18      	subs	r0, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	da01      	bge.n	800469c <_malloc_usable_size_r+0xe>
 8004698:	580b      	ldr	r3, [r1, r0]
 800469a:	18c0      	adds	r0, r0, r3
 800469c:	4770      	bx	lr
	...

080046a0 <_init>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr

080046ac <_fini>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr
