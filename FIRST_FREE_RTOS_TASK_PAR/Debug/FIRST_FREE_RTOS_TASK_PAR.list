
FIRST_FREE_RTOS_TASK_PAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000591c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad4  08005ad4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005adc  08005adc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000060  08005b44  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  08005b44  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acf5  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000367e  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0003e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c4  00000000  00000000  0003fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a0e  00000000  00000000  00040cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001869f  00000000  00000000  000446d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60bb  00000000  00000000  0005cd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055d0  00000000  00000000  00122e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001283fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059c4 	.word	0x080059c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080059c4 	.word	0x080059c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fad9 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f83f 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f8d3 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f883 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  xQueue = xQueueCreate(5, sizeof(int32_t));
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	2005      	movs	r0, #5
 800063c:	f003 f8bb 	bl	80037b6 <xQueueGenericCreate>
 8000640:	0002      	movs	r2, r0
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <main+0x74>)
 8000644:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f002 ff17 	bl	8003478 <osKernelStart>
 // xTaskCreate(vTask1, "Task 1", 100, NULL, 2, &xTask1Handle);
//  xTaskCreate(vTask2, "Task 2", 100, NULL, 1, &xTask2Handle);


  // with queues start schedule if queue is not null
  if(xQueue != NULL){
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <main+0x74>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d01f      	beq.n	8000692 <main+0x72>
	  xTaskCreate(vSenderTask, "Sender 1", 100, (void *) 100, 1, NULL);
 8000652:	4911      	ldr	r1, [pc, #68]	; (8000698 <main+0x78>)
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <main+0x7c>)
 8000656:	2300      	movs	r3, #0
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2301      	movs	r3, #1
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	f003 fcc0 	bl	8003fe6 <xTaskCreate>
	  xTaskCreate(vSenderTask, "Sender 2", 100, (void *) 200, 1, NULL);
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <main+0x80>)
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x7c>)
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	23c8      	movs	r3, #200	; 0xc8
 8000674:	2264      	movs	r2, #100	; 0x64
 8000676:	f003 fcb6 	bl	8003fe6 <xTaskCreate>
	  xTaskCreate(vReceiverTask, "Receiver", 100, NULL, 2, NULL);
 800067a:	490a      	ldr	r1, [pc, #40]	; (80006a4 <main+0x84>)
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0x88>)
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2302      	movs	r3, #2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	f003 fcac 	bl	8003fe6 <xTaskCreate>

	  // start the scheduler so the created tasks start executing
	  vTaskStartScheduler();
 800068e:	f003 fdff 	bl	8004290 <vTaskStartScheduler>


//  vTaskStartScheduler();	// start schedule

  //int ch[3] = {'H','e','l'};
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x72>
 8000694:	20000114 	.word	0x20000114
 8000698:	080059e8 	.word	0x080059e8
 800069c:	080008ad 	.word	0x080008ad
 80006a0:	080059f4 	.word	0x080059f4
 80006a4:	08005a00 	.word	0x08005a00
 80006a8:	080008d5 	.word	0x080008d5

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b095      	sub	sp, #84	; 0x54
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2414      	movs	r4, #20
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	233c      	movs	r3, #60	; 0x3c
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f005 f891 	bl	80057e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	2310      	movs	r3, #16
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f005 f88a 	bl	80057e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fcf5 	bl	80010c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2202      	movs	r2, #2
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	0052      	lsls	r2, r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2240      	movs	r2, #64	; 0x40
 80006f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fd2d 	bl	800115c <HAL_RCC_OscConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000706:	f000 f911 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f878 	bl	800181c <HAL_RCC_ClockConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000730:	f000 f8fc 	bl	800092c <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b015      	add	sp, #84	; 0x54
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000742:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <MX_USART2_UART_Init+0x98>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000748:	22e1      	movs	r2, #225	; 0xe1
 800074a:	0252      	lsls	r2, r2, #9
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fef2 	bl	8002570 <HAL_UART_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f8cc 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 8000796:	2100      	movs	r1, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fd03 	bl	80031a4 <HAL_UARTEx_SetTxFifoThreshold>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007a2:	f000 f8c3 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fd3a 	bl	8003224 <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f8ba 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x94>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fcb8 	bl	8003130 <HAL_UARTEx_DisableFifoMode>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 f8b2 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	240c      	movs	r4, #12
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	2314      	movs	r3, #20
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f004 fffb 	bl	80057e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
  // enable two gpio pins D1-PC4 and D0-PC5
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_GPIO_Init+0xcc>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_GPIO_Init+0xcc>)
 80007f4:	2104      	movs	r1, #4
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_GPIO_Init+0xcc>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2204      	movs	r2, #4
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xcc>)
 800080c:	2120      	movs	r1, #32
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	2220      	movs	r2, #32
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_GPIO_Init+0xcc>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fc22 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000846:	2200      	movs	r2, #0
 8000848:	2130      	movs	r1, #48	; 0x30
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fc1c 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2220      	movs	r2, #32
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2202      	movs	r2, #2
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000868:	193a      	adds	r2, r7, r4
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fa9d 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|RED_LED_Pin;
 8000876:	0021      	movs	r1, r4
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2201      	movs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	187b      	adds	r3, r7, r1
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <MX_GPIO_Init+0xd0>)
 8000894:	0019      	movs	r1, r3
 8000896:	0010      	movs	r0, r2
 8000898:	f000 fa8a 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b009      	add	sp, #36	; 0x24
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	50000800 	.word	0x50000800

080008ac <vSenderTask>:
			//vTaskPrioritySet(xTask2Handle, ( uxPriority + 1)); // set priority below task2
		}
}

// for queues
void vSenderTask(void * pvParameters){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	int32_t lValueToSend;
	BaseType_t xStatus;

	lValueToSend = (int32_t) pvParameters;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60bb      	str	r3, [r7, #8]
	for(;;){
		xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <vSenderTask+0x24>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	2308      	movs	r3, #8
 80008be:	18f9      	adds	r1, r7, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	2200      	movs	r2, #0
 80008c4:	f002 ffd0 	bl	8003868 <xQueueGenericSend>
 80008c8:	0003      	movs	r3, r0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7f4      	b.n	80008b8 <vSenderTask+0xc>
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000114 	.word	0x20000114

080008d4 <vReceiverTask>:
			// could not complete
		}
	}
}

void vReceiverTask(void * pvParameters){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	int32_t lReceivedValue;
	BaseType_t xStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	60fb      	str	r3, [r7, #12]

	for(;;){
		//
		if(uxQueueMessagesWaiting(xQueue) != 0){
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <vReceiverTask+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f003 f9ac 	bl	8003c42 <uxQueueMessagesWaiting>
			// queue should have been empty
		}
		// recevie data from the queue
//		xStatus = xQueueReceive(xQueue, &lReceivedValue, xTicksToWait);
		xStatus = xQueueReceive(xQueue, &item_received, xTicksToWait);
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <vReceiverTask+0x2c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4904      	ldr	r1, [pc, #16]	; (8000904 <vReceiverTask+0x30>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f003 f8f0 	bl	8003ad8 <xQueueReceive>
 80008f8:	0003      	movs	r3, r0
 80008fa:	60bb      	str	r3, [r7, #8]
		if(uxQueueMessagesWaiting(xQueue) != 0){
 80008fc:	e7f0      	b.n	80008e0 <vReceiverTask+0xc>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000114 	.word	0x20000114
 8000904:	20000110 	.word	0x20000110

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 f97f 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40012c00 	.word	0x40012c00

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_MspInit+0x50>)
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_MspInit+0x50>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x50>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x50>)
 8000958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_MspInit+0x50>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0549      	lsls	r1, r1, #21
 8000960:	430a      	orrs	r2, r1
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_MspInit+0x50>)
 8000966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	055b      	lsls	r3, r3, #21
 800096c:	4013      	ands	r3, r2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000972:	2302      	movs	r3, #2
 8000974:	425b      	negs	r3, r3
 8000976:	2200      	movs	r2, #0
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f9f2 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b09d      	sub	sp, #116	; 0x74
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	235c      	movs	r3, #92	; 0x5c
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f004 ff20 	bl	80057e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	2410      	movs	r4, #16
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	234c      	movs	r3, #76	; 0x4c
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f004 ff18 	bl	80057e4 <memset>
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0xb8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d13e      	bne.n	8000a3c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2202      	movs	r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f8f9 	bl	8001bc4 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009d6:	f7ff ffa9 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0289      	lsls	r1, r1, #10
 80009e4:	430a      	orrs	r2, r1
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	029b      	lsls	r3, r3, #10
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0xbc>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a0e:	215c      	movs	r1, #92	; 0x5c
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2202      	movs	r2, #2
 8000a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	187a      	adds	r2, r7, r1
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f9ba 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b01d      	add	sp, #116	; 0x74
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a54:	232b      	movs	r3, #43	; 0x2b
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <HAL_InitTick+0xf4>)
 8000a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_InitTick+0xf4>)
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	0109      	lsls	r1, r1, #4
 8000a66:	430a      	orrs	r2, r1
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6a:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <HAL_InitTick+0xf4>)
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	4013      	ands	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a78:	230c      	movs	r3, #12
 8000a7a:	18fa      	adds	r2, r7, r3
 8000a7c:	2410      	movs	r4, #16
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f874 	bl	8001b70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a94:	f001 f856 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a9c:	e004      	b.n	8000aa8 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a9e:	f001 f851 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aaa:	4926      	ldr	r1, [pc, #152]	; (8000b44 <HAL_InitTick+0xf8>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fb2b 	bl	8000108 <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <HAL_InitTick+0xfc>)
 8000aba:	4a24      	ldr	r2, [pc, #144]	; (8000b4c <HAL_InitTick+0x100>)
 8000abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_InitTick+0xfc>)
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <HAL_InitTick+0x104>)
 8000ac2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_InitTick+0xfc>)
 8000ac6:	6a3a      	ldr	r2, [r7, #32]
 8000ac8:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_InitTick+0xfc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_InitTick+0xfc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_InitTick+0xfc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000adc:	252b      	movs	r5, #43	; 0x2b
 8000ade:	197c      	adds	r4, r7, r5
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_InitTick+0xfc>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 faaa 	bl	800203c <HAL_TIM_Base_Init>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000aec:	197b      	adds	r3, r7, r5
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d11e      	bne.n	8000b32 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000af4:	197c      	adds	r4, r7, r5
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0xfc>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 faff 	bl	80020fc <HAL_TIM_Base_Start_IT>
 8000afe:	0003      	movs	r3, r0
 8000b00:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000b02:	197b      	adds	r3, r7, r5
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d113      	bne.n	8000b32 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b0a:	200d      	movs	r0, #13
 8000b0c:	f000 f93f 	bl	8000d8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d809      	bhi.n	8000b2a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	200d      	movs	r0, #13
 8000b1e:	f000 f921 	bl	8000d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_InitTick+0x108>)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e003      	b.n	8000b32 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000b2a:	232b      	movs	r3, #43	; 0x2b
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000b32:	232b      	movs	r3, #43	; 0x2b
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b00c      	add	sp, #48	; 0x30
 8000b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	000f4240 	.word	0x000f4240
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	000003e7 	.word	0x000003e7
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 fb28 	bl	80021c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000118 	.word	0x20000118

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff fff6 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f004 fe7b 	bl	80058b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bba:	f7ff fd31 	bl	8000620 <main>

08000bbe <LoopForever>:

LoopForever:
  b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bcc:	08005ae4 	.word	0x08005ae4
  ldr r2, =_sbss
 8000bd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd4:	20001c88 	.word	0x20001c88

08000bd8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_COMP_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x3c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Init+0x3c>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff ff28 	bl	8000a4c <HAL_InitTick>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe96 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	18d2      	adds	r2, r2, r3
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000164 	.word	0x20000164

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000164 	.word	0x20000164

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b7f      	cmp	r3, #127	; 0x7f
 8000c66:	d809      	bhi.n	8000c7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	231f      	movs	r3, #31
 8000c70:	401a      	ands	r2, r3
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_EnableIRQ+0x30>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	4091      	lsls	r1, r2
 8000c78:	000a      	movs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c9c:	d828      	bhi.n	8000cf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	589b      	ldr	r3, [r3, r2]
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	401a      	ands	r2, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cee:	e031      	b.n	8000d54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3306      	adds	r3, #6
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	2203      	movs	r2, #3
 8000d12:	400a      	ands	r2, r1
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	21ff      	movs	r1, #255	; 0xff
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	401a      	ands	r2, r3
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	4003      	ands	r3, r0
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001c      	movs	r4, r3
 8000d40:	230f      	movs	r3, #15
 8000d42:	4023      	ands	r3, r4
 8000d44:	3b08      	subs	r3, #8
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	18c3      	adds	r3, r0, r3
 8000d50:	3304      	adds	r3, #4
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b003      	add	sp, #12
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	210f      	movs	r1, #15
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	1c02      	adds	r2, r0, #0
 8000d74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ff81 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	0002      	movs	r2, r0
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff57 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e14d      	b.n	800105c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x28>
 8000dd6:	e13e      	b.n	8001056 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x174>
 8000f22:	e098      	b.n	8001056 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f24:	4a53      	ldr	r2, [pc, #332]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	589b      	ldr	r3, [r3, r2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1d2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a47      	ldr	r2, [pc, #284]	; (800107c <HAL_GPIO_Init+0x2cc>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1ce>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a46      	ldr	r2, [pc, #280]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1ca>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1c6>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x1d8>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x1d8>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x1d8>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x1d8>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x1d8>
 8000f86:	2300      	movs	r3, #0
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	00d2      	lsls	r2, r2, #3
 8000f90:	4093      	lsls	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f98:	4936      	ldr	r1, [pc, #216]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3318      	adds	r3, #24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	035b      	lsls	r3, r3, #13
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	039b      	lsls	r3, r3, #14
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000ffc:	2384      	movs	r3, #132	; 0x84
 8000ffe:	58d3      	ldr	r3, [r2, r3]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001020:	4914      	ldr	r1, [pc, #80]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8001022:	2284      	movs	r2, #132	; 0x84
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	58d3      	ldr	r3, [r2, r3]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	025b      	lsls	r3, r3, #9
 8001042:	4013      	ands	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800104e:	4909      	ldr	r1, [pc, #36]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	40da      	lsrs	r2, r3
 8001064:	1e13      	subs	r3, r2, #0
 8001066:	d000      	beq.n	800106a <HAL_GPIO_Init+0x2ba>
 8001068:	e6aa      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
  }
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b006      	add	sp, #24
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021800 	.word	0x40021800
 8001078:	50000400 	.word	0x50000400
 800107c:	50000800 	.word	0x50000800
 8001080:	50000c00 	.word	0x50000c00
 8001084:	50001000 	.word	0x50001000

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	0008      	movs	r0, r1
 8001092:	0011      	movs	r1, r2
 8001094:	1cbb      	adds	r3, r7, #2
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	1c7b      	adds	r3, r7, #1
 800109c:	1c0a      	adds	r2, r1, #0
 800109e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a8:	1cbb      	adds	r3, r7, #2
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d11f      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	0013      	movs	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	189b      	adds	r3, r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4912      	ldr	r1, [pc, #72]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f806 	bl	8000108 <__udivsi3>
 80010fc:	0003      	movs	r3, r0
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001102:	e008      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3b01      	subs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e001      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e009      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	401a      	ands	r2, r3
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	429a      	cmp	r2, r3
 8001126:	d0ed      	beq.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40007000 	.word	0x40007000
 8001138:	fffff9ff 	.word	0xfffff9ff
 800113c:	20000000 	.word	0x20000000
 8001140:	000f4240 	.word	0x000f4240

08001144 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <LL_RCC_GetAPB1Prescaler+0x14>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	23e0      	movs	r3, #224	; 0xe0
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	4013      	ands	r3, r2
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 fb50 	bl	8001810 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x20>
 800117a:	e07c      	b.n	8001276 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117c:	4bc3      	ldr	r3, [pc, #780]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2238      	movs	r2, #56	; 0x38
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001186:	4bc1      	ldr	r3, [pc, #772]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2203      	movs	r2, #3
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0x40>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d002      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d10b      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4bba      	ldr	r3, [pc, #744]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	029b      	lsls	r3, r3, #10
 80011aa:	4013      	ands	r3, r2
 80011ac:	d062      	beq.n	8001274 <HAL_RCC_OscConfig+0x118>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d15e      	bne.n	8001274 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e32a      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_OscConfig+0x7a>
 80011c6:	4bb1      	ldr	r3, [pc, #708]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4bb0      	ldr	r3, [pc, #704]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0249      	lsls	r1, r1, #9
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e020      	b.n	8001218 <HAL_RCC_OscConfig+0xbc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	23a0      	movs	r3, #160	; 0xa0
 80011dc:	02db      	lsls	r3, r3, #11
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10e      	bne.n	8001200 <HAL_RCC_OscConfig+0xa4>
 80011e2:	4baa      	ldr	r3, [pc, #680]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba9      	ldr	r3, [pc, #676]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	02c9      	lsls	r1, r1, #11
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4ba6      	ldr	r3, [pc, #664]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba5      	ldr	r3, [pc, #660]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0249      	lsls	r1, r1, #9
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xbc>
 8001200:	4ba2      	ldr	r3, [pc, #648]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4ba1      	ldr	r3, [pc, #644]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001206:	49a2      	ldr	r1, [pc, #648]	; (8001490 <HAL_RCC_OscConfig+0x334>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b9e      	ldr	r3, [pc, #632]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001212:	49a0      	ldr	r1, [pc, #640]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fd0e 	bl	8000c40 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff fd09 	bl	8000c40 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e2e9      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123c:	4b93      	ldr	r3, [pc, #588]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0xce>
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fcf9 	bl	8000c40 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fcf4 	bl	8000c40 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e2d4      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	4b89      	ldr	r3, [pc, #548]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0xf8>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x126>
 8001280:	e099      	b.n	80013b6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2238      	movs	r2, #56	; 0x38
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800128c:	4b7f      	ldr	r3, [pc, #508]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b10      	cmp	r3, #16
 800129a:	d102      	bne.n	80012a2 <HAL_RCC_OscConfig+0x146>
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d002      	beq.n	80012a8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d135      	bne.n	8001314 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a8:	4b78      	ldr	r3, [pc, #480]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_OscConfig+0x164>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e2a7      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a74      	ldr	r2, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x33c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	021a      	lsls	r2, r3, #8
 80012d0:	4b6e      	ldr	r3, [pc, #440]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d112      	bne.n	8001302 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012dc:	4b6b      	ldr	r3, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_RCC_OscConfig+0x340>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0adb      	lsrs	r3, r3, #11
 80012f6:	2207      	movs	r2, #7
 80012f8:	4013      	ands	r3, r2
 80012fa:	4a69      	ldr	r2, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x344>)
 80012fc:	40da      	lsrs	r2, r3
 80012fe:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x348>)
 8001300:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001302:	4b69      	ldr	r3, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x34c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fba0 	bl	8000a4c <HAL_InitTick>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d051      	beq.n	80013b4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e27d      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d030      	beq.n	800137e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x340>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	4b58      	ldr	r3, [pc, #352]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b56      	ldr	r3, [pc, #344]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b55      	ldr	r3, [pc, #340]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	0049      	lsls	r1, r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fc7f 	bl	8000c40 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc7a 	bl	8000c40 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e25a      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135a:	4b4c      	ldr	r3, [pc, #304]	; (800148c <HAL_RCC_OscConfig+0x330>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4013      	ands	r3, r2
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b49      	ldr	r3, [pc, #292]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_RCC_OscConfig+0x33c>)
 800136c:	4013      	ands	r3, r2
 800136e:	0019      	movs	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	021a      	lsls	r2, r3, #8
 8001376:	4b45      	ldr	r3, [pc, #276]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e01b      	b.n	80013b6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001384:	4949      	ldr	r1, [pc, #292]	; (80014ac <HAL_RCC_OscConfig+0x350>)
 8001386:	400a      	ands	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fc59 	bl	8000c40 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc54 	bl	8000c40 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e234      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x238>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2208      	movs	r2, #8
 80013bc:	4013      	ands	r3, r2
 80013be:	d047      	beq.n	8001450 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2238      	movs	r2, #56	; 0x38
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b18      	cmp	r3, #24
 80013ca:	d10a      	bne.n	80013e2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d03c      	beq.n	8001450 <HAL_RCC_OscConfig+0x2f4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d138      	bne.n	8001450 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e216      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d019      	beq.n	800141e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80013ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x330>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc23 	bl	8000c40 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc1e 	bl	8000c40 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1fe      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0f1      	beq.n	8001400 <HAL_RCC_OscConfig+0x2a4>
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001420:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fc09 	bl	8000c40 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fc04 	bl	8000c40 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1e4      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d1f1      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2204      	movs	r2, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_RCC_OscConfig+0x300>
 800145a:	e0c7      	b.n	80015ec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145c:	231f      	movs	r3, #31
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2238      	movs	r2, #56	; 0x38
 800146a:	4013      	ands	r3, r2
 800146c:	2b20      	cmp	r3, #32
 800146e:	d11f      	bne.n	80014b0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_RCC_OscConfig+0x330>)
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_RCC_OscConfig+0x320>
 800147a:	e0b7      	b.n	80015ec <HAL_RCC_OscConfig+0x490>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d000      	beq.n	8001486 <HAL_RCC_OscConfig+0x32a>
 8001484:	e0b2      	b.n	80015ec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1c2      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40021000 	.word	0x40021000
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	fffbffff 	.word	0xfffbffff
 8001498:	ffff80ff 	.word	0xffff80ff
 800149c:	ffffc7ff 	.word	0xffffc7ff
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
 80014ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014b0:	4bb5      	ldr	r3, [pc, #724]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80014b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x364>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x366>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d011      	beq.n	80014ea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4bb0      	ldr	r3, [pc, #704]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80014c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ca:	4baf      	ldr	r3, [pc, #700]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0549      	lsls	r1, r1, #21
 80014d0:	430a      	orrs	r2, r1
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014d4:	4bac      	ldr	r3, [pc, #688]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80014d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	055b      	lsls	r3, r3, #21
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014e2:	231f      	movs	r3, #31
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ea:	4ba8      	ldr	r3, [pc, #672]	; (800178c <HAL_RCC_OscConfig+0x630>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	d11a      	bne.n	800152c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014f6:	4ba5      	ldr	r3, [pc, #660]	; (800178c <HAL_RCC_OscConfig+0x630>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_RCC_OscConfig+0x630>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0049      	lsls	r1, r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb9c 	bl	8000c40 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150e:	f7ff fb97 	bl	8000c40 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e177      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001520:	4b9a      	ldr	r3, [pc, #616]	; (800178c <HAL_RCC_OscConfig+0x630>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x3e6>
 8001534:	4b94      	ldr	r3, [pc, #592]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001538:	4b93      	ldr	r3, [pc, #588]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001540:	e01c      	b.n	800157c <HAL_RCC_OscConfig+0x420>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x408>
 800154a:	4b8f      	ldr	r3, [pc, #572]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800154c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001550:	2104      	movs	r1, #4
 8001552:	430a      	orrs	r2, r1
 8001554:	65da      	str	r2, [r3, #92]	; 0x5c
 8001556:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0x420>
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800156a:	2101      	movs	r1, #1
 800156c:	438a      	bics	r2, r1
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001570:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001574:	4b84      	ldr	r3, [pc, #528]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001576:	2104      	movs	r1, #4
 8001578:	438a      	bics	r2, r1
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d014      	beq.n	80015ae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fb5c 	bl	8000c40 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158c:	e009      	b.n	80015a2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb57 	bl	8000c40 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	4a7d      	ldr	r2, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x634>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e136      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a2:	4b79      	ldr	r3, [pc, #484]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x432>
 80015ac:	e013      	b.n	80015d6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb47 	bl	8000c40 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b6:	e009      	b.n	80015cc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb42 	bl	8000c40 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x634>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e121      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015cc:	4b6e      	ldr	r3, [pc, #440]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015d6:	231f      	movs	r3, #31
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80015e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80015e6:	496b      	ldr	r1, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x638>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2220      	movs	r2, #32
 80015f2:	4013      	ands	r3, r2
 80015f4:	d039      	beq.n	800166a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01b      	beq.n	8001636 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	03c9      	lsls	r1, r1, #15
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fb18 	bl	8000c40 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001616:	f7ff fb13 	bl	8000c40 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0f3      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001628:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x4ba>
 8001634:	e019      	b.n	800166a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800163c:	4956      	ldr	r1, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x63c>)
 800163e:	400a      	ands	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fafd 	bl	8000c40 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800164c:	f7ff faf8 	bl	8000c40 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0d8      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4013      	ands	r3, r2
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x518>
 8001672:	e0cc      	b.n	800180e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2238      	movs	r2, #56	; 0x38
 800167a:	4013      	ands	r3, r2
 800167c:	2b10      	cmp	r3, #16
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x526>
 8001680:	e07b      	b.n	800177a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d156      	bne.n	8001738 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001690:	4942      	ldr	r1, [pc, #264]	; (800179c <HAL_RCC_OscConfig+0x640>)
 8001692:	400a      	ands	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fad3 	bl	8000c40 <HAL_GetTick>
 800169a:	0003      	movs	r3, r0
 800169c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff face 	bl	8000c40 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0ae      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	049b      	lsls	r3, r3, #18
 80016ba:	4013      	ands	r3, r2
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x644>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	431a      	orrs	r2, r3
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0449      	lsls	r1, r1, #17
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0549      	lsls	r1, r1, #21
 800170a:	430a      	orrs	r2, r1
 800170c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fa97 	bl	8000c40 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fa92 	bl	8000c40 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e072      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x5bc>
 8001736:	e06a      	b.n	800180e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800173e:	4917      	ldr	r1, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x640>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fa7c 	bl	8000c40 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fa77 	bl	8000c40 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e057      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	049b      	lsls	r3, r3, #18
 8001768:	4013      	ands	r3, r2
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_OscConfig+0x62c>)
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <HAL_RCC_OscConfig+0x648>)
 8001774:	400a      	ands	r2, r1
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	e049      	b.n	800180e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e044      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40021000 	.word	0x40021000
 800178c:	40007000 	.word	0x40007000
 8001790:	00001388 	.word	0x00001388
 8001794:	efffffff 	.word	0xefffffff
 8001798:	ffbfffff 	.word	0xffbfffff
 800179c:	feffffff 	.word	0xfeffffff
 80017a0:	11c1808c 	.word	0x11c1808c
 80017a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x6bc>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2203      	movs	r2, #3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d126      	bne.n	800180a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2270      	movs	r2, #112	; 0x70
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d11f      	bne.n	800180a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	23fe      	movs	r3, #254	; 0xfe
 80017ce:	01db      	lsls	r3, r3, #7
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	23f8      	movs	r3, #248	; 0xf8
 80017e0:	039b      	lsls	r3, r3, #14
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10e      	bne.n	800180a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	23e0      	movs	r3, #224	; 0xe0
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	0f5b      	lsrs	r3, r3, #29
 8001800:	075a      	lsls	r2, r3, #29
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b008      	add	sp, #32
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0e9      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2207      	movs	r2, #7
 8001836:	4013      	ands	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d91e      	bls.n	800187c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2207      	movs	r2, #7
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001850:	f7ff f9f6 	bl	8000c40 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f9f1 	bl	8000c40 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1f4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0ca      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d015      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d006      	beq.n	800189e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001890:	4b60      	ldr	r3, [pc, #384]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	21e0      	movs	r1, #224	; 0xe0
 8001898:	01c9      	lsls	r1, r1, #7
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a5d      	ldr	r2, [pc, #372]	; (8001a18 <HAL_RCC_ClockConfig+0x1fc>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	d057      	beq.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	4013      	ands	r3, r2
 80018ce:	d12b      	bne.n	8001928 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e097      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	049b      	lsls	r3, r3, #18
 80018e4:	4013      	ands	r3, r2
 80018e6:	d11f      	bne.n	8001928 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e08b      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	d113      	bne.n	8001928 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e07f      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d106      	bne.n	800191a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d108      	bne.n	8001928 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e074      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e06d      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001928:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2207      	movs	r2, #7
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193c:	f7ff f980 	bl	8000c40 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001944:	e009      	b.n	800195a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7ff f97b 	bl	8000c40 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <HAL_RCC_ClockConfig+0x1f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e054      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2238      	movs	r2, #56	; 0x38
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	429a      	cmp	r2, r3
 800196a:	d1ec      	bne.n	8001946 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2207      	movs	r2, #7
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d21e      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2207      	movs	r2, #7
 8001980:	4393      	bics	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800198c:	f7ff f958 	bl	8000c40 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001994:	e009      	b.n	80019aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001996:	f7ff f953 	bl	8000c40 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_RCC_ClockConfig+0x1f4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e02c      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1ee      	bne.n	8001996 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_RCC_ClockConfig+0x200>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019d6:	f000 f829 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019da:	0001      	movs	r1, r0
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	220f      	movs	r2, #15
 80019e4:	401a      	ands	r2, r3
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x204>)
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	58d3      	ldr	r3, [r2, r3]
 80019ec:	221f      	movs	r2, #31
 80019ee:	4013      	ands	r3, r2
 80019f0:	000a      	movs	r2, r1
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x208>)
 80019f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x20c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff f825 	bl	8000a4c <HAL_InitTick>
 8001a02:	0003      	movs	r3, r0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b004      	add	sp, #16
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	00001388 	.word	0x00001388
 8001a14:	40021000 	.word	0x40021000
 8001a18:	fffff0ff 	.word	0xfffff0ff
 8001a1c:	ffff8fff 	.word	0xffff8fff
 8001a20:	08005a24 	.word	0x08005a24
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2238      	movs	r2, #56	; 0x38
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d10f      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0adb      	lsrs	r3, r3, #11
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	4835      	ldr	r0, [pc, #212]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a52:	f7fe fb59 	bl	8000108 <__udivsi3>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e05d      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2238      	movs	r2, #56	; 0x38
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e054      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2238      	movs	r2, #56	; 0x38
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d138      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d10d      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	4824      	ldr	r0, [pc, #144]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a9c:	f7fe fb34 	bl	8000108 <__udivsi3>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	227f      	movs	r2, #127	; 0x7f
 8001aac:	4013      	ands	r3, r2
 8001aae:	434b      	muls	r3, r1
 8001ab0:	617b      	str	r3, [r7, #20]
        break;
 8001ab2:	e00d      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ab8:	f7fe fb26 	bl	8000108 <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	0019      	movs	r1, r3
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	227f      	movs	r2, #127	; 0x7f
 8001ac8:	4013      	ands	r3, r2
 8001aca:	434b      	muls	r3, r1
 8001acc:	617b      	str	r3, [r7, #20]
        break;
 8001ace:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0f5b      	lsrs	r3, r3, #29
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	4013      	ands	r3, r2
 8001ada:	3301      	adds	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6978      	ldr	r0, [r7, #20]
 8001ae2:	f7fe fb11 	bl	8000108 <__udivsi3>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2238      	movs	r2, #56	; 0x38
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d103      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2238      	movs	r2, #56	; 0x38
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b18      	cmp	r3, #24
 8001b0a:	d103      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b0c:	23fa      	movs	r3, #250	; 0xfa
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e001      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b18:	693b      	ldr	r3, [r7, #16]
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b006      	add	sp, #24
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b48:	f7ff fff2 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b4c:	0004      	movs	r4, r0
 8001b4e:	f7ff faf9 	bl	8001144 <LL_RCC_GetAPB1Prescaler>
 8001b52:	0003      	movs	r3, r0
 8001b54:	0b1a      	lsrs	r2, r3, #12
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	58d3      	ldr	r3, [r2, r3]
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	4013      	ands	r3, r2
 8001b60:	40dc      	lsrs	r4, r3
 8001b62:	0023      	movs	r3, r4
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	08005a64 	.word	0x08005a64

08001b70 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_RCC_GetClockConfig+0x4c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2207      	movs	r2, #7
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_GetClockConfig+0x4c>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_RCC_GetClockConfig+0x4c>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	23e0      	movs	r3, #224	; 0xe0
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetClockConfig+0x50>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2207      	movs	r2, #7
 8001bae:	401a      	ands	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bcc:	2313      	movs	r3, #19
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001be8:	e0ad      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2011      	movs	r0, #17
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	055b      	lsls	r3, r3, #21
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d110      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0549      	lsls	r1, r1, #21
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c0c:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	183b      	adds	r3, r7, r0
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	0049      	lsls	r1, r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f807 	bl	8000c40 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c36:	e00b      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff f802 	bl	8000c40 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d904      	bls.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c46:	2313      	movs	r3, #19
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	701a      	strb	r2, [r3, #0]
        break;
 8001c4e:	e005      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0ed      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c5c:	2313      	movs	r3, #19
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d15e      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d019      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d014      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca0:	491e      	ldr	r1, [pc, #120]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d016      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffc4 	bl	8000c40 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbc:	e00c      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7fe ffbf 	bl	8000c40 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d904      	bls.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cce:	2313      	movs	r3, #19
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	701a      	strb	r2, [r3, #0]
            break;
 8001cd6:	e004      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0ed      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ce2:	2313      	movs	r3, #19
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d00:	e016      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d02:	2312      	movs	r3, #18
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2213      	movs	r2, #19
 8001d08:	18ba      	adds	r2, r7, r2
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	fffffcff 	.word	0xfffffcff
 8001d1c:	fffeffff 	.word	0xfffeffff
 8001d20:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d24:	2312      	movs	r3, #18
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2213      	movs	r2, #19
 8001d2a:	18ba      	adds	r2, r7, r2
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d30:	2311      	movs	r3, #17
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4bb6      	ldr	r3, [pc, #728]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3e:	4bb5      	ldr	r3, [pc, #724]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d40:	49b5      	ldr	r1, [pc, #724]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d50:	4bb0      	ldr	r3, [pc, #704]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	2203      	movs	r2, #3
 8001d56:	4393      	bics	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4bad      	ldr	r3, [pc, #692]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6e:	4ba9      	ldr	r3, [pc, #676]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	220c      	movs	r2, #12
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4ba5      	ldr	r3, [pc, #660]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d8c:	4ba1      	ldr	r3, [pc, #644]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	2230      	movs	r2, #48	; 0x30
 8001d92:	4393      	bics	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001daa:	4b9a      	ldr	r3, [pc, #616]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	4a9b      	ldr	r2, [pc, #620]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	4b96      	ldr	r3, [pc, #600]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001dca:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	4a94      	ldr	r2, [pc, #592]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dea:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	4a8d      	ldr	r2, [pc, #564]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df8:	4b86      	ldr	r3, [pc, #536]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4013      	ands	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e0a:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2220      	movs	r2, #32
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	4a7f      	ldr	r2, [pc, #508]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2240      	movs	r2, #64	; 0x40
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	01db      	lsls	r3, r3, #7
 8001e62:	4013      	ands	r3, r2
 8001e64:	d015      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e66:	4b6b      	ldr	r3, [pc, #428]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	0899      	lsrs	r1, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e72:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	05db      	lsls	r3, r3, #23
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b62      	ldr	r3, [pc, #392]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0249      	lsls	r1, r1, #9
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	4393      	bics	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	039b      	lsls	r3, r3, #14
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d016      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ecc:	4b51      	ldr	r3, [pc, #324]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	03db      	lsls	r3, r3, #15
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d106      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ede:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	0449      	lsls	r1, r1, #17
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	03db      	lsls	r3, r3, #15
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d016      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	4a4e      	ldr	r2, [pc, #312]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	045b      	lsls	r3, r3, #17
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0449      	lsls	r1, r1, #17
 8001f22:	430a      	orrs	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d014      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	2203      	movs	r2, #3
 8001f38:	4393      	bics	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	4013      	ands	r3, r2
 8001f66:	d014      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d106      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0249      	lsls	r1, r1, #9
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	045b      	lsls	r3, r3, #17
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0449      	lsls	r1, r1, #17
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	049b      	lsls	r3, r3, #18
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d016      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0449      	lsls	r1, r1, #17
 8002002:	430a      	orrs	r2, r1
 8002004:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002006:	2312      	movs	r3, #18
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b006      	add	sp, #24
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	efffffff 	.word	0xefffffff
 800201c:	fffff3ff 	.word	0xfffff3ff
 8002020:	fffffcff 	.word	0xfffffcff
 8002024:	fff3ffff 	.word	0xfff3ffff
 8002028:	ffcfffff 	.word	0xffcfffff
 800202c:	ffffcfff 	.word	0xffffcfff
 8002030:	ffff3fff 	.word	0xffff3fff
 8002034:	ffbfffff 	.word	0xffbfffff
 8002038:	feffffff 	.word	0xfeffffff

0800203c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e04a      	b.n	80020e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	; 0x3d
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223c      	movs	r2, #60	; 0x3c
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f841 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223d      	movs	r2, #61	; 0x3d
 800206e:	2102      	movs	r1, #2
 8002070:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	0019      	movs	r1, r3
 800207c:	0010      	movs	r0, r2
 800207e:	f000 f9c7 	bl	8002410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2248      	movs	r2, #72	; 0x48
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223e      	movs	r2, #62	; 0x3e
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223f      	movs	r2, #63	; 0x3f
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2241      	movs	r2, #65	; 0x41
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2242      	movs	r2, #66	; 0x42
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2243      	movs	r2, #67	; 0x43
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2244      	movs	r2, #68	; 0x44
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2245      	movs	r2, #69	; 0x45
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2246      	movs	r2, #70	; 0x46
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2247      	movs	r2, #71	; 0x47
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223d      	movs	r2, #61	; 0x3d
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	223d      	movs	r2, #61	; 0x3d
 8002108:	5c9b      	ldrb	r3, [r3, r2]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e047      	b.n	80021a4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	223d      	movs	r2, #61	; 0x3d
 8002118:	2102      	movs	r1, #2
 800211a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_TIM_Base_Start_IT+0xb0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d014      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x64>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	429a      	cmp	r2, r3
 8002140:	d00e      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x64>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x64>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x64>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d116      	bne.n	800218e <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <HAL_TIM_Base_Start_IT+0xc0>)
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d016      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0xa4>
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	429a      	cmp	r2, r3
 800217a:	d011      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	e008      	b.n	80021a0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e000      	b.n	80021a2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40014000 	.word	0x40014000
 80021bc:	00010007 	.word	0x00010007

080021c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d021      	beq.n	8002224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d01d      	beq.n	8002224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4252      	negs	r2, r2
 80021f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2203      	movs	r2, #3
 8002200:	4013      	ands	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f8ea 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 800220c:	e007      	b.n	800221e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f8dd 	bl	80023d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f8e9 	bl	80023f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2204      	movs	r2, #4
 8002228:	4013      	ands	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2204      	movs	r2, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d01e      	beq.n	8002272 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2205      	movs	r2, #5
 800223a:	4252      	negs	r2, r2
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f8c3 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 800225a:	e007      	b.n	800226c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f8b6 	bl	80023d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f8c2 	bl	80023f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d021      	beq.n	80022be <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2208      	movs	r2, #8
 800227e:	4013      	ands	r3, r2
 8002280:	d01d      	beq.n	80022be <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2209      	movs	r2, #9
 8002288:	4252      	negs	r2, r2
 800228a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2204      	movs	r2, #4
 8002290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f89d 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 80022a6:	e007      	b.n	80022b8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f890 	bl	80023d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f89c 	bl	80023f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2210      	movs	r2, #16
 80022c2:	4013      	ands	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d01e      	beq.n	800230c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2211      	movs	r2, #17
 80022d4:	4252      	negs	r2, r2
 80022d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2208      	movs	r2, #8
 80022dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f876 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 80022f4:	e007      	b.n	8002306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f869 	bl	80023d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f875 	bl	80023f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d00c      	beq.n	800232e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d008      	beq.n	800232e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	4252      	negs	r2, r2
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe faed 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	4013      	ands	r3, r2
 8002334:	d104      	bne.n	8002340 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	019b      	lsls	r3, r3, #6
 800233c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800233e:	d00b      	beq.n	8002358 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	4013      	ands	r3, r2
 8002346:	d007      	beq.n	8002358 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_IRQHandler+0x208>)
 800234e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f8fc 	bl	8002550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d00b      	beq.n	800237a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	4013      	ands	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_IRQHandler+0x20c>)
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f8f3 	bl	8002560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2240      	movs	r2, #64	; 0x40
 800237e:	4013      	ands	r3, r2
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	4013      	ands	r3, r2
 8002388:	d008      	beq.n	800239c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2241      	movs	r2, #65	; 0x41
 8002390:	4252      	negs	r2, r2
 8002392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f832 	bl	8002400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00c      	beq.n	80023be <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	4013      	ands	r3, r2
 80023aa:	d008      	beq.n	80023be <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2221      	movs	r2, #33	; 0x21
 80023b2:	4252      	negs	r2, r2
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f8c1 	bl	8002540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	ffffdf7f 	.word	0xffffdf7f
 80023cc:	fffffeff 	.word	0xfffffeff

080023d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <TIM_Base_SetConfig+0x110>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00c      	beq.n	8002442 <TIM_Base_SetConfig+0x32>
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d007      	beq.n	8002442 <TIM_Base_SetConfig+0x32>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <TIM_Base_SetConfig+0x114>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_Base_SetConfig+0x32>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <TIM_Base_SetConfig+0x118>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d108      	bne.n	8002454 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2270      	movs	r2, #112	; 0x70
 8002446:	4393      	bics	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <TIM_Base_SetConfig+0x110>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01c      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	429a      	cmp	r2, r3
 8002464:	d017      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <TIM_Base_SetConfig+0x114>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <TIM_Base_SetConfig+0x118>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00f      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2c      	ldr	r2, [pc, #176]	; (800252c <TIM_Base_SetConfig+0x11c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <TIM_Base_SetConfig+0x120>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <TIM_Base_SetConfig+0x124>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0x86>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a29      	ldr	r2, [pc, #164]	; (8002538 <TIM_Base_SetConfig+0x128>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <TIM_Base_SetConfig+0x12c>)
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	4393      	bics	r3, r2
 80024ae:	001a      	movs	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <TIM_Base_SetConfig+0x110>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00b      	beq.n	80024ee <TIM_Base_SetConfig+0xde>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <TIM_Base_SetConfig+0x120>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <TIM_Base_SetConfig+0xde>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <TIM_Base_SetConfig+0x124>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <TIM_Base_SetConfig+0xde>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <TIM_Base_SetConfig+0x128>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d103      	bne.n	80024f6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2201      	movs	r2, #1
 800250e:	4393      	bics	r3, r2
 8002510:	001a      	movs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	611a      	str	r2, [r3, #16]
  }
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40002000 	.word	0x40002000
 8002530:	40014000 	.word	0x40014000
 8002534:	40014400 	.word	0x40014400
 8002538:	40014800 	.word	0x40014800
 800253c:	fffffcff 	.word	0xfffffcff

08002540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e046      	b.n	8002610 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2288      	movs	r2, #136	; 0x88
 8002586:	589b      	ldr	r3, [r3, r2]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2284      	movs	r2, #132	; 0x84
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0018      	movs	r0, r3
 8002598:	f7fe f9f8 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2288      	movs	r2, #136	; 0x88
 80025a0:	2124      	movs	r1, #36	; 0x24
 80025a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2101      	movs	r1, #1
 80025b0:	438a      	bics	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 fb82 	bl	8002cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f828 	bl	800261c <UART_SetConfig>
 80025cc:	0003      	movs	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e01c      	b.n	8002610 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	490d      	ldr	r1, [pc, #52]	; (8002618 <HAL_UART_Init+0xa8>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	212a      	movs	r1, #42	; 0x2a
 80025f2:	438a      	bics	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 fc11 	bl	8002e30 <UART_CheckIdleState>
 800260e:	0003      	movs	r3, r0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}
 8002618:	ffffb7ff 	.word	0xffffb7ff

0800261c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b090      	sub	sp, #64	; 0x40
 8002620:	af00      	add	r7, sp, #0
 8002622:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002624:	231a      	movs	r3, #26
 8002626:	2220      	movs	r2, #32
 8002628:	189b      	adds	r3, r3, r2
 800262a:	19db      	adds	r3, r3, r7
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	431a      	orrs	r2, r3
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4ac1      	ldr	r2, [pc, #772]	; (8002954 <UART_SetConfig+0x338>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	430b      	orrs	r3, r1
 800265c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4abc      	ldr	r2, [pc, #752]	; (8002958 <UART_SetConfig+0x33c>)
 8002666:	4013      	ands	r3, r2
 8002668:	0018      	movs	r0, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	0003      	movs	r3, r0
 8002674:	430b      	orrs	r3, r1
 8002676:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4ab6      	ldr	r2, [pc, #728]	; (800295c <UART_SetConfig+0x340>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <UART_SetConfig+0x80>
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4ab4      	ldr	r2, [pc, #720]	; (8002960 <UART_SetConfig+0x344>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002698:	4313      	orrs	r3, r2
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4ab0      	ldr	r2, [pc, #704]	; (8002964 <UART_SetConfig+0x348>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	220f      	movs	r2, #15
 80026ba:	4393      	bics	r3, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	0003      	movs	r3, r0
 80026c8:	430b      	orrs	r3, r1
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4aa5      	ldr	r2, [pc, #660]	; (8002968 <UART_SetConfig+0x34c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d131      	bne.n	800273a <UART_SetConfig+0x11e>
 80026d6:	4ba5      	ldr	r3, [pc, #660]	; (800296c <UART_SetConfig+0x350>)
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	2203      	movs	r2, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d01d      	beq.n	800271e <UART_SetConfig+0x102>
 80026e2:	d823      	bhi.n	800272c <UART_SetConfig+0x110>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d00c      	beq.n	8002702 <UART_SetConfig+0xe6>
 80026e8:	d820      	bhi.n	800272c <UART_SetConfig+0x110>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <UART_SetConfig+0xd8>
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00e      	beq.n	8002710 <UART_SetConfig+0xf4>
 80026f2:	e01b      	b.n	800272c <UART_SetConfig+0x110>
 80026f4:	231b      	movs	r3, #27
 80026f6:	2220      	movs	r2, #32
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	19db      	adds	r3, r3, r7
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e154      	b.n	80029ac <UART_SetConfig+0x390>
 8002702:	231b      	movs	r3, #27
 8002704:	2220      	movs	r2, #32
 8002706:	189b      	adds	r3, r3, r2
 8002708:	19db      	adds	r3, r3, r7
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e14d      	b.n	80029ac <UART_SetConfig+0x390>
 8002710:	231b      	movs	r3, #27
 8002712:	2220      	movs	r2, #32
 8002714:	189b      	adds	r3, r3, r2
 8002716:	19db      	adds	r3, r3, r7
 8002718:	2204      	movs	r2, #4
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e146      	b.n	80029ac <UART_SetConfig+0x390>
 800271e:	231b      	movs	r3, #27
 8002720:	2220      	movs	r2, #32
 8002722:	189b      	adds	r3, r3, r2
 8002724:	19db      	adds	r3, r3, r7
 8002726:	2208      	movs	r2, #8
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e13f      	b.n	80029ac <UART_SetConfig+0x390>
 800272c:	231b      	movs	r3, #27
 800272e:	2220      	movs	r2, #32
 8002730:	189b      	adds	r3, r3, r2
 8002732:	19db      	adds	r3, r3, r7
 8002734:	2210      	movs	r2, #16
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e138      	b.n	80029ac <UART_SetConfig+0x390>
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8c      	ldr	r2, [pc, #560]	; (8002970 <UART_SetConfig+0x354>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d131      	bne.n	80027a8 <UART_SetConfig+0x18c>
 8002744:	4b89      	ldr	r3, [pc, #548]	; (800296c <UART_SetConfig+0x350>)
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	220c      	movs	r2, #12
 800274a:	4013      	ands	r3, r2
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d01d      	beq.n	800278c <UART_SetConfig+0x170>
 8002750:	d823      	bhi.n	800279a <UART_SetConfig+0x17e>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d00c      	beq.n	8002770 <UART_SetConfig+0x154>
 8002756:	d820      	bhi.n	800279a <UART_SetConfig+0x17e>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <UART_SetConfig+0x146>
 800275c:	2b04      	cmp	r3, #4
 800275e:	d00e      	beq.n	800277e <UART_SetConfig+0x162>
 8002760:	e01b      	b.n	800279a <UART_SetConfig+0x17e>
 8002762:	231b      	movs	r3, #27
 8002764:	2220      	movs	r2, #32
 8002766:	189b      	adds	r3, r3, r2
 8002768:	19db      	adds	r3, r3, r7
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e11d      	b.n	80029ac <UART_SetConfig+0x390>
 8002770:	231b      	movs	r3, #27
 8002772:	2220      	movs	r2, #32
 8002774:	189b      	adds	r3, r3, r2
 8002776:	19db      	adds	r3, r3, r7
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e116      	b.n	80029ac <UART_SetConfig+0x390>
 800277e:	231b      	movs	r3, #27
 8002780:	2220      	movs	r2, #32
 8002782:	189b      	adds	r3, r3, r2
 8002784:	19db      	adds	r3, r3, r7
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e10f      	b.n	80029ac <UART_SetConfig+0x390>
 800278c:	231b      	movs	r3, #27
 800278e:	2220      	movs	r2, #32
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2208      	movs	r2, #8
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e108      	b.n	80029ac <UART_SetConfig+0x390>
 800279a:	231b      	movs	r3, #27
 800279c:	2220      	movs	r2, #32
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	19db      	adds	r3, r3, r7
 80027a2:	2210      	movs	r2, #16
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e101      	b.n	80029ac <UART_SetConfig+0x390>
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a71      	ldr	r2, [pc, #452]	; (8002974 <UART_SetConfig+0x358>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d131      	bne.n	8002816 <UART_SetConfig+0x1fa>
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <UART_SetConfig+0x350>)
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	2230      	movs	r2, #48	; 0x30
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b30      	cmp	r3, #48	; 0x30
 80027bc:	d01d      	beq.n	80027fa <UART_SetConfig+0x1de>
 80027be:	d823      	bhi.n	8002808 <UART_SetConfig+0x1ec>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d00c      	beq.n	80027de <UART_SetConfig+0x1c2>
 80027c4:	d820      	bhi.n	8002808 <UART_SetConfig+0x1ec>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <UART_SetConfig+0x1b4>
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d00e      	beq.n	80027ec <UART_SetConfig+0x1d0>
 80027ce:	e01b      	b.n	8002808 <UART_SetConfig+0x1ec>
 80027d0:	231b      	movs	r3, #27
 80027d2:	2220      	movs	r2, #32
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	19db      	adds	r3, r3, r7
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e0e6      	b.n	80029ac <UART_SetConfig+0x390>
 80027de:	231b      	movs	r3, #27
 80027e0:	2220      	movs	r2, #32
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	19db      	adds	r3, r3, r7
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e0df      	b.n	80029ac <UART_SetConfig+0x390>
 80027ec:	231b      	movs	r3, #27
 80027ee:	2220      	movs	r2, #32
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	19db      	adds	r3, r3, r7
 80027f4:	2204      	movs	r2, #4
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e0d8      	b.n	80029ac <UART_SetConfig+0x390>
 80027fa:	231b      	movs	r3, #27
 80027fc:	2220      	movs	r2, #32
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2208      	movs	r2, #8
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e0d1      	b.n	80029ac <UART_SetConfig+0x390>
 8002808:	231b      	movs	r3, #27
 800280a:	2220      	movs	r2, #32
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2210      	movs	r2, #16
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e0ca      	b.n	80029ac <UART_SetConfig+0x390>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a57      	ldr	r2, [pc, #348]	; (8002978 <UART_SetConfig+0x35c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d106      	bne.n	800282e <UART_SetConfig+0x212>
 8002820:	231b      	movs	r3, #27
 8002822:	2220      	movs	r2, #32
 8002824:	189b      	adds	r3, r3, r2
 8002826:	19db      	adds	r3, r3, r7
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e0be      	b.n	80029ac <UART_SetConfig+0x390>
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a52      	ldr	r2, [pc, #328]	; (800297c <UART_SetConfig+0x360>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d106      	bne.n	8002846 <UART_SetConfig+0x22a>
 8002838:	231b      	movs	r3, #27
 800283a:	2220      	movs	r2, #32
 800283c:	189b      	adds	r3, r3, r2
 800283e:	19db      	adds	r3, r3, r7
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e0b2      	b.n	80029ac <UART_SetConfig+0x390>
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <UART_SetConfig+0x364>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d106      	bne.n	800285e <UART_SetConfig+0x242>
 8002850:	231b      	movs	r3, #27
 8002852:	2220      	movs	r2, #32
 8002854:	189b      	adds	r3, r3, r2
 8002856:	19db      	adds	r3, r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e0a6      	b.n	80029ac <UART_SetConfig+0x390>
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3e      	ldr	r2, [pc, #248]	; (800295c <UART_SetConfig+0x340>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d13e      	bne.n	80028e6 <UART_SetConfig+0x2ca>
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <UART_SetConfig+0x350>)
 800286a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800286c:	23c0      	movs	r3, #192	; 0xc0
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	4013      	ands	r3, r2
 8002872:	22c0      	movs	r2, #192	; 0xc0
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <UART_SetConfig+0x2ae>
 800287a:	22c0      	movs	r2, #192	; 0xc0
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	4293      	cmp	r3, r2
 8002880:	d82a      	bhi.n	80028d8 <UART_SetConfig+0x2bc>
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	4293      	cmp	r3, r2
 8002888:	d011      	beq.n	80028ae <UART_SetConfig+0x292>
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	4293      	cmp	r3, r2
 8002890:	d822      	bhi.n	80028d8 <UART_SetConfig+0x2bc>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <UART_SetConfig+0x284>
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	00d2      	lsls	r2, r2, #3
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <UART_SetConfig+0x2a0>
 800289e:	e01b      	b.n	80028d8 <UART_SetConfig+0x2bc>
 80028a0:	231b      	movs	r3, #27
 80028a2:	2220      	movs	r2, #32
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	19db      	adds	r3, r3, r7
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e07e      	b.n	80029ac <UART_SetConfig+0x390>
 80028ae:	231b      	movs	r3, #27
 80028b0:	2220      	movs	r2, #32
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e077      	b.n	80029ac <UART_SetConfig+0x390>
 80028bc:	231b      	movs	r3, #27
 80028be:	2220      	movs	r2, #32
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	19db      	adds	r3, r3, r7
 80028c4:	2204      	movs	r2, #4
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e070      	b.n	80029ac <UART_SetConfig+0x390>
 80028ca:	231b      	movs	r3, #27
 80028cc:	2220      	movs	r2, #32
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	19db      	adds	r3, r3, r7
 80028d2:	2208      	movs	r2, #8
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e069      	b.n	80029ac <UART_SetConfig+0x390>
 80028d8:	231b      	movs	r3, #27
 80028da:	2220      	movs	r2, #32
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	19db      	adds	r3, r3, r7
 80028e0:	2210      	movs	r2, #16
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e062      	b.n	80029ac <UART_SetConfig+0x390>
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <UART_SetConfig+0x344>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d157      	bne.n	80029a0 <UART_SetConfig+0x384>
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <UART_SetConfig+0x350>)
 80028f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	22c0      	movs	r2, #192	; 0xc0
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4293      	cmp	r3, r2
 8002900:	d040      	beq.n	8002984 <UART_SetConfig+0x368>
 8002902:	22c0      	movs	r2, #192	; 0xc0
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	4293      	cmp	r3, r2
 8002908:	d843      	bhi.n	8002992 <UART_SetConfig+0x376>
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4293      	cmp	r3, r2
 8002910:	d011      	beq.n	8002936 <UART_SetConfig+0x31a>
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4293      	cmp	r3, r2
 8002918:	d83b      	bhi.n	8002992 <UART_SetConfig+0x376>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <UART_SetConfig+0x30c>
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <UART_SetConfig+0x328>
 8002926:	e034      	b.n	8002992 <UART_SetConfig+0x376>
 8002928:	231b      	movs	r3, #27
 800292a:	2220      	movs	r2, #32
 800292c:	189b      	adds	r3, r3, r2
 800292e:	19db      	adds	r3, r3, r7
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e03a      	b.n	80029ac <UART_SetConfig+0x390>
 8002936:	231b      	movs	r3, #27
 8002938:	2220      	movs	r2, #32
 800293a:	189b      	adds	r3, r3, r2
 800293c:	19db      	adds	r3, r3, r7
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e033      	b.n	80029ac <UART_SetConfig+0x390>
 8002944:	231b      	movs	r3, #27
 8002946:	2220      	movs	r2, #32
 8002948:	189b      	adds	r3, r3, r2
 800294a:	19db      	adds	r3, r3, r7
 800294c:	2204      	movs	r2, #4
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e02c      	b.n	80029ac <UART_SetConfig+0x390>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	cfff69f3 	.word	0xcfff69f3
 8002958:	ffffcfff 	.word	0xffffcfff
 800295c:	40008000 	.word	0x40008000
 8002960:	40008400 	.word	0x40008400
 8002964:	11fff4ff 	.word	0x11fff4ff
 8002968:	40013800 	.word	0x40013800
 800296c:	40021000 	.word	0x40021000
 8002970:	40004400 	.word	0x40004400
 8002974:	40004800 	.word	0x40004800
 8002978:	40004c00 	.word	0x40004c00
 800297c:	40005000 	.word	0x40005000
 8002980:	40013c00 	.word	0x40013c00
 8002984:	231b      	movs	r3, #27
 8002986:	2220      	movs	r2, #32
 8002988:	189b      	adds	r3, r3, r2
 800298a:	19db      	adds	r3, r3, r7
 800298c:	2208      	movs	r2, #8
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	e00c      	b.n	80029ac <UART_SetConfig+0x390>
 8002992:	231b      	movs	r3, #27
 8002994:	2220      	movs	r2, #32
 8002996:	189b      	adds	r3, r3, r2
 8002998:	19db      	adds	r3, r3, r7
 800299a:	2210      	movs	r2, #16
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e005      	b.n	80029ac <UART_SetConfig+0x390>
 80029a0:	231b      	movs	r3, #27
 80029a2:	2220      	movs	r2, #32
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	19db      	adds	r3, r3, r7
 80029a8:	2210      	movs	r2, #16
 80029aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4ac1      	ldr	r2, [pc, #772]	; (8002cb8 <UART_SetConfig+0x69c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d005      	beq.n	80029c2 <UART_SetConfig+0x3a6>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4ac0      	ldr	r2, [pc, #768]	; (8002cbc <UART_SetConfig+0x6a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d000      	beq.n	80029c2 <UART_SetConfig+0x3a6>
 80029c0:	e093      	b.n	8002aea <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029c2:	231b      	movs	r3, #27
 80029c4:	2220      	movs	r2, #32
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	19db      	adds	r3, r3, r7
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d015      	beq.n	80029fc <UART_SetConfig+0x3e0>
 80029d0:	dc18      	bgt.n	8002a04 <UART_SetConfig+0x3e8>
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d00d      	beq.n	80029f2 <UART_SetConfig+0x3d6>
 80029d6:	dc15      	bgt.n	8002a04 <UART_SetConfig+0x3e8>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <UART_SetConfig+0x3c6>
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d005      	beq.n	80029ec <UART_SetConfig+0x3d0>
 80029e0:	e010      	b.n	8002a04 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff f8af 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80029e6:	0003      	movs	r3, r0
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029ea:	e014      	b.n	8002a16 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029ec:	4bb4      	ldr	r3, [pc, #720]	; (8002cc0 <UART_SetConfig+0x6a4>)
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029f0:	e011      	b.n	8002a16 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f2:	f7ff f81b 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80029f6:	0003      	movs	r3, r0
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029fa:	e00c      	b.n	8002a16 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a02:	e008      	b.n	8002a16 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a08:	231a      	movs	r3, #26
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	19db      	adds	r3, r3, r7
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
        break;
 8002a14:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d100      	bne.n	8002a1e <UART_SetConfig+0x402>
 8002a1c:	e135      	b.n	8002c8a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a22:	4ba8      	ldr	r3, [pc, #672]	; (8002cc4 <UART_SetConfig+0x6a8>)
 8002a24:	0052      	lsls	r2, r2, #1
 8002a26:	5ad3      	ldrh	r3, [r2, r3]
 8002a28:	0019      	movs	r1, r3
 8002a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a2c:	f7fd fb6c 	bl	8000108 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	0013      	movs	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d305      	bcc.n	8002a50 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d906      	bls.n	8002a5e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002a50:	231a      	movs	r3, #26
 8002a52:	2220      	movs	r2, #32
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e044      	b.n	8002ae8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	4b96      	ldr	r3, [pc, #600]	; (8002cc4 <UART_SetConfig+0x6a8>)
 8002a6c:	0052      	lsls	r2, r2, #1
 8002a6e:	5ad3      	ldrh	r3, [r2, r3]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	69b8      	ldr	r0, [r7, #24]
 8002a7c:	69f9      	ldr	r1, [r7, #28]
 8002a7e:	f7fd fcb9 	bl	80003f4 <__aeabi_uldivmod>
 8002a82:	0002      	movs	r2, r0
 8002a84:	000b      	movs	r3, r1
 8002a86:	0e11      	lsrs	r1, r2, #24
 8002a88:	021d      	lsls	r5, r3, #8
 8002a8a:	430d      	orrs	r5, r1
 8002a8c:	0214      	lsls	r4, r2, #8
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68b8      	ldr	r0, [r7, #8]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	1900      	adds	r0, r0, r4
 8002aa0:	4169      	adcs	r1, r5
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f7fd fca0 	bl	80003f4 <__aeabi_uldivmod>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0013      	movs	r3, r2
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d309      	bcc.n	8002ada <UART_SetConfig+0x4be>
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	035b      	lsls	r3, r3, #13
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d204      	bcs.n	8002ada <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	e006      	b.n	8002ae8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002ada:	231a      	movs	r3, #26
 8002adc:	2220      	movs	r2, #32
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	19db      	adds	r3, r3, r7
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002ae6:	e0d0      	b.n	8002c8a <UART_SetConfig+0x66e>
 8002ae8:	e0cf      	b.n	8002c8a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d000      	beq.n	8002af8 <UART_SetConfig+0x4dc>
 8002af6:	e070      	b.n	8002bda <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002af8:	231b      	movs	r3, #27
 8002afa:	2220      	movs	r2, #32
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	19db      	adds	r3, r3, r7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d015      	beq.n	8002b32 <UART_SetConfig+0x516>
 8002b06:	dc18      	bgt.n	8002b3a <UART_SetConfig+0x51e>
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d00d      	beq.n	8002b28 <UART_SetConfig+0x50c>
 8002b0c:	dc15      	bgt.n	8002b3a <UART_SetConfig+0x51e>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <UART_SetConfig+0x4fc>
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d005      	beq.n	8002b22 <UART_SetConfig+0x506>
 8002b16:	e010      	b.n	8002b3a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b18:	f7ff f814 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b20:	e014      	b.n	8002b4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <UART_SetConfig+0x6a4>)
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b26:	e011      	b.n	8002b4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b28:	f7fe ff80 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b30:	e00c      	b.n	8002b4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b38:	e008      	b.n	8002b4c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b3e:	231a      	movs	r3, #26
 8002b40:	2220      	movs	r2, #32
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	19db      	adds	r3, r3, r7
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
        break;
 8002b4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d100      	bne.n	8002b54 <UART_SetConfig+0x538>
 8002b52:	e09a      	b.n	8002c8a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b58:	4b5a      	ldr	r3, [pc, #360]	; (8002cc4 <UART_SetConfig+0x6a8>)
 8002b5a:	0052      	lsls	r2, r2, #1
 8002b5c:	5ad3      	ldrh	r3, [r2, r3]
 8002b5e:	0019      	movs	r1, r3
 8002b60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f7fd fac5 	bl	8000108 <__udivsi3>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d921      	bls.n	8002bcc <UART_SetConfig+0x5b0>
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d21c      	bcs.n	8002bcc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	200e      	movs	r0, #14
 8002b98:	2420      	movs	r4, #32
 8002b9a:	1903      	adds	r3, r0, r4
 8002b9c:	19db      	adds	r3, r3, r7
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2207      	movs	r2, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	1903      	adds	r3, r0, r4
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	1902      	adds	r2, r0, r4
 8002bb6:	19d2      	adds	r2, r2, r7
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1902      	adds	r2, r0, r4
 8002bc4:	19d2      	adds	r2, r2, r7
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	e05e      	b.n	8002c8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002bcc:	231a      	movs	r3, #26
 8002bce:	2220      	movs	r2, #32
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e057      	b.n	8002c8a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bda:	231b      	movs	r3, #27
 8002bdc:	2220      	movs	r2, #32
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	19db      	adds	r3, r3, r7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d015      	beq.n	8002c14 <UART_SetConfig+0x5f8>
 8002be8:	dc18      	bgt.n	8002c1c <UART_SetConfig+0x600>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00d      	beq.n	8002c0a <UART_SetConfig+0x5ee>
 8002bee:	dc15      	bgt.n	8002c1c <UART_SetConfig+0x600>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <UART_SetConfig+0x5de>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d005      	beq.n	8002c04 <UART_SetConfig+0x5e8>
 8002bf8:	e010      	b.n	8002c1c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7fe ffa3 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c02:	e014      	b.n	8002c2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c04:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <UART_SetConfig+0x6a4>)
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c08:	e011      	b.n	8002c2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0a:	f7fe ff0f 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c12:	e00c      	b.n	8002c2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c1a:	e008      	b.n	8002c2e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c20:	231a      	movs	r3, #26
 8002c22:	2220      	movs	r2, #32
 8002c24:	189b      	adds	r3, r3, r2
 8002c26:	19db      	adds	r3, r3, r7
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
        break;
 8002c2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d02a      	beq.n	8002c8a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <UART_SetConfig+0x6a8>)
 8002c3a:	0052      	lsls	r2, r2, #1
 8002c3c:	5ad3      	ldrh	r3, [r2, r3]
 8002c3e:	0019      	movs	r1, r3
 8002c40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c42:	f7fd fa61 	bl	8000108 <__udivsi3>
 8002c46:	0003      	movs	r3, r0
 8002c48:	001a      	movs	r2, r3
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7fd fa55 	bl	8000108 <__udivsi3>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2b0f      	cmp	r3, #15
 8002c66:	d90a      	bls.n	8002c7e <UART_SetConfig+0x662>
 8002c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	025b      	lsls	r3, r3, #9
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d205      	bcs.n	8002c7e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	e005      	b.n	8002c8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002c7e:	231a      	movs	r3, #26
 8002c80:	2220      	movs	r2, #32
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	226a      	movs	r2, #106	; 0x6a
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	2268      	movs	r2, #104	; 0x68
 8002c96:	2101      	movs	r1, #1
 8002c98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002ca6:	231a      	movs	r3, #26
 8002ca8:	2220      	movs	r2, #32
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	19db      	adds	r3, r3, r7
 8002cae:	781b      	ldrb	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b010      	add	sp, #64	; 0x40
 8002cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb8:	40008000 	.word	0x40008000
 8002cbc:	40008400 	.word	0x40008400
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	08005a84 	.word	0x08005a84

08002cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <UART_AdvFeatureConfig+0x144>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <UART_AdvFeatureConfig+0x148>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <UART_AdvFeatureConfig+0x14c>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <UART_AdvFeatureConfig+0x150>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <UART_AdvFeatureConfig+0x154>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	2220      	movs	r2, #32
 8002d80:	4013      	ands	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <UART_AdvFeatureConfig+0x158>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	4013      	ands	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <UART_AdvFeatureConfig+0x15c>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	035b      	lsls	r3, r3, #13
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10b      	bne.n	8002de2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <UART_AdvFeatureConfig+0x160>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	4013      	ands	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <UART_AdvFeatureConfig+0x164>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	ffff7fff 	.word	0xffff7fff
 8002e10:	fffdffff 	.word	0xfffdffff
 8002e14:	fffeffff 	.word	0xfffeffff
 8002e18:	fffbffff 	.word	0xfffbffff
 8002e1c:	ffffefff 	.word	0xffffefff
 8002e20:	ffffdfff 	.word	0xffffdfff
 8002e24:	ffefffff 	.word	0xffefffff
 8002e28:	ff9fffff 	.word	0xff9fffff
 8002e2c:	fff7ffff 	.word	0xfff7ffff

08002e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b092      	sub	sp, #72	; 0x48
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2290      	movs	r2, #144	; 0x90
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e40:	f7fd fefe 	bl	8000c40 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d12d      	bne.n	8002eb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	0391      	lsls	r1, r2, #14
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4a47      	ldr	r2, [pc, #284]	; (8002f7c <UART_CheckIdleState+0x14c>)
 8002e60:	9200      	str	r2, [sp, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f000 f88e 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d022      	beq.n	8002eb2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e76:	2301      	movs	r3, #1
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	438a      	bics	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2288      	movs	r2, #136	; 0x88
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2284      	movs	r2, #132	; 0x84
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e060      	b.n	8002f74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d146      	bne.n	8002f4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	03d1      	lsls	r1, r2, #15
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <UART_CheckIdleState+0x14c>)
 8002eca:	9200      	str	r2, [sp, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f000 f859 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d03b      	beq.n	8002f4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002edc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4922      	ldr	r1, [pc, #136]	; (8002f80 <UART_CheckIdleState+0x150>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	228c      	movs	r2, #140	; 0x8c
 8002f3e:	2120      	movs	r1, #32
 8002f40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2284      	movs	r2, #132	; 0x84
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e012      	b.n	8002f74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2288      	movs	r2, #136	; 0x88
 8002f52:	2120      	movs	r1, #32
 8002f54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	228c      	movs	r2, #140	; 0x8c
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2284      	movs	r2, #132	; 0x84
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b010      	add	sp, #64	; 0x40
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	01ffffff 	.word	0x01ffffff
 8002f80:	fffffedf 	.word	0xfffffedf

08002f84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f94:	e051      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	d04e      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fd fe50 	bl	8000c40 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e051      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d03b      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d038      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d035      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d111      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f83c 	bl	8003064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2290      	movs	r2, #144	; 0x90
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2284      	movs	r2, #132	; 0x84
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e02c      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	401a      	ands	r2, r3
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	429a      	cmp	r2, r3
 8003012:	d112      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f81f 	bl	8003064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2290      	movs	r2, #144	; 0x90
 800302a:	2120      	movs	r1, #32
 800302c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2284      	movs	r2, #132	; 0x84
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e00f      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	425a      	negs	r2, r3
 800304a:	4153      	adcs	r3, r2
 800304c:	b2db      	uxtb	r3, r3
 800304e:	001a      	movs	r2, r3
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d09e      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306c:	f3ef 8310 	mrs	r3, PRIMASK
 8003070:	617b      	str	r3, [r7, #20]
  return(result);
 8003072:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4926      	ldr	r1, [pc, #152]	; (8003128 <UART_EndRxTransfer+0xc4>)
 800308e:	400a      	ands	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309e:	f3ef 8310 	mrs	r3, PRIMASK
 80030a2:	623b      	str	r3, [r7, #32]
  return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	491b      	ldr	r1, [pc, #108]	; (800312c <UART_EndRxTransfer+0xc8>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	f383 8810 	msr	PRIMASK, r3
}
 80030ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d118      	bne.n	800310a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	2301      	movs	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2110      	movs	r1, #16
 80030fa:	438a      	bics	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	228c      	movs	r2, #140	; 0x8c
 800310e:	2120      	movs	r1, #32
 8003110:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b00e      	add	sp, #56	; 0x38
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	fffffedf 	.word	0xfffffedf
 800312c:	effffffe 	.word	0xeffffffe

08003130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2284      	movs	r2, #132	; 0x84
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UARTEx_DisableFifoMode+0x16>
 8003142:	2302      	movs	r3, #2
 8003144:	e027      	b.n	8003196 <HAL_UARTEx_DisableFifoMode+0x66>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2284      	movs	r2, #132	; 0x84
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2288      	movs	r2, #136	; 0x88
 8003152:	2124      	movs	r1, #36	; 0x24
 8003154:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	438a      	bics	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2288      	movs	r2, #136	; 0x88
 8003188:	2120      	movs	r1, #32
 800318a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2284      	movs	r2, #132	; 0x84
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b004      	add	sp, #16
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	dfffffff 	.word	0xdfffffff

080031a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2284      	movs	r2, #132	; 0x84
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e02e      	b.n	800321a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2284      	movs	r2, #132	; 0x84
 80031c0:	2101      	movs	r1, #1
 80031c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2288      	movs	r2, #136	; 0x88
 80031c8:	2124      	movs	r1, #36	; 0x24
 80031ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	08d9      	lsrs	r1, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f854 	bl	80032a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2288      	movs	r2, #136	; 0x88
 800320c:	2120      	movs	r1, #32
 800320e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2284      	movs	r2, #132	; 0x84
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2284      	movs	r2, #132	; 0x84
 8003232:	5c9b      	ldrb	r3, [r3, r2]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e02f      	b.n	800329c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2284      	movs	r2, #132	; 0x84
 8003240:	2101      	movs	r1, #1
 8003242:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2288      	movs	r2, #136	; 0x88
 8003248:	2124      	movs	r1, #36	; 0x24
 800324a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f813 	bl	80032a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2288      	movs	r2, #136	; 0x88
 800328e:	2120      	movs	r1, #32
 8003290:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2284      	movs	r2, #132	; 0x84
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b004      	add	sp, #16
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f1ffffff 	.word	0xf1ffffff

080032a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	226a      	movs	r2, #106	; 0x6a
 80032bc:	2101      	movs	r1, #1
 80032be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2268      	movs	r2, #104	; 0x68
 80032c4:	2101      	movs	r1, #1
 80032c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032c8:	e043      	b.n	8003352 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032ca:	260f      	movs	r6, #15
 80032cc:	19bb      	adds	r3, r7, r6
 80032ce:	2208      	movs	r2, #8
 80032d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032d2:	200e      	movs	r0, #14
 80032d4:	183b      	adds	r3, r7, r0
 80032d6:	2208      	movs	r2, #8
 80032d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	0e5b      	lsrs	r3, r3, #25
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	240d      	movs	r4, #13
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2107      	movs	r1, #7
 80032ea:	400a      	ands	r2, r1
 80032ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	0f5b      	lsrs	r3, r3, #29
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	250c      	movs	r5, #12
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	2107      	movs	r1, #7
 80032fe:	400a      	ands	r2, r1
 8003300:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003302:	183b      	adds	r3, r7, r0
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	197a      	adds	r2, r7, r5
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	4914      	ldr	r1, [pc, #80]	; (800335c <UARTEx_SetNbDataToProcess+0xb4>)
 800330c:	5c8a      	ldrb	r2, [r1, r2]
 800330e:	435a      	muls	r2, r3
 8003310:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003312:	197b      	adds	r3, r7, r5
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <UARTEx_SetNbDataToProcess+0xb8>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800331a:	0019      	movs	r1, r3
 800331c:	f7fc ff7e 	bl	800021c <__divsi3>
 8003320:	0003      	movs	r3, r0
 8003322:	b299      	uxth	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	226a      	movs	r2, #106	; 0x6a
 8003328:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800332a:	19bb      	adds	r3, r7, r6
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	193a      	adds	r2, r7, r4
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	490a      	ldr	r1, [pc, #40]	; (800335c <UARTEx_SetNbDataToProcess+0xb4>)
 8003334:	5c8a      	ldrb	r2, [r1, r2]
 8003336:	435a      	muls	r2, r3
 8003338:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800333a:	193b      	adds	r3, r7, r4
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <UARTEx_SetNbDataToProcess+0xb8>)
 8003340:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003342:	0019      	movs	r1, r3
 8003344:	f7fc ff6a 	bl	800021c <__divsi3>
 8003348:	0003      	movs	r3, r0
 800334a:	b299      	uxth	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2268      	movs	r2, #104	; 0x68
 8003350:	5299      	strh	r1, [r3, r2]
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b005      	add	sp, #20
 8003358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	08005a9c 	.word	0x08005a9c
 8003360:	08005aa4 	.word	0x08005aa4

08003364 <__NVIC_SetPriority>:
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	0002      	movs	r2, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b7f      	cmp	r3, #127	; 0x7f
 8003378:	d828      	bhi.n	80033cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <__NVIC_SetPriority+0xd4>)
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b25b      	sxtb	r3, r3
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	33c0      	adds	r3, #192	; 0xc0
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	589b      	ldr	r3, [r3, r2]
 800338a:	1dfa      	adds	r2, r7, #7
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	0011      	movs	r1, r2
 8003390:	2203      	movs	r2, #3
 8003392:	400a      	ands	r2, r1
 8003394:	00d2      	lsls	r2, r2, #3
 8003396:	21ff      	movs	r1, #255	; 0xff
 8003398:	4091      	lsls	r1, r2
 800339a:	000a      	movs	r2, r1
 800339c:	43d2      	mvns	r2, r2
 800339e:	401a      	ands	r2, r3
 80033a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	401a      	ands	r2, r3
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	0018      	movs	r0, r3
 80033b0:	2303      	movs	r3, #3
 80033b2:	4003      	ands	r3, r0
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b8:	481f      	ldr	r0, [pc, #124]	; (8003438 <__NVIC_SetPriority+0xd4>)
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	430a      	orrs	r2, r1
 80033c4:	33c0      	adds	r3, #192	; 0xc0
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	501a      	str	r2, [r3, r0]
}
 80033ca:	e031      	b.n	8003430 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <__NVIC_SetPriority+0xd8>)
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0019      	movs	r1, r3
 80033d4:	230f      	movs	r3, #15
 80033d6:	400b      	ands	r3, r1
 80033d8:	3b08      	subs	r3, #8
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3306      	adds	r3, #6
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	1dfa      	adds	r2, r7, #7
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	0011      	movs	r1, r2
 80033ec:	2203      	movs	r2, #3
 80033ee:	400a      	ands	r2, r1
 80033f0:	00d2      	lsls	r2, r2, #3
 80033f2:	21ff      	movs	r1, #255	; 0xff
 80033f4:	4091      	lsls	r1, r2
 80033f6:	000a      	movs	r2, r1
 80033f8:	43d2      	mvns	r2, r2
 80033fa:	401a      	ands	r2, r3
 80033fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	401a      	ands	r2, r3
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0018      	movs	r0, r3
 800340c:	2303      	movs	r3, #3
 800340e:	4003      	ands	r3, r0
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003414:	4809      	ldr	r0, [pc, #36]	; (800343c <__NVIC_SetPriority+0xd8>)
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	001c      	movs	r4, r3
 800341c:	230f      	movs	r3, #15
 800341e:	4023      	ands	r3, r4
 8003420:	3b08      	subs	r3, #8
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	430a      	orrs	r2, r1
 8003426:	3306      	adds	r3, #6
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	18c3      	adds	r3, r0, r3
 800342c:	3304      	adds	r3, #4
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b003      	add	sp, #12
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Handler+0x1c>)
 8003446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003448:	f001 fb0c 	bl	8004a64 <xTaskGetSchedulerState>
 800344c:	0003      	movs	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003452:	f001 ffd9 	bl	8005408 <xPortSysTickHandler>
  }
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	e000e010 	.word	0xe000e010

08003460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003464:	2305      	movs	r3, #5
 8003466:	425b      	negs	r3, r3
 8003468:	2100      	movs	r1, #0
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff ff7a 	bl	8003364 <__NVIC_SetPriority>
#endif
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347e:	f3ef 8305 	mrs	r3, IPSR
 8003482:	603b      	str	r3, [r7, #0]
  return(result);
 8003484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <osKernelStart+0x1a>
    stat = osErrorISR;
 800348a:	2306      	movs	r3, #6
 800348c:	425b      	negs	r3, r3
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e010      	b.n	80034b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <osKernelStart+0x48>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d109      	bne.n	80034ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800349a:	f7ff ffe1 	bl	8003460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <osKernelStart+0x48>)
 80034a0:	2202      	movs	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034a4:	f000 fef4 	bl	8004290 <vTaskStartScheduler>
      stat = osOK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e002      	b.n	80034b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034ae:	2301      	movs	r3, #1
 80034b0:	425b      	negs	r3, r3
 80034b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000168 	.word	0x20000168

080034c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a06      	ldr	r2, [pc, #24]	; (80034ec <vApplicationGetIdleTaskMemory+0x28>)
 80034d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	601a      	str	r2, [r3, #0]
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	2000016c 	.word	0x2000016c
 80034f0:	20000214 	.word	0x20000214

080034f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <vApplicationGetTimerTaskMemory+0x28>)
 8003504:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a05      	ldr	r2, [pc, #20]	; (8003520 <vApplicationGetTimerTaskMemory+0x2c>)
 800350a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0052      	lsls	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000414 	.word	0x20000414
 8003520:	200004bc 	.word	0x200004bc

08003524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3308      	adds	r3, #8
 8003530:	001a      	movs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	4252      	negs	r2, r2
 800353c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3308      	adds	r3, #8
 8003542:	001a      	movs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3308      	adds	r3, #8
 800354c:	001a      	movs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}

08003576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}

080035ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3301      	adds	r3, #1
 80035ce:	d103      	bne.n	80035d8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e00c      	b.n	80035f2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3308      	adds	r3, #8
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e002      	b.n	80035e6 <vListInsert+0x2c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d2f6      	bcs.n	80035e0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}

08003626 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6892      	ldr	r2, [r2, #8]
 800363c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6852      	ldr	r2, [r2, #4]
 8003646:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d103      	bne.n	800365a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}

08003676 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xQueueGenericReset+0x18>
 800368a:	b672      	cpsid	i
 800368c:	e7fe      	b.n	800368c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800368e:	f001 fe5f 	bl	8005350 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	434b      	muls	r3, r1
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	1e59      	subs	r1, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	434b      	muls	r3, r1
 80036c4:	18d2      	adds	r2, r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2244      	movs	r2, #68	; 0x44
 80036ce:	21ff      	movs	r1, #255	; 0xff
 80036d0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2245      	movs	r2, #69	; 0x45
 80036d6:	21ff      	movs	r1, #255	; 0xff
 80036d8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3310      	adds	r3, #16
 80036ec:	0018      	movs	r0, r3
 80036ee:	f001 f821 	bl	8004734 <xTaskRemoveFromEventList>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d00c      	beq.n	8003710 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036f6:	f001 fe1b 	bl	8005330 <vPortYield>
 80036fa:	e009      	b.n	8003710 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3310      	adds	r3, #16
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff ff0f 	bl	8003524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3324      	adds	r3, #36	; 0x24
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ff0a 	bl	8003524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003710:	f001 fe30 	bl	8005374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003714:	2301      	movs	r3, #1
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}

0800371e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800371e:	b590      	push	{r4, r7, lr}
 8003720:	b089      	sub	sp, #36	; 0x24
 8003722:	af02      	add	r7, sp, #8
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueGenericCreateStatic+0x18>
 8003732:	b672      	cpsid	i
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <xQueueGenericCreateStatic+0x22>
 800373c:	b672      	cpsid	i
 800373e:	e7fe      	b.n	800373e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <xQueueGenericCreateStatic+0x2e>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <xQueueGenericCreateStatic+0x32>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <xQueueGenericCreateStatic+0x34>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <xQueueGenericCreateStatic+0x3c>
 8003756:	b672      	cpsid	i
 8003758:	e7fe      	b.n	8003758 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <xQueueGenericCreateStatic+0x48>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <xQueueGenericCreateStatic+0x4c>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <xQueueGenericCreateStatic+0x4e>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xQueueGenericCreateStatic+0x56>
 8003770:	b672      	cpsid	i
 8003772:	e7fe      	b.n	8003772 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003774:	2350      	movs	r3, #80	; 0x50
 8003776:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b50      	cmp	r3, #80	; 0x50
 800377c:	d001      	beq.n	8003782 <xQueueGenericCreateStatic+0x64>
 800377e:	b672      	cpsid	i
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003782:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00e      	beq.n	80037ac <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2246      	movs	r2, #70	; 0x46
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003796:	2328      	movs	r3, #40	; 0x28
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781c      	ldrb	r4, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	0023      	movs	r3, r4
 80037a8:	f000 f837 	bl	800381a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ac:	697b      	ldr	r3, [r7, #20]
	}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b007      	add	sp, #28
 80037b4:	bd90      	pop	{r4, r7, pc}

080037b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037b6:	b590      	push	{r4, r7, lr}
 80037b8:	b08b      	sub	sp, #44	; 0x2c
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueGenericCreate+0x18>
 80037ca:	b672      	cpsid	i
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4353      	muls	r3, r2
 80037d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3350      	adds	r3, #80	; 0x50
 80037da:	0018      	movs	r0, r3
 80037dc:	f001 fe50 	bl	8005480 <pvPortMalloc>
 80037e0:	0003      	movs	r3, r0
 80037e2:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3350      	adds	r3, #80	; 0x50
 80037f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2246      	movs	r2, #70	; 0x46
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	781c      	ldrb	r4, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	0023      	movs	r3, r4
 800380c:	f000 f805 	bl	800381a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003810:	69bb      	ldr	r3, [r7, #24]
	}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b009      	add	sp, #36	; 0x24
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	001a      	movs	r2, r3
 8003828:	1cfb      	adds	r3, r7, #3
 800382a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e002      	b.n	8003840 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2101      	movs	r1, #1
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ff10 	bl	8003676 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1cfa      	adds	r2, r7, #3
 800385a:	214c      	movs	r1, #76	; 0x4c
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}

08003868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <xQueueGenericSend+0x20>
 8003884:	b672      	cpsid	i
 8003886:	e7fe      	b.n	8003886 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <xQueueGenericSend+0x2e>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <xQueueGenericSend+0x32>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <xQueueGenericSend+0x34>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <xQueueGenericSend+0x3c>
 80038a0:	b672      	cpsid	i
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x4a>
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSend+0x4e>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSend+0x50>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <xQueueGenericSend+0x58>
 80038bc:	b672      	cpsid	i
 80038be:	e7fe      	b.n	80038be <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038c0:	f001 f8d0 	bl	8004a64 <xTaskGetSchedulerState>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d102      	bne.n	80038ce <xQueueGenericSend+0x66>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <xQueueGenericSend+0x6a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <xQueueGenericSend+0x6c>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <xQueueGenericSend+0x74>
 80038d8:	b672      	cpsid	i
 80038da:	e7fe      	b.n	80038da <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038dc:	f001 fd38 	bl	8005350 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <xQueueGenericSend+0x8a>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d11e      	bne.n	8003930 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 f9b7 	bl	8003c6c <prvCopyDataToQueue>
 80038fe:	0003      	movs	r3, r0
 8003900:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	3324      	adds	r3, #36	; 0x24
 800390e:	0018      	movs	r0, r3
 8003910:	f000 ff10 	bl	8004734 <xTaskRemoveFromEventList>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d007      	beq.n	8003928 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003918:	f001 fd0a 	bl	8005330 <vPortYield>
 800391c:	e004      	b.n	8003928 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003924:	f001 fd04 	bl	8005330 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003928:	f001 fd24 	bl	8005374 <vPortExitCritical>
				return pdPASS;
 800392c:	2301      	movs	r3, #1
 800392e:	e05b      	b.n	80039e8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003936:	f001 fd1d 	bl	8005374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800393a:	2300      	movs	r3, #0
 800393c:	e054      	b.n	80039e8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003944:	2314      	movs	r3, #20
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	0018      	movs	r0, r3
 800394a:	f000 ff4f 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800394e:	2301      	movs	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003952:	f001 fd0f 	bl	8005374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003956:	f000 fcf9 	bl	800434c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800395a:	f001 fcf9 	bl	8005350 <vPortEnterCritical>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2244      	movs	r2, #68	; 0x44
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	b25b      	sxtb	r3, r3
 8003966:	3301      	adds	r3, #1
 8003968:	d103      	bne.n	8003972 <xQueueGenericSend+0x10a>
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	2244      	movs	r2, #68	; 0x44
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2245      	movs	r2, #69	; 0x45
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	b25b      	sxtb	r3, r3
 800397a:	3301      	adds	r3, #1
 800397c:	d103      	bne.n	8003986 <xQueueGenericSend+0x11e>
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2245      	movs	r2, #69	; 0x45
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	f001 fcf5 	bl	8005374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398a:	1d3a      	adds	r2, r7, #4
 800398c:	2314      	movs	r3, #20
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f000 ff3e 	bl	8004814 <xTaskCheckForTimeOut>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d11e      	bne.n	80039da <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fa69 	bl	8003e76 <prvIsQueueFull>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d011      	beq.n	80039cc <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	3310      	adds	r3, #16
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 fe7b 	bl	80046ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f9e8 	bl	8003d8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039be:	f000 fcd1 	bl	8004364 <xTaskResumeAll>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d18a      	bne.n	80038dc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80039c6:	f001 fcb3 	bl	8005330 <vPortYield>
 80039ca:	e787      	b.n	80038dc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 f9dd 	bl	8003d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039d4:	f000 fcc6 	bl	8004364 <xTaskResumeAll>
 80039d8:	e780      	b.n	80038dc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 f9d6 	bl	8003d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039e2:	f000 fcbf 	bl	8004364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b00a      	add	sp, #40	; 0x28
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b08b      	sub	sp, #44	; 0x2c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueGenericSendFromISR+0x1c>
 8003a08:	b672      	cpsid	i
 8003a0a:	e7fe      	b.n	8003a0a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <xQueueGenericSendFromISR+0x2a>
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSendFromISR+0x2e>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSendFromISR+0x30>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <xQueueGenericSendFromISR+0x38>
 8003a24:	b672      	cpsid	i
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSendFromISR+0x46>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <xQueueGenericSendFromISR+0x4a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericSendFromISR+0x4c>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <xQueueGenericSendFromISR+0x54>
 8003a40:	b672      	cpsid	i
 8003a42:	e7fe      	b.n	8003a42 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a44:	f001 fcae 	bl	80053a4 <ulSetInterruptMaskFromISR>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <xQueueGenericSendFromISR+0x6e>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d131      	bne.n	8003ac2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a5e:	241b      	movs	r4, #27
 8003a60:	193b      	adds	r3, r7, r4
 8003a62:	6a3a      	ldr	r2, [r7, #32]
 8003a64:	2145      	movs	r1, #69	; 0x45
 8003a66:	5c52      	ldrb	r2, [r2, r1]
 8003a68:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f8f8 	bl	8003c6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	d111      	bne.n	8003aaa <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d016      	beq.n	8003abc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	3324      	adds	r3, #36	; 0x24
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fe4e 	bl	8004734 <xTaskRemoveFromEventList>
 8003a98:	1e03      	subs	r3, r0, #0
 8003a9a:	d00f      	beq.n	8003abc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e008      	b.n	8003abc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aaa:	231b      	movs	r3, #27
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	b259      	sxtb	r1, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2245      	movs	r2, #69	; 0x45
 8003aba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8003ac0:	e001      	b.n	8003ac6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f001 fc71 	bl	80053b0 <vClearInterruptMaskFromISR>

	return xReturn;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b00b      	add	sp, #44	; 0x2c
 8003ad6:	bd90      	pop	{r4, r7, pc}

08003ad8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <xQueueReceive+0x1e>
 8003af2:	b672      	cpsid	i
 8003af4:	e7fe      	b.n	8003af4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <xQueueReceive+0x2c>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <xQueueReceive+0x30>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <xQueueReceive+0x32>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueReceive+0x3a>
 8003b0e:	b672      	cpsid	i
 8003b10:	e7fe      	b.n	8003b10 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b12:	f000 ffa7 	bl	8004a64 <xTaskGetSchedulerState>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d102      	bne.n	8003b20 <xQueueReceive+0x48>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueReceive+0x4c>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <xQueueReceive+0x4e>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <xQueueReceive+0x56>
 8003b2a:	b672      	cpsid	i
 8003b2c:	e7fe      	b.n	8003b2c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2e:	f001 fc0f 	bl	8005350 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01a      	beq.n	8003b74 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	0011      	movs	r1, r2
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f8fc 	bl	8003d42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	1e5a      	subs	r2, r3, #1
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	3310      	adds	r3, #16
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 fde8 	bl	8004734 <xTaskRemoveFromEventList>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d001      	beq.n	8003b6c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b68:	f001 fbe2 	bl	8005330 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b6c:	f001 fc02 	bl	8005374 <vPortExitCritical>
				return pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e062      	b.n	8003c3a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b7a:	f001 fbfb 	bl	8005374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e05b      	b.n	8003c3a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b88:	2314      	movs	r3, #20
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 fe2d 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b96:	f001 fbed 	bl	8005374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b9a:	f000 fbd7 	bl	800434c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b9e:	f001 fbd7 	bl	8005350 <vPortEnterCritical>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2244      	movs	r2, #68	; 0x44
 8003ba6:	5c9b      	ldrb	r3, [r3, r2]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	d103      	bne.n	8003bb6 <xQueueReceive+0xde>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2244      	movs	r2, #68	; 0x44
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	2245      	movs	r2, #69	; 0x45
 8003bba:	5c9b      	ldrb	r3, [r3, r2]
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	d103      	bne.n	8003bca <xQueueReceive+0xf2>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2245      	movs	r2, #69	; 0x45
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]
 8003bca:	f001 fbd3 	bl	8005374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	2314      	movs	r3, #20
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	0011      	movs	r1, r2
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 fe1c 	bl	8004814 <xTaskCheckForTimeOut>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d11e      	bne.n	8003c1e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f931 	bl	8003e4a <prvIsQueueEmpty>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d011      	beq.n	8003c10 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	3324      	adds	r3, #36	; 0x24
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fd59 	bl	80046ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f8c6 	bl	8003d8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c02:	f000 fbaf 	bl	8004364 <xTaskResumeAll>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d191      	bne.n	8003b2e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003c0a:	f001 fb91 	bl	8005330 <vPortYield>
 8003c0e:	e78e      	b.n	8003b2e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 f8bb 	bl	8003d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c18:	f000 fba4 	bl	8004364 <xTaskResumeAll>
 8003c1c:	e787      	b.n	8003b2e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 f8b4 	bl	8003d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c26:	f000 fb9d 	bl	8004364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 f90c 	bl	8003e4a <prvIsQueueEmpty>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d100      	bne.n	8003c38 <xQueueReceive+0x160>
 8003c36:	e77a      	b.n	8003b2e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b00a      	add	sp, #40	; 0x28
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <uxQueueMessagesWaiting+0x12>
 8003c50:	b672      	cpsid	i
 8003c52:	e7fe      	b.n	8003c52 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8003c54:	f001 fb7c 	bl	8005350 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003c5e:	f001 fb89 	bl	8005374 <vPortExitCritical>

	return uxReturn;
 8003c62:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10e      	bne.n	8003ca8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d14e      	bne.n	8003d30 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 ff00 	bl	8004a9c <xTaskPriorityDisinherit>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	e043      	b.n	8003d30 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d119      	bne.n	8003ce2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6858      	ldr	r0, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0019      	movs	r1, r3
 8003cba:	f001 fe1f 	bl	80058fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	18d2      	adds	r2, r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d32b      	bcc.n	8003d30 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	e026      	b.n	8003d30 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68d8      	ldr	r0, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0019      	movs	r1, r3
 8003cee:	f001 fe05 	bl	80058fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	18d2      	adds	r2, r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d207      	bcs.n	8003d1e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	425b      	negs	r3, r3
 8003d18:	18d2      	adds	r2, r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d105      	bne.n	8003d30 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d38:	697b      	ldr	r3, [r7, #20]
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b006      	add	sp, #24
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d018      	beq.n	8003d86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	18d2      	adds	r2, r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d303      	bcc.n	8003d76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f001 fdbb 	bl	80058fc <memcpy>
	}
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d96:	f001 fadb 	bl	8005350 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	2145      	movs	r1, #69	; 0x45
 8003da2:	5c52      	ldrb	r2, [r2, r1]
 8003da4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003da6:	e013      	b.n	8003dd0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3324      	adds	r3, #36	; 0x24
 8003db4:	0018      	movs	r0, r3
 8003db6:	f000 fcbd 	bl	8004734 <xTaskRemoveFromEventList>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d001      	beq.n	8003dc2 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dbe:	f000 fd79 	bl	80048b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dd0:	230f      	movs	r3, #15
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dce5      	bgt.n	8003da8 <prvUnlockQueue+0x1a>
 8003ddc:	e000      	b.n	8003de0 <prvUnlockQueue+0x52>
					break;
 8003dde:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2245      	movs	r2, #69	; 0x45
 8003de4:	21ff      	movs	r1, #255	; 0xff
 8003de6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003de8:	f001 fac4 	bl	8005374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dec:	f001 fab0 	bl	8005350 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003df0:	230e      	movs	r3, #14
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	2144      	movs	r1, #68	; 0x44
 8003df8:	5c52      	ldrb	r2, [r2, r1]
 8003dfa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dfc:	e013      	b.n	8003e26 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fc92 	bl	8004734 <xTaskRemoveFromEventList>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003e14:	f000 fd4e 	bl	80048b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e18:	210e      	movs	r1, #14
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e26:	230e      	movs	r3, #14
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dce5      	bgt.n	8003dfe <prvUnlockQueue+0x70>
 8003e32:	e000      	b.n	8003e36 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003e34:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2244      	movs	r2, #68	; 0x44
 8003e3a:	21ff      	movs	r1, #255	; 0xff
 8003e3c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003e3e:	f001 fa99 	bl	8005374 <vPortExitCritical>
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e52:	f001 fa7d 	bl	8005350 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e001      	b.n	8003e68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e68:	f001 fa84 	bl	8005374 <vPortExitCritical>

	return xReturn;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e7e:	f001 fa67 	bl	8005350 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d102      	bne.n	8003e94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e001      	b.n	8003e98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e98:	f001 fa6c 	bl	8005374 <vPortExitCritical>

	return xReturn;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e015      	b.n	8003ee4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <vQueueAddToRegistry+0x4c>)
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	00d2      	lsls	r2, r2, #3
 8003ebe:	58d3      	ldr	r3, [r2, r3]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10c      	bne.n	8003ede <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <vQueueAddToRegistry+0x4c>)
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	00d2      	lsls	r2, r2, #3
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <vQueueAddToRegistry+0x4c>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003edc:	e006      	b.n	8003eec <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	d9e6      	bls.n	8003eb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200008bc 	.word	0x200008bc

08003ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f08:	f001 fa22 	bl	8005350 <vPortEnterCritical>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2244      	movs	r2, #68	; 0x44
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	d103      	bne.n	8003f20 <vQueueWaitForMessageRestricted+0x28>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2244      	movs	r2, #68	; 0x44
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2245      	movs	r2, #69	; 0x45
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	d103      	bne.n	8003f34 <vQueueWaitForMessageRestricted+0x3c>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2245      	movs	r2, #69	; 0x45
 8003f30:	2100      	movs	r1, #0
 8003f32:	5499      	strb	r1, [r3, r2]
 8003f34:	f001 fa1e 	bl	8005374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3324      	adds	r3, #36	; 0x24
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 fbcd 	bl	80046e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff ff1c 	bl	8003d8e <prvUnlockQueue>
	}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f5e:	b590      	push	{r4, r7, lr}
 8003f60:	b08d      	sub	sp, #52	; 0x34
 8003f62:	af04      	add	r7, sp, #16
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <xTaskCreateStatic+0x18>
 8003f72:	b672      	cpsid	i
 8003f74:	e7fe      	b.n	8003f74 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <xTaskCreateStatic+0x22>
 8003f7c:	b672      	cpsid	i
 8003f7e:	e7fe      	b.n	8003f7e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f80:	23a8      	movs	r3, #168	; 0xa8
 8003f82:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2ba8      	cmp	r3, #168	; 0xa8
 8003f88:	d001      	beq.n	8003f8e <xTaskCreateStatic+0x30>
 8003f8a:	b672      	cpsid	i
 8003f8c:	e7fe      	b.n	8003f8c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f8e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d020      	beq.n	8003fd8 <xTaskCreateStatic+0x7a>
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01d      	beq.n	8003fd8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	22a5      	movs	r2, #165	; 0xa5
 8003faa:	2102      	movs	r1, #2
 8003fac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fae:	683c      	ldr	r4, [r7, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	2318      	movs	r3, #24
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	0023      	movs	r3, r4
 8003fca:	f000 f859 	bl	8004080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 f8f5 	bl	80041c0 <prvAddNewTaskToReadyList>
 8003fd6:	e001      	b.n	8003fdc <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8003fde:	0018      	movs	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b009      	add	sp, #36	; 0x24
 8003fe4:	bd90      	pop	{r4, r7, pc}

08003fe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fe6:	b590      	push	{r4, r7, lr}
 8003fe8:	b08d      	sub	sp, #52	; 0x34
 8003fea:	af04      	add	r7, sp, #16
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	1dbb      	adds	r3, r7, #6
 8003ff4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ff6:	1dbb      	adds	r3, r7, #6
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f001 fa3f 	bl	8005480 <pvPortMalloc>
 8004002:	0003      	movs	r3, r0
 8004004:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800400c:	20a8      	movs	r0, #168	; 0xa8
 800400e:	f001 fa37 	bl	8005480 <pvPortMalloc>
 8004012:	0003      	movs	r3, r0
 8004014:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
 8004022:	e006      	b.n	8004032 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	0018      	movs	r0, r3
 8004028:	f001 fad6 	bl	80055d8 <vPortFree>
 800402c:	e001      	b.n	8004032 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	22a5      	movs	r2, #165	; 0xa5
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	683c      	ldr	r4, [r7, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	2300      	movs	r3, #0
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	0023      	movs	r3, r4
 800405c:	f000 f810 	bl	8004080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	0018      	movs	r0, r3
 8004064:	f000 f8ac 	bl	80041c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004068:	2301      	movs	r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e002      	b.n	8004074 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800406e:	2301      	movs	r3, #1
 8004070:	425b      	negs	r3, r3
 8004072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004074:	69bb      	ldr	r3, [r7, #24]
	}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b009      	add	sp, #36	; 0x24
 800407c:	bd90      	pop	{r4, r7, pc}
	...

08004080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	001a      	movs	r2, r3
 8004098:	21a5      	movs	r1, #165	; 0xa5
 800409a:	f001 fba3 	bl	80057e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4942      	ldr	r1, [pc, #264]	; (80041b0 <prvInitialiseNewTask+0x130>)
 80040a6:	468c      	mov	ip, r1
 80040a8:	4463      	add	r3, ip
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d3      	adds	r3, r2, r3
 80040ae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2207      	movs	r2, #7
 80040b4:	4393      	bics	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2207      	movs	r2, #7
 80040bc:	4013      	ands	r3, r2
 80040be:	d001      	beq.n	80040c4 <prvInitialiseNewTask+0x44>
 80040c0:	b672      	cpsid	i
 80040c2:	e7fe      	b.n	80040c2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e013      	b.n	80040f8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	7818      	ldrb	r0, [r3, #0]
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	2134      	movs	r1, #52	; 0x34
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	18d3      	adds	r3, r2, r3
 80040e0:	185b      	adds	r3, r3, r1
 80040e2:	1c02      	adds	r2, r0, #0
 80040e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	18d3      	adds	r3, r2, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	3301      	adds	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d9e8      	bls.n	80040d0 <prvInitialiseNewTask+0x50>
 80040fe:	e000      	b.n	8004102 <prvInitialiseNewTask+0x82>
			{
				break;
 8004100:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	2243      	movs	r2, #67	; 0x43
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	e003      	b.n	8004114 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2234      	movs	r2, #52	; 0x34
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b37      	cmp	r3, #55	; 0x37
 8004118:	d901      	bls.n	800411e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800411a:	2337      	movs	r3, #55	; 0x37
 800411c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	2200      	movs	r2, #0
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	3304      	adds	r3, #4
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fa13 	bl	8003560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	3318      	adds	r3, #24
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff fa0e 	bl	8003560 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2238      	movs	r2, #56	; 0x38
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	22a0      	movs	r2, #160	; 0xa0
 800415e:	2100      	movs	r1, #0
 8004160:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	22a4      	movs	r2, #164	; 0xa4
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	3354      	adds	r3, #84	; 0x54
 800416e:	224c      	movs	r2, #76	; 0x4c
 8004170:	2100      	movs	r1, #0
 8004172:	0018      	movs	r0, r3
 8004174:	f001 fb36 	bl	80057e4 <memset>
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <prvInitialiseNewTask+0x134>)
 800417c:	659a      	str	r2, [r3, #88]	; 0x58
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <prvInitialiseNewTask+0x138>)
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <prvInitialiseNewTask+0x13c>)
 8004188:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	0018      	movs	r0, r3
 8004192:	f001 f845 	bl	8005220 <pxPortInitialiseStack>
 8004196:	0002      	movs	r2, r0
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	3fffffff 	.word	0x3fffffff
 80041b4:	20001b48 	.word	0x20001b48
 80041b8:	20001bb0 	.word	0x20001bb0
 80041bc:	20001c18 	.word	0x20001c18

080041c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041c8:	f001 f8c2 	bl	8005350 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <prvAddNewTaskToReadyList+0xb8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <prvAddNewTaskToReadyList+0xb8>)
 80041d4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <prvAddNewTaskToReadyList+0xbc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <prvAddNewTaskToReadyList+0xbc>)
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <prvAddNewTaskToReadyList+0xb8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d110      	bne.n	800420e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041ec:	f000 fb7c 	bl	80048e8 <prvInitialiseTaskLists>
 80041f0:	e00d      	b.n	800420e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041f2:	4b23      	ldr	r3, [pc, #140]	; (8004280 <prvAddNewTaskToReadyList+0xc0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <prvAddNewTaskToReadyList+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	429a      	cmp	r2, r3
 8004206:	d802      	bhi.n	800420e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <prvAddNewTaskToReadyList+0xbc>)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <prvAddNewTaskToReadyList+0xc4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <prvAddNewTaskToReadyList+0xc4>)
 8004216:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <prvAddNewTaskToReadyList+0xc4>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <prvAddNewTaskToReadyList+0xc8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d903      	bls.n	8004234 <prvAddNewTaskToReadyList+0x74>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <prvAddNewTaskToReadyList+0xc8>)
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	0013      	movs	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	189b      	adds	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <prvAddNewTaskToReadyList+0xcc>)
 8004242:	189a      	adds	r2, r3, r2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	0019      	movs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f7ff f993 	bl	8003576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004250:	f001 f890 	bl	8005374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <prvAddNewTaskToReadyList+0xc0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <prvAddNewTaskToReadyList+0xbc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	429a      	cmp	r2, r3
 8004268:	d201      	bcs.n	800426e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800426a:	f001 f861 	bl	8005330 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	20000dd0 	.word	0x20000dd0
 800427c:	200008fc 	.word	0x200008fc
 8004280:	20000ddc 	.word	0x20000ddc
 8004284:	20000dec 	.word	0x20000dec
 8004288:	20000dd8 	.word	0x20000dd8
 800428c:	20000900 	.word	0x20000900

08004290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800429e:	003a      	movs	r2, r7
 80042a0:	1d39      	adds	r1, r7, #4
 80042a2:	2308      	movs	r3, #8
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff f90c 	bl	80034c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042ac:	683c      	ldr	r4, [r7, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	491e      	ldr	r1, [pc, #120]	; (800432c <vTaskStartScheduler+0x9c>)
 80042b4:	481e      	ldr	r0, [pc, #120]	; (8004330 <vTaskStartScheduler+0xa0>)
 80042b6:	9202      	str	r2, [sp, #8]
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	0022      	movs	r2, r4
 80042c2:	f7ff fe4c 	bl	8003f5e <xTaskCreateStatic>
 80042c6:	0002      	movs	r2, r0
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <vTaskStartScheduler+0xa4>)
 80042ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <vTaskStartScheduler+0xa4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042d4:	2301      	movs	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e001      	b.n	80042de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d103      	bne.n	80042ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80042e4:	f000 fc8a 	bl	8004bfc <xTimerCreateTimerTask>
 80042e8:	0003      	movs	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d113      	bne.n	800431a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80042f2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <vTaskStartScheduler+0xa8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3354      	adds	r3, #84	; 0x54
 80042fa:	001a      	movs	r2, r3
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <vTaskStartScheduler+0xac>)
 80042fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <vTaskStartScheduler+0xb0>)
 8004302:	2201      	movs	r2, #1
 8004304:	4252      	negs	r2, r2
 8004306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <vTaskStartScheduler+0xb4>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <vTaskStartScheduler+0xb8>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004314:	f000 ffe8 	bl	80052e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004318:	e004      	b.n	8004324 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	d101      	bne.n	8004324 <vTaskStartScheduler+0x94>
 8004320:	b672      	cpsid	i
 8004322:	e7fe      	b.n	8004322 <vTaskStartScheduler+0x92>
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b005      	add	sp, #20
 800432a:	bd90      	pop	{r4, r7, pc}
 800432c:	08005a0c 	.word	0x08005a0c
 8004330:	080048c9 	.word	0x080048c9
 8004334:	20000df4 	.word	0x20000df4
 8004338:	200008fc 	.word	0x200008fc
 800433c:	2000005c 	.word	0x2000005c
 8004340:	20000df0 	.word	0x20000df0
 8004344:	20000ddc 	.word	0x20000ddc
 8004348:	20000dd4 	.word	0x20000dd4

0800434c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <vTaskSuspendAll+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	4b02      	ldr	r3, [pc, #8]	; (8004360 <vTaskSuspendAll+0x14>)
 8004358:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000df8 	.word	0x20000df8

08004364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <xTaskResumeAll+0xf8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <xTaskResumeAll+0x1a>
 800437a:	b672      	cpsid	i
 800437c:	e7fe      	b.n	800437c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800437e:	f000 ffe7 	bl	8005350 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <xTaskResumeAll+0xf8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <xTaskResumeAll+0xf8>)
 800438a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <xTaskResumeAll+0xf8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d15b      	bne.n	800444c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <xTaskResumeAll+0xfc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d057      	beq.n	800444c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439c:	e02f      	b.n	80043fe <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <xTaskResumeAll+0x100>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3318      	adds	r3, #24
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff f93b 	bl	8003626 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3304      	adds	r3, #4
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff f936 	bl	8003626 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <xTaskResumeAll+0x104>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <xTaskResumeAll+0x6a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <xTaskResumeAll+0x104>)
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	0013      	movs	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <xTaskResumeAll+0x108>)
 80043dc:	189a      	adds	r2, r3, r2
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3304      	adds	r3, #4
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f7ff f8c6 	bl	8003576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <xTaskResumeAll+0x10c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <xTaskResumeAll+0x110>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fe:	4b19      	ldr	r3, [pc, #100]	; (8004464 <xTaskResumeAll+0x100>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1cb      	bne.n	800439e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800440c:	f000 fb0c 	bl	8004a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <xTaskResumeAll+0x114>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00f      	beq.n	800443c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800441c:	f000 f83c 	bl	8004498 <xTaskIncrementTick>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d002      	beq.n	800442a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <xTaskResumeAll+0x110>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3b01      	subs	r3, #1
 800442e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f2      	bne.n	800441c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <xTaskResumeAll+0x114>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <xTaskResumeAll+0x110>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004448:	f000 ff72 	bl	8005330 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800444c:	f000 ff92 	bl	8005374 <vPortExitCritical>

	return xAlreadyYielded;
 8004450:	68bb      	ldr	r3, [r7, #8]
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	20000df8 	.word	0x20000df8
 8004460:	20000dd0 	.word	0x20000dd0
 8004464:	20000d90 	.word	0x20000d90
 8004468:	20000dd8 	.word	0x20000dd8
 800446c:	20000900 	.word	0x20000900
 8004470:	200008fc 	.word	0x200008fc
 8004474:	20000de4 	.word	0x20000de4
 8004478:	20000de0 	.word	0x20000de0

0800447c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <xTaskGetTickCount+0x18>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004488:	687b      	ldr	r3, [r7, #4]
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b002      	add	sp, #8
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	20000dd4 	.word	0x20000dd4

08004498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a2:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <xTaskIncrementTick+0x134>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <xTaskIncrementTick+0x14>
 80044aa:	e084      	b.n	80045b6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <xTaskIncrementTick+0x138>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b4:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <xTaskIncrementTick+0x138>)
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d117      	bne.n	80044f0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c0:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <xTaskIncrementTick+0x13c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <xTaskIncrementTick+0x36>
 80044ca:	b672      	cpsid	i
 80044cc:	e7fe      	b.n	80044cc <xTaskIncrementTick+0x34>
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <xTaskIncrementTick+0x13c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <xTaskIncrementTick+0x140>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <xTaskIncrementTick+0x13c>)
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	4b3e      	ldr	r3, [pc, #248]	; (80045d8 <xTaskIncrementTick+0x140>)
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <xTaskIncrementTick+0x144>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <xTaskIncrementTick+0x144>)
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f000 fa9c 	bl	8004a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044f0:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <xTaskIncrementTick+0x148>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d349      	bcc.n	800458e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <xTaskIncrementTick+0x13c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <xTaskIncrementTick+0x148>)
 8004506:	2201      	movs	r2, #1
 8004508:	4252      	negs	r2, r2
 800450a:	601a      	str	r2, [r3, #0]
					break;
 800450c:	e03f      	b.n	800458e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xTaskIncrementTick+0x13c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d203      	bcs.n	800452e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004526:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <xTaskIncrementTick+0x148>)
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800452c:	e02f      	b.n	800458e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3304      	adds	r3, #4
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff f877 	bl	8003626 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3318      	adds	r3, #24
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff f86e 	bl	8003626 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <xTaskIncrementTick+0x14c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d903      	bls.n	800455e <xTaskIncrementTick+0xc6>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <xTaskIncrementTick+0x14c>)
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	0013      	movs	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	189b      	adds	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <xTaskIncrementTick+0x150>)
 800456c:	189a      	adds	r2, r3, r2
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	3304      	adds	r3, #4
 8004572:	0019      	movs	r1, r3
 8004574:	0010      	movs	r0, r2
 8004576:	f7fe fffe 	bl	8003576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <xTaskIncrementTick+0x154>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	429a      	cmp	r2, r3
 8004586:	d3b8      	bcc.n	80044fa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458c:	e7b5      	b.n	80044fa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800458e:	4b17      	ldr	r3, [pc, #92]	; (80045ec <xTaskIncrementTick+0x154>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	4914      	ldr	r1, [pc, #80]	; (80045e8 <xTaskIncrementTick+0x150>)
 8004596:	0013      	movs	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	189b      	adds	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	585b      	ldr	r3, [r3, r1]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d901      	bls.n	80045a8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <xTaskIncrementTick+0x158>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e004      	b.n	80045c0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <xTaskIncrementTick+0x15c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <xTaskIncrementTick+0x15c>)
 80045be:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045c0:	697b      	ldr	r3, [r7, #20]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	20000df8 	.word	0x20000df8
 80045d0:	20000dd4 	.word	0x20000dd4
 80045d4:	20000d88 	.word	0x20000d88
 80045d8:	20000d8c 	.word	0x20000d8c
 80045dc:	20000de8 	.word	0x20000de8
 80045e0:	20000df0 	.word	0x20000df0
 80045e4:	20000dd8 	.word	0x20000dd8
 80045e8:	20000900 	.word	0x20000900
 80045ec:	200008fc 	.word	0x200008fc
 80045f0:	20000de4 	.word	0x20000de4
 80045f4:	20000de0 	.word	0x20000de0

080045f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <vTaskSwitchContext+0x9c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <vTaskSwitchContext+0xa0>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800460c:	e03d      	b.n	800468a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <vTaskSwitchContext+0xa0>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <vTaskSwitchContext+0xa4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	e007      	b.n	800462c <vTaskSwitchContext+0x34>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <vTaskSwitchContext+0x2e>
 8004622:	b672      	cpsid	i
 8004624:	e7fe      	b.n	8004624 <vTaskSwitchContext+0x2c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	491c      	ldr	r1, [pc, #112]	; (80046a0 <vTaskSwitchContext+0xa8>)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	0013      	movs	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	189b      	adds	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	585b      	ldr	r3, [r3, r1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <vTaskSwitchContext+0x24>
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	0013      	movs	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	189b      	adds	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <vTaskSwitchContext+0xa8>)
 800464a:	189b      	adds	r3, r3, r2
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	429a      	cmp	r2, r3
 8004662:	d104      	bne.n	800466e <vTaskSwitchContext+0x76>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <vTaskSwitchContext+0xac>)
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <vTaskSwitchContext+0xa4>)
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <vTaskSwitchContext+0xac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3354      	adds	r3, #84	; 0x54
 8004684:	001a      	movs	r2, r3
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <vTaskSwitchContext+0xb0>)
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	20000df8 	.word	0x20000df8
 8004698:	20000de4 	.word	0x20000de4
 800469c:	20000dd8 	.word	0x20000dd8
 80046a0:	20000900 	.word	0x20000900
 80046a4:	200008fc 	.word	0x200008fc
 80046a8:	2000005c 	.word	0x2000005c

080046ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <vTaskPlaceOnEventList+0x14>
 80046bc:	b672      	cpsid	i
 80046be:	e7fe      	b.n	80046be <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <vTaskPlaceOnEventList+0x38>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3318      	adds	r3, #24
 80046c6:	001a      	movs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fe ff74 	bl	80035ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 fa3c 	bl	8004b54 <prvAddCurrentTaskToDelayedList>
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200008fc 	.word	0x200008fc

080046e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <vTaskPlaceOnEventListRestricted+0x16>
 80046fa:	b672      	cpsid	i
 80046fc:	e7fe      	b.n	80046fc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <vTaskPlaceOnEventListRestricted+0x48>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3318      	adds	r3, #24
 8004704:	001a      	movs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0011      	movs	r1, r2
 800470a:	0018      	movs	r0, r3
 800470c:	f7fe ff33 	bl	8003576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004716:	2301      	movs	r3, #1
 8004718:	425b      	negs	r3, r3
 800471a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f000 fa16 	bl	8004b54 <prvAddCurrentTaskToDelayedList>
	}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200008fc 	.word	0x200008fc

08004734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <xTaskRemoveFromEventList+0x1a>
 800474a:	b672      	cpsid	i
 800474c:	e7fe      	b.n	800474c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3318      	adds	r3, #24
 8004752:	0018      	movs	r0, r3
 8004754:	f7fe ff67 	bl	8003626 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <xTaskRemoveFromEventList+0xa0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	3304      	adds	r3, #4
 8004764:	0018      	movs	r0, r3
 8004766:	f7fe ff5e 	bl	8003626 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <xTaskRemoveFromEventList+0xa4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d903      	bls.n	800477e <xTaskRemoveFromEventList+0x4a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <xTaskRemoveFromEventList+0xa4>)
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004782:	0013      	movs	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	189b      	adds	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a14      	ldr	r2, [pc, #80]	; (80047dc <xTaskRemoveFromEventList+0xa8>)
 800478c:	189a      	adds	r2, r3, r2
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3304      	adds	r3, #4
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f7fe feee 	bl	8003576 <vListInsertEnd>
 800479a:	e007      	b.n	80047ac <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3318      	adds	r3, #24
 80047a0:	001a      	movs	r2, r3
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <xTaskRemoveFromEventList+0xac>)
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe fee5 	bl	8003576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <xTaskRemoveFromEventList+0xb0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d905      	bls.n	80047c6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <xTaskRemoveFromEventList+0xb4>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e001      	b.n	80047ca <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b004      	add	sp, #16
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000df8 	.word	0x20000df8
 80047d8:	20000dd8 	.word	0x20000dd8
 80047dc:	20000900 	.word	0x20000900
 80047e0:	20000d90 	.word	0x20000d90
 80047e4:	200008fc 	.word	0x200008fc
 80047e8:	20000de4 	.word	0x20000de4

080047ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <vTaskInternalSetTimeOutState+0x20>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <vTaskInternalSetTimeOutState+0x24>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]
}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b002      	add	sp, #8
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000de8 	.word	0x20000de8
 8004810:	20000dd4 	.word	0x20000dd4

08004814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <xTaskCheckForTimeOut+0x14>
 8004824:	b672      	cpsid	i
 8004826:	e7fe      	b.n	8004826 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xTaskCheckForTimeOut+0x1e>
 800482e:	b672      	cpsid	i
 8004830:	e7fe      	b.n	8004830 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004832:	f000 fd8d 	bl	8005350 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <xTaskCheckForTimeOut+0x98>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	d102      	bne.n	8004854 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e024      	b.n	800489e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <xTaskCheckForTimeOut+0x9c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d007      	beq.n	8004870 <xTaskCheckForTimeOut+0x5c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e016      	b.n	800489e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d20c      	bcs.n	8004894 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad2      	subs	r2, r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	0018      	movs	r0, r3
 800488a:	f7ff ffaf 	bl	80047ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e004      	b.n	800489e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800489a:	2301      	movs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f000 fd69 	bl	8005374 <vPortExitCritical>

	return xReturn;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b006      	add	sp, #24
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000dd4 	.word	0x20000dd4
 80048b0:	20000de8 	.word	0x20000de8

080048b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <vTaskMissedYield+0x10>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000de4 	.word	0x20000de4

080048c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048d0:	f000 f84e 	bl	8004970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <prvIdleTask+0x1c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d9f9      	bls.n	80048d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048dc:	f000 fd28 	bl	8005330 <vPortYield>
		prvCheckTasksWaitingTermination();
 80048e0:	e7f6      	b.n	80048d0 <prvIdleTask+0x8>
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	20000900 	.word	0x20000900

080048e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ee:	2300      	movs	r3, #0
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	e00c      	b.n	800490e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	0013      	movs	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <prvInitialiseTaskLists+0x68>)
 8004900:	189b      	adds	r3, r3, r2
 8004902:	0018      	movs	r0, r3
 8004904:	f7fe fe0e 	bl	8003524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3301      	adds	r3, #1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b37      	cmp	r3, #55	; 0x37
 8004912:	d9ef      	bls.n	80048f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <prvInitialiseTaskLists+0x6c>)
 8004916:	0018      	movs	r0, r3
 8004918:	f7fe fe04 	bl	8003524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <prvInitialiseTaskLists+0x70>)
 800491e:	0018      	movs	r0, r3
 8004920:	f7fe fe00 	bl	8003524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004924:	4b0d      	ldr	r3, [pc, #52]	; (800495c <prvInitialiseTaskLists+0x74>)
 8004926:	0018      	movs	r0, r3
 8004928:	f7fe fdfc 	bl	8003524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <prvInitialiseTaskLists+0x78>)
 800492e:	0018      	movs	r0, r3
 8004930:	f7fe fdf8 	bl	8003524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <prvInitialiseTaskLists+0x7c>)
 8004936:	0018      	movs	r0, r3
 8004938:	f7fe fdf4 	bl	8003524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvInitialiseTaskLists+0x80>)
 800493e:	4a05      	ldr	r2, [pc, #20]	; (8004954 <prvInitialiseTaskLists+0x6c>)
 8004940:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvInitialiseTaskLists+0x84>)
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <prvInitialiseTaskLists+0x70>)
 8004946:	601a      	str	r2, [r3, #0]
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b002      	add	sp, #8
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000900 	.word	0x20000900
 8004954:	20000d60 	.word	0x20000d60
 8004958:	20000d74 	.word	0x20000d74
 800495c:	20000d90 	.word	0x20000d90
 8004960:	20000da4 	.word	0x20000da4
 8004964:	20000dbc 	.word	0x20000dbc
 8004968:	20000d88 	.word	0x20000d88
 800496c:	20000d8c 	.word	0x20000d8c

08004970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004976:	e01a      	b.n	80049ae <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004978:	f000 fcea 	bl	8005350 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <prvCheckTasksWaitingTermination+0x50>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	0018      	movs	r0, r3
 800498a:	f7fe fe4c 	bl	8003626 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <prvCheckTasksWaitingTermination+0x54>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <prvCheckTasksWaitingTermination+0x54>)
 8004996:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1e5a      	subs	r2, r3, #1
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 80049a0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80049a2:	f000 fce7 	bl	8005374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f80f 	bl	80049cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e0      	bne.n	8004978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000da4 	.word	0x20000da4
 80049c4:	20000dd0 	.word	0x20000dd0
 80049c8:	20000db8 	.word	0x20000db8

080049cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3354      	adds	r3, #84	; 0x54
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 ff0b 	bl	80057f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	22a5      	movs	r2, #165	; 0xa5
 80049e2:	5c9b      	ldrb	r3, [r3, r2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 fdf3 	bl	80055d8 <vPortFree>
				vPortFree( pxTCB );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 fdef 	bl	80055d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049fa:	e010      	b.n	8004a1e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	22a5      	movs	r2, #165	; 0xa5
 8004a00:	5c9b      	ldrb	r3, [r3, r2]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d104      	bne.n	8004a10 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 fde5 	bl	80055d8 <vPortFree>
	}
 8004a0e:	e006      	b.n	8004a1e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	22a5      	movs	r2, #165	; 0xa5
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d001      	beq.n	8004a1e <prvDeleteTCB+0x52>
 8004a1a:	b672      	cpsid	i
 8004a1c:	e7fe      	b.n	8004a1c <prvDeleteTCB+0x50>
	}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <prvResetNextTaskUnblockTime+0x34>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <prvResetNextTaskUnblockTime+0x38>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4252      	negs	r2, r2
 8004a3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a40:	e008      	b.n	8004a54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <prvResetNextTaskUnblockTime+0x34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <prvResetNextTaskUnblockTime+0x38>)
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000d88 	.word	0x20000d88
 8004a60:	20000df0 	.word	0x20000df0

08004a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <xTaskGetSchedulerState+0x30>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a72:	2301      	movs	r3, #1
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	e008      	b.n	8004a8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <xTaskGetSchedulerState+0x34>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a80:	2302      	movs	r3, #2
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	e001      	b.n	8004a8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a8a:	687b      	ldr	r3, [r7, #4]
	}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000ddc 	.word	0x20000ddc
 8004a98:	20000df8 	.word	0x20000df8

08004a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d044      	beq.n	8004b3c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <xTaskPriorityDisinherit+0xac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <xTaskPriorityDisinherit+0x24>
 8004abc:	b672      	cpsid	i
 8004abe:	e7fe      	b.n	8004abe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <xTaskPriorityDisinherit+0x30>
 8004ac8:	b672      	cpsid	i
 8004aca:	e7fe      	b.n	8004aca <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d02c      	beq.n	8004b3c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d128      	bne.n	8004b3c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3304      	adds	r3, #4
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fe fd99 	bl	8003626 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	2238      	movs	r2, #56	; 0x38
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <xTaskPriorityDisinherit+0xb0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <xTaskPriorityDisinherit+0x80>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <xTaskPriorityDisinherit+0xb0>)
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	0013      	movs	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <xTaskPriorityDisinherit+0xb4>)
 8004b2a:	189a      	adds	r2, r3, r2
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	0019      	movs	r1, r3
 8004b32:	0010      	movs	r0, r2
 8004b34:	f7fe fd1f 	bl	8003576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	200008fc 	.word	0x200008fc
 8004b4c:	20000dd8 	.word	0x20000dd8
 8004b50:	20000900 	.word	0x20000900

08004b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b5e:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fe fd5b 	bl	8003626 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	d10b      	bne.n	8004b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <prvAddCurrentTaskToDelayedList+0x98>)
 8004b84:	0011      	movs	r1, r2
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fe fcf5 	bl	8003576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b8c:	e026      	b.n	8004bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d209      	bcs.n	8004bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	0010      	movs	r0, r2
 8004bb4:	f7fe fd01 	bl	80035ba <vListInsert>
}
 8004bb8:	e010      	b.n	8004bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	0010      	movs	r0, r2
 8004bc8:	f7fe fcf7 	bl	80035ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d202      	bcs.n	8004bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	601a      	str	r2, [r3, #0]
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000dd4 	.word	0x20000dd4
 8004be8:	200008fc 	.word	0x200008fc
 8004bec:	20000dbc 	.word	0x20000dbc
 8004bf0:	20000d8c 	.word	0x20000d8c
 8004bf4:	20000d88 	.word	0x20000d88
 8004bf8:	20000df0 	.word	0x20000df0

08004bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c06:	f000 fac9 	bl	800519c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <xTimerCreateTimerTask+0x6c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c1a:	003a      	movs	r2, r7
 8004c1c:	1d39      	adds	r1, r7, #4
 8004c1e:	2308      	movs	r3, #8
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fe fc66 	bl	80034f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c28:	683c      	ldr	r4, [r7, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	490f      	ldr	r1, [pc, #60]	; (8004c6c <xTimerCreateTimerTask+0x70>)
 8004c30:	480f      	ldr	r0, [pc, #60]	; (8004c70 <xTimerCreateTimerTask+0x74>)
 8004c32:	9202      	str	r2, [sp, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2302      	movs	r3, #2
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	0022      	movs	r2, r4
 8004c3e:	f7ff f98e 	bl	8003f5e <xTaskCreateStatic>
 8004c42:	0002      	movs	r2, r0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <xTimerCreateTimerTask+0x78>)
 8004c46:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <xTimerCreateTimerTask+0x78>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004c50:	2301      	movs	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <xTimerCreateTimerTask+0x62>
 8004c5a:	b672      	cpsid	i
 8004c5c:	e7fe      	b.n	8004c5c <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b005      	add	sp, #20
 8004c66:	bd90      	pop	{r4, r7, pc}
 8004c68:	20000e2c 	.word	0x20000e2c
 8004c6c:	08005a14 	.word	0x08005a14
 8004c70:	08004d95 	.word	0x08004d95
 8004c74:	20000e30 	.word	0x20000e30

08004c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b08b      	sub	sp, #44	; 0x2c
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <xTimerGenericCommand+0x1c>
 8004c90:	b672      	cpsid	i
 8004c92:	e7fe      	b.n	8004c92 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <xTimerGenericCommand+0x90>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d030      	beq.n	8004cfe <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c9c:	2414      	movs	r4, #20
 8004c9e:	193b      	adds	r3, r7, r4
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ca4:	193b      	adds	r3, r7, r4
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004caa:	193b      	adds	r3, r7, r4
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	dc19      	bgt.n	8004cea <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cb6:	f7ff fed5 	bl	8004a64 <xTaskGetSchedulerState>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d109      	bne.n	8004cd4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <xTimerGenericCommand+0x90>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc6:	1939      	adds	r1, r7, r4
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f7fe fdcd 	bl	8003868 <xQueueGenericSend>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	e014      	b.n	8004cfe <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <xTimerGenericCommand+0x90>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	2314      	movs	r3, #20
 8004cda:	18f9      	adds	r1, r7, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f7fe fdc2 	bl	8003868 <xQueueGenericSend>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce8:	e009      	b.n	8004cfe <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <xTimerGenericCommand+0x90>)
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	2314      	movs	r3, #20
 8004cf2:	18f9      	adds	r1, r7, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f7fe fe7b 	bl	80039f0 <xQueueGenericSendFromISR>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b00b      	add	sp, #44	; 0x2c
 8004d06:	bd90      	pop	{r4, r7, pc}
 8004d08:	20000e2c 	.word	0x20000e2c

08004d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <prvProcessExpiredTimer+0x84>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3304      	adds	r3, #4
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fe fc7e 	bl	8003626 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2228      	movs	r2, #40	; 0x28
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	001a      	movs	r2, r3
 8004d32:	2304      	movs	r3, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	d019      	beq.n	8004d6c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	18d1      	adds	r1, r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f8c3 	bl	8004ed0 <prvInsertTimerInActiveList>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d017      	beq.n	8004d7e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2300      	movs	r3, #0
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f7ff ff8d 	bl	8004c78 <xTimerGenericCommand>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <prvProcessExpiredTimer+0x72>
 8004d68:	b672      	cpsid	i
 8004d6a:	e7fe      	b.n	8004d6a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2228      	movs	r2, #40	; 0x28
 8004d70:	5c9b      	ldrb	r3, [r3, r2]
 8004d72:	2201      	movs	r2, #1
 8004d74:	4393      	bics	r3, r2
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2228      	movs	r2, #40	; 0x28
 8004d7c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	0010      	movs	r0, r2
 8004d86:	4798      	blx	r3
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b004      	add	sp, #16
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000e24 	.word	0x20000e24

08004d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 f853 	bl	8004e4c <prvGetNextExpireTime>
 8004da6:	0003      	movs	r3, r0
 8004da8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f803 	bl	8004dbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004db6:	f000 f8cd 	bl	8004f54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dba:	e7ef      	b.n	8004d9c <prvTimerTask+0x8>

08004dbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dc6:	f7ff fac1 	bl	800434c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dca:	2308      	movs	r3, #8
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f85e 	bl	8004e90 <prvSampleTimeNow>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d12b      	bne.n	8004e36 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <prvProcessTimerOrBlockTask+0x42>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d808      	bhi.n	8004dfe <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004dec:	f7ff faba 	bl	8004364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0011      	movs	r1, r2
 8004df6:	0018      	movs	r0, r3
 8004df8:	f7ff ff88 	bl	8004d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004dfc:	e01d      	b.n	8004e3a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <prvProcessTimerOrBlockTask+0x88>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <prvProcessTimerOrBlockTask+0x56>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <prvProcessTimerOrBlockTask+0x58>
 8004e12:	2300      	movs	r3, #0
 8004e14:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvProcessTimerOrBlockTask+0x8c>)
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	0019      	movs	r1, r3
 8004e24:	f7ff f868 	bl	8003ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e28:	f7ff fa9c 	bl	8004364 <xTaskResumeAll>
 8004e2c:	1e03      	subs	r3, r0, #0
 8004e2e:	d104      	bne.n	8004e3a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8004e30:	f000 fa7e 	bl	8005330 <vPortYield>
}
 8004e34:	e001      	b.n	8004e3a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8004e36:	f7ff fa95 	bl	8004364 <xTaskResumeAll>
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	20000e28 	.word	0x20000e28
 8004e48:	20000e2c 	.word	0x20000e2c

08004e4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <prvGetNextExpireTime+0x40>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <prvGetNextExpireTime+0x16>
 8004e5e:	2201      	movs	r2, #1
 8004e60:	e000      	b.n	8004e64 <prvGetNextExpireTime+0x18>
 8004e62:	2200      	movs	r2, #0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvGetNextExpireTime+0x40>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e001      	b.n	8004e80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e80:	68fb      	ldr	r3, [r7, #12]
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b004      	add	sp, #16
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20000e24 	.word	0x20000e24

08004e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e98:	f7ff faf0 	bl	800447c <xTaskGetTickCount>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvSampleTimeNow+0x3c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d205      	bcs.n	8004eb6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004eaa:	f000 f919 	bl	80050e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e002      	b.n	8004ebc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <prvSampleTimeNow+0x3c>)
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000e34 	.word	0x20000e34

08004ed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d812      	bhi.n	8004f1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e01b      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <prvInsertTimerInActiveList+0x7c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3304      	adds	r3, #4
 8004f12:	0019      	movs	r1, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	f7fe fb50 	bl	80035ba <vListInsert>
 8004f1a:	e012      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d206      	bcs.n	8004f32 <prvInsertTimerInActiveList+0x62>
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e007      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <prvInsertTimerInActiveList+0x80>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	f7fe fb3c 	bl	80035ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f42:	697b      	ldr	r3, [r7, #20]
}
 8004f44:	0018      	movs	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b006      	add	sp, #24
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000e28 	.word	0x20000e28
 8004f50:	20000e24 	.word	0x20000e24

08004f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b08d      	sub	sp, #52	; 0x34
 8004f58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f5a:	e0ac      	b.n	80050b6 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	18bb      	adds	r3, r7, r2
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da0f      	bge.n	8004f86 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f66:	18bb      	adds	r3, r7, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <prvProcessReceivedCommands+0x22>
 8004f72:	b672      	cpsid	i
 8004f74:	e7fe      	b.n	8004f74 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	6858      	ldr	r0, [r3, #4]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0019      	movs	r1, r3
 8004f84:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f86:	2208      	movs	r2, #8
 8004f88:	18bb      	adds	r3, r7, r2
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da00      	bge.n	8004f92 <prvProcessReceivedCommands+0x3e>
 8004f90:	e091      	b.n	80050b6 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f92:	18bb      	adds	r3, r7, r2
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fe fb3e 	bl	8003626 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff ff6f 	bl	8004e90 <prvSampleTimeNow>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d900      	bls.n	8004fc2 <prvProcessReceivedCommands+0x6e>
 8004fc0:	e078      	b.n	80050b4 <prvProcessReceivedCommands+0x160>
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	4b44      	ldr	r3, [pc, #272]	; (80050d8 <prvProcessReceivedCommands+0x184>)
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2228      	movs	r2, #40	; 0x28
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2d9      	uxtb	r1, r3
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2228      	movs	r2, #40	; 0x28
 8004fdc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fde:	2408      	movs	r4, #8
 8004fe0:	193b      	adds	r3, r7, r4
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	18d1      	adds	r1, r2, r3
 8004fea:	193b      	adds	r3, r7, r4
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	6a38      	ldr	r0, [r7, #32]
 8004ff2:	f7ff ff6d 	bl	8004ed0 <prvInsertTimerInActiveList>
 8004ff6:	1e03      	subs	r3, r0, #0
 8004ff8:	d05d      	beq.n	80050b6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	0010      	movs	r0, r2
 8005002:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2228      	movs	r2, #40	; 0x28
 8005008:	5c9b      	ldrb	r3, [r3, r2]
 800500a:	001a      	movs	r2, r3
 800500c:	2304      	movs	r3, #4
 800500e:	4013      	ands	r3, r2
 8005010:	d051      	beq.n	80050b6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005012:	193b      	adds	r3, r7, r4
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	18d2      	adds	r2, r2, r3
 800501c:	6a38      	ldr	r0, [r7, #32]
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	2100      	movs	r1, #0
 8005026:	f7ff fe27 	bl	8004c78 <xTimerGenericCommand>
 800502a:	0003      	movs	r3, r0
 800502c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d140      	bne.n	80050b6 <prvProcessReceivedCommands+0x162>
 8005034:	b672      	cpsid	i
 8005036:	e7fe      	b.n	8005036 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2228      	movs	r2, #40	; 0x28
 800503c:	5c9b      	ldrb	r3, [r3, r2]
 800503e:	2201      	movs	r2, #1
 8005040:	4393      	bics	r3, r2
 8005042:	b2d9      	uxtb	r1, r3
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	2228      	movs	r2, #40	; 0x28
 8005048:	5499      	strb	r1, [r3, r2]
					break;
 800504a:	e034      	b.n	80050b6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2228      	movs	r2, #40	; 0x28
 8005050:	5c9b      	ldrb	r3, [r3, r2]
 8005052:	2201      	movs	r2, #1
 8005054:	4313      	orrs	r3, r2
 8005056:	b2d9      	uxtb	r1, r3
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	2228      	movs	r2, #40	; 0x28
 800505c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800505e:	2308      	movs	r3, #8
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <prvProcessReceivedCommands+0x120>
 8005070:	b672      	cpsid	i
 8005072:	e7fe      	b.n	8005072 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	18d1      	adds	r1, r2, r3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	6a38      	ldr	r0, [r7, #32]
 8005082:	f7ff ff25 	bl	8004ed0 <prvInsertTimerInActiveList>
					break;
 8005086:	e016      	b.n	80050b6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2228      	movs	r2, #40	; 0x28
 800508c:	5c9b      	ldrb	r3, [r3, r2]
 800508e:	001a      	movs	r2, r3
 8005090:	2302      	movs	r3, #2
 8005092:	4013      	ands	r3, r2
 8005094:	d104      	bne.n	80050a0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fa9d 	bl	80055d8 <vPortFree>
 800509e:	e00a      	b.n	80050b6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2228      	movs	r2, #40	; 0x28
 80050a4:	5c9b      	ldrb	r3, [r3, r2]
 80050a6:	2201      	movs	r2, #1
 80050a8:	4393      	bics	r3, r2
 80050aa:	b2d9      	uxtb	r1, r3
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2228      	movs	r2, #40	; 0x28
 80050b0:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050b2:	e000      	b.n	80050b6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80050b4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <prvProcessReceivedCommands+0x188>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2208      	movs	r2, #8
 80050bc:	18b9      	adds	r1, r7, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fe fd09 	bl	8003ad8 <xQueueReceive>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d000      	beq.n	80050cc <prvProcessReceivedCommands+0x178>
 80050ca:	e747      	b.n	8004f5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b00b      	add	sp, #44	; 0x2c
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	08005aac 	.word	0x08005aac
 80050dc:	20000e2c 	.word	0x20000e2c

080050e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050e6:	e041      	b.n	800516c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050e8:	4b2a      	ldr	r3, [pc, #168]	; (8005194 <prvSwitchTimerLists+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f2:	4b28      	ldr	r3, [pc, #160]	; (8005194 <prvSwitchTimerLists+0xb4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3304      	adds	r3, #4
 8005100:	0018      	movs	r0, r3
 8005102:	f7fe fa90 	bl	8003626 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	0010      	movs	r0, r2
 800510e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2228      	movs	r2, #40	; 0x28
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	001a      	movs	r2, r3
 8005118:	2304      	movs	r3, #4
 800511a:	4013      	ands	r3, r2
 800511c:	d026      	beq.n	800516c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d90e      	bls.n	800514e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <prvSwitchTimerLists+0xb4>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3304      	adds	r3, #4
 8005144:	0019      	movs	r1, r3
 8005146:	0010      	movs	r0, r2
 8005148:	f7fe fa37 	bl	80035ba <vListInsert>
 800514c:	e00e      	b.n	800516c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	2100      	movs	r1, #0
 800515a:	f7ff fd8d 	bl	8004c78 <xTimerGenericCommand>
 800515e:	0003      	movs	r3, r0
 8005160:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <prvSwitchTimerLists+0x8c>
 8005168:	b672      	cpsid	i
 800516a:	e7fe      	b.n	800516a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <prvSwitchTimerLists+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1b8      	bne.n	80050e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <prvSwitchTimerLists+0xb4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <prvSwitchTimerLists+0xb8>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <prvSwitchTimerLists+0xb4>)
 8005182:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <prvSwitchTimerLists+0xb8>)
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b006      	add	sp, #24
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	20000e24 	.word	0x20000e24
 8005198:	20000e28 	.word	0x20000e28

0800519c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051a2:	f000 f8d5 	bl	8005350 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d123      	bne.n	80051f6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <prvCheckForValidListAndQueue+0x68>)
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fe f9b7 	bl	8003524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <prvCheckForValidListAndQueue+0x6c>)
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7fe f9b3 	bl	8003524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <prvCheckForValidListAndQueue+0x70>)
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <prvCheckForValidListAndQueue+0x68>)
 80051c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <prvCheckForValidListAndQueue+0x74>)
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <prvCheckForValidListAndQueue+0x6c>)
 80051c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <prvCheckForValidListAndQueue+0x78>)
 80051cc:	4a12      	ldr	r2, [pc, #72]	; (8005218 <prvCheckForValidListAndQueue+0x7c>)
 80051ce:	2100      	movs	r1, #0
 80051d0:	9100      	str	r1, [sp, #0]
 80051d2:	2110      	movs	r1, #16
 80051d4:	200a      	movs	r0, #10
 80051d6:	f7fe faa2 	bl	800371e <xQueueGenericCreateStatic>
 80051da:	0002      	movs	r2, r0
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051de:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0b      	ldr	r2, [pc, #44]	; (800521c <prvCheckForValidListAndQueue+0x80>)
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7fe fe59 	bl	8003ea8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051f6:	f000 f8bd 	bl	8005374 <vPortExitCritical>
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000e2c 	.word	0x20000e2c
 8005204:	20000dfc 	.word	0x20000dfc
 8005208:	20000e10 	.word	0x20000e10
 800520c:	20000e24 	.word	0x20000e24
 8005210:	20000e28 	.word	0x20000e28
 8005214:	20000ed8 	.word	0x20000ed8
 8005218:	20000e38 	.word	0x20000e38
 800521c:	08005a1c 	.word	0x08005a1c

08005220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3b04      	subs	r3, #4
 8005230:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	0452      	lsls	r2, r2, #17
 8005238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b04      	subs	r3, #4
 800523e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b04      	subs	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800524c:	4a08      	ldr	r2, [pc, #32]	; (8005270 <pxPortInitialiseStack+0x50>)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b14      	subs	r3, #20
 8005256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b20      	subs	r3, #32
 8005262:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b004      	add	sp, #16
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	08005275 	.word	0x08005275

08005274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <prvTaskExitError+0x2c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	d001      	beq.n	800528a <prvTaskExitError+0x16>
 8005286:	b672      	cpsid	i
 8005288:	e7fe      	b.n	8005288 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800528a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0fc      	beq.n	800528e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80052b0:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <pxCurrentTCBConst2>)
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	3020      	adds	r0, #32
 80052b8:	f380 8809 	msr	PSP, r0
 80052bc:	2002      	movs	r0, #2
 80052be:	f380 8814 	msr	CONTROL, r0
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80052c8:	46ae      	mov	lr, r5
 80052ca:	bc08      	pop	{r3}
 80052cc:	bc04      	pop	{r2}
 80052ce:	b662      	cpsie	i
 80052d0:	4718      	bx	r3
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	46c0      	nop			; (mov r8, r8)

080052e0 <pxCurrentTCBConst2>:
 80052e0:	200008fc 	.word	0x200008fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46c0      	nop			; (mov r8, r8)

080052e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <xPortStartScheduler+0x40>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <xPortStartScheduler+0x40>)
 80052f2:	21ff      	movs	r1, #255	; 0xff
 80052f4:	0409      	lsls	r1, r1, #16
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <xPortStartScheduler+0x40>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <xPortStartScheduler+0x40>)
 8005300:	21ff      	movs	r1, #255	; 0xff
 8005302:	0609      	lsls	r1, r1, #24
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005308:	f000 f898 	bl	800543c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <xPortStartScheduler+0x44>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005312:	f7ff ffcd 	bl	80052b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005316:	f7ff f96f 	bl	80045f8 <vTaskSwitchContext>
	prvTaskExitError();
 800531a:	f7ff ffab 	bl	8005274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800531e:	2300      	movs	r3, #0
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	e000ed20 	.word	0xe000ed20
 800532c:	2000000c 	.word	0x2000000c

08005330 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <vPortYield+0x1c>)
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	0552      	lsls	r2, r2, #21
 800533a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800533c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005340:	f3bf 8f6f 	isb	sy
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005354:	b672      	cpsid	i
	uxCriticalNesting++;
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <vPortEnterCritical+0x20>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <vPortEnterCritical+0x20>)
 800535e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005360:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005364:	f3bf 8f6f 	isb	sy
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	2000000c 	.word	0x2000000c

08005374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <vPortExitCritical+0x2c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <vPortExitCritical+0x10>
 8005380:	b672      	cpsid	i
 8005382:	e7fe      	b.n	8005382 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <vPortExitCritical+0x2c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <vPortExitCritical+0x2c>)
 800538c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <vPortExitCritical+0x2c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d100      	bne.n	8005398 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005396:	b662      	cpsie	i
	}
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	2000000c 	.word	0x2000000c

080053a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80053a4:	f3ef 8010 	mrs	r0, PRIMASK
 80053a8:	b672      	cpsid	i
 80053aa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	0018      	movs	r0, r3

080053b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80053b0:	f380 8810 	msr	PRIMASK, r0
 80053b4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80053b6:	46c0      	nop			; (mov r8, r8)
	...

080053c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053c0:	f3ef 8009 	mrs	r0, PSP
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <pxCurrentTCBConst>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	3820      	subs	r0, #32
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80053ce:	4644      	mov	r4, r8
 80053d0:	464d      	mov	r5, r9
 80053d2:	4656      	mov	r6, sl
 80053d4:	465f      	mov	r7, fp
 80053d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80053d8:	b508      	push	{r3, lr}
 80053da:	b672      	cpsid	i
 80053dc:	f7ff f90c 	bl	80045f8 <vTaskSwitchContext>
 80053e0:	b662      	cpsie	i
 80053e2:	bc0c      	pop	{r2, r3}
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	6808      	ldr	r0, [r1, #0]
 80053e8:	3010      	adds	r0, #16
 80053ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80053ec:	46a0      	mov	r8, r4
 80053ee:	46a9      	mov	r9, r5
 80053f0:	46b2      	mov	sl, r6
 80053f2:	46bb      	mov	fp, r7
 80053f4:	f380 8809 	msr	PSP, r0
 80053f8:	3820      	subs	r0, #32
 80053fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80053fc:	4718      	bx	r3
 80053fe:	46c0      	nop			; (mov r8, r8)

08005400 <pxCurrentTCBConst>:
 8005400:	200008fc 	.word	0x200008fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46c0      	nop			; (mov r8, r8)

08005408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800540e:	f7ff ffc9 	bl	80053a4 <ulSetInterruptMaskFromISR>
 8005412:	0003      	movs	r3, r0
 8005414:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005416:	f7ff f83f 	bl	8004498 <xTaskIncrementTick>
 800541a:	1e03      	subs	r3, r0, #0
 800541c:	d003      	beq.n	8005426 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <xPortSysTickHandler+0x30>)
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	0552      	lsls	r2, r2, #21
 8005424:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f7ff ffc1 	bl	80053b0 <vClearInterruptMaskFromISR>
}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	46bd      	mov	sp, r7
 8005432:	b002      	add	sp, #8
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <vPortSetupTimerInterrupt+0x38>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <vPortSetupTimerInterrupt+0x3c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	22fa      	movs	r2, #250	; 0xfa
 8005452:	0091      	lsls	r1, r2, #2
 8005454:	0018      	movs	r0, r3
 8005456:	f7fa fe57 	bl	8000108 <__udivsi3>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <vPortSetupTimerInterrupt+0x40>)
 8005460:	3a01      	subs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005466:	2207      	movs	r2, #7
 8005468:	601a      	str	r2, [r3, #0]
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	e000e010 	.word	0xe000e010
 8005474:	e000e018 	.word	0xe000e018
 8005478:	20000000 	.word	0x20000000
 800547c:	e000e014 	.word	0xe000e014

08005480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800548c:	f7fe ff5e 	bl	800434c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005490:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <pvPortMalloc+0x140>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005498:	f000 f8ec 	bl	8005674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800549c:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <pvPortMalloc+0x144>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4013      	ands	r3, r2
 80054a4:	d000      	beq.n	80054a8 <pvPortMalloc+0x28>
 80054a6:	e07e      	b.n	80055a6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d012      	beq.n	80054d4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80054ae:	2208      	movs	r2, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	189b      	adds	r3, r3, r2
 80054b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2207      	movs	r2, #7
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00a      	beq.n	80054d4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2207      	movs	r2, #7
 80054c2:	4393      	bics	r3, r2
 80054c4:	3308      	adds	r3, #8
 80054c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2207      	movs	r2, #7
 80054cc:	4013      	ands	r3, r2
 80054ce:	d001      	beq.n	80054d4 <pvPortMalloc+0x54>
 80054d0:	b672      	cpsid	i
 80054d2:	e7fe      	b.n	80054d2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d065      	beq.n	80055a6 <pvPortMalloc+0x126>
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <pvPortMalloc+0x148>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d860      	bhi.n	80055a6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054e4:	4b39      	ldr	r3, [pc, #228]	; (80055cc <pvPortMalloc+0x14c>)
 80054e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80054e8:	4b38      	ldr	r3, [pc, #224]	; (80055cc <pvPortMalloc+0x14c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ee:	e004      	b.n	80054fa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d903      	bls.n	800550c <pvPortMalloc+0x8c>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f1      	bne.n	80054f0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800550c:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <pvPortMalloc+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	429a      	cmp	r2, r3
 8005514:	d047      	beq.n	80055a6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2208      	movs	r2, #8
 800551c:	189b      	adds	r3, r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	2308      	movs	r3, #8
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	429a      	cmp	r2, r3
 8005536:	d916      	bls.n	8005566 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2207      	movs	r2, #7
 8005544:	4013      	ands	r3, r2
 8005546:	d001      	beq.n	800554c <pvPortMalloc+0xcc>
 8005548:	b672      	cpsid	i
 800554a:	e7fe      	b.n	800554a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1ad2      	subs	r2, r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	0018      	movs	r0, r3
 8005562:	f000 f8e7 	bl	8005734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <pvPortMalloc+0x148>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <pvPortMalloc+0x148>)
 8005572:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005574:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <pvPortMalloc+0x148>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <pvPortMalloc+0x150>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d203      	bcs.n	8005588 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <pvPortMalloc+0x148>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <pvPortMalloc+0x150>)
 8005586:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <pvPortMalloc+0x144>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	431a      	orrs	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <pvPortMalloc+0x154>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <pvPortMalloc+0x154>)
 80055a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055a6:	f7fe fedd 	bl	8004364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2207      	movs	r2, #7
 80055ae:	4013      	ands	r3, r2
 80055b0:	d001      	beq.n	80055b6 <pvPortMalloc+0x136>
 80055b2:	b672      	cpsid	i
 80055b4:	e7fe      	b.n	80055b4 <pvPortMalloc+0x134>
	return pvReturn;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b006      	add	sp, #24
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20001b30 	.word	0x20001b30
 80055c4:	20001b44 	.word	0x20001b44
 80055c8:	20001b34 	.word	0x20001b34
 80055cc:	20001b28 	.word	0x20001b28
 80055d0:	20001b38 	.word	0x20001b38
 80055d4:	20001b3c 	.word	0x20001b3c

080055d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d03a      	beq.n	8005660 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ea:	2308      	movs	r3, #8
 80055ec:	425b      	negs	r3, r3
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	18d3      	adds	r3, r2, r3
 80055f2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <vPortFree+0x90>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4013      	ands	r3, r2
 8005602:	d101      	bne.n	8005608 <vPortFree+0x30>
 8005604:	b672      	cpsid	i
 8005606:	e7fe      	b.n	8005606 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <vPortFree+0x3c>
 8005610:	b672      	cpsid	i
 8005612:	e7fe      	b.n	8005612 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4b13      	ldr	r3, [pc, #76]	; (8005668 <vPortFree+0x90>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4013      	ands	r3, r2
 800561e:	d01f      	beq.n	8005660 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11b      	bne.n	8005660 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <vPortFree+0x90>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005638:	f7fe fe88 	bl	800434c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <vPortFree+0x94>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	18d2      	adds	r2, r2, r3
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <vPortFree+0x94>)
 8005648:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 f871 	bl	8005734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <vPortFree+0x98>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <vPortFree+0x98>)
 800565a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800565c:	f7fe fe82 	bl	8004364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b004      	add	sp, #16
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20001b44 	.word	0x20001b44
 800566c:	20001b34 	.word	0x20001b34
 8005670:	20001b40 	.word	0x20001b40

08005674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800567a:	23c0      	movs	r3, #192	; 0xc0
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005680:	4b26      	ldr	r3, [pc, #152]	; (800571c <prvHeapInit+0xa8>)
 8005682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2207      	movs	r2, #7
 8005688:	4013      	ands	r3, r2
 800568a:	d00c      	beq.n	80056a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3307      	adds	r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2207      	movs	r2, #7
 8005696:	4393      	bics	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <prvHeapInit+0xa8>)
 80056a2:	18d3      	adds	r3, r2, r3
 80056a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <prvHeapInit+0xac>)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <prvHeapInit+0xac>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	18d3      	adds	r3, r2, r3
 80056bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056be:	2208      	movs	r2, #8
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2207      	movs	r2, #7
 80056ca:	4393      	bics	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <prvHeapInit+0xb0>)
 80056d2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <prvHeapInit+0xb0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <prvHeapInit+0xb0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <prvHeapInit+0xb0>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvHeapInit+0xb4>)
 8005700:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <prvHeapInit+0xb8>)
 8005708:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <prvHeapInit+0xbc>)
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	0612      	lsls	r2, r2, #24
 8005710:	601a      	str	r2, [r3, #0]
}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b004      	add	sp, #16
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20000f28 	.word	0x20000f28
 8005720:	20001b28 	.word	0x20001b28
 8005724:	20001b30 	.word	0x20001b30
 8005728:	20001b38 	.word	0x20001b38
 800572c:	20001b34 	.word	0x20001b34
 8005730:	20001b44 	.word	0x20001b44

08005734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800573c:	4b27      	ldr	r3, [pc, #156]	; (80057dc <prvInsertBlockIntoFreeList+0xa8>)
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e002      	b.n	8005748 <prvInsertBlockIntoFreeList+0x14>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d8f7      	bhi.n	8005742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	18d3      	adds	r3, r2, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d108      	bne.n	8005776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	18d2      	adds	r2, r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	18d2      	adds	r2, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d118      	bne.n	80057bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <prvInsertBlockIntoFreeList+0xac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d00d      	beq.n	80057b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	18d2      	adds	r2, r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e008      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <prvInsertBlockIntoFreeList+0xac>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d002      	beq.n	80057d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b004      	add	sp, #16
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	20001b28 	.word	0x20001b28
 80057e0:	20001b30 	.word	0x20001b30

080057e4 <memset>:
 80057e4:	0003      	movs	r3, r0
 80057e6:	1882      	adds	r2, r0, r2
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d100      	bne.n	80057ee <memset+0xa>
 80057ec:	4770      	bx	lr
 80057ee:	7019      	strb	r1, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	e7f9      	b.n	80057e8 <memset+0x4>

080057f4 <_reclaim_reent>:
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <_reclaim_reent+0xb8>)
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	0004      	movs	r4, r0
 80057fc:	4283      	cmp	r3, r0
 80057fe:	d042      	beq.n	8005886 <_reclaim_reent+0x92>
 8005800:	69c3      	ldr	r3, [r0, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <_reclaim_reent+0x28>
 8005806:	2500      	movs	r5, #0
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	42ab      	cmp	r3, r5
 800580c:	d140      	bne.n	8005890 <_reclaim_reent+0x9c>
 800580e:	69e3      	ldr	r3, [r4, #28]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	2900      	cmp	r1, #0
 8005814:	d002      	beq.n	800581c <_reclaim_reent+0x28>
 8005816:	0020      	movs	r0, r4
 8005818:	f000 f87a 	bl	8005910 <_free_r>
 800581c:	6961      	ldr	r1, [r4, #20]
 800581e:	2900      	cmp	r1, #0
 8005820:	d002      	beq.n	8005828 <_reclaim_reent+0x34>
 8005822:	0020      	movs	r0, r4
 8005824:	f000 f874 	bl	8005910 <_free_r>
 8005828:	69e1      	ldr	r1, [r4, #28]
 800582a:	2900      	cmp	r1, #0
 800582c:	d002      	beq.n	8005834 <_reclaim_reent+0x40>
 800582e:	0020      	movs	r0, r4
 8005830:	f000 f86e 	bl	8005910 <_free_r>
 8005834:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005836:	2900      	cmp	r1, #0
 8005838:	d002      	beq.n	8005840 <_reclaim_reent+0x4c>
 800583a:	0020      	movs	r0, r4
 800583c:	f000 f868 	bl	8005910 <_free_r>
 8005840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005842:	2900      	cmp	r1, #0
 8005844:	d002      	beq.n	800584c <_reclaim_reent+0x58>
 8005846:	0020      	movs	r0, r4
 8005848:	f000 f862 	bl	8005910 <_free_r>
 800584c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800584e:	2900      	cmp	r1, #0
 8005850:	d002      	beq.n	8005858 <_reclaim_reent+0x64>
 8005852:	0020      	movs	r0, r4
 8005854:	f000 f85c 	bl	8005910 <_free_r>
 8005858:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800585a:	2900      	cmp	r1, #0
 800585c:	d002      	beq.n	8005864 <_reclaim_reent+0x70>
 800585e:	0020      	movs	r0, r4
 8005860:	f000 f856 	bl	8005910 <_free_r>
 8005864:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005866:	2900      	cmp	r1, #0
 8005868:	d002      	beq.n	8005870 <_reclaim_reent+0x7c>
 800586a:	0020      	movs	r0, r4
 800586c:	f000 f850 	bl	8005910 <_free_r>
 8005870:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005872:	2900      	cmp	r1, #0
 8005874:	d002      	beq.n	800587c <_reclaim_reent+0x88>
 8005876:	0020      	movs	r0, r4
 8005878:	f000 f84a 	bl	8005910 <_free_r>
 800587c:	6a23      	ldr	r3, [r4, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <_reclaim_reent+0x92>
 8005882:	0020      	movs	r0, r4
 8005884:	4798      	blx	r3
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	5949      	ldr	r1, [r1, r5]
 800588a:	2900      	cmp	r1, #0
 800588c:	d108      	bne.n	80058a0 <_reclaim_reent+0xac>
 800588e:	3504      	adds	r5, #4
 8005890:	69e3      	ldr	r3, [r4, #28]
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	2d80      	cmp	r5, #128	; 0x80
 8005896:	d1f7      	bne.n	8005888 <_reclaim_reent+0x94>
 8005898:	0020      	movs	r0, r4
 800589a:	f000 f839 	bl	8005910 <_free_r>
 800589e:	e7b6      	b.n	800580e <_reclaim_reent+0x1a>
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	0020      	movs	r0, r4
 80058a4:	f000 f834 	bl	8005910 <_free_r>
 80058a8:	0031      	movs	r1, r6
 80058aa:	e7ee      	b.n	800588a <_reclaim_reent+0x96>
 80058ac:	2000005c 	.word	0x2000005c

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	2600      	movs	r6, #0
 80058b4:	4c0c      	ldr	r4, [pc, #48]	; (80058e8 <__libc_init_array+0x38>)
 80058b6:	4d0d      	ldr	r5, [pc, #52]	; (80058ec <__libc_init_array+0x3c>)
 80058b8:	1b64      	subs	r4, r4, r5
 80058ba:	10a4      	asrs	r4, r4, #2
 80058bc:	42a6      	cmp	r6, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	2600      	movs	r6, #0
 80058c2:	f000 f87f 	bl	80059c4 <_init>
 80058c6:	4c0a      	ldr	r4, [pc, #40]	; (80058f0 <__libc_init_array+0x40>)
 80058c8:	4d0a      	ldr	r5, [pc, #40]	; (80058f4 <__libc_init_array+0x44>)
 80058ca:	1b64      	subs	r4, r4, r5
 80058cc:	10a4      	asrs	r4, r4, #2
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	00b3      	lsls	r3, r6, #2
 80058d6:	58eb      	ldr	r3, [r5, r3]
 80058d8:	4798      	blx	r3
 80058da:	3601      	adds	r6, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	00b3      	lsls	r3, r6, #2
 80058e0:	58eb      	ldr	r3, [r5, r3]
 80058e2:	4798      	blx	r3
 80058e4:	3601      	adds	r6, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	08005adc 	.word	0x08005adc
 80058ec:	08005adc 	.word	0x08005adc
 80058f0:	08005ae0 	.word	0x08005ae0
 80058f4:	08005adc 	.word	0x08005adc

080058f8 <__retarget_lock_acquire_recursive>:
 80058f8:	4770      	bx	lr

080058fa <__retarget_lock_release_recursive>:
 80058fa:	4770      	bx	lr

080058fc <memcpy>:
 80058fc:	2300      	movs	r3, #0
 80058fe:	b510      	push	{r4, lr}
 8005900:	429a      	cmp	r2, r3
 8005902:	d100      	bne.n	8005906 <memcpy+0xa>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	5ccc      	ldrb	r4, [r1, r3]
 8005908:	54c4      	strb	r4, [r0, r3]
 800590a:	3301      	adds	r3, #1
 800590c:	e7f8      	b.n	8005900 <memcpy+0x4>
	...

08005910 <_free_r>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	0005      	movs	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d010      	beq.n	800593a <_free_r+0x2a>
 8005918:	1f0c      	subs	r4, r1, #4
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	da00      	bge.n	8005922 <_free_r+0x12>
 8005920:	18e4      	adds	r4, r4, r3
 8005922:	0028      	movs	r0, r5
 8005924:	f000 f83e 	bl	80059a4 <__malloc_lock>
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <_free_r+0x90>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <_free_r+0x2c>
 8005930:	6063      	str	r3, [r4, #4]
 8005932:	6014      	str	r4, [r2, #0]
 8005934:	0028      	movs	r0, r5
 8005936:	f000 f83d 	bl	80059b4 <__malloc_unlock>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	1821      	adds	r1, r4, r0
 8005944:	428b      	cmp	r3, r1
 8005946:	d1f3      	bne.n	8005930 <_free_r+0x20>
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	1809      	adds	r1, r1, r0
 800594e:	6021      	str	r1, [r4, #0]
 8005950:	e7ee      	b.n	8005930 <_free_r+0x20>
 8005952:	001a      	movs	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <_free_r+0x4e>
 800595a:	42a3      	cmp	r3, r4
 800595c:	d9f9      	bls.n	8005952 <_free_r+0x42>
 800595e:	6811      	ldr	r1, [r2, #0]
 8005960:	1850      	adds	r0, r2, r1
 8005962:	42a0      	cmp	r0, r4
 8005964:	d10b      	bne.n	800597e <_free_r+0x6e>
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1809      	adds	r1, r1, r0
 800596a:	1850      	adds	r0, r2, r1
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	4283      	cmp	r3, r0
 8005970:	d1e0      	bne.n	8005934 <_free_r+0x24>
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	1841      	adds	r1, r0, r1
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7da      	b.n	8005934 <_free_r+0x24>
 800597e:	42a0      	cmp	r0, r4
 8005980:	d902      	bls.n	8005988 <_free_r+0x78>
 8005982:	230c      	movs	r3, #12
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	e7d5      	b.n	8005934 <_free_r+0x24>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	1821      	adds	r1, r4, r0
 800598c:	428b      	cmp	r3, r1
 800598e:	d103      	bne.n	8005998 <_free_r+0x88>
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	1809      	adds	r1, r1, r0
 8005996:	6021      	str	r1, [r4, #0]
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	6054      	str	r4, [r2, #4]
 800599c:	e7ca      	b.n	8005934 <_free_r+0x24>
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	20001c84 	.word	0x20001c84

080059a4 <__malloc_lock>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4802      	ldr	r0, [pc, #8]	; (80059b0 <__malloc_lock+0xc>)
 80059a8:	f7ff ffa6 	bl	80058f8 <__retarget_lock_acquire_recursive>
 80059ac:	bd10      	pop	{r4, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	20001c80 	.word	0x20001c80

080059b4 <__malloc_unlock>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4802      	ldr	r0, [pc, #8]	; (80059c0 <__malloc_unlock+0xc>)
 80059b8:	f7ff ff9f 	bl	80058fa <__retarget_lock_release_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	20001c80 	.word	0x20001c80

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
