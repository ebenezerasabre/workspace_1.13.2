
Butt_led_uart_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  4 .ARM          00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ac  080005ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005b0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001d2  00000000  00000000  0001061b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000168  00000000  00000000  000107ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000052  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000107e  00000000  00000000  00010a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000050f  00000000  00000000  00011aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004368  00000000  00000000  00011faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000134  00000000  00000000  00016318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0001644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000590 	.word	0x08000590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000590 	.word	0x08000590

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
char usart2_read(void);
void user_led_setup(char key);

char key;
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	int btn_state_cntr = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]

	

	/*Clock configuration*/
	// Enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 800022a:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <main+0xa0>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <main+0xa0>)
 8000230:	2101      	movs	r1, #1
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]

	// enable clock access to GPIOC
	RCC_IOPENR_R |= GPIOCEN;
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <main+0xa0>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <main+0xa0>)
 800023c:	2104      	movs	r1, #4
 800023e:	430a      	orrs	r2, r1
 8000240:	601a      	str	r2, [r3, #0]

	// // enable clock access to usart2
	RCC_APBENR1_R |= USART2EN;
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <main+0xa4>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0xa4>)
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	0289      	lsls	r1, r1, #10
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]


	// configure LED as out put pin
	GPIOA_MODER_R |= (1U<<10);
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	23a0      	movs	r3, #160	; 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	00c9      	lsls	r1, r1, #3
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R &= ~(1U<<11);
 8000262:	23a0      	movs	r3, #160	; 0xa0
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	23a0      	movs	r3, #160	; 0xa0
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	4916      	ldr	r1, [pc, #88]	; (80002c8 <main+0xa8>)
 800026e:	400a      	ands	r2, r1
 8000270:	601a      	str	r2, [r3, #0]


	/*Configure user_button as input pin*/
	GPIOC_MODE_R &= ~(1U<<26);
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <main+0xac>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <main+0xac>)
 8000278:	4915      	ldr	r1, [pc, #84]	; (80002d0 <main+0xb0>)
 800027a:	400a      	ands	r2, r1
 800027c:	601a      	str	r2, [r3, #0]
	GPIOC_MODE_R &= ~(1U<<27);
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <main+0xac>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <main+0xac>)
 8000284:	4913      	ldr	r1, [pc, #76]	; (80002d4 <main+0xb4>)
 8000286:	400a      	ands	r2, r1
 8000288:	601a      	str	r2, [r3, #0]

	usart2_init();
 800028a:	f000 f84b 	bl	8000324 <usart2_init>


    /* Loop forever */
	for(;;){

		button_state(&btn_state_cntr);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f823 	bl	80002dc <button_state>
		// usart2_write('Y');


		key = usart2_read();
 8000296:	f000 f8f9 	bl	800048c <usart2_read>
 800029a:	0003      	movs	r3, r0
 800029c:	001a      	movs	r2, r3
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0xb8>)
 80002a0:	701a      	strb	r2, [r3, #0]
		user_led_setup(key);
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0xb8>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 f902 	bl	80004b0 <user_led_setup>
		// usart2_write(usart2_read());
		if(key){
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <main+0xb8>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0ec      	beq.n	800028e <main+0x6e>
			usart2_write(key);
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0xb8>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f8b5 	bl	8000428 <usart2_write>
		button_state(&btn_state_cntr);
 80002be:	e7e6      	b.n	800028e <main+0x6e>
 80002c0:	40021034 	.word	0x40021034
 80002c4:	4002103c 	.word	0x4002103c
 80002c8:	fffff7ff 	.word	0xfffff7ff
 80002cc:	50000800 	.word	0x50000800
 80002d0:	fbffffff 	.word	0xfbffffff
 80002d4:	f7ffffff 	.word	0xf7ffffff
 80002d8:	2000001c 	.word	0x2000001c

080002dc <button_state>:
	
}



void button_state(int * btn_state_cntr){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	if(!(GPIOC_IDR_R & USER_BUTTON)){
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <button_state+0x3c>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	019b      	lsls	r3, r3, #6
 80002ec:	4013      	ands	r3, r2
 80002ee:	d10f      	bne.n	8000310 <button_state+0x34>
			GPIOA_ODR_R ^= PIN5; 
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <button_state+0x40>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <button_state+0x40>)
 80002f6:	2120      	movs	r1, #32
 80002f8:	404a      	eors	r2, r1
 80002fa:	601a      	str	r2, [r3, #0]
		 for(int x=0; x<100000; x++);	// add delay
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e002      	b.n	8000308 <button_state+0x2c>
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	3301      	adds	r3, #1
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <button_state+0x44>)
 800030c:	4293      	cmp	r3, r2
 800030e:	ddf8      	ble.n	8000302 <button_state+0x26>
	} 
	
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b004      	add	sp, #16
 8000316:	bd80      	pop	{r7, pc}
 8000318:	50000810 	.word	0x50000810
 800031c:	50000014 	.word	0x50000014
 8000320:	0001869f 	.word	0x0001869f

08000324 <usart2_init>:

void usart2_init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	// to know the pin the usart you are using is connected
	
	// eg PA2 usartx AF1

	// configure gpioa2 tx pin moder to alternate function	
	GPIOA_MODER_R &= ~(1U<<4);
 8000328:	23a0      	movs	r3, #160	; 0xa0
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	2110      	movs	r1, #16
 8000334:	438a      	bics	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<5);
 8000338:	23a0      	movs	r3, #160	; 0xa0
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	23a0      	movs	r3, #160	; 0xa0
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	2120      	movs	r1, #32
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]

	// set alternate function type to AF1: GPIOA_AFR
	// configure uart 8-11
	GPIOA_AFRL_R |= (1U<<8);
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <usart2_init+0xe0>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <usart2_init+0xe0>)
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	0049      	lsls	r1, r1, #1
 8000352:	430a      	orrs	r2, r1
 8000354:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<9);
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <usart2_init+0xe0>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <usart2_init+0xe0>)
 800035c:	492a      	ldr	r1, [pc, #168]	; (8000408 <usart2_init+0xe4>)
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<10);
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <usart2_init+0xe0>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <usart2_init+0xe0>)
 8000368:	4928      	ldr	r1, [pc, #160]	; (800040c <usart2_init+0xe8>)
 800036a:	400a      	ands	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<11);
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <usart2_init+0xe0>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <usart2_init+0xe0>)
 8000374:	4926      	ldr	r1, [pc, #152]	; (8000410 <usart2_init+0xec>)
 8000376:	400a      	ands	r2, r1
 8000378:	601a      	str	r2, [r3, #0]


	// configure gpioa3 that pin moder to alternate function	
	GPIOA_MODER_R &= ~(1U<<6);
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	23a0      	movs	r3, #160	; 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	438a      	bics	r2, r1
 8000388:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<7);
 800038a:	23a0      	movs	r3, #160	; 0xa0
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	430a      	orrs	r2, r1
 8000398:	601a      	str	r2, [r3, #0]

	// set alternate function type to AF1: GPIOA_AFR
	// configure uart 8-11
	GPIOA_AFRL_R |= (1U<<12);
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <usart2_init+0xe0>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <usart2_init+0xe0>)
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	0149      	lsls	r1, r1, #5
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<13);
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <usart2_init+0xe0>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <usart2_init+0xe0>)
 80003ae:	4919      	ldr	r1, [pc, #100]	; (8000414 <usart2_init+0xf0>)
 80003b0:	400a      	ands	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<14);
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <usart2_init+0xe0>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <usart2_init+0xe0>)
 80003ba:	4917      	ldr	r1, [pc, #92]	; (8000418 <usart2_init+0xf4>)
 80003bc:	400a      	ands	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL_R &= ~(1U<<15);
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <usart2_init+0xe0>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <usart2_init+0xe0>)
 80003c6:	4915      	ldr	r1, [pc, #84]	; (800041c <usart2_init+0xf8>)
 80003c8:	400a      	ands	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]

	// configure usart2 baudrate
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80003cc:	23e1      	movs	r3, #225	; 0xe1
 80003ce:	025b      	lsls	r3, r3, #9
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <usart2_init+0xfc>)
 80003d2:	0019      	movs	r1, r3
 80003d4:	0010      	movs	r0, r2
 80003d6:	f000 f83f 	bl	8000458 <uart_set_baudrate>


	// set usart tx 
	USART2_CR1_R |= USART2_CR1_TE;
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <usart2_init+0x100>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <usart2_init+0x100>)
 80003e0:	2108      	movs	r1, #8
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]

	//set usart rx
	USART2_CR1_R |= USART2_CR1_RE;
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usart2_init+0x100>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <usart2_init+0x100>)
 80003ec:	2104      	movs	r1, #4
 80003ee:	430a      	orrs	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]

	// enable usart module
	USART2_CR1_R |= USART2_CR1_UE;
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <usart2_init+0x100>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <usart2_init+0x100>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]


}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	50000020 	.word	0x50000020
 8000408:	fffffdff 	.word	0xfffffdff
 800040c:	fffffbff 	.word	0xfffffbff
 8000410:	fffff7ff 	.word	0xfffff7ff
 8000414:	ffffdfff 	.word	0xffffdfff
 8000418:	ffffbfff 	.word	0xffffbfff
 800041c:	ffff7fff 	.word	0xffff7fff
 8000420:	00f42400 	.word	0x00f42400
 8000424:	40004400 	.word	0x40004400

08000428 <usart2_write>:


void usart2_write(int ch){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while(!(USART2_ISR_R & USART2_ISR_TXE));
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <usart2_write+0x28>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	4013      	ands	r3, r2
 800043a:	d0fa      	beq.n	8000432 <usart2_write+0xa>

	// write to transmit data_register
	USART2_TDR_R = (ch & 0xFF);
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <usart2_write+0x2c>)
 8000440:	21ff      	movs	r1, #255	; 0xff
 8000442:	400a      	ands	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	4000441c 	.word	0x4000441c
 8000454:	40004428 	.word	0x40004428

08000458 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baud_rate){
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	// USARTx->BRR = ((periph_clk + (baud_rate/2U)) / baud_rate);
	USART2_BRR_R |= ((periph_clk + (baud_rate/2U)) / baud_rate);
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <uart_set_baudrate+0x30>)
 8000464:	681c      	ldr	r4, [r3, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	085a      	lsrs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	18d3      	adds	r3, r2, r3
 800046e:	6839      	ldr	r1, [r7, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff fe49 	bl	8000108 <__udivsi3>
 8000476:	0003      	movs	r3, r0
 8000478:	001a      	movs	r2, r3
 800047a:	4b03      	ldr	r3, [pc, #12]	; (8000488 <uart_set_baudrate+0x30>)
 800047c:	4322      	orrs	r2, r4
 800047e:	601a      	str	r2, [r3, #0]
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b003      	add	sp, #12
 8000486:	bd90      	pop	{r4, r7, pc}
 8000488:	4000440c 	.word	0x4000440c

0800048c <usart2_read>:

char usart2_read(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	while(!(USART2_ISR_R & USART2_ISR_RXE))
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <usart2_read+0x1c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2220      	movs	r2, #32
 8000498:	4013      	ands	r3, r2
 800049a:	d0fa      	beq.n	8000492 <usart2_read+0x6>
		;
	// return USART2_TDR_R & 0xFF;
	return USART2_RDR_R;
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <usart2_read+0x20>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	b2db      	uxtb	r3, r3
}
 80004a2:	0018      	movs	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	4000441c 	.word	0x4000441c
 80004ac:	40004424 	.word	0x40004424

080004b0 <user_led_setup>:

void user_led_setup(char key){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	701a      	strb	r2, [r3, #0]
	if(key == 'y') GPIOA_ODR_R |= LED_PIN;
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b79      	cmp	r3, #121	; 0x79
 80004c2:	d106      	bne.n	80004d2 <user_led_setup+0x22>
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <user_led_setup+0x40>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <user_led_setup+0x40>)
 80004ca:	2120      	movs	r1, #32
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
	else if(key == 'n') GPIOA_ODR_R &= ~LED_PIN;
	
}
 80004d0:	e009      	b.n	80004e6 <user_led_setup+0x36>
	else if(key == 'n') GPIOA_ODR_R &= ~LED_PIN;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b6e      	cmp	r3, #110	; 0x6e
 80004d8:	d105      	bne.n	80004e6 <user_led_setup+0x36>
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <user_led_setup+0x40>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <user_led_setup+0x40>)
 80004e0:	2120      	movs	r1, #32
 80004e2:	438a      	bics	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	50000014 	.word	0x50000014

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	e000      	b.n	80004fc <Reset_Handler+0x8>
 80004fa:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 f811 	bl	8000548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe7b 	bl	8000220 <main>

0800052a <LoopForever>:

LoopForever:
  b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000538:	080005b0 	.word	0x080005b0
  ldr r2, =_sbss
 800053c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000540:	20000020 	.word	0x20000020

08000544 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_COMP_IRQHandler>
	...

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2600      	movs	r6, #0
 800054c:	4c0c      	ldr	r4, [pc, #48]	; (8000580 <__libc_init_array+0x38>)
 800054e:	4d0d      	ldr	r5, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	42a6      	cmp	r6, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	2600      	movs	r6, #0
 800055a:	f000 f819 	bl	8000590 <_init>
 800055e:	4c0a      	ldr	r4, [pc, #40]	; (8000588 <__libc_init_array+0x40>)
 8000560:	4d0a      	ldr	r5, [pc, #40]	; (800058c <__libc_init_array+0x44>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	42a6      	cmp	r6, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	00b3      	lsls	r3, r6, #2
 800056e:	58eb      	ldr	r3, [r5, r3]
 8000570:	4798      	blx	r3
 8000572:	3601      	adds	r6, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	00b3      	lsls	r3, r6, #2
 8000578:	58eb      	ldr	r3, [r5, r3]
 800057a:	4798      	blx	r3
 800057c:	3601      	adds	r6, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	080005a8 	.word	0x080005a8
 8000584:	080005a8 	.word	0x080005a8
 8000588:	080005ac 	.word	0x080005ac
 800058c:	080005a8 	.word	0x080005a8

08000590 <_init>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr

0800059c <_fini>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr
