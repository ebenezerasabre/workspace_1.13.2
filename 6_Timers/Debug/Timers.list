
Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001c9  00000000  00000000  00010433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000108  00000000  00000000  000105fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00010708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000079  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d1d  00000000  00000000  00010839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000714  00000000  00000000  00012556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000811b  00000000  00000000  00012c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000158  00000000  00000000  0001ad88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0001aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003a8 	.word	0x080003a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080003a8 	.word	0x080003a8

08000108 <pa0_adc_init>:
// find pin adc is connected to: find adc. look for additional functions in table
// Pin assignment and description

//using ADC_IN0, PA0

void pa0_adc_init(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 800010c:	4b22      	ldr	r3, [pc, #136]	; (8000198 <pa0_adc_init+0x90>)
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	4b21      	ldr	r3, [pc, #132]	; (8000198 <pa0_adc_init+0x90>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]

	// set mode of PA0 to analog
	GPIOA_MODER_R |= (1UL<0);
 8000118:	23a0      	movs	r3, #160	; 0xa0
 800011a:	05da      	lsls	r2, r3, #23
 800011c:	23a0      	movs	r3, #160	; 0xa0
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	6812      	ldr	r2, [r2, #0]
 8000122:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<1);
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2102      	movs	r1, #2
 8000130:	430a      	orrs	r2, r1
 8000132:	601a      	str	r2, [r3, #0]

	// set mode of PA1 to analog
	GPIOA_MODER_R |= (1UL<2);
 8000134:	23a0      	movs	r3, #160	; 0xa0
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	681a      	ldr	r2, [r3, #0]
 800013a:	23a0      	movs	r3, #160	; 0xa0
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	2101      	movs	r1, #1
 8000140:	430a      	orrs	r2, r1
 8000142:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<3);
 8000144:	23a0      	movs	r3, #160	; 0xa0
 8000146:	05db      	lsls	r3, r3, #23
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	23a0      	movs	r3, #160	; 0xa0
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	2108      	movs	r1, #8
 8000150:	430a      	orrs	r2, r1
 8000152:	601a      	str	r2, [r3, #0]

	// enable clock access to adc module
	RCC_APBENR2_R 	|= ADCEN;
 8000154:	4b11      	ldr	r3, [pc, #68]	; (800019c <pa0_adc_init+0x94>)
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	4b10      	ldr	r3, [pc, #64]	; (800019c <pa0_adc_init+0x94>)
 800015a:	2180      	movs	r1, #128	; 0x80
 800015c:	0349      	lsls	r1, r1, #13
 800015e:	430a      	orrs	r2, r1
 8000160:	601a      	str	r2, [r3, #0]
//	Analog-to-digital converter (ADC)
	/*Following guide*/


	// data resolution
	ADC_CFGR1_R &= ~(1U<<3);
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <pa0_adc_init+0x98>)
 8000164:	681a      	ldr	r2, [r3, #0]
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <pa0_adc_init+0x98>)
 8000168:	2108      	movs	r1, #8
 800016a:	438a      	bics	r2, r1
 800016c:	601a      	str	r2, [r3, #0]
	ADC_CFGR1_R |= (1U<<4);
 800016e:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <pa0_adc_init+0x98>)
 8000170:	681a      	ldr	r2, [r3, #0]
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <pa0_adc_init+0x98>)
 8000174:	2110      	movs	r1, #16
 8000176:	430a      	orrs	r2, r1
 8000178:	601a      	str	r2, [r3, #0]
	// conversion sequence length

//	ADC_CFGR1_R &= ~ADC_CHSELRMOD;  //~(1U<<21); //ADC_CHSELRMOD;

//	ADC_CHSELR_R |= (1U<<0); // CH1 pa0
	ADC_CHSELR_R |= (1U<<1); // CH1 pa1
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <pa0_adc_init+0x9c>)
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <pa0_adc_init+0x9c>)
 8000180:	2102      	movs	r1, #2
 8000182:	430a      	orrs	r2, r1
 8000184:	601a      	str	r2, [r3, #0]


	//enable adc module
	ADC_CR_R |= ADC_ADEN;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <pa0_adc_init+0xa0>)
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <pa0_adc_init+0xa0>)
 800018c:	2101      	movs	r1, #1
 800018e:	430a      	orrs	r2, r1
 8000190:	601a      	str	r2, [r3, #0]

}
 8000192:	46c0      	nop			; (mov r8, r8)
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40021034 	.word	0x40021034
 800019c:	40021040 	.word	0x40021040
 80001a0:	4001240c 	.word	0x4001240c
 80001a4:	40012428 	.word	0x40012428
 80001a8:	40012408 	.word	0x40012408

080001ac <adc_cnvrsn>:
	while(!(ADC_ISR_R & ADC_ISR_EOC)){}
	return ADC_DR_R;
}


void adc_cnvrsn(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	// Continuous conversion mode
	ADC_CFGR1_R |= (1U<<13);
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <adc_cnvrsn+0x24>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <adc_cnvrsn+0x24>)
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	0189      	lsls	r1, r1, #6
 80001ba:	430a      	orrs	r2, r1
 80001bc:	601a      	str	r2, [r3, #0]

	// conversion sequence start
	ADC_CR_R |= ADC_ADSTART;
 80001be:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <adc_cnvrsn+0x28>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <adc_cnvrsn+0x28>)
 80001c4:	2104      	movs	r1, #4
 80001c6:	430a      	orrs	r2, r1
 80001c8:	601a      	str	r2, [r3, #0]

}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	4001240c 	.word	0x4001240c
 80001d4:	40012408 	.word	0x40012408

080001d8 <gpio_init>:



void gpio_init(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 80001dc:	4b19      	ldr	r3, [pc, #100]	; (8000244 <gpio_init+0x6c>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b18      	ldr	r3, [pc, #96]	; (8000244 <gpio_init+0x6c>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	430a      	orrs	r2, r1
 80001e6:	601a      	str	r2, [r3, #0]
	// set mode of pin to output
//	GPIOA_MODER_R |= (1U<<10);
//	GPIOA_MODER_R &= ~(1U<<11);

	// set PA5 to alternate function mode for TIM2 ouput compare
	GPIOA_MODER_R &= ~(1U<<10);
 80001e8:	23a0      	movs	r3, #160	; 0xa0
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	23a0      	movs	r3, #160	; 0xa0
 80001f0:	05db      	lsls	r3, r3, #23
 80001f2:	4915      	ldr	r1, [pc, #84]	; (8000248 <gpio_init+0x70>)
 80001f4:	400a      	ands	r2, r1
 80001f6:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<11);
 80001f8:	23a0      	movs	r3, #160	; 0xa0
 80001fa:	05db      	lsls	r3, r3, #23
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	23a0      	movs	r3, #160	; 0xa0
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	2180      	movs	r1, #128	; 0x80
 8000204:	0109      	lsls	r1, r1, #4
 8000206:	430a      	orrs	r2, r1
 8000208:	601a      	str	r2, [r3, #0]

	// set alternate function type, AF2
	GPIOA_AFRL &= ~(1U<<20);
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <gpio_init+0x74>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <gpio_init+0x74>)
 8000210:	490f      	ldr	r1, [pc, #60]	; (8000250 <gpio_init+0x78>)
 8000212:	400a      	ands	r2, r1
 8000214:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL |= (1U<<21);
 8000216:	4b0d      	ldr	r3, [pc, #52]	; (800024c <gpio_init+0x74>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <gpio_init+0x74>)
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	0389      	lsls	r1, r1, #14
 8000220:	430a      	orrs	r2, r1
 8000222:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL &= ~(1U<<22);
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <gpio_init+0x74>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <gpio_init+0x74>)
 800022a:	490a      	ldr	r1, [pc, #40]	; (8000254 <gpio_init+0x7c>)
 800022c:	400a      	ands	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
	GPIOA_AFRL &= ~(1U<<23);
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <gpio_init+0x74>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <gpio_init+0x74>)
 8000236:	4908      	ldr	r1, [pc, #32]	; (8000258 <gpio_init+0x80>)
 8000238:	400a      	ands	r2, r1
 800023a:	601a      	str	r2, [r3, #0]
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40021034 	.word	0x40021034
 8000248:	fffffbff 	.word	0xfffffbff
 800024c:	50000020 	.word	0x50000020
 8000250:	ffefffff 	.word	0xffefffff
 8000254:	ffbfffff 	.word	0xffbfffff
 8000258:	ff7fffff 	.word	0xff7fffff

0800025c <main>:

// function prototypes
void gpio_init(void);

int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	 pa0_adc_init();
 8000260:	f7ff ff52 	bl	8000108 <pa0_adc_init>
	 adc_cnvrsn();
 8000264:	f7ff ffa2 	bl	80001ac <adc_cnvrsn>
	 gpio_init();
 8000268:	f7ff ffb6 	bl	80001d8 <gpio_init>
//	 tim2_1hz_init();

	 tim2_pa5_output_compare();
 800026c:	f000 f802 	bl	8000274 <tim2_pa5_output_compare>

	while(1){
 8000270:	e7fe      	b.n	8000270 <main+0x14>
	...

08000274 <tim2_pa5_output_compare>:
	// enable timer
	TIM2_CR1 |=	CR1_CEN;

}

void tim2_pa5_output_compare(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	// enable clock access to tim2
	RCC_APBENR1 |= TIM2_EN;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <tim2_pa5_output_compare+0x74>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <tim2_pa5_output_compare+0x74>)
 800027e:	2101      	movs	r1, #1
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]

	// set  prescaler value
	TIM2_PSC	= 1600 -1;	// 16 000 000 / 1 600 = 10 000
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <tim2_pa5_output_compare+0x78>)
 8000286:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <tim2_pa5_output_compare+0x7c>)
 8000288:	601a      	str	r2, [r3, #0]

	//set auto-reload value
	TIM2_ARR = 10000 - 1;	// 10 000 / 10 000 = 1
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <tim2_pa5_output_compare+0x80>)
 800028c:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <tim2_pa5_output_compare+0x84>)
 800028e:	601a      	str	r2, [r3, #0]

	// set ouput compare toggle mode, OCM1
	TIM2_CCMR1 |= (1U<<4);
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <tim2_pa5_output_compare+0x88>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <tim2_pa5_output_compare+0x88>)
 8000296:	2110      	movs	r1, #16
 8000298:	430a      	orrs	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
	TIM2_CCMR1 |= (1U<<5);
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <tim2_pa5_output_compare+0x88>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <tim2_pa5_output_compare+0x88>)
 80002a2:	2120      	movs	r1, #32
 80002a4:	430a      	orrs	r2, r1
 80002a6:	601a      	str	r2, [r3, #0]
	TIM2_CCMR1 &= ~(1U<<6);
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <tim2_pa5_output_compare+0x88>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <tim2_pa5_output_compare+0x88>)
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	438a      	bics	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
	TIM2_CCMR1 &= ~(1U<<16);
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <tim2_pa5_output_compare+0x88>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <tim2_pa5_output_compare+0x88>)
 80002ba:	4911      	ldr	r1, [pc, #68]	; (8000300 <tim2_pa5_output_compare+0x8c>)
 80002bc:	400a      	ands	r2, r1
 80002be:	601a      	str	r2, [r3, #0]

	//capture/compare enable register
	// enable tim2 ch1 compare mode
	TIM2_CCER |= CCER_CC1E;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <tim2_pa5_output_compare+0x90>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <tim2_pa5_output_compare+0x90>)
 80002c6:	2101      	movs	r1, #1
 80002c8:	430a      	orrs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]

	// set PA5 to alternate function mode

	// clear counter
	TIM2_CNT	=	0;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <tim2_pa5_output_compare+0x94>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]

	// enable timer
	TIM2_CR1 |=	CR1_CEN;
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2101      	movs	r1, #1
 80002de:	430a      	orrs	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	4002103c 	.word	0x4002103c
 80002ec:	40000028 	.word	0x40000028
 80002f0:	0000063f 	.word	0x0000063f
 80002f4:	4000002c 	.word	0x4000002c
 80002f8:	0000270f 	.word	0x0000270f
 80002fc:	40000018 	.word	0x40000018
 8000300:	fffeffff 	.word	0xfffeffff
 8000304:	40000020 	.word	0x40000020
 8000308:	40000024 	.word	0x40000024

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	e000      	b.n	8000314 <Reset_Handler+0x8>
 8000312:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff8d 	bl	800025c <main>

08000342 <LoopForever>:

LoopForever:
  b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_COMP_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	2600      	movs	r6, #0
 8000364:	4c0c      	ldr	r4, [pc, #48]	; (8000398 <__libc_init_array+0x38>)
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	2600      	movs	r6, #0
 8000372:	f000 f819 	bl	80003a8 <_init>
 8000376:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <__libc_init_array+0x40>)
 8000378:	4d0a      	ldr	r5, [pc, #40]	; (80003a4 <__libc_init_array+0x44>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	00b3      	lsls	r3, r6, #2
 8000386:	58eb      	ldr	r3, [r5, r3]
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	00b3      	lsls	r3, r6, #2
 8000390:	58eb      	ldr	r3, [r5, r3]
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c0 	.word	0x080003c0

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
