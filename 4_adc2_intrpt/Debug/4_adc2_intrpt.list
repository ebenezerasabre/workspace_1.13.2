
4_adc2_intrpt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000324  0800032c  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000324  08000324  0001032c  2**0
                  CONTENTS
  4 .ARM          00000000  08000324  08000324  0001032c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000324  0800032c  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800032c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800032c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003db  00000000  00000000  00010397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f2  00000000  00000000  00010772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011900  00000000  00000000  00010a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cce  00000000  00000000  00022348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006343b  00000000  00000000  00023016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f8  00000000  00000000  00086454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0008654c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800030c 	.word	0x0800030c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800030c 	.word	0x0800030c

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	; 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	; (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000130:	46c0      	nop			; (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <pa0_adc_init>:
// find pin adc is connected to: find adc. look for additional functions in table
// Pin assignment and description

//using ADC_IN0, PA0

void pa0_adc_init(void){
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	RCC_IOPENR_R |= GPIOAEN;
 8000140:	4b27      	ldr	r3, [pc, #156]	; (80001e0 <pa0_adc_init+0xa4>)
 8000142:	681a      	ldr	r2, [r3, #0]
 8000144:	4b26      	ldr	r3, [pc, #152]	; (80001e0 <pa0_adc_init+0xa4>)
 8000146:	2101      	movs	r1, #1
 8000148:	430a      	orrs	r2, r1
 800014a:	601a      	str	r2, [r3, #0]

	// set mode of PA0 to analog
	GPIOA_MODER_R |= (1UL<0);
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05da      	lsls	r2, r3, #23
 8000150:	23a0      	movs	r3, #160	; 0xa0
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	6812      	ldr	r2, [r2, #0]
 8000156:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<1);
 8000158:	23a0      	movs	r3, #160	; 0xa0
 800015a:	05db      	lsls	r3, r3, #23
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	23a0      	movs	r3, #160	; 0xa0
 8000160:	05db      	lsls	r3, r3, #23
 8000162:	2102      	movs	r1, #2
 8000164:	430a      	orrs	r2, r1
 8000166:	601a      	str	r2, [r3, #0]

	// set mode of PA1 to analog
	GPIOA_MODER_R |= (1UL<2);
 8000168:	23a0      	movs	r3, #160	; 0xa0
 800016a:	05db      	lsls	r3, r3, #23
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	23a0      	movs	r3, #160	; 0xa0
 8000170:	05db      	lsls	r3, r3, #23
 8000172:	2101      	movs	r1, #1
 8000174:	430a      	orrs	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
	GPIOA_MODER_R |= (1U<<3);
 8000178:	23a0      	movs	r3, #160	; 0xa0
 800017a:	05db      	lsls	r3, r3, #23
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	23a0      	movs	r3, #160	; 0xa0
 8000180:	05db      	lsls	r3, r3, #23
 8000182:	2108      	movs	r1, #8
 8000184:	430a      	orrs	r2, r1
 8000186:	601a      	str	r2, [r3, #0]

	// enable clock access to adc module
	RCC_APBENR2_R 	|= ADCEN;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <pa0_adc_init+0xa8>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <pa0_adc_init+0xa8>)
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	0349      	lsls	r1, r1, #13
 8000192:	430a      	orrs	r2, r1
 8000194:	601a      	str	r2, [r3, #0]
//	Analog-to-digital converter (ADC)
	/*Following guide*/


	// data resolution
	ADC_CFGR1_R &= ~(1U<<3);
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <pa0_adc_init+0xac>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <pa0_adc_init+0xac>)
 800019c:	2108      	movs	r1, #8
 800019e:	438a      	bics	r2, r1
 80001a0:	601a      	str	r2, [r3, #0]
	ADC_CFGR1_R |= (1U<<4);
 80001a2:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <pa0_adc_init+0xac>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <pa0_adc_init+0xac>)
 80001a8:	2110      	movs	r1, #16
 80001aa:	430a      	orrs	r2, r1
 80001ac:	601a      	str	r2, [r3, #0]
	// conversion sequence length

//	ADC_CFGR1_R &= ~ADC_CHSELRMOD;  //~(1U<<21); //ADC_CHSELRMOD;

//	ADC_CHSELR_R |= (1U<<0); // CH1 pa0
	ADC_CHSELR_R |= (1U<<1); // CH1 pa1
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <pa0_adc_init+0xb0>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <pa0_adc_init+0xb0>)
 80001b4:	2102      	movs	r1, #2
 80001b6:	430a      	orrs	r2, r1
 80001b8:	601a      	str	r2, [r3, #0]


	//enable end-of-conversion interrupt
	ADC_IER_R |= ADC_EOCIE;
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <pa0_adc_init+0xb4>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <pa0_adc_init+0xb4>)
 80001c0:	2104      	movs	r1, #4
 80001c2:	430a      	orrs	r2, r1
 80001c4:	601a      	str	r2, [r3, #0]

	// enable interrupt in NVIC
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80001c6:	200c      	movs	r0, #12
 80001c8:	f7ff ff9e 	bl	8000108 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(12);


	//enable adc module
	ADC_CR_R |= ADC_ADEN;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <pa0_adc_init+0xb8>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <pa0_adc_init+0xb8>)
 80001d2:	2101      	movs	r1, #1
 80001d4:	430a      	orrs	r2, r1
 80001d6:	601a      	str	r2, [r3, #0]

}
 80001d8:	46c0      	nop			; (mov r8, r8)
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	40021034 	.word	0x40021034
 80001e4:	40021040 	.word	0x40021040
 80001e8:	4001240c 	.word	0x4001240c
 80001ec:	40012428 	.word	0x40012428
 80001f0:	40012404 	.word	0x40012404
 80001f4:	40012408 	.word	0x40012408

080001f8 <adc_read>:


int adc_read(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	// check if conversion is complete
	while(!(ADC_ISR_R & ADC_ISR_EOC)){}
 80001fc:	46c0      	nop			; (mov r8, r8)
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <adc_read+0x1c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2204      	movs	r2, #4
 8000204:	4013      	ands	r3, r2
 8000206:	d0fa      	beq.n	80001fe <adc_read+0x6>
	return ADC_DR_R;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <adc_read+0x20>)
 800020a:	681b      	ldr	r3, [r3, #0]
}
 800020c:	0018      	movs	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	40012400 	.word	0x40012400
 8000218:	40012440 	.word	0x40012440

0800021c <adc_cnvrsn>:


void adc_cnvrsn(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	// Continuous conversion mode
	ADC_CFGR1_R |= (1U<<13);
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <adc_cnvrsn+0x24>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <adc_cnvrsn+0x24>)
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	0189      	lsls	r1, r1, #6
 800022a:	430a      	orrs	r2, r1
 800022c:	601a      	str	r2, [r3, #0]

	// conversion sequence start
	ADC_CR_R |= ADC_ADSTART;
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <adc_cnvrsn+0x28>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b04      	ldr	r3, [pc, #16]	; (8000244 <adc_cnvrsn+0x28>)
 8000234:	2104      	movs	r1, #4
 8000236:	430a      	orrs	r2, r1
 8000238:	601a      	str	r2, [r3, #0]

}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	4001240c 	.word	0x4001240c
 8000244:	40012408 	.word	0x40012408

08000248 <main>:
#include "adc.h"

int sensor_value;

int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	 pa0_adc_init();
 800024c:	f7ff ff76 	bl	800013c <pa0_adc_init>
	 adc_cnvrsn();
 8000250:	f7ff ffe4 	bl	800021c <adc_cnvrsn>

	while(1){
 8000254:	e7fe      	b.n	8000254 <main+0xc>
	...

08000258 <ADC_COMP_IRQHandler>:

}


// interrupt methods should contain void
void ADC_COMP_IRQHandler(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	sensor_value = adc_read();
 800025c:	f7ff ffcc 	bl	80001f8 <adc_read>
 8000260:	0002      	movs	r2, r0
 8000262:	4b02      	ldr	r3, [pc, #8]	; (800026c <ADC_COMP_IRQHandler+0x14>)
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	2000001c 	.word	0x2000001c

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	e000      	b.n	8000278 <Reset_Handler+0x8>
 8000276:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f811 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ffd1 	bl	8000248 <main>

080002a6 <LoopForever>:

LoopForever:
  b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	0800032c 	.word	0x0800032c
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	20000020 	.word	0x20000020

080002c0 <AES_RNG_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <AES_RNG_IRQHandler>
	...

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	2600      	movs	r6, #0
 80002c8:	4c0c      	ldr	r4, [pc, #48]	; (80002fc <__libc_init_array+0x38>)
 80002ca:	4d0d      	ldr	r5, [pc, #52]	; (8000300 <__libc_init_array+0x3c>)
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	10a4      	asrs	r4, r4, #2
 80002d0:	42a6      	cmp	r6, r4
 80002d2:	d109      	bne.n	80002e8 <__libc_init_array+0x24>
 80002d4:	2600      	movs	r6, #0
 80002d6:	f000 f819 	bl	800030c <_init>
 80002da:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <__libc_init_array+0x40>)
 80002dc:	4d0a      	ldr	r5, [pc, #40]	; (8000308 <__libc_init_array+0x44>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d105      	bne.n	80002f2 <__libc_init_array+0x2e>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	00b3      	lsls	r3, r6, #2
 80002ea:	58eb      	ldr	r3, [r5, r3]
 80002ec:	4798      	blx	r3
 80002ee:	3601      	adds	r6, #1
 80002f0:	e7ee      	b.n	80002d0 <__libc_init_array+0xc>
 80002f2:	00b3      	lsls	r3, r6, #2
 80002f4:	58eb      	ldr	r3, [r5, r3]
 80002f6:	4798      	blx	r3
 80002f8:	3601      	adds	r6, #1
 80002fa:	e7f2      	b.n	80002e2 <__libc_init_array+0x1e>
 80002fc:	08000324 	.word	0x08000324
 8000300:	08000324 	.word	0x08000324
 8000304:	08000328 	.word	0x08000328
 8000308:	08000324 	.word	0x08000324

0800030c <_init>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr

08000318 <_fini>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr
